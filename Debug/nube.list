
nube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b70  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08001cf8  08001cf8  00011cf8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08001d10  08001d10  00011d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08001d18  08001d18  00011d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08001d1c  08001d1c  00011d1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08001d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          0000106c  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20001078  20001078  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0001eb0b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00003a8d  00000000  00000000  0003eb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000b55a  00000000  00000000  000425d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d48  00000000  00000000  0004db30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001370  00000000  00000000  0004e878  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000087e8  00000000  00000000  0004fbe8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000052d4  00000000  00000000  000583d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0005d6a4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000029ec  00000000  00000000  0005d720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ce0 	.word	0x08001ce0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001ce0 	.word	0x08001ce0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f888 	bl	8000604 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f84a 	bl	800059c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f81b 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fa6c 	bl	8001a24 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000578:	4a07      	ldr	r2, [pc, #28]	; (8000598 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800057a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800057c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000580:	041b      	lsls	r3, r3, #16
 8000582:	0c1b      	lsrs	r3, r3, #16
 8000584:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000588:	0200      	lsls	r0, r0, #8
 800058a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800058e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000592:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000594:	60d3      	str	r3, [r2, #12]
 8000596:	4770      	bx	lr
 8000598:	e000ed00 	.word	0xe000ed00

0800059c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800059c:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	68dc      	ldr	r4, [r3, #12]
 80005a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005a6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005aa:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	2b04      	cmp	r3, #4
 80005ae:	bf28      	it	cs
 80005b0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005b2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005b4:	f04f 0501 	mov.w	r5, #1
 80005b8:	fa05 f303 	lsl.w	r3, r5, r3
 80005bc:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005c0:	bf8c      	ite	hi
 80005c2:	3c03      	subhi	r4, #3
 80005c4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005c6:	4019      	ands	r1, r3
 80005c8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005ca:	fa05 f404 	lsl.w	r4, r5, r4
 80005ce:	3c01      	subs	r4, #1
 80005d0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005d2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005d4:	ea42 0201 	orr.w	r2, r2, r1
 80005d8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005dc:	bfaf      	iteee	ge
 80005de:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e2:	f000 000f 	andlt.w	r0, r0, #15
 80005e6:	4b06      	ldrlt	r3, [pc, #24]	; (8000600 <HAL_NVIC_SetPriority+0x64>)
 80005e8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	bfa5      	ittet	ge
 80005ec:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005f0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005f4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	bf00      	nop
 80005fc:	e000ed00 	.word	0xe000ed00
 8000600:	e000ed14 	.word	0xe000ed14

08000604 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	3801      	subs	r0, #1
 8000606:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800060a:	d20a      	bcs.n	8000622 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800060c:	4b06      	ldr	r3, [pc, #24]	; (8000628 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060e:	4a07      	ldr	r2, [pc, #28]	; (800062c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000610:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	21f0      	movs	r1, #240	; 0xf0
 8000614:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000618:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800061c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000622:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	e000e010 	.word	0xe000e010
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000630:	4b04      	ldr	r3, [pc, #16]	; (8000644 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000632:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000634:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000636:	bf0c      	ite	eq
 8000638:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800063c:	f022 0204 	bicne.w	r2, r2, #4
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	4770      	bx	lr
 8000644:	e000e010 	.word	0xe000e010

08000648 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000648:	4770      	bx	lr

0800064a <HAL_SYSTICK_IRQHandler>:
{
 800064a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800064c:	f7ff fffc 	bl	8000648 <HAL_SYSTICK_Callback>
 8000650:	bd08      	pop	{r3, pc}
	...

08000654 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000654:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8000656:	2300      	movs	r3, #0
 8000658:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 800065a:	4b5a      	ldr	r3, [pc, #360]	; (80007c4 <HAL_DMA_IRQHandler+0x170>)

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800065c:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800065e:	681f      	ldr	r7, [r3, #0]

  tmpisr = regs->ISR;

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000660:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8000662:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000664:	2208      	movs	r2, #8
 8000666:	409a      	lsls	r2, r3
 8000668:	4216      	tst	r6, r2
{
 800066a:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800066c:	d00c      	beq.n	8000688 <HAL_DMA_IRQHandler+0x34>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800066e:	6801      	ldr	r1, [r0, #0]
 8000670:	6808      	ldr	r0, [r1, #0]
 8000672:	0740      	lsls	r0, r0, #29
 8000674:	d508      	bpl.n	8000688 <HAL_DMA_IRQHandler+0x34>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8000676:	6808      	ldr	r0, [r1, #0]
 8000678:	f020 0004 	bic.w	r0, r0, #4
 800067c:	6008      	str	r0, [r1, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800067e:	60aa      	str	r2, [r5, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000680:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8000682:	f042 0201 	orr.w	r2, r2, #1
 8000686:	6562      	str	r2, [r4, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000688:	2201      	movs	r2, #1
 800068a:	409a      	lsls	r2, r3
 800068c:	4216      	tst	r6, r2
 800068e:	d008      	beq.n	80006a2 <HAL_DMA_IRQHandler+0x4e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000690:	6821      	ldr	r1, [r4, #0]
 8000692:	6949      	ldr	r1, [r1, #20]
 8000694:	0609      	lsls	r1, r1, #24
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8000696:	bf41      	itttt	mi
 8000698:	60aa      	strmi	r2, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800069a:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 800069c:	f042 0202 	orrmi.w	r2, r2, #2
 80006a0:	6562      	strmi	r2, [r4, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80006a2:	2204      	movs	r2, #4
 80006a4:	409a      	lsls	r2, r3
 80006a6:	4216      	tst	r6, r2
 80006a8:	d008      	beq.n	80006bc <HAL_DMA_IRQHandler+0x68>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80006aa:	6821      	ldr	r1, [r4, #0]
 80006ac:	6809      	ldr	r1, [r1, #0]
 80006ae:	0788      	lsls	r0, r1, #30
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80006b0:	bf41      	itttt	mi
 80006b2:	60aa      	strmi	r2, [r5, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80006b4:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80006b6:	f042 0204 	orrmi.w	r2, r2, #4
 80006ba:	6562      	strmi	r2, [r4, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80006bc:	2210      	movs	r2, #16
 80006be:	409a      	lsls	r2, r3
 80006c0:	4216      	tst	r6, r2
 80006c2:	d010      	beq.n	80006e6 <HAL_DMA_IRQHandler+0x92>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80006c4:	6823      	ldr	r3, [r4, #0]
 80006c6:	6819      	ldr	r1, [r3, #0]
 80006c8:	0709      	lsls	r1, r1, #28
 80006ca:	d50c      	bpl.n	80006e6 <HAL_DMA_IRQHandler+0x92>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80006cc:	60aa      	str	r2, [r5, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	0350      	lsls	r0, r2, #13
 80006d2:	d535      	bpl.n	8000740 <HAL_DMA_IRQHandler+0xec>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	0319      	lsls	r1, r3, #12
 80006d8:	d401      	bmi.n	80006de <HAL_DMA_IRQHandler+0x8a>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80006da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80006dc:	e000      	b.n	80006e0 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80006de:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80006e0:	b10b      	cbz	r3, 80006e6 <HAL_DMA_IRQHandler+0x92>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80006e2:	4620      	mov	r0, r4
 80006e4:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80006e6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80006e8:	2220      	movs	r2, #32
 80006ea:	408a      	lsls	r2, r1
 80006ec:	4216      	tst	r6, r2
 80006ee:	d038      	beq.n	8000762 <HAL_DMA_IRQHandler+0x10e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80006f0:	6823      	ldr	r3, [r4, #0]
 80006f2:	6818      	ldr	r0, [r3, #0]
 80006f4:	06c6      	lsls	r6, r0, #27
 80006f6:	d534      	bpl.n	8000762 <HAL_DMA_IRQHandler+0x10e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80006f8:	60aa      	str	r2, [r5, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80006fa:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 80006fe:	2a05      	cmp	r2, #5
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000700:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000702:	d125      	bne.n	8000750 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000704:	f022 0216 	bic.w	r2, r2, #22
 8000708:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800070a:	695a      	ldr	r2, [r3, #20]
 800070c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000710:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000712:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000714:	b90a      	cbnz	r2, 800071a <HAL_DMA_IRQHandler+0xc6>
 8000716:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000718:	b11a      	cbz	r2, 8000722 <HAL_DMA_IRQHandler+0xce>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	f022 0208 	bic.w	r2, r2, #8
 8000720:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000722:	233f      	movs	r3, #63	; 0x3f
 8000724:	408b      	lsls	r3, r1
 8000726:	60ab      	str	r3, [r5, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000728:	2300      	movs	r3, #0
 800072a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800072e:	2301      	movs	r3, #1
 8000730:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8000734:	6d23      	ldr	r3, [r4, #80]	; 0x50

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
    }

    if(hdma->XferErrorCallback != NULL)
 8000736:	b10b      	cbz	r3, 800073c <HAL_DMA_IRQHandler+0xe8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000738:	4620      	mov	r0, r4
 800073a:	4798      	blx	r3
    }
  }
}
 800073c:	b003      	add	sp, #12
 800073e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000744:	bf5e      	ittt	pl
 8000746:	681a      	ldrpl	r2, [r3, #0]
 8000748:	f022 0208 	bicpl.w	r2, r2, #8
 800074c:	601a      	strpl	r2, [r3, #0]
 800074e:	e7c4      	b.n	80006da <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000750:	0350      	lsls	r0, r2, #13
 8000752:	d528      	bpl.n	80007a6 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	0319      	lsls	r1, r3, #12
 8000758:	d432      	bmi.n	80007c0 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 800075a:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 800075c:	b10b      	cbz	r3, 8000762 <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800075e:	4620      	mov	r0, r4
 8000760:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8000762:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000764:	2b00      	cmp	r3, #0
 8000766:	d0e9      	beq.n	800073c <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000768:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800076a:	07da      	lsls	r2, r3, #31
 800076c:	d519      	bpl.n	80007a2 <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800076e:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000770:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8000772:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8000776:	6813      	ldr	r3, [r2, #0]
 8000778:	f023 0301 	bic.w	r3, r3, #1
 800077c:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800077e:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000782:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 8000786:	9b01      	ldr	r3, [sp, #4]
 8000788:	3301      	adds	r3, #1
 800078a:	429f      	cmp	r7, r3
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	d302      	bcc.n	8000796 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000790:	6813      	ldr	r3, [r2, #0]
 8000792:	07db      	lsls	r3, r3, #31
 8000794:	d4f7      	bmi.n	8000786 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 8000796:	2300      	movs	r3, #0
 8000798:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 800079c:	2301      	movs	r3, #1
 800079e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80007a2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80007a4:	e7c7      	b.n	8000736 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80007ac:	d108      	bne.n	80007c0 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80007ae:	6819      	ldr	r1, [r3, #0]
 80007b0:	f021 0110 	bic.w	r1, r1, #16
 80007b4:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80007b6:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80007b8:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80007bc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80007c0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80007c2:	e7cb      	b.n	800075c <HAL_DMA_IRQHandler+0x108>
 80007c4:	20000008 	.word	0x20000008

080007c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007cc:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ce:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000980 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80007d4:	4a68      	ldr	r2, [pc, #416]	; (8000978 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d6:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000984 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007da:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007dc:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80007de:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e2:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80007e4:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e8:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80007ec:	45b6      	cmp	lr, r6
 80007ee:	f040 80ae 	bne.w	800094e <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007f2:	684c      	ldr	r4, [r1, #4]
 80007f4:	f024 0710 	bic.w	r7, r4, #16
 80007f8:	2f02      	cmp	r7, #2
 80007fa:	d116      	bne.n	800082a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 80007fc:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000800:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000804:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000808:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800080c:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000810:	f04f 0c0f 	mov.w	ip, #15
 8000814:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000818:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800081c:	690d      	ldr	r5, [r1, #16]
 800081e:	fa05 f50b 	lsl.w	r5, r5, fp
 8000822:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000826:	f8ca 5020 	str.w	r5, [sl, #32]
 800082a:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800082e:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000830:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000834:	fa05 f50a 	lsl.w	r5, r5, sl
 8000838:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800083a:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800083e:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000842:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000846:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000848:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800084c:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800084e:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000852:	d811      	bhi.n	8000878 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000854:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000856:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800085a:	68cf      	ldr	r7, [r1, #12]
 800085c:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000860:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000864:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000866:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000868:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800086c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000870:	409f      	lsls	r7, r3
 8000872:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000876:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000878:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800087a:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800087c:	688f      	ldr	r7, [r1, #8]
 800087e:	fa07 f70a 	lsl.w	r7, r7, sl
 8000882:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000884:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000886:	00e5      	lsls	r5, r4, #3
 8000888:	d561      	bpl.n	800094e <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	f04f 0b00 	mov.w	fp, #0
 800088e:	f8cd b00c 	str.w	fp, [sp, #12]
 8000892:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000896:	4d39      	ldr	r5, [pc, #228]	; (800097c <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000898:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 800089c:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80008a0:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80008a4:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80008a8:	9703      	str	r7, [sp, #12]
 80008aa:	9f03      	ldr	r7, [sp, #12]
 80008ac:	f023 0703 	bic.w	r7, r3, #3
 80008b0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80008b4:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008b8:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80008bc:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008c0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80008c4:	f04f 0e0f 	mov.w	lr, #15
 80008c8:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008cc:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80008ce:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80008d2:	d043      	beq.n	800095c <HAL_GPIO_Init+0x194>
 80008d4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008d8:	42a8      	cmp	r0, r5
 80008da:	d041      	beq.n	8000960 <HAL_GPIO_Init+0x198>
 80008dc:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008e0:	42a8      	cmp	r0, r5
 80008e2:	d03f      	beq.n	8000964 <HAL_GPIO_Init+0x19c>
 80008e4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008e8:	42a8      	cmp	r0, r5
 80008ea:	d03d      	beq.n	8000968 <HAL_GPIO_Init+0x1a0>
 80008ec:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80008f0:	42a8      	cmp	r0, r5
 80008f2:	d03b      	beq.n	800096c <HAL_GPIO_Init+0x1a4>
 80008f4:	4548      	cmp	r0, r9
 80008f6:	d03b      	beq.n	8000970 <HAL_GPIO_Init+0x1a8>
 80008f8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 80008fc:	42a8      	cmp	r0, r5
 80008fe:	d039      	beq.n	8000974 <HAL_GPIO_Init+0x1ac>
 8000900:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000904:	42a8      	cmp	r0, r5
 8000906:	bf14      	ite	ne
 8000908:	2508      	movne	r5, #8
 800090a:	2507      	moveq	r5, #7
 800090c:	fa05 f50c 	lsl.w	r5, r5, ip
 8000910:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000914:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000916:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000918:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800091a:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800091e:	bf0c      	ite	eq
 8000920:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000922:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000924:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000926:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000928:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800092c:	bf0c      	ite	eq
 800092e:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000930:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000932:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000934:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000936:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800093a:	bf0c      	ite	eq
 800093c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800093e:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000940:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000942:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000944:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000946:	bf54      	ite	pl
 8000948:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 800094a:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 800094c:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800094e:	3301      	adds	r3, #1
 8000950:	2b10      	cmp	r3, #16
 8000952:	f47f af44 	bne.w	80007de <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000956:	b005      	add	sp, #20
 8000958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800095c:	465d      	mov	r5, fp
 800095e:	e7d5      	b.n	800090c <HAL_GPIO_Init+0x144>
 8000960:	2501      	movs	r5, #1
 8000962:	e7d3      	b.n	800090c <HAL_GPIO_Init+0x144>
 8000964:	2502      	movs	r5, #2
 8000966:	e7d1      	b.n	800090c <HAL_GPIO_Init+0x144>
 8000968:	2503      	movs	r5, #3
 800096a:	e7cf      	b.n	800090c <HAL_GPIO_Init+0x144>
 800096c:	2504      	movs	r5, #4
 800096e:	e7cd      	b.n	800090c <HAL_GPIO_Init+0x144>
 8000970:	2505      	movs	r5, #5
 8000972:	e7cb      	b.n	800090c <HAL_GPIO_Init+0x144>
 8000974:	2506      	movs	r5, #6
 8000976:	e7c9      	b.n	800090c <HAL_GPIO_Init+0x144>
 8000978:	40013c00 	.word	0x40013c00
 800097c:	40020000 	.word	0x40020000
 8000980:	40023800 	.word	0x40023800
 8000984:	40021400 	.word	0x40021400

08000988 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000988:	b10a      	cbz	r2, 800098e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800098a:	6181      	str	r1, [r0, #24]
 800098c:	4770      	bx	lr
 800098e:	0409      	lsls	r1, r1, #16
 8000990:	e7fb      	b.n	800098a <HAL_GPIO_WritePin+0x2>
	...

08000994 <HAL_I2C_Init>:
  * @param  hi2c pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000994:	b570      	push	{r4, r5, r6, lr}
  uint32_t freqrange = 0U;
  uint32_t pclk1 = 0U;

  /* Check the I2C handle allocation */
  if(hi2c == NULL)
 8000996:	4604      	mov	r4, r0
 8000998:	2800      	cmp	r0, #0
 800099a:	d062      	beq.n	8000a62 <HAL_I2C_Init+0xce>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if(hi2c->State == HAL_I2C_STATE_RESET)
 800099c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80009a0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009a4:	b91b      	cbnz	r3, 80009ae <HAL_I2C_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80009a6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80009aa:	f001 f86b 	bl	8001a84 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80009ae:	6822      	ldr	r2, [r4, #0]
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->CR2 = freqrange;

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009b0:	4e2d      	ldr	r6, [pc, #180]	; (8000a68 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 80009b2:	4d2e      	ldr	r5, [pc, #184]	; (8000a6c <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 80009b4:	2324      	movs	r3, #36	; 0x24
 80009b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80009ba:	6813      	ldr	r3, [r2, #0]
 80009bc:	f023 0301 	bic.w	r3, r3, #1
 80009c0:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80009c2:	f000 fce7 	bl	8001394 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009c6:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 80009c8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80009ca:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009ce:	42b3      	cmp	r3, r6
 80009d0:	bf84      	itt	hi
 80009d2:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 80009d6:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 80009d8:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009da:	bf91      	iteee	ls
 80009dc:	1c69      	addls	r1, r5, #1
 80009de:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 80009e2:	fbb1 f1f5 	udivhi	r1, r1, r5
 80009e6:	3101      	addhi	r1, #1

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80009e8:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 80009ea:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 80009ec:	d821      	bhi.n	8000a32 <HAL_I2C_Init+0x9e>
 80009ee:	005b      	lsls	r3, r3, #1
 80009f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80009f4:	f3c0 030b 	ubfx	r3, r0, #0, #12
 80009f8:	2b03      	cmp	r3, #3
 80009fa:	bf98      	it	ls
 80009fc:	2004      	movls	r0, #4

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80009fe:	6a21      	ldr	r1, [r4, #32]
 8000a00:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a02:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000a04:	430b      	orrs	r3, r1
 8000a06:	6013      	str	r3, [r2, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000a08:	68e1      	ldr	r1, [r4, #12]
 8000a0a:	6923      	ldr	r3, [r4, #16]
 8000a0c:	430b      	orrs	r3, r1
 8000a0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000a10:	69a1      	ldr	r1, [r4, #24]
 8000a12:	6963      	ldr	r3, [r4, #20]
 8000a14:	430b      	orrs	r3, r1
 8000a16:	60d3      	str	r3, [r2, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000a18:	6813      	ldr	r3, [r2, #0]
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6013      	str	r3, [r2, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a20:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000a22:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000a24:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000a26:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000a2a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000a2c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e

  return HAL_OK;
 8000a30:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000a32:	68a1      	ldr	r1, [r4, #8]
 8000a34:	b949      	cbnz	r1, 8000a4a <HAL_I2C_Init+0xb6>
 8000a36:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000a3a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a3e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a42:	b163      	cbz	r3, 8000a5e <HAL_I2C_Init+0xca>
 8000a44:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000a48:	e7d9      	b.n	80009fe <HAL_I2C_Init+0x6a>
 8000a4a:	2119      	movs	r1, #25
 8000a4c:	434b      	muls	r3, r1
 8000a4e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000a52:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000a56:	b113      	cbz	r3, 8000a5e <HAL_I2C_Init+0xca>
 8000a58:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000a5c:	e7cf      	b.n	80009fe <HAL_I2C_Init+0x6a>
 8000a5e:	2001      	movs	r0, #1
 8000a60:	e7cd      	b.n	80009fe <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000a62:	2001      	movs	r0, #1
}
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	bf00      	nop
 8000a68:	000186a0 	.word	0x000186a0
 8000a6c:	000f4240 	.word	0x000f4240

08000a70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8000a70:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
  uint32_t tmp = 0U, i2sclk = 0U;

  /* Check the I2S handle allocation */
  if(hi2s == NULL)
 8000a72:	4604      	mov	r4, r0
 8000a74:	2800      	cmp	r0, #0
 8000a76:	d03f      	beq.n	8000af8 <HAL_I2S_Init+0x88>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  hi2s->State = HAL_I2S_STATE_BUSY;
 8000a78:	2502      	movs	r5, #2

  /* Initialize Default I2S IrqHandler ISR */
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000a7a:	4b41      	ldr	r3, [pc, #260]	; (8000b80 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 8000a7c:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8000a80:	6343      	str	r3, [r0, #52]	; 0x34

  /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
  HAL_I2S_MspInit(hi2s);
 8000a82:	f001 f829 	bl	8001ad8 <HAL_I2S_MspInit>

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ---------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000a86:	6822      	ldr	r2, [r4, #0]
 8000a88:	69d3      	ldr	r3, [r2, #28]
 8000a8a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8000a8e:	f023 030f 	bic.w	r3, r3, #15
 8000a92:	61d3      	str	r3, [r2, #28]
  /* Get the I2SCFGR register value */
  tmpreg = hi2s->Instance->I2SCFGR;

  /* If the default frequency value has to be written, reinitialize i2sdiv and i2sodd */
  /* If the requested audio frequency is not the default, compute the prescaler */
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000a94:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 8000a96:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000a98:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 8000a9a:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8000a9c:	d035      	beq.n	8000b0a <HAL_I2S_Init+0x9a>
  {
    /* Check the frame length (For the Prescaler computing) *******************/
    /* Set I2S Packet Length value*/
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000a9e:	68e3      	ldr	r3, [r4, #12]
      packetlength = 32U;
    }
    else
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8000aa0:	2b00      	cmp	r3, #0
    }

    /* I2S standard */
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000aa2:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 8000aa4:	bf14      	ite	ne
 8000aa6:	2620      	movne	r6, #32
 8000aa8:	2610      	moveq	r6, #16
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000aaa:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8000aac:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 8000aae:	bf98      	it	ls
 8000ab0:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8000ab2:	f000 fd17 	bl	80014e4 <HAL_RCCEx_GetPeriphCLKFreq>
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8000ab6:	6923      	ldr	r3, [r4, #16]
 8000ab8:	6961      	ldr	r1, [r4, #20]
 8000aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000abe:	d11f      	bne.n	8000b00 <HAL_I2S_Init+0x90>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8000ac0:	68e3      	ldr	r3, [r4, #12]
 8000ac2:	220a      	movs	r2, #10
 8000ac4:	b1d3      	cbz	r3, 8000afc <HAL_I2S_Init+0x8c>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000ac6:	00b3      	lsls	r3, r6, #2
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000ac8:	fbb0 f3f3 	udiv	r3, r0, r3
 8000acc:	4353      	muls	r3, r2
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8000ace:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8000ad0:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ad4:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8000ad6:	fbb3 f3f2 	udiv	r3, r3, r2

    /* Check the parity of the divider */
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8000ada:	f003 0201 	and.w	r2, r3, #1

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t) (i2sodd << 8U);
 8000ade:	0212      	lsls	r2, r2, #8
 8000ae0:	f3c3 034f 	ubfx	r3, r3, #1, #16
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8000ae4:	1e99      	subs	r1, r3, #2
 8000ae6:	29fd      	cmp	r1, #253	; 0xfd
 8000ae8:	d911      	bls.n	8000b0e <HAL_I2S_Init+0x9e>
    /* Set the default values */
    i2sdiv = 2U;
    i2sodd = 0U;

    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8000aea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000aec:	f043 0310 	orr.w	r3, r3, #16
 8000af0:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8000af2:	4620      	mov	r0, r4
 8000af4:	f000 ff82 	bl	80019fc <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8000af8:	2001      	movs	r0, #1

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8000afc:	00f3      	lsls	r3, r6, #3
 8000afe:	e7e3      	b.n	8000ac8 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8000b00:	230a      	movs	r3, #10
 8000b02:	fbb0 f0f6 	udiv	r0, r0, r6
 8000b06:	4343      	muls	r3, r0
 8000b08:	e7e1      	b.n	8000ace <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	e7ea      	b.n	8000ae4 <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	6922      	ldr	r2, [r4, #16]
 8000b12:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000b14:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8000b16:	4313      	orrs	r3, r2
 8000b18:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000b1a:	68e2      	ldr	r2, [r4, #12]
 8000b1c:	68a3      	ldr	r3, [r4, #8]
 8000b1e:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8000b20:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8000b22:	4313      	orrs	r3, r2
 8000b24:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000b26:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 8000b2a:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000b2c:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8000b2e:	b289      	uxth	r1, r1
 8000b30:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000b32:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8000b34:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8000b36:	d11c      	bne.n	8000b72 <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8000b38:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <HAL_I2S_Init+0x114>)
 8000b3a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000b3c:	4912      	ldr	r1, [pc, #72]	; (8000b88 <HAL_I2S_Init+0x118>)
 8000b3e:	4a13      	ldr	r2, [pc, #76]	; (8000b8c <HAL_I2S_Init+0x11c>)
 8000b40:	4288      	cmp	r0, r1
 8000b42:	bf18      	it	ne
 8000b44:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8000b48:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8000b4c:	69d1      	ldr	r1, [r2, #28]
 8000b4e:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8000b52:	f021 010f 	bic.w	r1, r1, #15
 8000b56:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8000b58:	f04f 0102 	mov.w	r1, #2
 8000b5c:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8000b5e:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 8000b60:	bf0c      	ite	eq
 8000b62:	f44f 7080 	moveq.w	r0, #256	; 0x100
 8000b66:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8000b68:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000b6c:	4303      	orrs	r3, r0
 8000b6e:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8000b70:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000b72:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 8000b74:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8000b76:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8000b78:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	bf00      	nop
 8000b80:	08000b91 	.word	0x08000b91
 8000b84:	08000c9d 	.word	0x08000c9d
 8000b88:	40003800 	.word	0x40003800
 8000b8c:	40003400 	.word	0x40003400

08000b90 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8000b90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8000b92:	6803      	ldr	r3, [r0, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8000b98:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8000b9c:	2a04      	cmp	r2, #4
{
 8000b9e:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8000ba0:	d13a      	bne.n	8000c18 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000ba2:	9a01      	ldr	r2, [sp, #4]
 8000ba4:	07d1      	lsls	r1, r2, #31
 8000ba6:	d519      	bpl.n	8000bdc <I2S_IRQHandler+0x4c>
 8000ba8:	685a      	ldr	r2, [r3, #4]
 8000baa:	0652      	lsls	r2, r2, #25
 8000bac:	d516      	bpl.n	8000bdc <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8000bae:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8000bb0:	1c91      	adds	r1, r2, #2
 8000bb2:	62c1      	str	r1, [r0, #44]	; 0x2c
 8000bb4:	68d9      	ldr	r1, [r3, #12]
 8000bb6:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 8000bb8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8000bba:	3a01      	subs	r2, #1
 8000bbc:	b292      	uxth	r2, r2
 8000bbe:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8000bc0:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8000bc2:	b292      	uxth	r2, r2
 8000bc4:	b952      	cbnz	r2, 8000bdc <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000bc6:	685a      	ldr	r2, [r3, #4]
 8000bc8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000bcc:	0412      	lsls	r2, r2, #16
 8000bce:	0c12      	lsrs	r2, r2, #16
 8000bd0:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8000bd8:	f000 ff0a 	bl	80019f0 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000bdc:	9b01      	ldr	r3, [sp, #4]
 8000bde:	0659      	lsls	r1, r3, #25
 8000be0:	d51a      	bpl.n	8000c18 <I2S_IRQHandler+0x88>
 8000be2:	6823      	ldr	r3, [r4, #0]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	0692      	lsls	r2, r2, #26
 8000be8:	d516      	bpl.n	8000c18 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000bea:	685a      	ldr	r2, [r3, #4]
 8000bec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000bf0:	0412      	lsls	r2, r2, #16
 8000bf2:	0c12      	lsrs	r2, r2, #16
 8000bf4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	9202      	str	r2, [sp, #8]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	9202      	str	r2, [sp, #8]
 8000bfe:	689b      	ldr	r3, [r3, #8]
 8000c00:	9302      	str	r3, [sp, #8]
 8000c02:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000c04:	2301      	movs	r3, #1
 8000c06:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8000c0a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c0c:	f043 0302 	orr.w	r3, r3, #2
 8000c10:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000c12:	4620      	mov	r0, r4
 8000c14:	f000 fef2 	bl	80019fc <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8000c18:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d13a      	bne.n	8000c96 <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000c20:	9b01      	ldr	r3, [sp, #4]
 8000c22:	079b      	lsls	r3, r3, #30
 8000c24:	d51b      	bpl.n	8000c5e <I2S_IRQHandler+0xce>
 8000c26:	6822      	ldr	r2, [r4, #0]
 8000c28:	6853      	ldr	r3, [r2, #4]
 8000c2a:	0618      	lsls	r0, r3, #24
 8000c2c:	d517      	bpl.n	8000c5e <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8000c2e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000c30:	1c99      	adds	r1, r3, #2
 8000c32:	881b      	ldrh	r3, [r3, #0]
 8000c34:	6261      	str	r1, [r4, #36]	; 0x24
 8000c36:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8000c38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8000c40:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000c42:	b29b      	uxth	r3, r3
 8000c44:	b95b      	cbnz	r3, 8000c5e <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000c46:	6853      	ldr	r3, [r2, #4]
 8000c48:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000c4c:	041b      	lsls	r3, r3, #16
 8000c4e:	0c1b      	lsrs	r3, r3, #16
 8000c50:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8000c52:	2301      	movs	r3, #1
 8000c54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8000c58:	4620      	mov	r0, r4
 8000c5a:	f000 febd 	bl	80019d8 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000c5e:	9b01      	ldr	r3, [sp, #4]
 8000c60:	0719      	lsls	r1, r3, #28
 8000c62:	d518      	bpl.n	8000c96 <I2S_IRQHandler+0x106>
 8000c64:	6823      	ldr	r3, [r4, #0]
 8000c66:	685a      	ldr	r2, [r3, #4]
 8000c68:	0692      	lsls	r2, r2, #26
 8000c6a:	d514      	bpl.n	8000c96 <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000c6c:	685a      	ldr	r2, [r3, #4]
 8000c6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000c72:	0412      	lsls	r2, r2, #16
 8000c74:	0c12      	lsrs	r2, r2, #16
 8000c76:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	9203      	str	r2, [sp, #12]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	9303      	str	r3, [sp, #12]
 8000c80:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8000c82:	2301      	movs	r3, #1
 8000c84:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8000c88:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000c8a:	f043 0304 	orr.w	r3, r3, #4
 8000c8e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000c90:	4620      	mov	r0, r4
 8000c92:	f000 feb3 	bl	80019fc <HAL_I2S_ErrorCallback>
    }
  }
}
 8000c96:	b004      	add	sp, #16
 8000c98:	bd10      	pop	{r4, pc}

08000c9a <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000c9a:	4770      	bx	lr

08000c9c <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8000c9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8000c9e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8000ca0:	4992      	ldr	r1, [pc, #584]	; (8000eec <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8000ca2:	689a      	ldr	r2, [r3, #8]
 8000ca4:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8000ca6:	4a92      	ldr	r2, [pc, #584]	; (8000ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	bf18      	it	ne
 8000cac:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8000cb0:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8000cb2:	6891      	ldr	r1, [r2, #8]
 8000cb4:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8000cb6:	69d9      	ldr	r1, [r3, #28]
 8000cb8:	f401 7140 	and.w	r1, r1, #768	; 0x300
 8000cbc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8000cc0:	d004      	beq.n	8000ccc <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8000cc2:	69d9      	ldr	r1, [r3, #28]
 8000cc4:	f411 7f40 	tst.w	r1, #768	; 0x300
 8000cc8:	f040 8097 	bne.w	8000dfa <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000ccc:	9a00      	ldr	r2, [sp, #0]
 8000cce:	0792      	lsls	r2, r2, #30
 8000cd0:	d51d      	bpl.n	8000d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8000cd2:	685a      	ldr	r2, [r3, #4]
 8000cd4:	0610      	lsls	r0, r2, #24
 8000cd6:	d51a      	bpl.n	8000d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8000cd8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000cda:	1c91      	adds	r1, r2, #2
 8000cdc:	8812      	ldrh	r2, [r2, #0]
 8000cde:	6261      	str	r1, [r4, #36]	; 0x24
 8000ce0:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8000ce2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000ce4:	3a01      	subs	r2, #1
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8000cea:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8000cec:	b292      	uxth	r2, r2
 8000cee:	b972      	cbnz	r2, 8000d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000cf6:	0412      	lsls	r2, r2, #16
 8000cf8:	0c12      	lsrs	r2, r2, #16
 8000cfa:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 8000cfc:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000cfe:	b29b      	uxth	r3, r3
 8000d00:	b92b      	cbnz	r3, 8000d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8000d02:	2301      	movs	r3, #1
 8000d04:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000d08:	4620      	mov	r0, r4
 8000d0a:	f7ff ffc6 	bl	8000c9a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000d0e:	9b01      	ldr	r3, [sp, #4]
 8000d10:	07d9      	lsls	r1, r3, #31
 8000d12:	d522      	bpl.n	8000d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 8000d14:	4a75      	ldr	r2, [pc, #468]	; (8000eec <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8000d16:	6821      	ldr	r1, [r4, #0]
 8000d18:	4b75      	ldr	r3, [pc, #468]	; (8000ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8000d1a:	4291      	cmp	r1, r2
 8000d1c:	bf18      	it	ne
 8000d1e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000d22:	685a      	ldr	r2, [r3, #4]
 8000d24:	0652      	lsls	r2, r2, #25
 8000d26:	d518      	bpl.n	8000d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8000d28:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000d2a:	1c91      	adds	r1, r2, #2
 8000d2c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000d2e:	68d9      	ldr	r1, [r3, #12]
 8000d30:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 8000d32:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8000d34:	3a01      	subs	r2, #1
 8000d36:	b292      	uxth	r2, r2
 8000d38:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8000d3a:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 8000d3c:	b292      	uxth	r2, r2
 8000d3e:	b962      	cbnz	r2, 8000d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d40:	685a      	ldr	r2, [r3, #4]
 8000d42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8000d46:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 8000d48:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000d4a:	b29b      	uxth	r3, r3
 8000d4c:	b92b      	cbnz	r3, 8000d5a <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000d54:	4620      	mov	r0, r4
 8000d56:	f7ff ffa0 	bl	8000c9a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000d5a:	9b01      	ldr	r3, [sp, #4]
 8000d5c:	0658      	lsls	r0, r3, #25
 8000d5e:	d524      	bpl.n	8000daa <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 8000d60:	4962      	ldr	r1, [pc, #392]	; (8000eec <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8000d62:	6823      	ldr	r3, [r4, #0]
 8000d64:	4a62      	ldr	r2, [pc, #392]	; (8000ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8000d66:	428b      	cmp	r3, r1
 8000d68:	bf18      	it	ne
 8000d6a:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8000d6e:	6851      	ldr	r1, [r2, #4]
 8000d70:	0689      	lsls	r1, r1, #26
 8000d72:	d51a      	bpl.n	8000daa <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000d74:	6851      	ldr	r1, [r2, #4]
 8000d76:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8000d7a:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000d82:	0412      	lsls	r2, r2, #16
 8000d84:	0c12      	lsrs	r2, r2, #16
 8000d86:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	9202      	str	r2, [sp, #8]
 8000d8c:	68da      	ldr	r2, [r3, #12]
 8000d8e:	9202      	str	r2, [sp, #8]
 8000d90:	689b      	ldr	r3, [r3, #8]
 8000d92:	9302      	str	r3, [sp, #8]
 8000d94:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8000d96:	2301      	movs	r3, #1
 8000d98:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8000d9c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000da4:	4620      	mov	r0, r4
 8000da6:	f000 fe29 	bl	80019fc <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000daa:	9b00      	ldr	r3, [sp, #0]
 8000dac:	071b      	lsls	r3, r3, #28
 8000dae:	d522      	bpl.n	8000df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8000db0:	6823      	ldr	r3, [r4, #0]
 8000db2:	685a      	ldr	r2, [r3, #4]
 8000db4:	0690      	lsls	r0, r2, #26
 8000db6:	d51e      	bpl.n	8000df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000db8:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000dba:	494c      	ldr	r1, [pc, #304]	; (8000eec <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000dbc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000dc0:	0412      	lsls	r2, r2, #16
 8000dc2:	0c12      	lsrs	r2, r2, #16
 8000dc4:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000dc6:	4a4a      	ldr	r2, [pc, #296]	; (8000ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8000dc8:	428b      	cmp	r3, r1
 8000dca:	bf18      	it	ne
 8000dcc:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8000dd0:	6851      	ldr	r1, [r2, #4]
 8000dd2:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8000dd6:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	9203      	str	r2, [sp, #12]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	9303      	str	r3, [sp, #12]
 8000de0:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8000de2:	2301      	movs	r3, #1
 8000de4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8000de8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000dea:	f043 0304 	orr.w	r3, r3, #4
 8000dee:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000df0:	4620      	mov	r0, r4
 8000df2:	f000 fe03 	bl	80019fc <HAL_I2S_ErrorCallback>
}
 8000df6:	b004      	add	sp, #16
 8000df8:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8000dfa:	9b01      	ldr	r3, [sp, #4]
 8000dfc:	0799      	lsls	r1, r3, #30
 8000dfe:	d51a      	bpl.n	8000e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8000e00:	6853      	ldr	r3, [r2, #4]
 8000e02:	061b      	lsls	r3, r3, #24
 8000e04:	d517      	bpl.n	8000e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8000e06:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e08:	1c99      	adds	r1, r3, #2
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	6241      	str	r1, [r0, #36]	; 0x24
 8000e0e:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8000e10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000e12:	3b01      	subs	r3, #1
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8000e18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	b95b      	cbnz	r3, 8000e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000e1e:	6853      	ldr	r3, [r2, #4]
 8000e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8000e24:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 8000e26:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b923      	cbnz	r3, 8000e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000e32:	f7ff ff32 	bl	8000c9a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8000e36:	9b00      	ldr	r3, [sp, #0]
 8000e38:	07d8      	lsls	r0, r3, #31
 8000e3a:	d51e      	bpl.n	8000e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 8000e3c:	6822      	ldr	r2, [r4, #0]
 8000e3e:	6853      	ldr	r3, [r2, #4]
 8000e40:	0659      	lsls	r1, r3, #25
 8000e42:	d51a      	bpl.n	8000e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8000e44:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000e46:	1c99      	adds	r1, r3, #2
 8000e48:	62e1      	str	r1, [r4, #44]	; 0x2c
 8000e4a:	68d1      	ldr	r1, [r2, #12]
 8000e4c:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 8000e4e:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000e50:	3b01      	subs	r3, #1
 8000e52:	b29b      	uxth	r3, r3
 8000e54:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 8000e56:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	b973      	cbnz	r3, 8000e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e5c:	6853      	ldr	r3, [r2, #4]
 8000e5e:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e62:	041b      	lsls	r3, r3, #16
 8000e64:	0c1b      	lsrs	r3, r3, #16
 8000e66:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 8000e68:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	b92b      	cbnz	r3, 8000e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8000e74:	4620      	mov	r0, r4
 8000e76:	f7ff ff10 	bl	8000c9a <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000e7a:	9b00      	ldr	r3, [sp, #0]
 8000e7c:	065a      	lsls	r2, r3, #25
 8000e7e:	d51d      	bpl.n	8000ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 8000e80:	6822      	ldr	r2, [r4, #0]
 8000e82:	6853      	ldr	r3, [r2, #4]
 8000e84:	069b      	lsls	r3, r3, #26
 8000e86:	d519      	bpl.n	8000ebc <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e88:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000e8a:	4918      	ldr	r1, [pc, #96]	; (8000eec <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000e8c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000e90:	041b      	lsls	r3, r3, #16
 8000e92:	0c1b      	lsrs	r3, r3, #16
 8000e94:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000e96:	4b16      	ldr	r3, [pc, #88]	; (8000ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8000e98:	428a      	cmp	r2, r1
 8000e9a:	bf18      	it	ne
 8000e9c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8000ea0:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000ea8:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8000eb0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8000eb8:	f000 fda0 	bl	80019fc <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8000ebc:	9b01      	ldr	r3, [sp, #4]
 8000ebe:	0718      	lsls	r0, r3, #28
 8000ec0:	d599      	bpl.n	8000df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8000ec2:	490a      	ldr	r1, [pc, #40]	; (8000eec <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8000ec4:	6822      	ldr	r2, [r4, #0]
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8000ec8:	428a      	cmp	r2, r1
 8000eca:	bf18      	it	ne
 8000ecc:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8000ed0:	6859      	ldr	r1, [r3, #4]
 8000ed2:	0689      	lsls	r1, r1, #26
 8000ed4:	d58f      	bpl.n	8000df6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8000ed6:	6859      	ldr	r1, [r3, #4]
 8000ed8:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8000edc:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8000ede:	6853      	ldr	r3, [r2, #4]
 8000ee0:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8000ee4:	041b      	lsls	r3, r3, #16
 8000ee6:	0c1b      	lsrs	r3, r3, #16
 8000ee8:	6053      	str	r3, [r2, #4]
 8000eea:	e77a      	b.n	8000de2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8000eec:	40003800 	.word	0x40003800
 8000ef0:	40003400 	.word	0x40003400

08000ef4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ef4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ef8:	4604      	mov	r4, r0
 8000efa:	b918      	cbnz	r0, 8000f04 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000efc:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8000efe:	b002      	add	sp, #8
 8000f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f04:	6803      	ldr	r3, [r0, #0]
 8000f06:	07dd      	lsls	r5, r3, #31
 8000f08:	d410      	bmi.n	8000f2c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	0798      	lsls	r0, r3, #30
 8000f0e:	d458      	bmi.n	8000fc2 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	071a      	lsls	r2, r3, #28
 8000f14:	f100 809a 	bmi.w	800104c <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f18:	6823      	ldr	r3, [r4, #0]
 8000f1a:	075b      	lsls	r3, r3, #29
 8000f1c:	f100 80b8 	bmi.w	8001090 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f20:	69a2      	ldr	r2, [r4, #24]
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	f040 8119 	bne.w	800115a <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8000f28:	2000      	movs	r0, #0
 8000f2a:	e7e8      	b.n	8000efe <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f2c:	4ba6      	ldr	r3, [pc, #664]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 8000f2e:	689a      	ldr	r2, [r3, #8]
 8000f30:	f002 020c 	and.w	r2, r2, #12
 8000f34:	2a04      	cmp	r2, #4
 8000f36:	d007      	beq.n	8000f48 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f38:	689a      	ldr	r2, [r3, #8]
 8000f3a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f3e:	2a08      	cmp	r2, #8
 8000f40:	d10a      	bne.n	8000f58 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	0259      	lsls	r1, r3, #9
 8000f46:	d507      	bpl.n	8000f58 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	4b9f      	ldr	r3, [pc, #636]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	039a      	lsls	r2, r3, #14
 8000f4e:	d5dc      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x16>
 8000f50:	6863      	ldr	r3, [r4, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d1d9      	bne.n	8000f0a <HAL_RCC_OscConfig+0x16>
 8000f56:	e7d1      	b.n	8000efc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f58:	6863      	ldr	r3, [r4, #4]
 8000f5a:	4d9b      	ldr	r5, [pc, #620]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 8000f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f60:	d111      	bne.n	8000f86 <HAL_RCC_OscConfig+0x92>
 8000f62:	682b      	ldr	r3, [r5, #0]
 8000f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f68:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000f6a:	f7ff faff 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6e:	4d96      	ldr	r5, [pc, #600]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8000f70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f72:	682b      	ldr	r3, [r5, #0]
 8000f74:	039b      	lsls	r3, r3, #14
 8000f76:	d4c8      	bmi.n	8000f0a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f78:	f7ff faf8 	bl	800056c <HAL_GetTick>
 8000f7c:	1b80      	subs	r0, r0, r6
 8000f7e:	2864      	cmp	r0, #100	; 0x64
 8000f80:	d9f7      	bls.n	8000f72 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8000f82:	2003      	movs	r0, #3
 8000f84:	e7bb      	b.n	8000efe <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f86:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f8a:	d104      	bne.n	8000f96 <HAL_RCC_OscConfig+0xa2>
 8000f8c:	682b      	ldr	r3, [r5, #0]
 8000f8e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f92:	602b      	str	r3, [r5, #0]
 8000f94:	e7e5      	b.n	8000f62 <HAL_RCC_OscConfig+0x6e>
 8000f96:	682a      	ldr	r2, [r5, #0]
 8000f98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f9c:	602a      	str	r2, [r5, #0]
 8000f9e:	682a      	ldr	r2, [r5, #0]
 8000fa0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000fa4:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1df      	bne.n	8000f6a <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8000faa:	f7ff fadf 	bl	800056c <HAL_GetTick>
 8000fae:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb0:	682b      	ldr	r3, [r5, #0]
 8000fb2:	039f      	lsls	r7, r3, #14
 8000fb4:	d5a9      	bpl.n	8000f0a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fb6:	f7ff fad9 	bl	800056c <HAL_GetTick>
 8000fba:	1b80      	subs	r0, r0, r6
 8000fbc:	2864      	cmp	r0, #100	; 0x64
 8000fbe:	d9f7      	bls.n	8000fb0 <HAL_RCC_OscConfig+0xbc>
 8000fc0:	e7df      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fc2:	4b81      	ldr	r3, [pc, #516]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	f012 0f0c 	tst.w	r2, #12
 8000fca:	d007      	beq.n	8000fdc <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fcc:	689a      	ldr	r2, [r3, #8]
 8000fce:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000fd2:	2a08      	cmp	r2, #8
 8000fd4:	d111      	bne.n	8000ffa <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	025e      	lsls	r6, r3, #9
 8000fda:	d40e      	bmi.n	8000ffa <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000fdc:	4b7a      	ldr	r3, [pc, #488]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	0795      	lsls	r5, r2, #30
 8000fe2:	d502      	bpl.n	8000fea <HAL_RCC_OscConfig+0xf6>
 8000fe4:	68e2      	ldr	r2, [r4, #12]
 8000fe6:	2a01      	cmp	r2, #1
 8000fe8:	d188      	bne.n	8000efc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000fea:	681a      	ldr	r2, [r3, #0]
 8000fec:	6921      	ldr	r1, [r4, #16]
 8000fee:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8000ff2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8000ff6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff8:	e78a      	b.n	8000f10 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000ffa:	68e2      	ldr	r2, [r4, #12]
 8000ffc:	4b73      	ldr	r3, [pc, #460]	; (80011cc <HAL_RCC_OscConfig+0x2d8>)
 8000ffe:	b1b2      	cbz	r2, 800102e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001000:	2201      	movs	r2, #1
 8001002:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001004:	f7ff fab2 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001008:	4d6f      	ldr	r5, [pc, #444]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800100a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800100c:	682b      	ldr	r3, [r5, #0]
 800100e:	0798      	lsls	r0, r3, #30
 8001010:	d507      	bpl.n	8001022 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001012:	682b      	ldr	r3, [r5, #0]
 8001014:	6922      	ldr	r2, [r4, #16]
 8001016:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800101a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800101e:	602b      	str	r3, [r5, #0]
 8001020:	e776      	b.n	8000f10 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001022:	f7ff faa3 	bl	800056c <HAL_GetTick>
 8001026:	1b80      	subs	r0, r0, r6
 8001028:	2802      	cmp	r0, #2
 800102a:	d9ef      	bls.n	800100c <HAL_RCC_OscConfig+0x118>
 800102c:	e7a9      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 800102e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001030:	f7ff fa9c 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001034:	4d64      	ldr	r5, [pc, #400]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001036:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001038:	682b      	ldr	r3, [r5, #0]
 800103a:	0799      	lsls	r1, r3, #30
 800103c:	f57f af68 	bpl.w	8000f10 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001040:	f7ff fa94 	bl	800056c <HAL_GetTick>
 8001044:	1b80      	subs	r0, r0, r6
 8001046:	2802      	cmp	r0, #2
 8001048:	d9f6      	bls.n	8001038 <HAL_RCC_OscConfig+0x144>
 800104a:	e79a      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800104c:	6962      	ldr	r2, [r4, #20]
 800104e:	4b60      	ldr	r3, [pc, #384]	; (80011d0 <HAL_RCC_OscConfig+0x2dc>)
 8001050:	b17a      	cbz	r2, 8001072 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001056:	f7ff fa89 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105a:	4d5b      	ldr	r5, [pc, #364]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800105c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800105e:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001060:	079f      	lsls	r7, r3, #30
 8001062:	f53f af59 	bmi.w	8000f18 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001066:	f7ff fa81 	bl	800056c <HAL_GetTick>
 800106a:	1b80      	subs	r0, r0, r6
 800106c:	2802      	cmp	r0, #2
 800106e:	d9f6      	bls.n	800105e <HAL_RCC_OscConfig+0x16a>
 8001070:	e787      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001072:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001074:	f7ff fa7a 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001078:	4d53      	ldr	r5, [pc, #332]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 800107a:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800107c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800107e:	0798      	lsls	r0, r3, #30
 8001080:	f57f af4a 	bpl.w	8000f18 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001084:	f7ff fa72 	bl	800056c <HAL_GetTick>
 8001088:	1b80      	subs	r0, r0, r6
 800108a:	2802      	cmp	r0, #2
 800108c:	d9f6      	bls.n	800107c <HAL_RCC_OscConfig+0x188>
 800108e:	e778      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001090:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 8001092:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001094:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001098:	d128      	bne.n	80010ec <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	9201      	str	r2, [sp, #4]
 800109c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800109e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010a2:	641a      	str	r2, [r3, #64]	; 0x40
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010ae:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b0:	4d48      	ldr	r5, [pc, #288]	; (80011d4 <HAL_RCC_OscConfig+0x2e0>)
 80010b2:	682b      	ldr	r3, [r5, #0]
 80010b4:	05d9      	lsls	r1, r3, #23
 80010b6:	d51b      	bpl.n	80010f0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010b8:	68a3      	ldr	r3, [r4, #8]
 80010ba:	4d43      	ldr	r5, [pc, #268]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d127      	bne.n	8001110 <HAL_RCC_OscConfig+0x21c>
 80010c0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 80010c8:	f7ff fa50 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010cc:	4d3e      	ldr	r5, [pc, #248]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80010ce:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010d0:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80010d6:	079b      	lsls	r3, r3, #30
 80010d8:	d539      	bpl.n	800114e <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 80010da:	2e00      	cmp	r6, #0
 80010dc:	f43f af20 	beq.w	8000f20 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80010e0:	4a39      	ldr	r2, [pc, #228]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 80010e2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80010e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010e8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ea:	e719      	b.n	8000f20 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 80010ec:	2600      	movs	r6, #0
 80010ee:	e7df      	b.n	80010b0 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80010f8:	f7ff fa38 	bl	800056c <HAL_GetTick>
 80010fc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010fe:	682b      	ldr	r3, [r5, #0]
 8001100:	05da      	lsls	r2, r3, #23
 8001102:	d4d9      	bmi.n	80010b8 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001104:	f7ff fa32 	bl	800056c <HAL_GetTick>
 8001108:	1bc0      	subs	r0, r0, r7
 800110a:	2802      	cmp	r0, #2
 800110c:	d9f7      	bls.n	80010fe <HAL_RCC_OscConfig+0x20a>
 800110e:	e738      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001110:	2b05      	cmp	r3, #5
 8001112:	d104      	bne.n	800111e <HAL_RCC_OscConfig+0x22a>
 8001114:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001116:	f043 0304 	orr.w	r3, r3, #4
 800111a:	672b      	str	r3, [r5, #112]	; 0x70
 800111c:	e7d0      	b.n	80010c0 <HAL_RCC_OscConfig+0x1cc>
 800111e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001120:	f022 0201 	bic.w	r2, r2, #1
 8001124:	672a      	str	r2, [r5, #112]	; 0x70
 8001126:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001128:	f022 0204 	bic.w	r2, r2, #4
 800112c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800112e:	2b00      	cmp	r3, #0
 8001130:	d1ca      	bne.n	80010c8 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001132:	f7ff fa1b 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800113a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800113c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800113e:	0798      	lsls	r0, r3, #30
 8001140:	d5cb      	bpl.n	80010da <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001142:	f7ff fa13 	bl	800056c <HAL_GetTick>
 8001146:	1bc0      	subs	r0, r0, r7
 8001148:	4540      	cmp	r0, r8
 800114a:	d9f7      	bls.n	800113c <HAL_RCC_OscConfig+0x248>
 800114c:	e719      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800114e:	f7ff fa0d 	bl	800056c <HAL_GetTick>
 8001152:	1bc0      	subs	r0, r0, r7
 8001154:	4540      	cmp	r0, r8
 8001156:	d9bd      	bls.n	80010d4 <HAL_RCC_OscConfig+0x1e0>
 8001158:	e713      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800115a:	4d1b      	ldr	r5, [pc, #108]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
 800115c:	68ab      	ldr	r3, [r5, #8]
 800115e:	f003 030c 	and.w	r3, r3, #12
 8001162:	2b08      	cmp	r3, #8
 8001164:	f43f aeca 	beq.w	8000efc <HAL_RCC_OscConfig+0x8>
 8001168:	4e1b      	ldr	r6, [pc, #108]	; (80011d8 <HAL_RCC_OscConfig+0x2e4>)
 800116a:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800116c:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 800116e:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001170:	d134      	bne.n	80011dc <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001172:	f7ff f9fb 	bl	800056c <HAL_GetTick>
 8001176:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	0199      	lsls	r1, r3, #6
 800117c:	d41e      	bmi.n	80011bc <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800117e:	6a22      	ldr	r2, [r4, #32]
 8001180:	69e3      	ldr	r3, [r4, #28]
 8001182:	4313      	orrs	r3, r2
 8001184:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001186:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800118a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800118c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001190:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001192:	4c0d      	ldr	r4, [pc, #52]	; (80011c8 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001194:	0852      	lsrs	r2, r2, #1
 8001196:	3a01      	subs	r2, #1
 8001198:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800119c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800119e:	2301      	movs	r3, #1
 80011a0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80011a2:	f7ff f9e3 	bl	800056c <HAL_GetTick>
 80011a6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011a8:	6823      	ldr	r3, [r4, #0]
 80011aa:	019a      	lsls	r2, r3, #6
 80011ac:	f53f aebc 	bmi.w	8000f28 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011b0:	f7ff f9dc 	bl	800056c <HAL_GetTick>
 80011b4:	1b40      	subs	r0, r0, r5
 80011b6:	2802      	cmp	r0, #2
 80011b8:	d9f6      	bls.n	80011a8 <HAL_RCC_OscConfig+0x2b4>
 80011ba:	e6e2      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011bc:	f7ff f9d6 	bl	800056c <HAL_GetTick>
 80011c0:	1bc0      	subs	r0, r0, r7
 80011c2:	2802      	cmp	r0, #2
 80011c4:	d9d8      	bls.n	8001178 <HAL_RCC_OscConfig+0x284>
 80011c6:	e6dc      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
 80011c8:	40023800 	.word	0x40023800
 80011cc:	42470000 	.word	0x42470000
 80011d0:	42470e80 	.word	0x42470e80
 80011d4:	40007000 	.word	0x40007000
 80011d8:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 80011dc:	f7ff f9c6 	bl	800056c <HAL_GetTick>
 80011e0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011e2:	682b      	ldr	r3, [r5, #0]
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	f57f ae9f 	bpl.w	8000f28 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ea:	f7ff f9bf 	bl	800056c <HAL_GetTick>
 80011ee:	1b00      	subs	r0, r0, r4
 80011f0:	2802      	cmp	r0, #2
 80011f2:	d9f6      	bls.n	80011e2 <HAL_RCC_OscConfig+0x2ee>
 80011f4:	e6c5      	b.n	8000f82 <HAL_RCC_OscConfig+0x8e>
 80011f6:	bf00      	nop

080011f8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011f8:	4913      	ldr	r1, [pc, #76]	; (8001248 <HAL_RCC_GetSysClockFreq+0x50>)
{
 80011fa:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011fc:	688b      	ldr	r3, [r1, #8]
 80011fe:	f003 030c 	and.w	r3, r3, #12
 8001202:	2b04      	cmp	r3, #4
 8001204:	d003      	beq.n	800120e <HAL_RCC_GetSysClockFreq+0x16>
 8001206:	2b08      	cmp	r3, #8
 8001208:	d003      	beq.n	8001212 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800120a:	4810      	ldr	r0, [pc, #64]	; (800124c <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800120c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 800120e:	4810      	ldr	r0, [pc, #64]	; (8001250 <HAL_RCC_GetSysClockFreq+0x58>)
 8001210:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001212:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001214:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001216:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001218:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800121c:	bf14      	ite	ne
 800121e:	480c      	ldrne	r0, [pc, #48]	; (8001250 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001220:	480a      	ldreq	r0, [pc, #40]	; (800124c <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001222:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001226:	bf18      	it	ne
 8001228:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800122a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800122e:	fba1 0100 	umull	r0, r1, r1, r0
 8001232:	f7fe ffc9 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001236:	4b04      	ldr	r3, [pc, #16]	; (8001248 <HAL_RCC_GetSysClockFreq+0x50>)
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 800123e:	3301      	adds	r3, #1
 8001240:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001242:	fbb0 f0f3 	udiv	r0, r0, r3
 8001246:	bd08      	pop	{r3, pc}
 8001248:	40023800 	.word	0x40023800
 800124c:	00f42400 	.word	0x00f42400
 8001250:	007a1200 	.word	0x007a1200

08001254 <HAL_RCC_ClockConfig>:
{
 8001254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001258:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800125a:	4604      	mov	r4, r0
 800125c:	b910      	cbnz	r0, 8001264 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800125e:	2001      	movs	r0, #1
 8001260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001264:	4b44      	ldr	r3, [pc, #272]	; (8001378 <HAL_RCC_ClockConfig+0x124>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	f002 020f 	and.w	r2, r2, #15
 800126c:	428a      	cmp	r2, r1
 800126e:	d328      	bcc.n	80012c2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001270:	6821      	ldr	r1, [r4, #0]
 8001272:	078f      	lsls	r7, r1, #30
 8001274:	d42d      	bmi.n	80012d2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001276:	07c8      	lsls	r0, r1, #31
 8001278:	d440      	bmi.n	80012fc <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800127a:	4b3f      	ldr	r3, [pc, #252]	; (8001378 <HAL_RCC_ClockConfig+0x124>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	f002 020f 	and.w	r2, r2, #15
 8001282:	4295      	cmp	r5, r2
 8001284:	d366      	bcc.n	8001354 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001286:	6822      	ldr	r2, [r4, #0]
 8001288:	0751      	lsls	r1, r2, #29
 800128a:	d46c      	bmi.n	8001366 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800128c:	0713      	lsls	r3, r2, #28
 800128e:	d507      	bpl.n	80012a0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001290:	4a3a      	ldr	r2, [pc, #232]	; (800137c <HAL_RCC_ClockConfig+0x128>)
 8001292:	6921      	ldr	r1, [r4, #16]
 8001294:	6893      	ldr	r3, [r2, #8]
 8001296:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800129a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800129e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012a0:	f7ff ffaa 	bl	80011f8 <HAL_RCC_GetSysClockFreq>
 80012a4:	4b35      	ldr	r3, [pc, #212]	; (800137c <HAL_RCC_ClockConfig+0x128>)
 80012a6:	4a36      	ldr	r2, [pc, #216]	; (8001380 <HAL_RCC_ClockConfig+0x12c>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80012ae:	5cd3      	ldrb	r3, [r2, r3]
 80012b0:	40d8      	lsrs	r0, r3
 80012b2:	4b34      	ldr	r3, [pc, #208]	; (8001384 <HAL_RCC_ClockConfig+0x130>)
 80012b4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80012b6:	2000      	movs	r0, #0
 80012b8:	f7ff f90e 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 80012bc:	2000      	movs	r0, #0
 80012be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c2:	b2ca      	uxtb	r2, r1
 80012c4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	4299      	cmp	r1, r3
 80012ce:	d1c6      	bne.n	800125e <HAL_RCC_ClockConfig+0xa>
 80012d0:	e7ce      	b.n	8001270 <HAL_RCC_ClockConfig+0x1c>
 80012d2:	4b2a      	ldr	r3, [pc, #168]	; (800137c <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012d4:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012d8:	bf1e      	ittt	ne
 80012da:	689a      	ldrne	r2, [r3, #8]
 80012dc:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 80012e0:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012e2:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012e4:	bf42      	ittt	mi
 80012e6:	689a      	ldrmi	r2, [r3, #8]
 80012e8:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 80012ec:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012ee:	689a      	ldr	r2, [r3, #8]
 80012f0:	68a0      	ldr	r0, [r4, #8]
 80012f2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80012f6:	4302      	orrs	r2, r0
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	e7bc      	b.n	8001276 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012fc:	6862      	ldr	r2, [r4, #4]
 80012fe:	4b1f      	ldr	r3, [pc, #124]	; (800137c <HAL_RCC_ClockConfig+0x128>)
 8001300:	2a01      	cmp	r2, #1
 8001302:	d11d      	bne.n	8001340 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130a:	d0a8      	beq.n	800125e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800130c:	4e1b      	ldr	r6, [pc, #108]	; (800137c <HAL_RCC_ClockConfig+0x128>)
 800130e:	68b3      	ldr	r3, [r6, #8]
 8001310:	f023 0303 	bic.w	r3, r3, #3
 8001314:	4313      	orrs	r3, r2
 8001316:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001318:	f7ff f928 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800131c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001320:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001322:	68b3      	ldr	r3, [r6, #8]
 8001324:	6862      	ldr	r2, [r4, #4]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800132e:	d0a4      	beq.n	800127a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001330:	f7ff f91c 	bl	800056c <HAL_GetTick>
 8001334:	1bc0      	subs	r0, r0, r7
 8001336:	4540      	cmp	r0, r8
 8001338:	d9f3      	bls.n	8001322 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800133a:	2003      	movs	r0, #3
}
 800133c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001340:	1e91      	subs	r1, r2, #2
 8001342:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001344:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001346:	d802      	bhi.n	800134e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001348:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800134c:	e7dd      	b.n	800130a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800134e:	f013 0f02 	tst.w	r3, #2
 8001352:	e7da      	b.n	800130a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001354:	b2ea      	uxtb	r2, r5
 8001356:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	429d      	cmp	r5, r3
 8001360:	f47f af7d 	bne.w	800125e <HAL_RCC_ClockConfig+0xa>
 8001364:	e78f      	b.n	8001286 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001366:	4905      	ldr	r1, [pc, #20]	; (800137c <HAL_RCC_ClockConfig+0x128>)
 8001368:	68e0      	ldr	r0, [r4, #12]
 800136a:	688b      	ldr	r3, [r1, #8]
 800136c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001370:	4303      	orrs	r3, r0
 8001372:	608b      	str	r3, [r1, #8]
 8001374:	e78a      	b.n	800128c <HAL_RCC_ClockConfig+0x38>
 8001376:	bf00      	nop
 8001378:	40023c00 	.word	0x40023c00
 800137c:	40023800 	.word	0x40023800
 8001380:	08001cf8 	.word	0x08001cf8
 8001384:	20000008 	.word	0x20000008

08001388 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001388:	4b01      	ldr	r3, [pc, #4]	; (8001390 <HAL_RCC_GetHCLKFreq+0x8>)
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	20000008 	.word	0x20000008

08001394 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001394:	4b04      	ldr	r3, [pc, #16]	; (80013a8 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001396:	4a05      	ldr	r2, [pc, #20]	; (80013ac <HAL_RCC_GetPCLK1Freq+0x18>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800139e:	5cd3      	ldrb	r3, [r2, r3]
 80013a0:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80013a2:	6810      	ldr	r0, [r2, #0]
}
 80013a4:	40d8      	lsrs	r0, r3
 80013a6:	4770      	bx	lr
 80013a8:	40023800 	.word	0x40023800
 80013ac:	08001d08 	.word	0x08001d08
 80013b0:	20000008 	.word	0x20000008

080013b4 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80013b4:	6803      	ldr	r3, [r0, #0]
 80013b6:	f013 0f05 	tst.w	r3, #5
{
 80013ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013bc:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80013be:	d105      	bne.n	80013cc <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80013c0:	6828      	ldr	r0, [r5, #0]
 80013c2:	f010 0002 	ands.w	r0, r0, #2
 80013c6:	d128      	bne.n	800141a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 80013c8:	b003      	add	sp, #12
 80013ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80013cc:	4c41      	ldr	r4, [pc, #260]	; (80014d4 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013ce:	4e42      	ldr	r6, [pc, #264]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 80013d0:	2300      	movs	r3, #0
 80013d2:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80013d4:	f7ff f8ca 	bl	800056c <HAL_GetTick>
 80013d8:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80013da:	6833      	ldr	r3, [r6, #0]
 80013dc:	011b      	lsls	r3, r3, #4
 80013de:	d415      	bmi.n	800140c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80013e0:	68ab      	ldr	r3, [r5, #8]
 80013e2:	686a      	ldr	r2, [r5, #4]
 80013e4:	071b      	lsls	r3, r3, #28
 80013e6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80013ea:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80013ee:	2301      	movs	r3, #1
 80013f0:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 80013f2:	f7ff f8bb 	bl	800056c <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013f6:	4c38      	ldr	r4, [pc, #224]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 80013f8:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	0118      	lsls	r0, r3, #4
 80013fe:	d4df      	bmi.n	80013c0 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001400:	f7ff f8b4 	bl	800056c <HAL_GetTick>
 8001404:	1b80      	subs	r0, r0, r6
 8001406:	2802      	cmp	r0, #2
 8001408:	d9f7      	bls.n	80013fa <HAL_RCCEx_PeriphCLKConfig+0x46>
 800140a:	e004      	b.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800140c:	f7ff f8ae 	bl	800056c <HAL_GetTick>
 8001410:	1bc0      	subs	r0, r0, r7
 8001412:	2802      	cmp	r0, #2
 8001414:	d9e1      	bls.n	80013da <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8001416:	2003      	movs	r0, #3
 8001418:	e7d6      	b.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	9301      	str	r3, [sp, #4]
 800141e:	4b2e      	ldr	r3, [pc, #184]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8001420:	4c2e      	ldr	r4, [pc, #184]	; (80014dc <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001422:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001424:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001430:	9301      	str	r3, [sp, #4]
 8001432:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8001434:	6823      	ldr	r3, [r4, #0]
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800143c:	f7ff f896 	bl	800056c <HAL_GetTick>
 8001440:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001442:	6823      	ldr	r3, [r4, #0]
 8001444:	05d9      	lsls	r1, r3, #23
 8001446:	d51b      	bpl.n	8001480 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001448:	4c23      	ldr	r4, [pc, #140]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800144a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800144c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001450:	d11c      	bne.n	800148c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001452:	68eb      	ldr	r3, [r5, #12]
 8001454:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001458:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800145e:	d134      	bne.n	80014ca <HAL_RCCEx_PeriphCLKConfig+0x116>
 8001460:	6891      	ldr	r1, [r2, #8]
 8001462:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001466:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 800146a:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 800146e:	4301      	orrs	r1, r0
 8001470:	6091      	str	r1, [r2, #8]
 8001472:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001478:	430b      	orrs	r3, r1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 800147c:	2000      	movs	r0, #0
 800147e:	e7a3      	b.n	80013c8 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001480:	f7ff f874 	bl	800056c <HAL_GetTick>
 8001484:	1b80      	subs	r0, r0, r6
 8001486:	2802      	cmp	r0, #2
 8001488:	d9db      	bls.n	8001442 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 800148a:	e7c4      	b.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800148c:	68ea      	ldr	r2, [r5, #12]
 800148e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001492:	4293      	cmp	r3, r2
 8001494:	d0dd      	beq.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001496:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001498:	4a11      	ldr	r2, [pc, #68]	; (80014e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 800149a:	2101      	movs	r1, #1
 800149c:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800149e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80014a2:	2100      	movs	r1, #0
 80014a4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80014a6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80014a8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80014aa:	07da      	lsls	r2, r3, #31
 80014ac:	d5d1      	bpl.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80014ae:	f7ff f85d 	bl	800056c <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80014b6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80014ba:	079b      	lsls	r3, r3, #30
 80014bc:	d4c9      	bmi.n	8001452 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014be:	f7ff f855 	bl	800056c <HAL_GetTick>
 80014c2:	1b80      	subs	r0, r0, r6
 80014c4:	42b8      	cmp	r0, r7
 80014c6:	d9f7      	bls.n	80014b8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80014c8:	e7a5      	b.n	8001416 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80014ca:	6891      	ldr	r1, [r2, #8]
 80014cc:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80014d0:	e7ce      	b.n	8001470 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 80014d2:	bf00      	nop
 80014d4:	42470068 	.word	0x42470068
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40007000 	.word	0x40007000
 80014e0:	42470e40 	.word	0x42470e40

080014e4 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 80014e4:	2801      	cmp	r0, #1
 80014e6:	d120      	bne.n	800152a <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80014e8:	4b11      	ldr	r3, [pc, #68]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 80014ea:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 80014ec:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 80014f0:	d004      	beq.n	80014fc <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 80014f2:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80014f4:	480f      	ldr	r0, [pc, #60]	; (8001534 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 80014f6:	bf18      	it	ne
 80014f8:	2000      	movne	r0, #0
 80014fa:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80014fc:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80014fe:	490c      	ldr	r1, [pc, #48]	; (8001530 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001500:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001502:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8001504:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001508:	bf4c      	ite	mi
 800150a:	4b0b      	ldrmi	r3, [pc, #44]	; (8001538 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800150c:	4b0b      	ldrpl	r3, [pc, #44]	; (800153c <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800150e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8001512:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001516:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800151a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800151e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8001520:	f3c0 7002 	ubfx	r0, r0, #28, #3
 8001524:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 8001528:	4770      	bx	lr
  uint32_t frequency = 0U;
 800152a:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800
 8001534:	00bb8000 	.word	0x00bb8000
 8001538:	007a1200 	.word	0x007a1200
 800153c:	00f42400 	.word	0x00f42400

08001540 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001540:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if(hspi == NULL)
 8001542:	4604      	mov	r4, r0
 8001544:	2800      	cmp	r0, #0
 8001546:	d036      	beq.n	80015b6 <HAL_SPI_Init+0x76>
  if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	6283      	str	r3, [r0, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if(hspi->State == HAL_SPI_STATE_RESET)
 800154c:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8001550:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001554:	b91b      	cbnz	r3, 800155e <HAL_SPI_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001556:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800155a:	f000 faef 	bl	8001b3c <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800155e:	6821      	ldr	r1, [r4, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001560:	68a0      	ldr	r0, [r4, #8]
 8001562:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001564:	2302      	movs	r3, #2
 8001566:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800156a:	680b      	ldr	r3, [r1, #0]
 800156c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001570:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001572:	6863      	ldr	r3, [r4, #4]
 8001574:	4303      	orrs	r3, r0
 8001576:	68e0      	ldr	r0, [r4, #12]
 8001578:	4303      	orrs	r3, r0
 800157a:	6920      	ldr	r0, [r4, #16]
 800157c:	4303      	orrs	r3, r0
 800157e:	6960      	ldr	r0, [r4, #20]
 8001580:	4303      	orrs	r3, r0
 8001582:	69e0      	ldr	r0, [r4, #28]
 8001584:	4303      	orrs	r3, r0
 8001586:	6a20      	ldr	r0, [r4, #32]
 8001588:	4303      	orrs	r3, r0
 800158a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800158c:	4303      	orrs	r3, r0
 800158e:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8001592:	4303      	orrs	r3, r0
 8001594:	600b      	str	r3, [r1, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation) );

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001596:	0c12      	lsrs	r2, r2, #16
 8001598:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800159a:	f002 0204 	and.w	r2, r2, #4
 800159e:	431a      	orrs	r2, r3
 80015a0:	604a      	str	r2, [r1, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80015a2:	69cb      	ldr	r3, [r1, #28]
 80015a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80015a8:	61cb      	str	r3, [r1, #28]
#endif /* USE_SPI_CRC */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015aa:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 80015ac:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80015ae:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80015b0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 80015b4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015b6:	2001      	movs	r0, #1
}
 80015b8:	bd10      	pop	{r4, pc}

080015ba <HAL_TIM_OC_DelayElapsedCallback>:
 80015ba:	4770      	bx	lr

080015bc <HAL_TIM_IC_CaptureCallback>:
 80015bc:	4770      	bx	lr

080015be <HAL_TIM_PWM_PulseFinishedCallback>:
 80015be:	4770      	bx	lr

080015c0 <HAL_TIM_TriggerCallback>:
 80015c0:	4770      	bx	lr

080015c2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015c2:	6803      	ldr	r3, [r0, #0]
 80015c4:	691a      	ldr	r2, [r3, #16]
 80015c6:	0791      	lsls	r1, r2, #30
{
 80015c8:	b510      	push	{r4, lr}
 80015ca:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80015cc:	d50e      	bpl.n	80015ec <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	0792      	lsls	r2, r2, #30
 80015d2:	d50b      	bpl.n	80015ec <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015d4:	f06f 0202 	mvn.w	r2, #2
 80015d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015da:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015dc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015de:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015e0:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015e2:	d077      	beq.n	80016d4 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 80015e4:	f7ff ffea 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015e8:	2300      	movs	r3, #0
 80015ea:	7623      	strb	r3, [r4, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015ec:	6823      	ldr	r3, [r4, #0]
 80015ee:	691a      	ldr	r2, [r3, #16]
 80015f0:	0750      	lsls	r0, r2, #29
 80015f2:	d510      	bpl.n	8001616 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 80015f4:	68da      	ldr	r2, [r3, #12]
 80015f6:	0751      	lsls	r1, r2, #29
 80015f8:	d50d      	bpl.n	8001616 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015fa:	f06f 0204 	mvn.w	r2, #4
 80015fe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001600:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001602:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001604:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001608:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800160a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800160c:	d068      	beq.n	80016e0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800160e:	f7ff ffd5 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001612:	2300      	movs	r3, #0
 8001614:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001616:	6823      	ldr	r3, [r4, #0]
 8001618:	691a      	ldr	r2, [r3, #16]
 800161a:	0712      	lsls	r2, r2, #28
 800161c:	d50f      	bpl.n	800163e <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800161e:	68da      	ldr	r2, [r3, #12]
 8001620:	0710      	lsls	r0, r2, #28
 8001622:	d50c      	bpl.n	800163e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001624:	f06f 0208 	mvn.w	r2, #8
 8001628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800162a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800162c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800162e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001630:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001632:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001634:	d05a      	beq.n	80016ec <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001636:	f7ff ffc1 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800163a:	2300      	movs	r3, #0
 800163c:	7623      	strb	r3, [r4, #24]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800163e:	6823      	ldr	r3, [r4, #0]
 8001640:	691a      	ldr	r2, [r3, #16]
 8001642:	06d2      	lsls	r2, r2, #27
 8001644:	d510      	bpl.n	8001668 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001646:	68da      	ldr	r2, [r3, #12]
 8001648:	06d0      	lsls	r0, r2, #27
 800164a:	d50d      	bpl.n	8001668 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800164c:	f06f 0210 	mvn.w	r2, #16
 8001650:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001652:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001654:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001656:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800165a:	7622      	strb	r2, [r4, #24]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800165c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800165e:	d04b      	beq.n	80016f8 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001660:	f7ff ffac 	bl	80015bc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001664:	2300      	movs	r3, #0
 8001666:	7623      	strb	r3, [r4, #24]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001668:	6823      	ldr	r3, [r4, #0]
 800166a:	691a      	ldr	r2, [r3, #16]
 800166c:	07d1      	lsls	r1, r2, #31
 800166e:	d508      	bpl.n	8001682 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	07d2      	lsls	r2, r2, #31
 8001674:	d505      	bpl.n	8001682 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001676:	f06f 0201 	mvn.w	r2, #1
 800167a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800167c:	4620      	mov	r0, r4
 800167e:	f000 fac3 	bl	8001c08 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001682:	6823      	ldr	r3, [r4, #0]
 8001684:	691a      	ldr	r2, [r3, #16]
 8001686:	0610      	lsls	r0, r2, #24
 8001688:	d508      	bpl.n	800169c <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 800168a:	68da      	ldr	r2, [r3, #12]
 800168c:	0611      	lsls	r1, r2, #24
 800168e:	d505      	bpl.n	800169c <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001690:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001694:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001696:	4620      	mov	r0, r4
 8001698:	f000 f836 	bl	8001708 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	691a      	ldr	r2, [r3, #16]
 80016a0:	0652      	lsls	r2, r2, #25
 80016a2:	d508      	bpl.n	80016b6 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80016a4:	68da      	ldr	r2, [r3, #12]
 80016a6:	0650      	lsls	r0, r2, #25
 80016a8:	d505      	bpl.n	80016b6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80016aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80016ae:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80016b0:	4620      	mov	r0, r4
 80016b2:	f7ff ff85 	bl	80015c0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80016b6:	6823      	ldr	r3, [r4, #0]
 80016b8:	691a      	ldr	r2, [r3, #16]
 80016ba:	0691      	lsls	r1, r2, #26
 80016bc:	d522      	bpl.n	8001704 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80016be:	68da      	ldr	r2, [r3, #12]
 80016c0:	0692      	lsls	r2, r2, #26
 80016c2:	d51f      	bpl.n	8001704 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016c4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80016c8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80016ca:	611a      	str	r2, [r3, #16]
    }
  }
}
 80016cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 80016d0:	f000 b819 	b.w	8001706 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016d4:	f7ff ff71 	bl	80015ba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff ff70 	bl	80015be <HAL_TIM_PWM_PulseFinishedCallback>
 80016de:	e783      	b.n	80015e8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016e0:	f7ff ff6b 	bl	80015ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016e4:	4620      	mov	r0, r4
 80016e6:	f7ff ff6a 	bl	80015be <HAL_TIM_PWM_PulseFinishedCallback>
 80016ea:	e792      	b.n	8001612 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ec:	f7ff ff65 	bl	80015ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80016f0:	4620      	mov	r0, r4
 80016f2:	f7ff ff64 	bl	80015be <HAL_TIM_PWM_PulseFinishedCallback>
 80016f6:	e7a0      	b.n	800163a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016f8:	f7ff ff5f 	bl	80015ba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff ff5e 	bl	80015be <HAL_TIM_PWM_PulseFinishedCallback>
 8001702:	e7af      	b.n	8001664 <HAL_TIM_IRQHandler+0xa2>
 8001704:	bd10      	pop	{r4, pc}

08001706 <HAL_TIMEx_CommutationCallback>:
 8001706:	4770      	bx	lr

08001708 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001708:	4770      	bx	lr
	...

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b530      	push	{r4, r5, lr}
 800170e:	b099      	sub	sp, #100	; 0x64
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	4b2d      	ldr	r3, [pc, #180]	; (80017c8 <SystemClock_Config+0xbc>)
 8001712:	2100      	movs	r1, #0
 8001714:	9101      	str	r1, [sp, #4]
 8001716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001718:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800171c:	641a      	str	r2, [r3, #64]	; 0x40
 800171e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001724:	9301      	str	r3, [sp, #4]
 8001726:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001728:	4b28      	ldr	r3, [pc, #160]	; (80017cc <SystemClock_Config+0xc0>)
 800172a:	9102      	str	r1, [sp, #8]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001732:	601a      	str	r2, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173a:	9302      	str	r3, [sp, #8]
 800173c:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001742:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001744:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001748:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800174a:	2308      	movs	r3, #8
 800174c:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 800174e:	f44f 73a8 	mov.w	r3, #336	; 0x150
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001752:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001754:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001756:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800175a:	2307      	movs	r3, #7
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175c:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800175e:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001760:	9416      	str	r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001762:	9317      	str	r3, [sp, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001764:	f7ff fbc6 	bl	8000ef4 <HAL_RCC_OscConfig>
 8001768:	b100      	cbz	r0, 800176c <SystemClock_Config+0x60>
 800176a:	e7fe      	b.n	800176a <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800176c:	230f      	movs	r3, #15
 800176e:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001770:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001774:	9009      	str	r0, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001776:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001778:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800177a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800177e:	a807      	add	r0, sp, #28
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001780:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001782:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001784:	f7ff fd66 	bl	8001254 <HAL_RCC_ClockConfig>
 8001788:	b100      	cbz	r0, 800178c <SystemClock_Config+0x80>
 800178a:	e7fe      	b.n	800178a <SystemClock_Config+0x7e>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800178c:	23c0      	movs	r3, #192	; 0xc0
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800178e:	a803      	add	r0, sp, #12
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001790:	9405      	str	r4, [sp, #20]
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001792:	9503      	str	r5, [sp, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001794:	9304      	str	r3, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001796:	f7ff fe0d 	bl	80013b4 <HAL_RCCEx_PeriphCLKConfig>
 800179a:	4604      	mov	r4, r0
 800179c:	b100      	cbz	r0, 80017a0 <SystemClock_Config+0x94>
 800179e:	e7fe      	b.n	800179e <SystemClock_Config+0x92>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80017a0:	f7ff fdf2 	bl	8001388 <HAL_RCC_GetHCLKFreq>
 80017a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017a8:	fbb0 f0f3 	udiv	r0, r0, r3
 80017ac:	f7fe ff2a 	bl	8000604 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 80017b0:	2004      	movs	r0, #4
 80017b2:	f7fe ff3d 	bl	8000630 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80017b6:	4622      	mov	r2, r4
 80017b8:	4621      	mov	r1, r4
 80017ba:	f04f 30ff 	mov.w	r0, #4294967295
 80017be:	f7fe feed 	bl	800059c <HAL_NVIC_SetPriority>
}
 80017c2:	b019      	add	sp, #100	; 0x64
 80017c4:	bd30      	pop	{r4, r5, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000

080017d0 <main>:
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08c      	sub	sp, #48	; 0x30
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017d4:	2400      	movs	r4, #0
  HAL_Init();
 80017d6:	f7fe fea3 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 80017da:	f7ff ff97 	bl	800170c <SystemClock_Config>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017de:	4b6e      	ldr	r3, [pc, #440]	; (8001998 <main+0x1c8>)
 80017e0:	9401      	str	r4, [sp, #4]
 80017e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 80017e4:	486d      	ldr	r0, [pc, #436]	; (800199c <main+0x1cc>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017e6:	4f6e      	ldr	r7, [pc, #440]	; (80019a0 <main+0x1d0>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80017e8:	f042 0210 	orr.w	r2, r2, #16
 80017ec:	631a      	str	r2, [r3, #48]	; 0x30
 80017ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f0:	f002 0210 	and.w	r2, r2, #16
 80017f4:	9201      	str	r2, [sp, #4]
 80017f6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	9402      	str	r4, [sp, #8]
 80017fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	631a      	str	r2, [r3, #48]	; 0x30
 8001802:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001804:	f002 0204 	and.w	r2, r2, #4
 8001808:	9202      	str	r2, [sp, #8]
 800180a:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180c:	9403      	str	r4, [sp, #12]
 800180e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001810:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001814:	631a      	str	r2, [r3, #48]	; 0x30
 8001816:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001818:	f002 0280 	and.w	r2, r2, #128	; 0x80
 800181c:	9203      	str	r2, [sp, #12]
 800181e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001820:	9404      	str	r4, [sp, #16]
 8001822:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001824:	f042 0201 	orr.w	r2, r2, #1
 8001828:	631a      	str	r2, [r3, #48]	; 0x30
 800182a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182c:	f002 0201 	and.w	r2, r2, #1
 8001830:	9204      	str	r2, [sp, #16]
 8001832:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001834:	9405      	str	r4, [sp, #20]
 8001836:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001838:	f042 0202 	orr.w	r2, r2, #2
 800183c:	631a      	str	r2, [r3, #48]	; 0x30
 800183e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001840:	f002 0202 	and.w	r2, r2, #2
 8001844:	9205      	str	r2, [sp, #20]
 8001846:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001848:	9406      	str	r4, [sp, #24]
 800184a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800184c:	f042 0208 	orr.w	r2, r2, #8
 8001850:	631a      	str	r2, [r3, #48]	; 0x30
 8001852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001854:	f003 0308 	and.w	r3, r3, #8
 8001858:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800185a:	4622      	mov	r2, r4
 800185c:	2108      	movs	r1, #8
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800185e:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8001860:	f7ff f892 	bl	8000988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001864:	2201      	movs	r2, #1
 8001866:	4611      	mov	r1, r2
 8001868:	484e      	ldr	r0, [pc, #312]	; (80019a4 <main+0x1d4>)
 800186a:	f7ff f88d 	bl	8000988 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 800186e:	4622      	mov	r2, r4
 8001870:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001874:	484c      	ldr	r0, [pc, #304]	; (80019a8 <main+0x1d8>)
 8001876:	f7ff f887 	bl	8000988 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800187a:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 800187c:	2608      	movs	r6, #8
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800187e:	a907      	add	r1, sp, #28
 8001880:	4846      	ldr	r0, [pc, #280]	; (800199c <main+0x1cc>)
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8001882:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001884:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001888:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 800188a:	f7fe ff9d 	bl	80007c8 <HAL_GPIO_Init>
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800188e:	a907      	add	r1, sp, #28
 8001890:	4844      	ldr	r0, [pc, #272]	; (80019a4 <main+0x1d4>)
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001892:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001894:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001896:	f04f 0805 	mov.w	r8, #5
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800189e:	f7fe ff93 	bl	80007c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80018a2:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018a4:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2602      	movs	r6, #2
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018a8:	483e      	ldr	r0, [pc, #248]	; (80019a4 <main+0x1d4>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ac:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b0:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80018b4:	f7fe ff88 	bl	80007c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018b8:	a907      	add	r1, sp, #28
 80018ba:	483c      	ldr	r0, [pc, #240]	; (80019ac <main+0x1dc>)
  GPIO_InitStruct.Pin = B1_Pin;
 80018bc:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018be:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018c2:	f7fe ff81 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018c6:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018c8:	a907      	add	r1, sp, #28
 80018ca:	4839      	ldr	r0, [pc, #228]	; (80019b0 <main+0x1e0>)
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80018cc:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ce:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80018d2:	f7fe ff79 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80018da:	a907      	add	r1, sp, #28
 80018dc:	4834      	ldr	r0, [pc, #208]	; (80019b0 <main+0x1e0>)
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80018de:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e0:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f7fe ff6d 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80018ee:	f24f 0310 	movw	r3, #61456	; 0xf010
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018f2:	a907      	add	r1, sp, #28
 80018f4:	482c      	ldr	r0, [pc, #176]	; (80019a8 <main+0x1d8>)
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
 80018f6:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018f8:	9508      	str	r5, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fa:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018fe:	f7fe ff63 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001902:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001904:	a907      	add	r1, sp, #28
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <main+0x1d8>)
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001908:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190c:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800190e:	f7fe ff5b 	bl	80007c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001912:	4822      	ldr	r0, [pc, #136]	; (800199c <main+0x1cc>)
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001914:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001916:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001918:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191a:	9409      	str	r4, [sp, #36]	; 0x24
  hi2c1.Init.ClockSpeed = 100000;
 800191c:	4d25      	ldr	r5, [pc, #148]	; (80019b4 <main+0x1e4>)
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800191e:	f7fe ff53 	bl	80007c8 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001922:	4825      	ldr	r0, [pc, #148]	; (80019b8 <main+0x1e8>)
  hi2c1.Init.ClockSpeed = 100000;
 8001924:	4b25      	ldr	r3, [pc, #148]	; (80019bc <main+0x1ec>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001926:	6084      	str	r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001928:	e880 0028 	stmia.w	r0, {r3, r5}
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800192c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001930:	60c4      	str	r4, [r0, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001932:	6103      	str	r3, [r0, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001934:	6144      	str	r4, [r0, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001936:	6184      	str	r4, [r0, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001938:	61c4      	str	r4, [r0, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800193a:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800193c:	f7ff f82a 	bl	8000994 <HAL_I2C_Init>
 8001940:	b100      	cbz	r0, 8001944 <main+0x174>
 8001942:	e7fe      	b.n	8001942 <main+0x172>
  hi2s3.Instance = SPI3;
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <main+0x1f0>)
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001946:	4a1f      	ldr	r2, [pc, #124]	; (80019c4 <main+0x1f4>)
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8001948:	6098      	str	r0, [r3, #8]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800194a:	f44f 7400 	mov.w	r4, #512	; 0x200
 800194e:	e883 0014 	stmia.w	r3, {r2, r4}
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001952:	60d8      	str	r0, [r3, #12]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001954:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <main+0x1f8>)
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001956:	6198      	str	r0, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001958:	61d8      	str	r0, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800195a:	6218      	str	r0, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800195c:	4618      	mov	r0, r3
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800195e:	611c      	str	r4, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001960:	615a      	str	r2, [r3, #20]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001962:	f7ff f885 	bl	8000a70 <HAL_I2S_Init>
 8001966:	b100      	cbz	r0, 800196a <main+0x19a>
 8001968:	e7fe      	b.n	8001968 <main+0x198>
  hspi1.Instance = SPI1;
 800196a:	4b18      	ldr	r3, [pc, #96]	; (80019cc <main+0x1fc>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800196c:	4918      	ldr	r1, [pc, #96]	; (80019d0 <main+0x200>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800196e:	6098      	str	r0, [r3, #8]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001974:	e883 0006 	stmia.w	r3, {r1, r2}
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001978:	60d8      	str	r0, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800197a:	6118      	str	r0, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800197c:	6158      	str	r0, [r3, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800197e:	61d8      	str	r0, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001980:	6218      	str	r0, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001982:	6258      	str	r0, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001984:	6298      	str	r0, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001986:	220a      	movs	r2, #10
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001988:	4618      	mov	r0, r3
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800198a:	619c      	str	r4, [r3, #24]
  hspi1.Init.CRCPolynomial = 10;
 800198c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800198e:	f7ff fdd7 	bl	8001540 <HAL_SPI_Init>
 8001992:	b100      	cbz	r0, 8001996 <main+0x1c6>
 8001994:	e7fe      	b.n	8001994 <main+0x1c4>
 8001996:	e7fe      	b.n	8001996 <main+0x1c6>
 8001998:	40023800 	.word	0x40023800
 800199c:	40021000 	.word	0x40021000
 80019a0:	10120000 	.word	0x10120000
 80019a4:	40020800 	.word	0x40020800
 80019a8:	40020c00 	.word	0x40020c00
 80019ac:	40020000 	.word	0x40020000
 80019b0:	40020400 	.word	0x40020400
 80019b4:	000186a0 	.word	0x000186a0
 80019b8:	2000002c 	.word	0x2000002c
 80019bc:	40005400 	.word	0x40005400
 80019c0:	200000dc 	.word	0x200000dc
 80019c4:	40003c00 	.word	0x40003c00
 80019c8:	00017700 	.word	0x00017700
 80019cc:	20000084 	.word	0x20000084
 80019d0:	40013000 	.word	0x40013000

080019d4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019d8:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 80019da:	6802      	ldr	r2, [r0, #0]
 80019dc:	4b02      	ldr	r3, [pc, #8]	; (80019e8 <HAL_I2S_TxCpltCallback+0x10>)
 80019de:	429a      	cmp	r2, r3
 80019e0:	d101      	bne.n	80019e6 <HAL_I2S_TxCpltCallback+0xe>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 80019e2:	f7ff fff7 	bl	80019d4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
 80019e6:	bd08      	pop	{r3, pc}
 80019e8:	40003c00 	.word	0x40003c00

080019ec <BSP_AUDIO_OUT_Error_CallBack>:
 80019ec:	4770      	bx	lr

080019ee <BSP_AUDIO_IN_TransferComplete_CallBack>:
 80019ee:	4770      	bx	lr

080019f0 <HAL_I2S_RxCpltCallback>:
/**
  * @brief  Rx Transfer completed callbacks
  * @param  hi2s: I2S handle
  */
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80019f0:	b508      	push	{r3, lr}
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 80019f2:	f7ff fffc 	bl	80019ee <BSP_AUDIO_IN_TransferComplete_CallBack>
 80019f6:	bd08      	pop	{r3, pc}

080019f8 <BSP_AUDIO_IN_Error_Callback>:

/**
  * @brief  Audio IN Error callback function.
  */
__weak void BSP_AUDIO_IN_Error_Callback(void)
{   
 80019f8:	4770      	bx	lr
	...

080019fc <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80019fc:	6802      	ldr	r2, [r0, #0]
 80019fe:	4b07      	ldr	r3, [pc, #28]	; (8001a1c <HAL_I2S_ErrorCallback+0x20>)
 8001a00:	429a      	cmp	r2, r3
{
 8001a02:	b510      	push	{r4, lr}
 8001a04:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8001a06:	d101      	bne.n	8001a0c <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8001a08:	f7ff fff0 	bl	80019ec <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8001a0c:	6822      	ldr	r2, [r4, #0]
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <HAL_I2S_ErrorCallback+0x24>)
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d101      	bne.n	8001a18 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8001a14:	f7ff fff0 	bl	80019f8 <BSP_AUDIO_IN_Error_Callback>
 8001a18:	bd10      	pop	{r4, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40003c00 	.word	0x40003c00
 8001a20:	40003800 	.word	0x40003800

08001a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a24:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001a26:	2007      	movs	r0, #7
 8001a28:	f7fe fda6 	bl	8000578 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	4611      	mov	r1, r2
 8001a30:	f06f 000b 	mvn.w	r0, #11
 8001a34:	f7fe fdb2 	bl	800059c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	f06f 000a 	mvn.w	r0, #10
 8001a40:	f7fe fdac 	bl	800059c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	4611      	mov	r1, r2
 8001a48:	f06f 0009 	mvn.w	r0, #9
 8001a4c:	f7fe fda6 	bl	800059c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8001a50:	2200      	movs	r2, #0
 8001a52:	4611      	mov	r1, r2
 8001a54:	f06f 0004 	mvn.w	r0, #4
 8001a58:	f7fe fda0 	bl	800059c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	4611      	mov	r1, r2
 8001a60:	f06f 0003 	mvn.w	r0, #3
 8001a64:	f7fe fd9a 	bl	800059c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8001a68:	2200      	movs	r2, #0
 8001a6a:	4611      	mov	r1, r2
 8001a6c:	f06f 0001 	mvn.w	r0, #1
 8001a70:	f7fe fd94 	bl	800059c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	4611      	mov	r1, r2
 8001a78:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001a80:	f7fe bd8c 	b.w	800059c <HAL_NVIC_SetPriority>

08001a84 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a84:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 8001a86:	6802      	ldr	r2, [r0, #0]
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <HAL_I2C_MspInit+0x48>)
 8001a8a:	429a      	cmp	r2, r3
{
 8001a8c:	b086      	sub	sp, #24
  if(hi2c->Instance==I2C1)
 8001a8e:	d11a      	bne.n	8001ac6 <HAL_I2C_MspInit+0x42>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a90:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a94:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a96:	2312      	movs	r3, #18
 8001a98:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a9e:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa0:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa2:	eb0d 0103 	add.w	r1, sp, r3
 8001aa6:	480a      	ldr	r0, [pc, #40]	; (8001ad0 <HAL_I2C_MspInit+0x4c>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001aa8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aaa:	9404      	str	r4, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aac:	f7fe fe8c 	bl	80007c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001ab0:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <HAL_I2C_MspInit+0x50>)
 8001ab2:	9400      	str	r4, [sp, #0]
 8001ab4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ab6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001aba:	641a      	str	r2, [r3, #64]	; 0x40
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001ac6:	b006      	add	sp, #24
 8001ac8:	bd10      	pop	{r4, pc}
 8001aca:	bf00      	nop
 8001acc:	40005400 	.word	0x40005400
 8001ad0:	40020400 	.word	0x40020400
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001ad8:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 8001ada:	6802      	ldr	r2, [r0, #0]
 8001adc:	4b14      	ldr	r3, [pc, #80]	; (8001b30 <HAL_I2S_MspInit+0x58>)
 8001ade:	429a      	cmp	r2, r3
{
 8001ae0:	b086      	sub	sp, #24
  if(hi2s->Instance==SPI3)
 8001ae2:	d123      	bne.n	8001b2c <HAL_I2S_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ae4:	2400      	movs	r4, #0
 8001ae6:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8001aea:	9400      	str	r4, [sp, #0]
 8001aec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001aee:	4811      	ldr	r0, [pc, #68]	; (8001b34 <HAL_I2S_MspInit+0x5c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001af0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001af4:	641a      	str	r2, [r3, #64]	; 0x40
 8001af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af8:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001afa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b02:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b04:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b08:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b0c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b10:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b12:	f7fe fe59 	bl	80007c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b16:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b1a:	a901      	add	r1, sp, #4
 8001b1c:	4806      	ldr	r0, [pc, #24]	; (8001b38 <HAL_I2S_MspInit+0x60>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b1e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b26:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b28:	f7fe fe4e 	bl	80007c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b2c:	b006      	add	sp, #24
 8001b2e:	bd70      	pop	{r4, r5, r6, pc}
 8001b30:	40003c00 	.word	0x40003c00
 8001b34:	40020000 	.word	0x40020000
 8001b38:	40020800 	.word	0x40020800

08001b3c <HAL_SPI_MspInit>:
  }

}

void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hspi->Instance==SPI1)
 8001b3e:	6802      	ldr	r2, [r0, #0]
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <HAL_SPI_MspInit+0x40>)
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d117      	bne.n	8001b76 <HAL_SPI_MspInit+0x3a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_SPI_MspInit+0x44>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	6c51      	ldr	r1, [r2, #68]	; 0x44
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	480d      	ldr	r0, [pc, #52]	; (8001b84 <HAL_SPI_MspInit+0x48>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b50:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 8001b54:	6451      	str	r1, [r2, #68]	; 0x44
 8001b56:	6c52      	ldr	r2, [r2, #68]	; 0x44
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	9303      	str	r3, [sp, #12]
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b5a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b5e:	9200      	str	r2, [sp, #0]
 8001b60:	9a00      	ldr	r2, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b62:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001b64:	22e0      	movs	r2, #224	; 0xe0
 8001b66:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b68:	2305      	movs	r3, #5
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2202      	movs	r2, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b6c:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b70:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b72:	f7fe fe29 	bl	80007c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b76:	b007      	add	sp, #28
 8001b78:	f85d fb04 	ldr.w	pc, [sp], #4
 8001b7c:	40013000 	.word	0x40013000
 8001b80:	40023800 	.word	0x40023800
 8001b84:	40020000 	.word	0x40020000

08001b88 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8001b88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b8a:	f7fe fce3 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b8e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8001b92:	f7fe bd5a 	b.w	800064a <HAL_SYSTICK_IRQHandler>
	...

08001b98 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b98:	490f      	ldr	r1, [pc, #60]	; (8001bd8 <SystemInit+0x40>)
 8001b9a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001b9e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ba2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ba6:	4b0d      	ldr	r3, [pc, #52]	; (8001bdc <SystemInit+0x44>)
 8001ba8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001baa:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8001bac:	f042 0201 	orr.w	r2, r2, #1
 8001bb0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8001bb2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001bba:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001bc0:	4a07      	ldr	r2, [pc, #28]	; (8001be0 <SystemInit+0x48>)
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001bca:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bcc:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001bd2:	608b      	str	r3, [r1, #8]
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	24003010 	.word	0x24003010

08001be4 <DMA2_Stream2_IRQHandler>:

}

void DMA2_Stream2_IRQHandler(void) {

	HAL_DMA_IRQHandler(&dmaCC2);
 8001be4:	4801      	ldr	r0, [pc, #4]	; (8001bec <DMA2_Stream2_IRQHandler+0x8>)
 8001be6:	f7fe bd35 	b.w	8000654 <HAL_DMA_IRQHandler>
 8001bea:	bf00      	nop
 8001bec:	200002f8 	.word	0x200002f8

08001bf0 <TIM1_UP_TIM10_IRQHandler>:

}

void TIM1_UP_TIM10_IRQHandler(void) {
#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	; (8001c00 <TIM1_UP_TIM10_IRQHandler+0x10>)
#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8001bf2:	4804      	ldr	r0, [pc, #16]	; (8001c04 <TIM1_UP_TIM10_IRQHandler+0x14>)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8001bf4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bf8:	619a      	str	r2, [r3, #24]
	HAL_TIM_IRQHandler(&TIM1_handle);
 8001bfa:	f7ff bce2 	b.w	80015c2 <HAL_TIM_IRQHandler>
 8001bfe:	bf00      	nop
 8001c00:	40020c00 	.word	0x40020c00
 8001c04:	20000374 	.word	0x20000374

08001c08 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	ws2812b.timerPeriodCounter = 0;
	TIM1->CR1 = 0; // disable timer
 8001c08:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0x2c>)
	ws2812b.timerPeriodCounter = 0;
 8001c0a:	480b      	ldr	r0, [pc, #44]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	6243      	str	r3, [r0, #36]	; 0x24
	TIM1->CR1 = 0; // disable timer
 8001c10:	6013      	str	r3, [r2, #0]

	// disable the TIM2 Update IRQ
	__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8001c12:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68d9      	ldr	r1, [r3, #12]
 8001c18:	f021 0101 	bic.w	r1, r1, #1
 8001c1c:	60d9      	str	r1, [r3, #12]

	// Set back 1,25us period
	TIM1->ARR = tim_period;
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001c20:	6809      	ldr	r1, [r1, #0]
 8001c22:	62d1      	str	r1, [r2, #44]	; 0x2c

	// Generate an update event to reload the Prescaler value immediatly
	TIM1->EGR = TIM_EGR_UG;
 8001c24:	2101      	movs	r1, #1
 8001c26:	6151      	str	r1, [r2, #20]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8001c28:	f06f 0201 	mvn.w	r2, #1
 8001c2c:	611a      	str	r2, [r3, #16]

	// set transfer_complete flag
	ws2812b.transferComplete = 1;
 8001c2e:	f880 1020 	strb.w	r1, [r0, #32]
 8001c32:	4770      	bx	lr
 8001c34:	40010000 	.word	0x40010000
 8001c38:	200001e8 	.word	0x200001e8
 8001c3c:	20000374 	.word	0x20000374
 8001c40:	200003b0 	.word	0x200003b0

08001c44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c4a:	e003      	b.n	8001c54 <LoopCopyDataInit>

08001c4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c4c:	4b0c      	ldr	r3, [pc, #48]	; (8001c80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c52:	3104      	adds	r1, #4

08001c54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c5c:	d3f6      	bcc.n	8001c4c <CopyDataInit>
  ldr  r2, =_sbss
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c60:	e002      	b.n	8001c68 <LoopFillZerobss>

08001c62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c64:	f842 3b04 	str.w	r3, [r2], #4

08001c68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c6c:	d3f9      	bcc.n	8001c62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c6e:	f7ff ff93 	bl	8001b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c72:	f000 f811 	bl	8001c98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c76:	f7ff fdab 	bl	80017d0 <main>
  bx  lr    
 8001c7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001c7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001c80:	08001d20 	.word	0x08001d20
  ldr  r0, =_sdata
 8001c84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c88:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c8c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c90:	20001078 	.word	0x20001078

08001c94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c94:	e7fe      	b.n	8001c94 <ADC_IRQHandler>
	...

08001c98 <__libc_init_array>:
 8001c98:	b570      	push	{r4, r5, r6, lr}
 8001c9a:	4e0d      	ldr	r6, [pc, #52]	; (8001cd0 <__libc_init_array+0x38>)
 8001c9c:	4c0d      	ldr	r4, [pc, #52]	; (8001cd4 <__libc_init_array+0x3c>)
 8001c9e:	1ba4      	subs	r4, r4, r6
 8001ca0:	10a4      	asrs	r4, r4, #2
 8001ca2:	2500      	movs	r5, #0
 8001ca4:	42a5      	cmp	r5, r4
 8001ca6:	d109      	bne.n	8001cbc <__libc_init_array+0x24>
 8001ca8:	4e0b      	ldr	r6, [pc, #44]	; (8001cd8 <__libc_init_array+0x40>)
 8001caa:	4c0c      	ldr	r4, [pc, #48]	; (8001cdc <__libc_init_array+0x44>)
 8001cac:	f000 f818 	bl	8001ce0 <_init>
 8001cb0:	1ba4      	subs	r4, r4, r6
 8001cb2:	10a4      	asrs	r4, r4, #2
 8001cb4:	2500      	movs	r5, #0
 8001cb6:	42a5      	cmp	r5, r4
 8001cb8:	d105      	bne.n	8001cc6 <__libc_init_array+0x2e>
 8001cba:	bd70      	pop	{r4, r5, r6, pc}
 8001cbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cc0:	4798      	blx	r3
 8001cc2:	3501      	adds	r5, #1
 8001cc4:	e7ee      	b.n	8001ca4 <__libc_init_array+0xc>
 8001cc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001cca:	4798      	blx	r3
 8001ccc:	3501      	adds	r5, #1
 8001cce:	e7f2      	b.n	8001cb6 <__libc_init_array+0x1e>
 8001cd0:	08001d18 	.word	0x08001d18
 8001cd4:	08001d18 	.word	0x08001d18
 8001cd8:	08001d18 	.word	0x08001d18
 8001cdc:	08001d1c 	.word	0x08001d1c

08001ce0 <_init>:
 8001ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ce2:	bf00      	nop
 8001ce4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ce6:	bc08      	pop	{r3}
 8001ce8:	469e      	mov	lr, r3
 8001cea:	4770      	bx	lr

08001cec <_fini>:
 8001cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001cee:	bf00      	nop
 8001cf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001cf2:	bc08      	pop	{r3}
 8001cf4:	469e      	mov	lr, r3
 8001cf6:	4770      	bx	lr
