
nube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009020  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013710  080091a8  080091a8  000191a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c8b8  0801c8b8  0002c8b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c8c0  0801c8c0  0002c8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c8c4  0801c8c4  0002c8c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000048c  20000000  0801c8c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003048c  2**0
                  CONTENTS
  8 .bss          00002184  2000048c  2000048c  0003048c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20002610  20002610  0003048c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003048c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000249c5  00000000  00000000  000304bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004346  00000000  00000000  00054e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000bf8f  00000000  00000000  000591c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ef8  00000000  00000000  00065158  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e58  00000000  00000000  00066050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026f28  00000000  00000000  00066ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000100a3  00000000  00000000  0008ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cac87  00000000  00000000  0009de73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000015a  00000000  00000000  00168afa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f70  00000000  00000000  00168c54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000048c 	.word	0x2000048c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009190 	.word	0x08009190

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000490 	.word	0x20000490
 80001c4:	08009190 	.word	0x08009190

080001c8 <arm_bitreversal_32>:
 80001c8:	1c4b      	adds	r3, r1, #1
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	bf98      	it	ls
 80001ce:	4770      	bxls	lr
 80001d0:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 80001d4:	1c91      	adds	r1, r2, #2
 80001d6:	089b      	lsrs	r3, r3, #2

080001d8 <arm_bitreversal_32_0>:
 80001d8:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 80001dc:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 80001e0:	880a      	ldrh	r2, [r1, #0]
 80001e2:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 80001e6:	4480      	add	r8, r0
 80001e8:	4481      	add	r9, r0
 80001ea:	4402      	add	r2, r0
 80001ec:	4484      	add	ip, r0
 80001ee:	f8d9 7000 	ldr.w	r7, [r9]
 80001f2:	f8d8 6000 	ldr.w	r6, [r8]
 80001f6:	6815      	ldr	r5, [r2, #0]
 80001f8:	f8dc 4000 	ldr.w	r4, [ip]
 80001fc:	f8c9 6000 	str.w	r6, [r9]
 8000200:	f8c8 7000 	str.w	r7, [r8]
 8000204:	f8cc 5000 	str.w	r5, [ip]
 8000208:	6014      	str	r4, [r2, #0]
 800020a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800020e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000212:	6855      	ldr	r5, [r2, #4]
 8000214:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000218:	f8c9 6004 	str.w	r6, [r9, #4]
 800021c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000220:	f8cc 5004 	str.w	r5, [ip, #4]
 8000224:	6054      	str	r4, [r2, #4]
 8000226:	3108      	adds	r1, #8
 8000228:	3b01      	subs	r3, #1
 800022a:	d1d5      	bne.n	80001d8 <arm_bitreversal_32_0>
 800022c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000230:	4770      	bx	lr

08000232 <arm_bitreversal_16>:
 8000232:	1c4b      	adds	r3, r1, #1
 8000234:	2b01      	cmp	r3, #1
 8000236:	bf98      	it	ls
 8000238:	4770      	bxls	lr
 800023a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800023e:	1c91      	adds	r1, r2, #2
 8000240:	089b      	lsrs	r3, r3, #2

08000242 <arm_bitreversal_16_0>:
 8000242:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000246:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800024a:	880a      	ldrh	r2, [r1, #0]
 800024c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000250:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000254:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000258:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800025c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 8000260:	f8d9 7000 	ldr.w	r7, [r9]
 8000264:	f8d8 6000 	ldr.w	r6, [r8]
 8000268:	6815      	ldr	r5, [r2, #0]
 800026a:	f8dc 4000 	ldr.w	r4, [ip]
 800026e:	f8c9 6000 	str.w	r6, [r9]
 8000272:	f8c8 7000 	str.w	r7, [r8]
 8000276:	f8cc 5000 	str.w	r5, [ip]
 800027a:	6014      	str	r4, [r2, #0]
 800027c:	3108      	adds	r1, #8
 800027e:	3b01      	subs	r3, #1
 8000280:	d1df      	bne.n	8000242 <arm_bitreversal_16_0>
 8000282:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000286:	4770      	bx	lr

08000288 <__aeabi_drsub>:
 8000288:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800028c:	e002      	b.n	8000294 <__adddf3>
 800028e:	bf00      	nop

08000290 <__aeabi_dsub>:
 8000290:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000294 <__adddf3>:
 8000294:	b530      	push	{r4, r5, lr}
 8000296:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800029a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800029e:	ea94 0f05 	teq	r4, r5
 80002a2:	bf08      	it	eq
 80002a4:	ea90 0f02 	teqeq	r0, r2
 80002a8:	bf1f      	itttt	ne
 80002aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002ba:	f000 80e2 	beq.w	8000482 <__adddf3+0x1ee>
 80002be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002c6:	bfb8      	it	lt
 80002c8:	426d      	neglt	r5, r5
 80002ca:	dd0c      	ble.n	80002e6 <__adddf3+0x52>
 80002cc:	442c      	add	r4, r5
 80002ce:	ea80 0202 	eor.w	r2, r0, r2
 80002d2:	ea81 0303 	eor.w	r3, r1, r3
 80002d6:	ea82 0000 	eor.w	r0, r2, r0
 80002da:	ea83 0101 	eor.w	r1, r3, r1
 80002de:	ea80 0202 	eor.w	r2, r0, r2
 80002e2:	ea81 0303 	eor.w	r3, r1, r3
 80002e6:	2d36      	cmp	r5, #54	; 0x36
 80002e8:	bf88      	it	hi
 80002ea:	bd30      	pophi	{r4, r5, pc}
 80002ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002fc:	d002      	beq.n	8000304 <__adddf3+0x70>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000308:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800030c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000310:	d002      	beq.n	8000318 <__adddf3+0x84>
 8000312:	4252      	negs	r2, r2
 8000314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000318:	ea94 0f05 	teq	r4, r5
 800031c:	f000 80a7 	beq.w	800046e <__adddf3+0x1da>
 8000320:	f1a4 0401 	sub.w	r4, r4, #1
 8000324:	f1d5 0e20 	rsbs	lr, r5, #32
 8000328:	db0d      	blt.n	8000346 <__adddf3+0xb2>
 800032a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800032e:	fa22 f205 	lsr.w	r2, r2, r5
 8000332:	1880      	adds	r0, r0, r2
 8000334:	f141 0100 	adc.w	r1, r1, #0
 8000338:	fa03 f20e 	lsl.w	r2, r3, lr
 800033c:	1880      	adds	r0, r0, r2
 800033e:	fa43 f305 	asr.w	r3, r3, r5
 8000342:	4159      	adcs	r1, r3
 8000344:	e00e      	b.n	8000364 <__adddf3+0xd0>
 8000346:	f1a5 0520 	sub.w	r5, r5, #32
 800034a:	f10e 0e20 	add.w	lr, lr, #32
 800034e:	2a01      	cmp	r2, #1
 8000350:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000354:	bf28      	it	cs
 8000356:	f04c 0c02 	orrcs.w	ip, ip, #2
 800035a:	fa43 f305 	asr.w	r3, r3, r5
 800035e:	18c0      	adds	r0, r0, r3
 8000360:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000364:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000368:	d507      	bpl.n	800037a <__adddf3+0xe6>
 800036a:	f04f 0e00 	mov.w	lr, #0
 800036e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000372:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000376:	eb6e 0101 	sbc.w	r1, lr, r1
 800037a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800037e:	d31b      	bcc.n	80003b8 <__adddf3+0x124>
 8000380:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000384:	d30c      	bcc.n	80003a0 <__adddf3+0x10c>
 8000386:	0849      	lsrs	r1, r1, #1
 8000388:	ea5f 0030 	movs.w	r0, r0, rrx
 800038c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000390:	f104 0401 	add.w	r4, r4, #1
 8000394:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000398:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800039c:	f080 809a 	bcs.w	80004d4 <__adddf3+0x240>
 80003a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003a4:	bf08      	it	eq
 80003a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003aa:	f150 0000 	adcs.w	r0, r0, #0
 80003ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003b2:	ea41 0105 	orr.w	r1, r1, r5
 80003b6:	bd30      	pop	{r4, r5, pc}
 80003b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003bc:	4140      	adcs	r0, r0
 80003be:	eb41 0101 	adc.w	r1, r1, r1
 80003c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c6:	f1a4 0401 	sub.w	r4, r4, #1
 80003ca:	d1e9      	bne.n	80003a0 <__adddf3+0x10c>
 80003cc:	f091 0f00 	teq	r1, #0
 80003d0:	bf04      	itt	eq
 80003d2:	4601      	moveq	r1, r0
 80003d4:	2000      	moveq	r0, #0
 80003d6:	fab1 f381 	clz	r3, r1
 80003da:	bf08      	it	eq
 80003dc:	3320      	addeq	r3, #32
 80003de:	f1a3 030b 	sub.w	r3, r3, #11
 80003e2:	f1b3 0220 	subs.w	r2, r3, #32
 80003e6:	da0c      	bge.n	8000402 <__adddf3+0x16e>
 80003e8:	320c      	adds	r2, #12
 80003ea:	dd08      	ble.n	80003fe <__adddf3+0x16a>
 80003ec:	f102 0c14 	add.w	ip, r2, #20
 80003f0:	f1c2 020c 	rsb	r2, r2, #12
 80003f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f8:	fa21 f102 	lsr.w	r1, r1, r2
 80003fc:	e00c      	b.n	8000418 <__adddf3+0x184>
 80003fe:	f102 0214 	add.w	r2, r2, #20
 8000402:	bfd8      	it	le
 8000404:	f1c2 0c20 	rsble	ip, r2, #32
 8000408:	fa01 f102 	lsl.w	r1, r1, r2
 800040c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000410:	bfdc      	itt	le
 8000412:	ea41 010c 	orrle.w	r1, r1, ip
 8000416:	4090      	lslle	r0, r2
 8000418:	1ae4      	subs	r4, r4, r3
 800041a:	bfa2      	ittt	ge
 800041c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000420:	4329      	orrge	r1, r5
 8000422:	bd30      	popge	{r4, r5, pc}
 8000424:	ea6f 0404 	mvn.w	r4, r4
 8000428:	3c1f      	subs	r4, #31
 800042a:	da1c      	bge.n	8000466 <__adddf3+0x1d2>
 800042c:	340c      	adds	r4, #12
 800042e:	dc0e      	bgt.n	800044e <__adddf3+0x1ba>
 8000430:	f104 0414 	add.w	r4, r4, #20
 8000434:	f1c4 0220 	rsb	r2, r4, #32
 8000438:	fa20 f004 	lsr.w	r0, r0, r4
 800043c:	fa01 f302 	lsl.w	r3, r1, r2
 8000440:	ea40 0003 	orr.w	r0, r0, r3
 8000444:	fa21 f304 	lsr.w	r3, r1, r4
 8000448:	ea45 0103 	orr.w	r1, r5, r3
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	f1c4 040c 	rsb	r4, r4, #12
 8000452:	f1c4 0220 	rsb	r2, r4, #32
 8000456:	fa20 f002 	lsr.w	r0, r0, r2
 800045a:	fa01 f304 	lsl.w	r3, r1, r4
 800045e:	ea40 0003 	orr.w	r0, r0, r3
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	fa21 f004 	lsr.w	r0, r1, r4
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	f094 0f00 	teq	r4, #0
 8000472:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000476:	bf06      	itte	eq
 8000478:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800047c:	3401      	addeq	r4, #1
 800047e:	3d01      	subne	r5, #1
 8000480:	e74e      	b.n	8000320 <__adddf3+0x8c>
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf18      	it	ne
 8000488:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800048c:	d029      	beq.n	80004e2 <__adddf3+0x24e>
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	d005      	beq.n	80004a6 <__adddf3+0x212>
 800049a:	ea54 0c00 	orrs.w	ip, r4, r0
 800049e:	bf04      	itt	eq
 80004a0:	4619      	moveq	r1, r3
 80004a2:	4610      	moveq	r0, r2
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	ea91 0f03 	teq	r1, r3
 80004aa:	bf1e      	ittt	ne
 80004ac:	2100      	movne	r1, #0
 80004ae:	2000      	movne	r0, #0
 80004b0:	bd30      	popne	{r4, r5, pc}
 80004b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004b6:	d105      	bne.n	80004c4 <__adddf3+0x230>
 80004b8:	0040      	lsls	r0, r0, #1
 80004ba:	4149      	adcs	r1, r1
 80004bc:	bf28      	it	cs
 80004be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004c2:	bd30      	pop	{r4, r5, pc}
 80004c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c8:	bf3c      	itt	cc
 80004ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004ce:	bd30      	popcc	{r4, r5, pc}
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004dc:	f04f 0000 	mov.w	r0, #0
 80004e0:	bd30      	pop	{r4, r5, pc}
 80004e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004e6:	bf1a      	itte	ne
 80004e8:	4619      	movne	r1, r3
 80004ea:	4610      	movne	r0, r2
 80004ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f0:	bf1c      	itt	ne
 80004f2:	460b      	movne	r3, r1
 80004f4:	4602      	movne	r2, r0
 80004f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004fa:	bf06      	itte	eq
 80004fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000500:	ea91 0f03 	teqeq	r1, r3
 8000504:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	bf00      	nop

0800050c <__aeabi_ui2d>:
 800050c:	f090 0f00 	teq	r0, #0
 8000510:	bf04      	itt	eq
 8000512:	2100      	moveq	r1, #0
 8000514:	4770      	bxeq	lr
 8000516:	b530      	push	{r4, r5, lr}
 8000518:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800051c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000520:	f04f 0500 	mov.w	r5, #0
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	e750      	b.n	80003cc <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_i2d>:
 800052c:	f090 0f00 	teq	r0, #0
 8000530:	bf04      	itt	eq
 8000532:	2100      	moveq	r1, #0
 8000534:	4770      	bxeq	lr
 8000536:	b530      	push	{r4, r5, lr}
 8000538:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000540:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000544:	bf48      	it	mi
 8000546:	4240      	negmi	r0, r0
 8000548:	f04f 0100 	mov.w	r1, #0
 800054c:	e73e      	b.n	80003cc <__adddf3+0x138>
 800054e:	bf00      	nop

08000550 <__aeabi_f2d>:
 8000550:	0042      	lsls	r2, r0, #1
 8000552:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000556:	ea4f 0131 	mov.w	r1, r1, rrx
 800055a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800055e:	bf1f      	itttt	ne
 8000560:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000564:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000568:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800056c:	4770      	bxne	lr
 800056e:	f092 0f00 	teq	r2, #0
 8000572:	bf14      	ite	ne
 8000574:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e720      	b.n	80003cc <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aedc 	beq.w	800037a <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6c1      	b.n	800037a <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2uiz>:
 8000b7c:	004a      	lsls	r2, r1, #1
 8000b7e:	d211      	bcs.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b84:	d211      	bcs.n	8000baa <__aeabi_d2uiz+0x2e>
 8000b86:	d50d      	bpl.n	8000ba4 <__aeabi_d2uiz+0x28>
 8000b88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b90:	d40e      	bmi.n	8000bb0 <__aeabi_d2uiz+0x34>
 8000b92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bae:	d102      	bne.n	8000bb6 <__aeabi_d2uiz+0x3a>
 8000bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb4:	4770      	bx	lr
 8000bb6:	f04f 0000 	mov.w	r0, #0
 8000bba:	4770      	bx	lr

08000bbc <__aeabi_d2f>:
 8000bbc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bc0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc4:	bf24      	itt	cs
 8000bc6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bca:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bce:	d90d      	bls.n	8000bec <__aeabi_d2f+0x30>
 8000bd0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bdc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000be0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be4:	bf08      	it	eq
 8000be6:	f020 0001 	biceq.w	r0, r0, #1
 8000bea:	4770      	bx	lr
 8000bec:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bf0:	d121      	bne.n	8000c36 <__aeabi_d2f+0x7a>
 8000bf2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf6:	bfbc      	itt	lt
 8000bf8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bfc:	4770      	bxlt	lr
 8000bfe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c02:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c06:	f1c2 0218 	rsb	r2, r2, #24
 8000c0a:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c12:	fa20 f002 	lsr.w	r0, r0, r2
 8000c16:	bf18      	it	ne
 8000c18:	f040 0001 	orrne.w	r0, r0, #1
 8000c1c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c20:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c24:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c28:	ea40 000c 	orr.w	r0, r0, ip
 8000c2c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c30:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c34:	e7cc      	b.n	8000bd0 <__aeabi_d2f+0x14>
 8000c36:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c3a:	d107      	bne.n	8000c4c <__aeabi_d2f+0x90>
 8000c3c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c40:	bf1e      	ittt	ne
 8000c42:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c46:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c4a:	4770      	bxne	lr
 8000c4c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c50:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c54:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop

08000c5c <__aeabi_uldivmod>:
 8000c5c:	b953      	cbnz	r3, 8000c74 <__aeabi_uldivmod+0x18>
 8000c5e:	b94a      	cbnz	r2, 8000c74 <__aeabi_uldivmod+0x18>
 8000c60:	2900      	cmp	r1, #0
 8000c62:	bf08      	it	eq
 8000c64:	2800      	cmpeq	r0, #0
 8000c66:	bf1c      	itt	ne
 8000c68:	f04f 31ff 	movne.w	r1, #4294967295
 8000c6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c70:	f000 b97a 	b.w	8000f68 <__aeabi_idiv0>
 8000c74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c7c:	f000 f806 	bl	8000c8c <__udivmoddi4>
 8000c80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c88:	b004      	add	sp, #16
 8000c8a:	4770      	bx	lr

08000c8c <__udivmoddi4>:
 8000c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c90:	468c      	mov	ip, r1
 8000c92:	460d      	mov	r5, r1
 8000c94:	4604      	mov	r4, r0
 8000c96:	9e08      	ldr	r6, [sp, #32]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d151      	bne.n	8000d40 <__udivmoddi4+0xb4>
 8000c9c:	428a      	cmp	r2, r1
 8000c9e:	4617      	mov	r7, r2
 8000ca0:	d96d      	bls.n	8000d7e <__udivmoddi4+0xf2>
 8000ca2:	fab2 fe82 	clz	lr, r2
 8000ca6:	f1be 0f00 	cmp.w	lr, #0
 8000caa:	d00b      	beq.n	8000cc4 <__udivmoddi4+0x38>
 8000cac:	f1ce 0c20 	rsb	ip, lr, #32
 8000cb0:	fa01 f50e 	lsl.w	r5, r1, lr
 8000cb4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cb8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cbc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cc0:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cc4:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cc8:	0c25      	lsrs	r5, r4, #16
 8000cca:	fbbc f8fa 	udiv	r8, ip, sl
 8000cce:	fa1f f987 	uxth.w	r9, r7
 8000cd2:	fb0a cc18 	mls	ip, sl, r8, ip
 8000cd6:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000cda:	fb08 f309 	mul.w	r3, r8, r9
 8000cde:	42ab      	cmp	r3, r5
 8000ce0:	d90a      	bls.n	8000cf8 <__udivmoddi4+0x6c>
 8000ce2:	19ed      	adds	r5, r5, r7
 8000ce4:	f108 32ff 	add.w	r2, r8, #4294967295
 8000ce8:	f080 8123 	bcs.w	8000f32 <__udivmoddi4+0x2a6>
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	f240 8120 	bls.w	8000f32 <__udivmoddi4+0x2a6>
 8000cf2:	f1a8 0802 	sub.w	r8, r8, #2
 8000cf6:	443d      	add	r5, r7
 8000cf8:	1aed      	subs	r5, r5, r3
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d00:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d04:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d08:	fb00 f909 	mul.w	r9, r0, r9
 8000d0c:	45a1      	cmp	r9, r4
 8000d0e:	d909      	bls.n	8000d24 <__udivmoddi4+0x98>
 8000d10:	19e4      	adds	r4, r4, r7
 8000d12:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d16:	f080 810a 	bcs.w	8000f2e <__udivmoddi4+0x2a2>
 8000d1a:	45a1      	cmp	r9, r4
 8000d1c:	f240 8107 	bls.w	8000f2e <__udivmoddi4+0x2a2>
 8000d20:	3802      	subs	r0, #2
 8000d22:	443c      	add	r4, r7
 8000d24:	eba4 0409 	sub.w	r4, r4, r9
 8000d28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	2e00      	cmp	r6, #0
 8000d30:	d061      	beq.n	8000df6 <__udivmoddi4+0x16a>
 8000d32:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d36:	2300      	movs	r3, #0
 8000d38:	6034      	str	r4, [r6, #0]
 8000d3a:	6073      	str	r3, [r6, #4]
 8000d3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d907      	bls.n	8000d54 <__udivmoddi4+0xc8>
 8000d44:	2e00      	cmp	r6, #0
 8000d46:	d054      	beq.n	8000df2 <__udivmoddi4+0x166>
 8000d48:	2100      	movs	r1, #0
 8000d4a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d4e:	4608      	mov	r0, r1
 8000d50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d54:	fab3 f183 	clz	r1, r3
 8000d58:	2900      	cmp	r1, #0
 8000d5a:	f040 808e 	bne.w	8000e7a <__udivmoddi4+0x1ee>
 8000d5e:	42ab      	cmp	r3, r5
 8000d60:	d302      	bcc.n	8000d68 <__udivmoddi4+0xdc>
 8000d62:	4282      	cmp	r2, r0
 8000d64:	f200 80fa 	bhi.w	8000f5c <__udivmoddi4+0x2d0>
 8000d68:	1a84      	subs	r4, r0, r2
 8000d6a:	eb65 0503 	sbc.w	r5, r5, r3
 8000d6e:	2001      	movs	r0, #1
 8000d70:	46ac      	mov	ip, r5
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	d03f      	beq.n	8000df6 <__udivmoddi4+0x16a>
 8000d76:	e886 1010 	stmia.w	r6, {r4, ip}
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	b912      	cbnz	r2, 8000d86 <__udivmoddi4+0xfa>
 8000d80:	2701      	movs	r7, #1
 8000d82:	fbb7 f7f2 	udiv	r7, r7, r2
 8000d86:	fab7 fe87 	clz	lr, r7
 8000d8a:	f1be 0f00 	cmp.w	lr, #0
 8000d8e:	d134      	bne.n	8000dfa <__udivmoddi4+0x16e>
 8000d90:	1beb      	subs	r3, r5, r7
 8000d92:	0c3a      	lsrs	r2, r7, #16
 8000d94:	fa1f fc87 	uxth.w	ip, r7
 8000d98:	2101      	movs	r1, #1
 8000d9a:	fbb3 f8f2 	udiv	r8, r3, r2
 8000d9e:	0c25      	lsrs	r5, r4, #16
 8000da0:	fb02 3318 	mls	r3, r2, r8, r3
 8000da4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000da8:	fb0c f308 	mul.w	r3, ip, r8
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d907      	bls.n	8000dc0 <__udivmoddi4+0x134>
 8000db0:	19ed      	adds	r5, r5, r7
 8000db2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x132>
 8000db8:	42ab      	cmp	r3, r5
 8000dba:	f200 80d1 	bhi.w	8000f60 <__udivmoddi4+0x2d4>
 8000dbe:	4680      	mov	r8, r0
 8000dc0:	1aed      	subs	r5, r5, r3
 8000dc2:	b2a3      	uxth	r3, r4
 8000dc4:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dc8:	fb02 5510 	mls	r5, r2, r0, r5
 8000dcc:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000dd0:	fb0c fc00 	mul.w	ip, ip, r0
 8000dd4:	45a4      	cmp	ip, r4
 8000dd6:	d907      	bls.n	8000de8 <__udivmoddi4+0x15c>
 8000dd8:	19e4      	adds	r4, r4, r7
 8000dda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dde:	d202      	bcs.n	8000de6 <__udivmoddi4+0x15a>
 8000de0:	45a4      	cmp	ip, r4
 8000de2:	f200 80b8 	bhi.w	8000f56 <__udivmoddi4+0x2ca>
 8000de6:	4618      	mov	r0, r3
 8000de8:	eba4 040c 	sub.w	r4, r4, ip
 8000dec:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000df0:	e79d      	b.n	8000d2e <__udivmoddi4+0xa2>
 8000df2:	4631      	mov	r1, r6
 8000df4:	4630      	mov	r0, r6
 8000df6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dfa:	f1ce 0420 	rsb	r4, lr, #32
 8000dfe:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e02:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e06:	fa20 f804 	lsr.w	r8, r0, r4
 8000e0a:	0c3a      	lsrs	r2, r7, #16
 8000e0c:	fa25 f404 	lsr.w	r4, r5, r4
 8000e10:	ea48 0803 	orr.w	r8, r8, r3
 8000e14:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e18:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e1c:	fb02 4411 	mls	r4, r2, r1, r4
 8000e20:	fa1f fc87 	uxth.w	ip, r7
 8000e24:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e28:	fb01 f30c 	mul.w	r3, r1, ip
 8000e2c:	42ab      	cmp	r3, r5
 8000e2e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e32:	d909      	bls.n	8000e48 <__udivmoddi4+0x1bc>
 8000e34:	19ed      	adds	r5, r5, r7
 8000e36:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e3a:	f080 808a 	bcs.w	8000f52 <__udivmoddi4+0x2c6>
 8000e3e:	42ab      	cmp	r3, r5
 8000e40:	f240 8087 	bls.w	8000f52 <__udivmoddi4+0x2c6>
 8000e44:	3902      	subs	r1, #2
 8000e46:	443d      	add	r5, r7
 8000e48:	1aeb      	subs	r3, r5, r3
 8000e4a:	fa1f f588 	uxth.w	r5, r8
 8000e4e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e52:	fb02 3310 	mls	r3, r2, r0, r3
 8000e56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e5a:	fb00 f30c 	mul.w	r3, r0, ip
 8000e5e:	42ab      	cmp	r3, r5
 8000e60:	d907      	bls.n	8000e72 <__udivmoddi4+0x1e6>
 8000e62:	19ed      	adds	r5, r5, r7
 8000e64:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e68:	d26f      	bcs.n	8000f4a <__udivmoddi4+0x2be>
 8000e6a:	42ab      	cmp	r3, r5
 8000e6c:	d96d      	bls.n	8000f4a <__udivmoddi4+0x2be>
 8000e6e:	3802      	subs	r0, #2
 8000e70:	443d      	add	r5, r7
 8000e72:	1aeb      	subs	r3, r5, r3
 8000e74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e78:	e78f      	b.n	8000d9a <__udivmoddi4+0x10e>
 8000e7a:	f1c1 0720 	rsb	r7, r1, #32
 8000e7e:	fa22 f807 	lsr.w	r8, r2, r7
 8000e82:	408b      	lsls	r3, r1
 8000e84:	fa05 f401 	lsl.w	r4, r5, r1
 8000e88:	ea48 0303 	orr.w	r3, r8, r3
 8000e8c:	fa20 fe07 	lsr.w	lr, r0, r7
 8000e90:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000e94:	40fd      	lsrs	r5, r7
 8000e96:	ea4e 0e04 	orr.w	lr, lr, r4
 8000e9a:	fbb5 f9fc 	udiv	r9, r5, ip
 8000e9e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ea2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000ea6:	fa1f f883 	uxth.w	r8, r3
 8000eaa:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000eae:	fb09 f408 	mul.w	r4, r9, r8
 8000eb2:	42ac      	cmp	r4, r5
 8000eb4:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x244>
 8000ebe:	18ed      	adds	r5, r5, r3
 8000ec0:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ec4:	d243      	bcs.n	8000f4e <__udivmoddi4+0x2c2>
 8000ec6:	42ac      	cmp	r4, r5
 8000ec8:	d941      	bls.n	8000f4e <__udivmoddi4+0x2c2>
 8000eca:	f1a9 0902 	sub.w	r9, r9, #2
 8000ece:	441d      	add	r5, r3
 8000ed0:	1b2d      	subs	r5, r5, r4
 8000ed2:	fa1f fe8e 	uxth.w	lr, lr
 8000ed6:	fbb5 f0fc 	udiv	r0, r5, ip
 8000eda:	fb0c 5510 	mls	r5, ip, r0, r5
 8000ede:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000ee2:	fb00 f808 	mul.w	r8, r0, r8
 8000ee6:	45a0      	cmp	r8, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x26e>
 8000eea:	18e4      	adds	r4, r4, r3
 8000eec:	f100 35ff 	add.w	r5, r0, #4294967295
 8000ef0:	d229      	bcs.n	8000f46 <__udivmoddi4+0x2ba>
 8000ef2:	45a0      	cmp	r8, r4
 8000ef4:	d927      	bls.n	8000f46 <__udivmoddi4+0x2ba>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	441c      	add	r4, r3
 8000efa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000efe:	eba4 0408 	sub.w	r4, r4, r8
 8000f02:	fba0 8902 	umull	r8, r9, r0, r2
 8000f06:	454c      	cmp	r4, r9
 8000f08:	46c6      	mov	lr, r8
 8000f0a:	464d      	mov	r5, r9
 8000f0c:	d315      	bcc.n	8000f3a <__udivmoddi4+0x2ae>
 8000f0e:	d012      	beq.n	8000f36 <__udivmoddi4+0x2aa>
 8000f10:	b156      	cbz	r6, 8000f28 <__udivmoddi4+0x29c>
 8000f12:	ebba 030e 	subs.w	r3, sl, lr
 8000f16:	eb64 0405 	sbc.w	r4, r4, r5
 8000f1a:	fa04 f707 	lsl.w	r7, r4, r7
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431f      	orrs	r7, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	6037      	str	r7, [r6, #0]
 8000f26:	6074      	str	r4, [r6, #4]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	e6f8      	b.n	8000d24 <__udivmoddi4+0x98>
 8000f32:	4690      	mov	r8, r2
 8000f34:	e6e0      	b.n	8000cf8 <__udivmoddi4+0x6c>
 8000f36:	45c2      	cmp	sl, r8
 8000f38:	d2ea      	bcs.n	8000f10 <__udivmoddi4+0x284>
 8000f3a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f3e:	eb69 0503 	sbc.w	r5, r9, r3
 8000f42:	3801      	subs	r0, #1
 8000f44:	e7e4      	b.n	8000f10 <__udivmoddi4+0x284>
 8000f46:	4628      	mov	r0, r5
 8000f48:	e7d7      	b.n	8000efa <__udivmoddi4+0x26e>
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	e791      	b.n	8000e72 <__udivmoddi4+0x1e6>
 8000f4e:	4681      	mov	r9, r0
 8000f50:	e7be      	b.n	8000ed0 <__udivmoddi4+0x244>
 8000f52:	4601      	mov	r1, r0
 8000f54:	e778      	b.n	8000e48 <__udivmoddi4+0x1bc>
 8000f56:	3802      	subs	r0, #2
 8000f58:	443c      	add	r4, r7
 8000f5a:	e745      	b.n	8000de8 <__udivmoddi4+0x15c>
 8000f5c:	4608      	mov	r0, r1
 8000f5e:	e708      	b.n	8000d72 <__udivmoddi4+0xe6>
 8000f60:	f1a8 0802 	sub.w	r8, r8, #2
 8000f64:	443d      	add	r5, r7
 8000f66:	e72b      	b.n	8000dc0 <__udivmoddi4+0x134>

08000f68 <__aeabi_idiv0>:
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b510      	push	{r4, lr}
 8000f6e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f70:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <HAL_InitTick+0x40>)
 8000f72:	7818      	ldrb	r0, [r3, #0]
 8000f74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f78:	fbb3 f3f0 	udiv	r3, r3, r0
 8000f7c:	4a0c      	ldr	r2, [pc, #48]	; (8000fb0 <HAL_InitTick+0x44>)
 8000f7e:	6810      	ldr	r0, [r2, #0]
 8000f80:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f84:	f000 f894 	bl	80010b0 <HAL_SYSTICK_Config>
 8000f88:	b968      	cbnz	r0, 8000fa6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f8a:	2c0f      	cmp	r4, #15
 8000f8c:	d901      	bls.n	8000f92 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000f8e:	2001      	movs	r0, #1
  }

  /* Return function status */
  return HAL_OK;
}
 8000f90:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f92:	2200      	movs	r2, #0
 8000f94:	4621      	mov	r1, r4
 8000f96:	f04f 30ff 	mov.w	r0, #4294967295
 8000f9a:	f000 f84b 	bl	8001034 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_InitTick+0x48>)
 8000fa0:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000fa6:	2001      	movs	r0, #1
 8000fa8:	bd10      	pop	{r4, pc}
 8000faa:	bf00      	nop
 8000fac:	20000400 	.word	0x20000400
 8000fb0:	20000418 	.word	0x20000418
 8000fb4:	20000404 	.word	0x20000404

08000fb8 <HAL_Init>:
{
 8000fb8:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fba:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x30>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fc2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000fca:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fd2:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f81b 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f7ff ffc6 	bl	8000f6c <HAL_InitTick>
  HAL_MspInit();
 8000fe0:	f003 f87a 	bl	80040d8 <HAL_MspInit>
}
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	bd08      	pop	{r3, pc}
 8000fe8:	40023c00 	.word	0x40023c00

08000fec <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000fec:	4a03      	ldr	r2, [pc, #12]	; (8000ffc <HAL_IncTick+0x10>)
 8000fee:	6811      	ldr	r1, [r2, #0]
 8000ff0:	4b03      	ldr	r3, [pc, #12]	; (8001000 <HAL_IncTick+0x14>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	440b      	add	r3, r1
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	20000a30 	.word	0x20000a30
 8001000:	20000400 	.word	0x20000400

08001004 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001004:	4b01      	ldr	r3, [pc, #4]	; (800100c <HAL_GetTick+0x8>)
 8001006:	6818      	ldr	r0, [r3, #0]
}
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	20000a30 	.word	0x20000a30

08001010 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4a07      	ldr	r2, [pc, #28]	; (8001030 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001012:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001014:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 800101c:	0200      	lsls	r0, r0, #8
 800101e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001022:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001024:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001028:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800102c:	60d0      	str	r0, [r2, #12]
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001034:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001036:	4b16      	ldr	r3, [pc, #88]	; (8001090 <HAL_NVIC_SetPriority+0x5c>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103e:	f1c3 0407 	rsb	r4, r3, #7
 8001042:	2c04      	cmp	r4, #4
 8001044:	bf28      	it	cs
 8001046:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001048:	1d1d      	adds	r5, r3, #4
 800104a:	2d06      	cmp	r5, #6
 800104c:	d917      	bls.n	800107e <HAL_NVIC_SetPriority+0x4a>
 800104e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	2501      	movs	r5, #1
 8001052:	fa05 f404 	lsl.w	r4, r5, r4
 8001056:	3c01      	subs	r4, #1
 8001058:	4021      	ands	r1, r4
 800105a:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800105c:	fa05 f303 	lsl.w	r3, r5, r3
 8001060:	3b01      	subs	r3, #1
 8001062:	4013      	ands	r3, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) < 0)
 8001066:	2800      	cmp	r0, #0
 8001068:	db0b      	blt.n	8001082 <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	0109      	lsls	r1, r1, #4
 800106c:	b2c9      	uxtb	r1, r1
 800106e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001072:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001076:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800107a:	bc30      	pop	{r4, r5}
 800107c:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800107e:	2300      	movs	r3, #0
 8001080:	e7e6      	b.n	8001050 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	f000 000f 	and.w	r0, r0, #15
 8001086:	0109      	lsls	r1, r1, #4
 8001088:	b2c9      	uxtb	r1, r1
 800108a:	4b02      	ldr	r3, [pc, #8]	; (8001094 <HAL_NVIC_SetPriority+0x60>)
 800108c:	5419      	strb	r1, [r3, r0]
 800108e:	e7f4      	b.n	800107a <HAL_NVIC_SetPriority+0x46>
 8001090:	e000ed00 	.word	0xe000ed00
 8001094:	e000ed14 	.word	0xe000ed14

08001098 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8001098:	0942      	lsrs	r2, r0, #5
 800109a:	f000 001f 	and.w	r0, r0, #31
 800109e:	2301      	movs	r3, #1
 80010a0:	fa03 f000 	lsl.w	r0, r3, r0
 80010a4:	4b01      	ldr	r3, [pc, #4]	; (80010ac <HAL_NVIC_EnableIRQ+0x14>)
 80010a6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80010aa:	4770      	bx	lr
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	3801      	subs	r0, #1
 80010b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80010b6:	d20a      	bcs.n	80010ce <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_SYSTICK_Config+0x24>)
 80010ba:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010bc:	21f0      	movs	r1, #240	; 0xf0
 80010be:	4a06      	ldr	r2, [pc, #24]	; (80010d8 <HAL_SYSTICK_Config+0x28>)
 80010c0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	2000      	movs	r0, #0
 80010c6:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80010ce:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <HAL_SYSTICK_CLKSourceConfig>:
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80010dc:	2804      	cmp	r0, #4
 80010de:	d005      	beq.n	80010ec <HAL_SYSTICK_CLKSourceConfig+0x10>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80010e0:	4a05      	ldr	r2, [pc, #20]	; (80010f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80010e2:	6813      	ldr	r3, [r2, #0]
 80010e4:	f023 0304 	bic.w	r3, r3, #4
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	4770      	bx	lr
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80010ec:	4a02      	ldr	r2, [pc, #8]	; (80010f8 <HAL_SYSTICK_CLKSourceConfig+0x1c>)
 80010ee:	6813      	ldr	r3, [r2, #0]
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4770      	bx	lr
 80010f8:	e000e010 	.word	0xe000e010

080010fc <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 80010fc:	4770      	bx	lr

080010fe <HAL_SYSTICK_IRQHandler>:
{
 80010fe:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001100:	f7ff fffc 	bl	80010fc <HAL_SYSTICK_Callback>
 8001104:	bd08      	pop	{r3, pc}

08001106 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001106:	b430      	push	{r4, r5}
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001108:	6805      	ldr	r5, [r0, #0]
 800110a:	682c      	ldr	r4, [r5, #0]
 800110c:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
 8001110:	602c      	str	r4, [r5, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001112:	6804      	ldr	r4, [r0, #0]
 8001114:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001116:	6883      	ldr	r3, [r0, #8]
 8001118:	2b40      	cmp	r3, #64	; 0x40
 800111a:	d005      	beq.n	8001128 <DMA_SetConfig+0x22>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Stream source address */
    hdma->Instance->PAR = SrcAddress;
 800111c:	6803      	ldr	r3, [r0, #0]
 800111e:	6099      	str	r1, [r3, #8]

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
 8001120:	6803      	ldr	r3, [r0, #0]
 8001122:	60da      	str	r2, [r3, #12]
  }
}
 8001124:	bc30      	pop	{r4, r5}
 8001126:	4770      	bx	lr
    hdma->Instance->PAR = DstAddress;
 8001128:	6803      	ldr	r3, [r0, #0]
 800112a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = SrcAddress;
 800112c:	6803      	ldr	r3, [r0, #0]
 800112e:	60d9      	str	r1, [r3, #12]
 8001130:	e7f8      	b.n	8001124 <DMA_SetConfig+0x1e>
	...

08001134 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001134:	6802      	ldr	r2, [r0, #0]
 8001136:	b2d3      	uxtb	r3, r2
 8001138:	3b10      	subs	r3, #16
 800113a:	490b      	ldr	r1, [pc, #44]	; (8001168 <DMA_CalcBaseAndBitshift+0x34>)
 800113c:	fba1 1303 	umull	r1, r3, r1, r3
 8001140:	091b      	lsrs	r3, r3, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001142:	490a      	ldr	r1, [pc, #40]	; (800116c <DMA_CalcBaseAndBitshift+0x38>)
 8001144:	5cc9      	ldrb	r1, [r1, r3]
 8001146:	65c1      	str	r1, [r0, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001148:	2b03      	cmp	r3, #3
 800114a:	d806      	bhi.n	800115a <DMA_CalcBaseAndBitshift+0x26>
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800114c:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 8001150:	f022 0203 	bic.w	r2, r2, #3
 8001154:	6582      	str	r2, [r0, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
}
 8001156:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001158:	4770      	bx	lr
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800115a:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
 800115e:	f022 0203 	bic.w	r2, r2, #3
 8001162:	3204      	adds	r2, #4
 8001164:	6582      	str	r2, [r0, #88]	; 0x58
 8001166:	e7f6      	b.n	8001156 <DMA_CalcBaseAndBitshift+0x22>
 8001168:	aaaaaaab 	.word	0xaaaaaaab
 800116c:	080091e0 	.word	0x080091e0

08001170 <DMA_CheckFifoParam>:
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001170:	6a83      	ldr	r3, [r0, #40]	; 0x28
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001172:	6982      	ldr	r2, [r0, #24]
 8001174:	b992      	cbnz	r2, 800119c <DMA_CheckFifoParam+0x2c>
  {
    switch (tmp)
 8001176:	2b01      	cmp	r3, #1
 8001178:	d00a      	beq.n	8001190 <DMA_CheckFifoParam+0x20>
 800117a:	b11b      	cbz	r3, 8001184 <DMA_CheckFifoParam+0x14>
 800117c:	2b02      	cmp	r3, #2
 800117e:	d001      	beq.n	8001184 <DMA_CheckFifoParam+0x14>
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	2000      	movs	r0, #0
 8001182:	4770      	bx	lr
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001184:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001186:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 800118a:	d12c      	bne.n	80011e6 <DMA_CheckFifoParam+0x76>
  HAL_StatusTypeDef status = HAL_OK;
 800118c:	2000      	movs	r0, #0
 800118e:	4770      	bx	lr
      {
        status = HAL_ERROR;
      }
      break;
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001190:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001192:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001196:	d028      	beq.n	80011ea <DMA_CheckFifoParam+0x7a>
  HAL_StatusTypeDef status = HAL_OK;
 8001198:	2000      	movs	r0, #0
 800119a:	4770      	bx	lr
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800119c:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80011a0:	d005      	beq.n	80011ae <DMA_CheckFifoParam+0x3e>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d929      	bls.n	80011fa <DMA_CheckFifoParam+0x8a>
 80011a6:	2b03      	cmp	r3, #3
 80011a8:	d015      	beq.n	80011d6 <DMA_CheckFifoParam+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 80011aa:	2000      	movs	r0, #0
 80011ac:	4770      	bx	lr
    switch (tmp)
 80011ae:	2b03      	cmp	r3, #3
 80011b0:	d803      	bhi.n	80011ba <DMA_CheckFifoParam+0x4a>
 80011b2:	e8df f003 	tbb	[pc, r3]
 80011b6:	041c      	.short	0x041c
 80011b8:	0a1c      	.short	0x0a1c
  HAL_StatusTypeDef status = HAL_OK;
 80011ba:	2000      	movs	r0, #0
 80011bc:	4770      	bx	lr
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011be:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011c0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80011c4:	d115      	bne.n	80011f2 <DMA_CheckFifoParam+0x82>
  HAL_StatusTypeDef status = HAL_OK;
 80011c6:	2000      	movs	r0, #0
 80011c8:	4770      	bx	lr
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80011ca:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80011d0:	d011      	beq.n	80011f6 <DMA_CheckFifoParam+0x86>
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2000      	movs	r0, #0
 80011d4:	4770      	bx	lr
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80011d6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80011d8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 80011dc:	d001      	beq.n	80011e2 <DMA_CheckFifoParam+0x72>
      {
        status = HAL_ERROR;
 80011de:	2001      	movs	r0, #1
      break;
    }
  } 
  
  return status; 
}
 80011e0:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 80011e2:	2000      	movs	r0, #0
 80011e4:	4770      	bx	lr
        status = HAL_ERROR;
 80011e6:	2001      	movs	r0, #1
 80011e8:	4770      	bx	lr
        status = HAL_ERROR;
 80011ea:	2001      	movs	r0, #1
 80011ec:	4770      	bx	lr
      status = HAL_ERROR;
 80011ee:	2001      	movs	r0, #1
 80011f0:	4770      	bx	lr
        status = HAL_ERROR;
 80011f2:	2001      	movs	r0, #1
 80011f4:	4770      	bx	lr
        status = HAL_ERROR;
 80011f6:	2001      	movs	r0, #1
 80011f8:	4770      	bx	lr
      status = HAL_ERROR;
 80011fa:	2001      	movs	r0, #1
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_DMA_Init>:
{
 8001200:	b570      	push	{r4, r5, r6, lr}
 8001202:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff fefe 	bl	8001004 <HAL_GetTick>
  if(hdma == NULL)
 8001208:	2c00      	cmp	r4, #0
 800120a:	d05d      	beq.n	80012c8 <HAL_DMA_Init+0xc8>
 800120c:	4605      	mov	r5, r0
  __HAL_UNLOCK(hdma);
 800120e:	2300      	movs	r3, #0
 8001210:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_BUSY;
 8001214:	2302      	movs	r3, #2
 8001216:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 800121a:	6822      	ldr	r2, [r4, #0]
 800121c:	6813      	ldr	r3, [r2, #0]
 800121e:	f023 0301 	bic.w	r3, r3, #1
 8001222:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001224:	6823      	ldr	r3, [r4, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f012 0f01 	tst.w	r2, #1
 800122c:	d00a      	beq.n	8001244 <HAL_DMA_Init+0x44>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800122e:	f7ff fee9 	bl	8001004 <HAL_GetTick>
 8001232:	1b40      	subs	r0, r0, r5
 8001234:	2805      	cmp	r0, #5
 8001236:	d9f5      	bls.n	8001224 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001238:	2320      	movs	r3, #32
 800123a:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800123c:	2003      	movs	r0, #3
 800123e:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8001242:	bd70      	pop	{r4, r5, r6, pc}
  tmp = hdma->Instance->CR;
 8001244:	681a      	ldr	r2, [r3, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001246:	4921      	ldr	r1, [pc, #132]	; (80012cc <HAL_DMA_Init+0xcc>)
 8001248:	4011      	ands	r1, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800124a:	6862      	ldr	r2, [r4, #4]
 800124c:	68a0      	ldr	r0, [r4, #8]
 800124e:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001250:	68e0      	ldr	r0, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001252:	4302      	orrs	r2, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001254:	6920      	ldr	r0, [r4, #16]
 8001256:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001258:	6960      	ldr	r0, [r4, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125c:	69a0      	ldr	r0, [r4, #24]
 800125e:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001260:	69e0      	ldr	r0, [r4, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001262:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001264:	6a20      	ldr	r0, [r4, #32]
 8001266:	4302      	orrs	r2, r0
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001268:	430a      	orrs	r2, r1
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800126a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800126c:	2904      	cmp	r1, #4
 800126e:	d016      	beq.n	800129e <HAL_DMA_Init+0x9e>
  hdma->Instance->CR = tmp;  
 8001270:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8001272:	6826      	ldr	r6, [r4, #0]
 8001274:	6975      	ldr	r5, [r6, #20]
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001276:	f025 0507 	bic.w	r5, r5, #7
  tmp |= hdma->Init.FIFOMode;
 800127a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800127c:	431d      	orrs	r5, r3
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800127e:	2b04      	cmp	r3, #4
 8001280:	d012      	beq.n	80012a8 <HAL_DMA_Init+0xa8>
  hdma->Instance->FCR = tmp;
 8001282:	6175      	str	r5, [r6, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001284:	4620      	mov	r0, r4
 8001286:	f7ff ff55 	bl	8001134 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800128a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800128c:	233f      	movs	r3, #63	; 0x3f
 800128e:	4093      	lsls	r3, r2
 8001290:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001292:	2000      	movs	r0, #0
 8001294:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8001296:	2301      	movs	r3, #1
 8001298:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 800129c:	bd70      	pop	{r4, r5, r6, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800129e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80012a0:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80012a2:	4301      	orrs	r1, r0
 80012a4:	430a      	orrs	r2, r1
 80012a6:	e7e3      	b.n	8001270 <HAL_DMA_Init+0x70>
    tmp |= hdma->Init.FIFOThreshold;
 80012a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80012aa:	431d      	orrs	r5, r3
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80012ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0e7      	beq.n	8001282 <HAL_DMA_Init+0x82>
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80012b2:	4620      	mov	r0, r4
 80012b4:	f7ff ff5c 	bl	8001170 <DMA_CheckFifoParam>
 80012b8:	2800      	cmp	r0, #0
 80012ba:	d0e2      	beq.n	8001282 <HAL_DMA_Init+0x82>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80012bc:	2340      	movs	r3, #64	; 0x40
 80012be:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80012c0:	2001      	movs	r0, #1
 80012c2:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
        return HAL_ERROR; 
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
}
 80012ca:	bd70      	pop	{r4, r5, r6, pc}
 80012cc:	f010803f 	.word	0xf010803f

080012d0 <HAL_DMA_DeInit>:
  if(hdma == NULL)
 80012d0:	b340      	cbz	r0, 8001324 <HAL_DMA_DeInit+0x54>
{
 80012d2:	b538      	push	{r3, r4, r5, lr}
 80012d4:	4604      	mov	r4, r0
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80012d6:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d101      	bne.n	80012e4 <HAL_DMA_DeInit+0x14>
    return HAL_BUSY;
 80012e0:	2002      	movs	r0, #2
}
 80012e2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_DMA_DISABLE(hdma);
 80012e4:	6802      	ldr	r2, [r0, #0]
 80012e6:	6813      	ldr	r3, [r2, #0]
 80012e8:	f023 0301 	bic.w	r3, r3, #1
 80012ec:	6013      	str	r3, [r2, #0]
  hdma->Instance->CR   = 0U;
 80012ee:	6803      	ldr	r3, [r0, #0]
 80012f0:	2500      	movs	r5, #0
 80012f2:	601d      	str	r5, [r3, #0]
  hdma->Instance->NDTR = 0U;
 80012f4:	6803      	ldr	r3, [r0, #0]
 80012f6:	605d      	str	r5, [r3, #4]
  hdma->Instance->PAR  = 0U;
 80012f8:	6803      	ldr	r3, [r0, #0]
 80012fa:	609d      	str	r5, [r3, #8]
  hdma->Instance->M0AR = 0U;
 80012fc:	6803      	ldr	r3, [r0, #0]
 80012fe:	60dd      	str	r5, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8001300:	6803      	ldr	r3, [r0, #0]
 8001302:	611d      	str	r5, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001304:	6803      	ldr	r3, [r0, #0]
 8001306:	2221      	movs	r2, #33	; 0x21
 8001308:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800130a:	f7ff ff13 	bl	8001134 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800130e:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001310:	233f      	movs	r3, #63	; 0x3f
 8001312:	4093      	lsls	r3, r2
 8001314:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001316:	6565      	str	r5, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_RESET;
 8001318:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 800131c:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
  return HAL_OK;
 8001320:	4628      	mov	r0, r5
 8001322:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001324:	2001      	movs	r0, #1
 8001326:	4770      	bx	lr

08001328 <HAL_DMA_Start>:
{
 8001328:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 800132a:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800132e:	2c01      	cmp	r4, #1
 8001330:	d01c      	beq.n	800136c <HAL_DMA_Start+0x44>
 8001332:	2401      	movs	r4, #1
 8001334:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001338:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 800133c:	b2e4      	uxtb	r4, r4
 800133e:	2c01      	cmp	r4, #1
 8001340:	d004      	beq.n	800134c <HAL_DMA_Start+0x24>
    __HAL_UNLOCK(hdma);
 8001342:	2300      	movs	r3, #0
 8001344:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001348:	2002      	movs	r0, #2
 800134a:	bd38      	pop	{r3, r4, r5, pc}
 800134c:	4605      	mov	r5, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 800134e:	2002      	movs	r0, #2
 8001350:	f885 0035 	strb.w	r0, [r5, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001354:	2400      	movs	r4, #0
 8001356:	656c      	str	r4, [r5, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001358:	4628      	mov	r0, r5
 800135a:	f7ff fed4 	bl	8001106 <DMA_SetConfig>
    __HAL_DMA_ENABLE(hdma);
 800135e:	682a      	ldr	r2, [r5, #0]
 8001360:	6813      	ldr	r3, [r2, #0]
 8001362:	f043 0301 	orr.w	r3, r3, #1
 8001366:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001368:	4620      	mov	r0, r4
 800136a:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 800136c:	2002      	movs	r0, #2
}
 800136e:	bd38      	pop	{r3, r4, r5, pc}

08001370 <HAL_DMA_Start_IT>:
{
 8001370:	b538      	push	{r3, r4, r5, lr}
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001372:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8001374:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8001378:	2c01      	cmp	r4, #1
 800137a:	d031      	beq.n	80013e0 <HAL_DMA_Start_IT+0x70>
 800137c:	2401      	movs	r4, #1
 800137e:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001382:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001386:	b2e4      	uxtb	r4, r4
 8001388:	2c01      	cmp	r4, #1
 800138a:	d004      	beq.n	8001396 <HAL_DMA_Start_IT+0x26>
    __HAL_UNLOCK(hdma);	  
 800138c:	2300      	movs	r3, #0
 800138e:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
    status = HAL_BUSY;
 8001392:	2002      	movs	r0, #2
 8001394:	bd38      	pop	{r3, r4, r5, pc}
 8001396:	4604      	mov	r4, r0
    hdma->State = HAL_DMA_STATE_BUSY;
 8001398:	2002      	movs	r0, #2
 800139a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800139e:	2000      	movs	r0, #0
 80013a0:	6560      	str	r0, [r4, #84]	; 0x54
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80013a2:	4620      	mov	r0, r4
 80013a4:	f7ff feaf 	bl	8001106 <DMA_SetConfig>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013a8:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80013aa:	233f      	movs	r3, #63	; 0x3f
 80013ac:	4093      	lsls	r3, r2
 80013ae:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80013b0:	6822      	ldr	r2, [r4, #0]
 80013b2:	6813      	ldr	r3, [r2, #0]
 80013b4:	f043 0316 	orr.w	r3, r3, #22
 80013b8:	6013      	str	r3, [r2, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80013ba:	6822      	ldr	r2, [r4, #0]
 80013bc:	6953      	ldr	r3, [r2, #20]
 80013be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c2:	6153      	str	r3, [r2, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 80013c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c6:	b123      	cbz	r3, 80013d2 <HAL_DMA_Start_IT+0x62>
      hdma->Instance->CR  |= DMA_IT_HT;
 80013c8:	6822      	ldr	r2, [r4, #0]
 80013ca:	6813      	ldr	r3, [r2, #0]
 80013cc:	f043 0308 	orr.w	r3, r3, #8
 80013d0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 80013d2:	6822      	ldr	r2, [r4, #0]
 80013d4:	6813      	ldr	r3, [r2, #0]
 80013d6:	f043 0301 	orr.w	r3, r3, #1
 80013da:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013dc:	2000      	movs	r0, #0
 80013de:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hdma);
 80013e0:	2002      	movs	r0, #2
}
 80013e2:	bd38      	pop	{r3, r4, r5, pc}

080013e4 <HAL_DMA_IRQHandler>:
{
 80013e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013e6:	b083      	sub	sp, #12
 80013e8:	4604      	mov	r4, r0
  __IO uint32_t count = 0U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ee:	4b72      	ldr	r3, [pc, #456]	; (80015b8 <HAL_DMA_IRQHandler+0x1d4>)
 80013f0:	681d      	ldr	r5, [r3, #0]
 80013f2:	4b72      	ldr	r3, [pc, #456]	; (80015bc <HAL_DMA_IRQHandler+0x1d8>)
 80013f4:	fba3 3505 	umull	r3, r5, r3, r5
 80013f8:	0aad      	lsrs	r5, r5, #10
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013fa:	6d87      	ldr	r7, [r0, #88]	; 0x58
  tmpisr = regs->ISR;
 80013fc:	683e      	ldr	r6, [r7, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013fe:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8001400:	2308      	movs	r3, #8
 8001402:	4093      	lsls	r3, r2
 8001404:	421e      	tst	r6, r3
 8001406:	d010      	beq.n	800142a <HAL_DMA_IRQHandler+0x46>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001408:	6803      	ldr	r3, [r0, #0]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	f012 0f04 	tst.w	r2, #4
 8001410:	d00b      	beq.n	800142a <HAL_DMA_IRQHandler+0x46>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	f022 0204 	bic.w	r2, r2, #4
 8001418:	601a      	str	r2, [r3, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800141a:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 800141c:	2308      	movs	r3, #8
 800141e:	4093      	lsls	r3, r2
 8001420:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001422:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6543      	str	r3, [r0, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800142a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800142c:	2301      	movs	r3, #1
 800142e:	4093      	lsls	r3, r2
 8001430:	421e      	tst	r6, r3
 8001432:	d009      	beq.n	8001448 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001434:	6822      	ldr	r2, [r4, #0]
 8001436:	6952      	ldr	r2, [r2, #20]
 8001438:	f012 0f80 	tst.w	r2, #128	; 0x80
 800143c:	d004      	beq.n	8001448 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800143e:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001440:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001442:	f043 0302 	orr.w	r3, r3, #2
 8001446:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001448:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800144a:	2304      	movs	r3, #4
 800144c:	4093      	lsls	r3, r2
 800144e:	421e      	tst	r6, r3
 8001450:	d009      	beq.n	8001466 <HAL_DMA_IRQHandler+0x82>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	6812      	ldr	r2, [r2, #0]
 8001456:	f012 0f02 	tst.w	r2, #2
 800145a:	d004      	beq.n	8001466 <HAL_DMA_IRQHandler+0x82>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800145c:	60bb      	str	r3, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800145e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	6563      	str	r3, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001466:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001468:	2310      	movs	r3, #16
 800146a:	4093      	lsls	r3, r2
 800146c:	421e      	tst	r6, r3
 800146e:	d024      	beq.n	80014ba <HAL_DMA_IRQHandler+0xd6>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001470:	6822      	ldr	r2, [r4, #0]
 8001472:	6812      	ldr	r2, [r2, #0]
 8001474:	f012 0f08 	tst.w	r2, #8
 8001478:	d01f      	beq.n	80014ba <HAL_DMA_IRQHandler+0xd6>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800147a:	60bb      	str	r3, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800147c:	6823      	ldr	r3, [r4, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8001484:	d00d      	beq.n	80014a2 <HAL_DMA_IRQHandler+0xbe>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 800148c:	d104      	bne.n	8001498 <HAL_DMA_IRQHandler+0xb4>
          if(hdma->XferHalfCpltCallback != NULL)
 800148e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001490:	b19b      	cbz	r3, 80014ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferHalfCpltCallback(hdma);
 8001492:	4620      	mov	r0, r4
 8001494:	4798      	blx	r3
 8001496:	e010      	b.n	80014ba <HAL_DMA_IRQHandler+0xd6>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001498:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800149a:	b173      	cbz	r3, 80014ba <HAL_DMA_IRQHandler+0xd6>
            hdma->XferM1HalfCpltCallback(hdma);
 800149c:	4620      	mov	r0, r4
 800149e:	4798      	blx	r3
 80014a0:	e00b      	b.n	80014ba <HAL_DMA_IRQHandler+0xd6>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	f412 7f80 	tst.w	r2, #256	; 0x100
 80014a8:	d103      	bne.n	80014b2 <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	f022 0208 	bic.w	r2, r2, #8
 80014b0:	601a      	str	r2, [r3, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80014b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80014b4:	b10b      	cbz	r3, 80014ba <HAL_DMA_IRQHandler+0xd6>
          hdma->XferHalfCpltCallback(hdma);
 80014b6:	4620      	mov	r0, r4
 80014b8:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014ba:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80014bc:	2320      	movs	r3, #32
 80014be:	4093      	lsls	r3, r2
 80014c0:	421e      	tst	r6, r3
 80014c2:	d055      	beq.n	8001570 <HAL_DMA_IRQHandler+0x18c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014c4:	6822      	ldr	r2, [r4, #0]
 80014c6:	6812      	ldr	r2, [r2, #0]
 80014c8:	f012 0f10 	tst.w	r2, #16
 80014cc:	d050      	beq.n	8001570 <HAL_DMA_IRQHandler+0x18c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014ce:	60bb      	str	r3, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014d0:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d00e      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x114>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014da:	6823      	ldr	r3, [r4, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 80014e2:	d033      	beq.n	800154c <HAL_DMA_IRQHandler+0x168>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f413 2f00 	tst.w	r3, #524288	; 0x80000
 80014ea:	d12a      	bne.n	8001542 <HAL_DMA_IRQHandler+0x15e>
          if(hdma->XferM1CpltCallback != NULL)
 80014ec:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d03e      	beq.n	8001570 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferM1CpltCallback(hdma);
 80014f2:	4620      	mov	r0, r4
 80014f4:	4798      	blx	r3
 80014f6:	e03b      	b.n	8001570 <HAL_DMA_IRQHandler+0x18c>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014f8:	6822      	ldr	r2, [r4, #0]
 80014fa:	6813      	ldr	r3, [r2, #0]
 80014fc:	f023 0316 	bic.w	r3, r3, #22
 8001500:	6013      	str	r3, [r2, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001502:	6822      	ldr	r2, [r4, #0]
 8001504:	6953      	ldr	r3, [r2, #20]
 8001506:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800150a:	6153      	str	r3, [r2, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800150c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800150e:	b1a3      	cbz	r3, 800153a <HAL_DMA_IRQHandler+0x156>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	6813      	ldr	r3, [r2, #0]
 8001514:	f023 0308 	bic.w	r3, r3, #8
 8001518:	6013      	str	r3, [r2, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800151a:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800151c:	233f      	movs	r3, #63	; 0x3f
 800151e:	4093      	lsls	r3, r2
 8001520:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8001522:	2300      	movs	r3, #0
 8001524:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8001528:	2301      	movs	r3, #1
 800152a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800152e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001530:	2b00      	cmp	r3, #0
 8001532:	d03f      	beq.n	80015b4 <HAL_DMA_IRQHandler+0x1d0>
          hdma->XferAbortCallback(hdma);
 8001534:	4620      	mov	r0, r4
 8001536:	4798      	blx	r3
 8001538:	e03c      	b.n	80015b4 <HAL_DMA_IRQHandler+0x1d0>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800153a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e7      	bne.n	8001510 <HAL_DMA_IRQHandler+0x12c>
 8001540:	e7eb      	b.n	800151a <HAL_DMA_IRQHandler+0x136>
          if(hdma->XferCpltCallback != NULL)
 8001542:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001544:	b1a3      	cbz	r3, 8001570 <HAL_DMA_IRQHandler+0x18c>
            hdma->XferCpltCallback(hdma);
 8001546:	4620      	mov	r0, r4
 8001548:	4798      	blx	r3
 800154a:	e011      	b.n	8001570 <HAL_DMA_IRQHandler+0x18c>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001552:	d109      	bne.n	8001568 <HAL_DMA_IRQHandler+0x184>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	f022 0210 	bic.w	r2, r2, #16
 800155a:	601a      	str	r2, [r3, #0]
          __HAL_UNLOCK(hdma);
 800155c:	2300      	movs	r3, #0
 800155e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8001562:	2301      	movs	r3, #1
 8001564:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 8001568:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800156a:	b10b      	cbz	r3, 8001570 <HAL_DMA_IRQHandler+0x18c>
          hdma->XferCpltCallback(hdma);
 800156c:	4620      	mov	r0, r4
 800156e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001570:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001572:	b1fb      	cbz	r3, 80015b4 <HAL_DMA_IRQHandler+0x1d0>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001574:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001576:	f013 0f01 	tst.w	r3, #1
 800157a:	d017      	beq.n	80015ac <HAL_DMA_IRQHandler+0x1c8>
      hdma->State = HAL_DMA_STATE_ABORT;
 800157c:	2305      	movs	r3, #5
 800157e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8001582:	6822      	ldr	r2, [r4, #0]
 8001584:	6813      	ldr	r3, [r2, #0]
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	6013      	str	r3, [r2, #0]
        if (++count > timeout)
 800158c:	9b01      	ldr	r3, [sp, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	9301      	str	r3, [sp, #4]
 8001592:	429d      	cmp	r5, r3
 8001594:	d304      	bcc.n	80015a0 <HAL_DMA_IRQHandler+0x1bc>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f013 0f01 	tst.w	r3, #1
 800159e:	d1f5      	bne.n	800158c <HAL_DMA_IRQHandler+0x1a8>
      __HAL_UNLOCK(hdma);
 80015a0:	2300      	movs	r3, #0
 80015a2:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80015ac:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80015ae:	b10b      	cbz	r3, 80015b4 <HAL_DMA_IRQHandler+0x1d0>
      hdma->XferErrorCallback(hdma);
 80015b0:	4620      	mov	r0, r4
 80015b2:	4798      	blx	r3
}
 80015b4:	b003      	add	sp, #12
 80015b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015b8:	20000418 	.word	0x20000418
 80015bc:	1b4e81b5 	.word	0x1b4e81b5

080015c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015c2:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015c4:	2400      	movs	r4, #0
 80015c6:	e04b      	b.n	8001660 <HAL_GPIO_Init+0xa0>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c8:	ea4f 0ed4 	mov.w	lr, r4, lsr #3
 80015cc:	f10e 0e08 	add.w	lr, lr, #8
 80015d0:	f850 202e 	ldr.w	r2, [r0, lr, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015d4:	f004 0607 	and.w	r6, r4, #7
 80015d8:	00b6      	lsls	r6, r6, #2
 80015da:	270f      	movs	r7, #15
 80015dc:	40b7      	lsls	r7, r6
 80015de:	ea22 0207 	bic.w	r2, r2, r7
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015e2:	690f      	ldr	r7, [r1, #16]
 80015e4:	fa07 f606 	lsl.w	r6, r7, r6
 80015e8:	4332      	orrs	r2, r6
        GPIOx->AFR[position >> 3U] = temp;
 80015ea:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
 80015ee:	e046      	b.n	800167e <HAL_GPIO_Init+0xbe>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80015f0:	2607      	movs	r6, #7
 80015f2:	e000      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 80015f4:	2600      	movs	r6, #0
 80015f6:	fa06 f60e 	lsl.w	r6, r6, lr
 80015fa:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fc:	3302      	adds	r3, #2
 80015fe:	4e5e      	ldr	r6, [pc, #376]	; (8001778 <HAL_GPIO_Init+0x1b8>)
 8001600:	f846 2023 	str.w	r2, [r6, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001604:	4b5d      	ldr	r3, [pc, #372]	; (800177c <HAL_GPIO_Init+0x1bc>)
 8001606:	681a      	ldr	r2, [r3, #0]
        temp &= ~((uint32_t)iocurrent);
 8001608:	43eb      	mvns	r3, r5
 800160a:	ea02 0603 	and.w	r6, r2, r3
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800160e:	684f      	ldr	r7, [r1, #4]
 8001610:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001614:	d001      	beq.n	800161a <HAL_GPIO_Init+0x5a>
        {
          temp |= iocurrent;
 8001616:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->IMR = temp;
 800161a:	4a58      	ldr	r2, [pc, #352]	; (800177c <HAL_GPIO_Init+0x1bc>)
 800161c:	6016      	str	r6, [r2, #0]

        temp = EXTI->EMR;
 800161e:	6852      	ldr	r2, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001620:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001624:	684f      	ldr	r7, [r1, #4]
 8001626:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 800162a:	d001      	beq.n	8001630 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 800162c:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->EMR = temp;
 8001630:	4a52      	ldr	r2, [pc, #328]	; (800177c <HAL_GPIO_Init+0x1bc>)
 8001632:	6056      	str	r6, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001634:	6892      	ldr	r2, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001636:	ea03 0602 	and.w	r6, r3, r2
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800163a:	684f      	ldr	r7, [r1, #4]
 800163c:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001640:	d001      	beq.n	8001646 <HAL_GPIO_Init+0x86>
        {
          temp |= iocurrent;
 8001642:	ea45 0602 	orr.w	r6, r5, r2
        }
        EXTI->RTSR = temp;
 8001646:	4a4d      	ldr	r2, [pc, #308]	; (800177c <HAL_GPIO_Init+0x1bc>)
 8001648:	6096      	str	r6, [r2, #8]

        temp = EXTI->FTSR;
 800164a:	68d2      	ldr	r2, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800164c:	4013      	ands	r3, r2
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800164e:	684e      	ldr	r6, [r1, #4]
 8001650:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001654:	d001      	beq.n	800165a <HAL_GPIO_Init+0x9a>
        {
          temp |= iocurrent;
 8001656:	ea45 0302 	orr.w	r3, r5, r2
        }
        EXTI->FTSR = temp;
 800165a:	4a48      	ldr	r2, [pc, #288]	; (800177c <HAL_GPIO_Init+0x1bc>)
 800165c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	3401      	adds	r4, #1
 8001660:	2c0f      	cmp	r4, #15
 8001662:	f200 8086 	bhi.w	8001772 <HAL_GPIO_Init+0x1b2>
    ioposition = 0x01U << position;
 8001666:	2301      	movs	r3, #1
 8001668:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166a:	680a      	ldr	r2, [r1, #0]
 800166c:	ea03 0502 	and.w	r5, r3, r2
    if(iocurrent == ioposition)
 8001670:	42ab      	cmp	r3, r5
 8001672:	d1f4      	bne.n	800165e <HAL_GPIO_Init+0x9e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001674:	684a      	ldr	r2, [r1, #4]
 8001676:	2a02      	cmp	r2, #2
 8001678:	d0a6      	beq.n	80015c8 <HAL_GPIO_Init+0x8>
 800167a:	2a12      	cmp	r2, #18
 800167c:	d0a4      	beq.n	80015c8 <HAL_GPIO_Init+0x8>
      temp = GPIOx->MODER;
 800167e:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001680:	ea4f 0e44 	mov.w	lr, r4, lsl #1
 8001684:	2203      	movs	r2, #3
 8001686:	fa02 f20e 	lsl.w	r2, r2, lr
 800168a:	43d2      	mvns	r2, r2
 800168c:	4016      	ands	r6, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800168e:	684f      	ldr	r7, [r1, #4]
 8001690:	f007 0703 	and.w	r7, r7, #3
 8001694:	fa07 f70e 	lsl.w	r7, r7, lr
 8001698:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 800169a:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800169c:	684e      	ldr	r6, [r1, #4]
 800169e:	1e77      	subs	r7, r6, #1
 80016a0:	2f01      	cmp	r7, #1
 80016a2:	d903      	bls.n	80016ac <HAL_GPIO_Init+0xec>
 80016a4:	2e11      	cmp	r6, #17
 80016a6:	d001      	beq.n	80016ac <HAL_GPIO_Init+0xec>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016a8:	2e12      	cmp	r6, #18
 80016aa:	d10f      	bne.n	80016cc <HAL_GPIO_Init+0x10c>
        temp = GPIOx->OSPEEDR; 
 80016ac:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016ae:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b0:	68cf      	ldr	r7, [r1, #12]
 80016b2:	fa07 f70e 	lsl.w	r7, r7, lr
 80016b6:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80016b8:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80016ba:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016bc:	ea26 0303 	bic.w	r3, r6, r3
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80016c0:	684e      	ldr	r6, [r1, #4]
 80016c2:	f3c6 1600 	ubfx	r6, r6, #4, #1
 80016c6:	40a6      	lsls	r6, r4
 80016c8:	4333      	orrs	r3, r6
        GPIOx->OTYPER = temp;
 80016ca:	6043      	str	r3, [r0, #4]
      temp = GPIOx->PUPDR;
 80016cc:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016ce:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016d0:	688b      	ldr	r3, [r1, #8]
 80016d2:	fa03 f30e 	lsl.w	r3, r3, lr
 80016d6:	431a      	orrs	r2, r3
      GPIOx->PUPDR = temp;
 80016d8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016da:	684b      	ldr	r3, [r1, #4]
 80016dc:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80016e0:	d0bd      	beq.n	800165e <HAL_GPIO_Init+0x9e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	9301      	str	r3, [sp, #4]
 80016e6:	4b26      	ldr	r3, [pc, #152]	; (8001780 <HAL_GPIO_Init+0x1c0>)
 80016e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80016ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	9b01      	ldr	r3, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	08a3      	lsrs	r3, r4, #2
 80016fc:	1c9e      	adds	r6, r3, #2
 80016fe:	4a1e      	ldr	r2, [pc, #120]	; (8001778 <HAL_GPIO_Init+0x1b8>)
 8001700:	f852 2026 	ldr.w	r2, [r2, r6, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001704:	f004 0603 	and.w	r6, r4, #3
 8001708:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 800170c:	260f      	movs	r6, #15
 800170e:	fa06 f60e 	lsl.w	r6, r6, lr
 8001712:	ea22 0206 	bic.w	r2, r2, r6
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001716:	4f1b      	ldr	r7, [pc, #108]	; (8001784 <HAL_GPIO_Init+0x1c4>)
 8001718:	42b8      	cmp	r0, r7
 800171a:	f43f af6b 	beq.w	80015f4 <HAL_GPIO_Init+0x34>
 800171e:	4e1a      	ldr	r6, [pc, #104]	; (8001788 <HAL_GPIO_Init+0x1c8>)
 8001720:	42b0      	cmp	r0, r6
 8001722:	d01a      	beq.n	800175a <HAL_GPIO_Init+0x19a>
 8001724:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001728:	42b0      	cmp	r0, r6
 800172a:	d018      	beq.n	800175e <HAL_GPIO_Init+0x19e>
 800172c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001730:	42b0      	cmp	r0, r6
 8001732:	d016      	beq.n	8001762 <HAL_GPIO_Init+0x1a2>
 8001734:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001738:	42b0      	cmp	r0, r6
 800173a:	d014      	beq.n	8001766 <HAL_GPIO_Init+0x1a6>
 800173c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001740:	42b0      	cmp	r0, r6
 8001742:	d012      	beq.n	800176a <HAL_GPIO_Init+0x1aa>
 8001744:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001748:	42b0      	cmp	r0, r6
 800174a:	d010      	beq.n	800176e <HAL_GPIO_Init+0x1ae>
 800174c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001750:	42b0      	cmp	r0, r6
 8001752:	f43f af4d 	beq.w	80015f0 <HAL_GPIO_Init+0x30>
 8001756:	2608      	movs	r6, #8
 8001758:	e74d      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 800175a:	2601      	movs	r6, #1
 800175c:	e74b      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 800175e:	2602      	movs	r6, #2
 8001760:	e749      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 8001762:	2603      	movs	r6, #3
 8001764:	e747      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 8001766:	2604      	movs	r6, #4
 8001768:	e745      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 800176a:	2605      	movs	r6, #5
 800176c:	e743      	b.n	80015f6 <HAL_GPIO_Init+0x36>
 800176e:	2606      	movs	r6, #6
 8001770:	e741      	b.n	80015f6 <HAL_GPIO_Init+0x36>
      }
    }
  }
}
 8001772:	b003      	add	sp, #12
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001776:	bf00      	nop
 8001778:	40013800 	.word	0x40013800
 800177c:	40013c00 	.word	0x40013c00
 8001780:	40023800 	.word	0x40023800
 8001784:	40020000 	.word	0x40020000
 8001788:	40020400 	.word	0x40020400

0800178c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800178c:	b912      	cbnz	r2, 8001794 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800178e:	0409      	lsls	r1, r1, #16
 8001790:	6181      	str	r1, [r0, #24]
 8001792:	4770      	bx	lr
    GPIOx->BSRR = GPIO_Pin;
 8001794:	6181      	str	r1, [r0, #24]
 8001796:	4770      	bx	lr

08001798 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001798:	6943      	ldr	r3, [r0, #20]
 800179a:	4059      	eors	r1, r3
 800179c:	6141      	str	r1, [r0, #20]
 800179e:	4770      	bx	lr

080017a0 <HAL_I2S_Receive_DMA>:
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 80017a0:	2900      	cmp	r1, #0
 80017a2:	d05f      	beq.n	8001864 <HAL_I2S_Receive_DMA+0xc4>
{
 80017a4:	b510      	push	{r4, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	460c      	mov	r4, r1
  if((pData == NULL) || (Size == 0U))
 80017aa:	2a00      	cmp	r2, #0
 80017ac:	d05c      	beq.n	8001868 <HAL_I2S_Receive_DMA+0xc8>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 80017ae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d002      	beq.n	80017be <HAL_I2S_Receive_DMA+0x1e>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80017b8:	2002      	movs	r0, #2
  }
}
 80017ba:	b002      	add	sp, #8
 80017bc:	bd10      	pop	{r4, pc}
    hi2s->pRxBuffPtr = pData;
 80017be:	62c1      	str	r1, [r0, #44]	; 0x2c
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80017c0:	6803      	ldr	r3, [r0, #0]
 80017c2:	69db      	ldr	r3, [r3, #28]
 80017c4:	f003 0307 	and.w	r3, r3, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d03e      	beq.n	800184a <HAL_I2S_Receive_DMA+0xaa>
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d03c      	beq.n	800184a <HAL_I2S_Receive_DMA+0xaa>
      hi2s->RxXferSize  = Size;
 80017d0:	8602      	strh	r2, [r0, #48]	; 0x30
      hi2s->RxXferCount = Size;
 80017d2:	8642      	strh	r2, [r0, #50]	; 0x32
    __HAL_LOCK(hi2s);
 80017d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d046      	beq.n	800186c <HAL_I2S_Receive_DMA+0xcc>
 80017de:	2301      	movs	r3, #1
 80017e0:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    hi2s->State     = HAL_I2S_STATE_BUSY_RX;
 80017e4:	2304      	movs	r3, #4
 80017e6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017ea:	2300      	movs	r3, #0
 80017ec:	6443      	str	r3, [r0, #68]	; 0x44
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80017ee:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80017f0:	4a1f      	ldr	r2, [pc, #124]	; (8001870 <HAL_I2S_Receive_DMA+0xd0>)
 80017f2:	641a      	str	r2, [r3, #64]	; 0x40
    hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80017f4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_I2S_Receive_DMA+0xd4>)
 80017f8:	63da      	str	r2, [r3, #60]	; 0x3c
    hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80017fa:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80017fc:	4a1e      	ldr	r2, [pc, #120]	; (8001878 <HAL_I2S_Receive_DMA+0xd8>)
 80017fe:	64da      	str	r2, [r3, #76]	; 0x4c
    if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8001800:	6801      	ldr	r1, [r0, #0]
 8001802:	69cb      	ldr	r3, [r1, #28]
 8001804:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800180c:	d022      	beq.n	8001854 <HAL_I2S_Receive_DMA+0xb4>
 800180e:	4622      	mov	r2, r4
 8001810:	4604      	mov	r4, r0
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t*)tmp, hi2s->RxXferSize);
 8001812:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 8001814:	b29b      	uxth	r3, r3
 8001816:	310c      	adds	r1, #12
 8001818:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800181a:	f7ff fda9 	bl	8001370 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 800181e:	6823      	ldr	r3, [r4, #0]
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8001826:	d103      	bne.n	8001830 <HAL_I2S_Receive_DMA+0x90>
      __HAL_I2S_ENABLE(hi2s);
 8001828:	69da      	ldr	r2, [r3, #28]
 800182a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800182e:	61da      	str	r2, [r3, #28]
    if((hi2s->Instance->CR2 &SPI_CR2_RXDMAEN) != SPI_CR2_RXDMAEN)
 8001830:	6823      	ldr	r3, [r4, #0]
 8001832:	685a      	ldr	r2, [r3, #4]
 8001834:	f012 0f01 	tst.w	r2, #1
 8001838:	d103      	bne.n	8001842 <HAL_I2S_Receive_DMA+0xa2>
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 800183a:	685a      	ldr	r2, [r3, #4]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	605a      	str	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8001842:	2000      	movs	r0, #0
 8001844:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 8001848:	e7b7      	b.n	80017ba <HAL_I2S_Receive_DMA+0x1a>
      hi2s->RxXferSize  = (Size << 1U);
 800184a:	0053      	lsls	r3, r2, #1
 800184c:	b29b      	uxth	r3, r3
 800184e:	8603      	strh	r3, [r0, #48]	; 0x30
      hi2s->RxXferCount = (Size << 1U);
 8001850:	8643      	strh	r3, [r0, #50]	; 0x32
 8001852:	e7bf      	b.n	80017d4 <HAL_I2S_Receive_DMA+0x34>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001854:	2300      	movs	r3, #0
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	68cb      	ldr	r3, [r1, #12]
 800185a:	9301      	str	r3, [sp, #4]
 800185c:	688b      	ldr	r3, [r1, #8]
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	e7d4      	b.n	800180e <HAL_I2S_Receive_DMA+0x6e>
    return  HAL_ERROR;
 8001864:	2001      	movs	r0, #1
 8001866:	4770      	bx	lr
 8001868:	2001      	movs	r0, #1
 800186a:	e7a6      	b.n	80017ba <HAL_I2S_Receive_DMA+0x1a>
    __HAL_LOCK(hi2s);
 800186c:	2002      	movs	r0, #2
 800186e:	e7a4      	b.n	80017ba <HAL_I2S_Receive_DMA+0x1a>
 8001870:	080018b7 	.word	0x080018b7
 8001874:	080018fb 	.word	0x080018fb
 8001878:	08001b91 	.word	0x08001b91

0800187c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800187c:	b508      	push	{r3, lr}
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800187e:	6802      	ldr	r2, [r0, #0]
 8001880:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001882:	1c99      	adds	r1, r3, #2
 8001884:	6241      	str	r1, [r0, #36]	; 0x24
 8001886:	881b      	ldrh	r3, [r3, #0]
 8001888:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 800188a:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800188c:	b29b      	uxth	r3, r3
 800188e:	3b01      	subs	r3, #1
 8001890:	b29b      	uxth	r3, r3
 8001892:	8543      	strh	r3, [r0, #42]	; 0x2a

  if(hi2s->TxXferCount == 0U)
 8001894:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001896:	b29b      	uxth	r3, r3
 8001898:	b103      	cbz	r3, 800189c <I2S_Transmit_IT+0x20>
 800189a:	bd08      	pop	{r3, pc}
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800189c:	6802      	ldr	r2, [r0, #0]
 800189e:	6853      	ldr	r3, [r2, #4]
 80018a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80018a4:	041b      	lsls	r3, r3, #16
 80018a6:	0c1b      	lsrs	r3, r3, #16
 80018a8:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 80018b0:	f002 faec 	bl	8003e8c <HAL_I2S_TxCpltCallback>
  }
}
 80018b4:	e7f1      	b.n	800189a <I2S_Transmit_IT+0x1e>

080018b6 <I2S_DMARxHalfCplt>:
{
 80018b6:	b508      	push	{r3, lr}
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80018b8:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80018ba:	f002 fbf3 	bl	80040a4 <HAL_I2S_RxHalfCpltCallback>
 80018be:	bd08      	pop	{r3, pc}

080018c0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80018c0:	b508      	push	{r3, lr}
  /* Receive data */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80018c2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80018c4:	1c9a      	adds	r2, r3, #2
 80018c6:	62c2      	str	r2, [r0, #44]	; 0x2c
 80018c8:	6802      	ldr	r2, [r0, #0]
 80018ca:	68d2      	ldr	r2, [r2, #12]
 80018cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80018ce:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018d0:	b29b      	uxth	r3, r3
 80018d2:	3b01      	subs	r3, #1
 80018d4:	b29b      	uxth	r3, r3
 80018d6:	8643      	strh	r3, [r0, #50]	; 0x32

  if(hi2s->RxXferCount == 0U)
 80018d8:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80018da:	b29b      	uxth	r3, r3
 80018dc:	b103      	cbz	r3, 80018e0 <I2S_Receive_IT+0x20>
 80018de:	bd08      	pop	{r3, pc}
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80018e0:	6802      	ldr	r2, [r0, #0]
 80018e2:	6853      	ldr	r3, [r2, #4]
 80018e4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 80018e8:	041b      	lsls	r3, r3, #16
 80018ea:	0c1b      	lsrs	r3, r3, #16
 80018ec:	6053      	str	r3, [r2, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 80018f4:	f002 fbd2 	bl	800409c <HAL_I2S_RxCpltCallback>
  }
}
 80018f8:	e7f1      	b.n	80018de <I2S_Receive_IT+0x1e>

080018fa <I2S_DMARxCplt>:
{
 80018fa:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018fc:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80018fe:	6802      	ldr	r2, [r0, #0]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001906:	d109      	bne.n	800191c <I2S_DMARxCplt+0x22>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8001908:	6819      	ldr	r1, [r3, #0]
 800190a:	684a      	ldr	r2, [r1, #4]
 800190c:	f022 0201 	bic.w	r2, r2, #1
 8001910:	604a      	str	r2, [r1, #4]
    hi2s->RxXferCount = 0U;
 8001912:	2200      	movs	r2, #0
 8001914:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State       = HAL_I2S_STATE_READY;
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 800191c:	4618      	mov	r0, r3
 800191e:	f002 fbbd 	bl	800409c <HAL_I2S_RxCpltCallback>
 8001922:	bd08      	pop	{r3, pc}

08001924 <HAL_I2S_Init>:
  if(hi2s == NULL)
 8001924:	2800      	cmp	r0, #0
 8001926:	f000 80ba 	beq.w	8001a9e <HAL_I2S_Init+0x17a>
{
 800192a:	b570      	push	{r4, r5, r6, lr}
 800192c:	4604      	mov	r4, r0
  hi2s->State = HAL_I2S_STATE_BUSY;
 800192e:	2502      	movs	r5, #2
 8001930:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001934:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_I2S_Init+0x180>)
 8001936:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 8001938:	f002 fbfe 	bl	8004138 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800193c:	6822      	ldr	r2, [r4, #0]
 800193e:	69d3      	ldr	r3, [r2, #28]
 8001940:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001944:	f023 030f 	bic.w	r3, r3, #15
 8001948:	61d3      	str	r3, [r2, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 800194a:	6823      	ldr	r3, [r4, #0]
 800194c:	621d      	str	r5, [r3, #32]
  tmpreg = hi2s->Instance->I2SCFGR;
 800194e:	6823      	ldr	r3, [r4, #0]
 8001950:	69dd      	ldr	r5, [r3, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001952:	6963      	ldr	r3, [r4, #20]
 8001954:	2b02      	cmp	r3, #2
 8001956:	d05b      	beq.n	8001a10 <HAL_I2S_Init+0xec>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001958:	68e3      	ldr	r3, [r4, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d03e      	beq.n	80019dc <HAL_I2S_Init+0xb8>
      packetlength = 32U;
 800195e:	2620      	movs	r6, #32
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001960:	68a3      	ldr	r3, [r4, #8]
 8001962:	2b20      	cmp	r3, #32
 8001964:	d800      	bhi.n	8001968 <HAL_I2S_Init+0x44>
      packetlength = packetlength * 2U;
 8001966:	0076      	lsls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001968:	2001      	movs	r0, #1
 800196a:	f000 fe63 	bl	8002634 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800196e:	6923      	ldr	r3, [r4, #16]
 8001970:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001974:	d034      	beq.n	80019e0 <HAL_I2S_Init+0xbc>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001976:	fbb0 f0f6 	udiv	r0, r0, r6
 800197a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 800197e:	0043      	lsls	r3, r0, #1
 8001980:	6962      	ldr	r2, [r4, #20]
 8001982:	fbb3 f3f2 	udiv	r3, r3, r2
 8001986:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001988:	4a47      	ldr	r2, [pc, #284]	; (8001aa8 <HAL_I2S_Init+0x184>)
 800198a:	fba2 2303 	umull	r2, r3, r2, r3
 800198e:	08db      	lsrs	r3, r3, #3
    i2sodd = (uint16_t)(tmp & (uint16_t)1U);
 8001990:	f003 0201 	and.w	r2, r3, #1
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 8001994:	1a9b      	subs	r3, r3, r2
 8001996:	f3c3 034f 	ubfx	r3, r3, #1, #16
    i2sodd = (uint32_t) (i2sodd << 8U);
 800199a:	0212      	lsls	r2, r2, #8
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800199c:	1e99      	subs	r1, r3, #2
 800199e:	29fd      	cmp	r1, #253	; 0xfd
 80019a0:	d838      	bhi.n	8001a14 <HAL_I2S_Init+0xf0>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80019a2:	6821      	ldr	r1, [r4, #0]
 80019a4:	6920      	ldr	r0, [r4, #16]
 80019a6:	4302      	orrs	r2, r0
 80019a8:	4313      	orrs	r3, r2
 80019aa:	620b      	str	r3, [r1, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 80019ac:	6862      	ldr	r2, [r4, #4]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80019ae:	68a1      	ldr	r1, [r4, #8]
 80019b0:	68e0      	ldr	r0, [r4, #12]
                       (uint16_t)hi2s->Init.CPOL))));
 80019b2:	8b23      	ldrh	r3, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80019b4:	4303      	orrs	r3, r0
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	430b      	orrs	r3, r1
 80019ba:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 80019bc:	4313      	orrs	r3, r2
 80019be:	b29b      	uxth	r3, r3
 80019c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019c4:	431d      	orrs	r5, r3
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 80019c6:	6823      	ldr	r3, [r4, #0]
 80019c8:	61dd      	str	r5, [r3, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80019ca:	6a23      	ldr	r3, [r4, #32]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d02a      	beq.n	8001a26 <HAL_I2S_Init+0x102>
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80019d0:	2000      	movs	r0, #0
 80019d2:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80019d4:	2301      	movs	r3, #1
 80019d6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80019da:	bd70      	pop	{r4, r5, r6, pc}
      packetlength = 16U;
 80019dc:	2610      	movs	r6, #16
 80019de:	e7bf      	b.n	8001960 <HAL_I2S_Init+0x3c>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80019e0:	68e3      	ldr	r3, [r4, #12]
 80019e2:	b153      	cbz	r3, 80019fa <HAL_I2S_Init+0xd6>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80019e4:	00b6      	lsls	r6, r6, #2
 80019e6:	fbb0 f0f6 	udiv	r0, r0, r6
 80019ea:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 80019ee:	0043      	lsls	r3, r0, #1
 80019f0:	6962      	ldr	r2, [r4, #20]
 80019f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80019f6:	3305      	adds	r3, #5
 80019f8:	e7c6      	b.n	8001988 <HAL_I2S_Init+0x64>
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 80019fa:	00f6      	lsls	r6, r6, #3
 80019fc:	fbb0 f0f6 	udiv	r0, r0, r6
 8001a00:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8001a04:	0043      	lsls	r3, r0, #1
 8001a06:	6962      	ldr	r2, [r4, #20]
 8001a08:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a0c:	3305      	adds	r3, #5
 8001a0e:	e7bb      	b.n	8001988 <HAL_I2S_Init+0x64>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 8001a10:	2200      	movs	r2, #0
 8001a12:	e7c3      	b.n	800199c <HAL_I2S_Init+0x78>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001a14:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a16:	f043 0310 	orr.w	r3, r3, #16
 8001a1a:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8001a1c:	4620      	mov	r0, r4
 8001a1e:	f002 fb45 	bl	80040ac <HAL_I2S_ErrorCallback>
    return  HAL_ERROR;
 8001a22:	2001      	movs	r0, #1
 8001a24:	bd70      	pop	{r4, r5, r6, pc}
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001a26:	4b21      	ldr	r3, [pc, #132]	; (8001aac <HAL_I2S_Init+0x188>)
 8001a28:	6363      	str	r3, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a2a:	6822      	ldr	r2, [r4, #0]
 8001a2c:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_I2S_Init+0x18c>)
 8001a2e:	429a      	cmp	r2, r3
 8001a30:	d02a      	beq.n	8001a88 <HAL_I2S_Init+0x164>
 8001a32:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a36:	69d3      	ldr	r3, [r2, #28]
 8001a38:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001a3c:	f023 030f 	bic.w	r3, r3, #15
 8001a40:	61d3      	str	r3, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a42:	6822      	ldr	r2, [r4, #0]
 8001a44:	4b1a      	ldr	r3, [pc, #104]	; (8001ab0 <HAL_I2S_Init+0x18c>)
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d020      	beq.n	8001a8c <HAL_I2S_Init+0x168>
 8001a4a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001a4e:	2302      	movs	r3, #2
 8001a50:	6213      	str	r3, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a52:	6822      	ldr	r2, [r4, #0]
 8001a54:	4b16      	ldr	r3, [pc, #88]	; (8001ab0 <HAL_I2S_Init+0x18c>)
 8001a56:	429a      	cmp	r2, r3
 8001a58:	d01a      	beq.n	8001a90 <HAL_I2S_Init+0x16c>
 8001a5a:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8001a5e:	69ca      	ldr	r2, [r1, #28]
    if((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001a60:	6863      	ldr	r3, [r4, #4]
 8001a62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a66:	d015      	beq.n	8001a94 <HAL_I2S_Init+0x170>
 8001a68:	b9bb      	cbnz	r3, 8001a9a <HAL_I2S_Init+0x176>
      tmp = I2S_MODE_SLAVE_RX;
 8001a6a:	f44f 7680 	mov.w	r6, #256	; 0x100
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001a6e:	68a0      	ldr	r0, [r4, #8]
 8001a70:	68e5      	ldr	r5, [r4, #12]
                         (uint16_t)hi2s->Init.CPOL))));
 8001a72:	8b23      	ldrh	r3, [r4, #24]
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001a74:	432b      	orrs	r3, r5
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	4303      	orrs	r3, r0
 8001a7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8001a7c:	4333      	orrs	r3, r6
 8001a7e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a82:	4313      	orrs	r3, r2
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 8001a84:	61cb      	str	r3, [r1, #28]
 8001a86:	e7a3      	b.n	80019d0 <HAL_I2S_Init+0xac>
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001a88:	4a0a      	ldr	r2, [pc, #40]	; (8001ab4 <HAL_I2S_Init+0x190>)
 8001a8a:	e7d4      	b.n	8001a36 <HAL_I2S_Init+0x112>
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001a8c:	4a09      	ldr	r2, [pc, #36]	; (8001ab4 <HAL_I2S_Init+0x190>)
 8001a8e:	e7de      	b.n	8001a4e <HAL_I2S_Init+0x12a>
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001a90:	4908      	ldr	r1, [pc, #32]	; (8001ab4 <HAL_I2S_Init+0x190>)
 8001a92:	e7e4      	b.n	8001a5e <HAL_I2S_Init+0x13a>
      tmp = I2S_MODE_SLAVE_RX;
 8001a94:	f44f 7680 	mov.w	r6, #256	; 0x100
 8001a98:	e7e9      	b.n	8001a6e <HAL_I2S_Init+0x14a>
      tmp = I2S_MODE_SLAVE_TX;
 8001a9a:	2600      	movs	r6, #0
 8001a9c:	e7e7      	b.n	8001a6e <HAL_I2S_Init+0x14a>
    return HAL_ERROR;
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	4770      	bx	lr
 8001aa2:	bf00      	nop
 8001aa4:	08001ab9 	.word	0x08001ab9
 8001aa8:	cccccccd 	.word	0xcccccccd
 8001aac:	08001d09 	.word	0x08001d09
 8001ab0:	40003800 	.word	0x40003800
 8001ab4:	40003400 	.word	0x40003400

08001ab8 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8001ab8:	b510      	push	{r4, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	4604      	mov	r4, r0
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8001abe:	6802      	ldr	r2, [r0, #0]
 8001ac0:	6893      	ldr	r3, [r2, #8]
 8001ac2:	9303      	str	r3, [sp, #12]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8001ac4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d006      	beq.n	8001adc <I2S_IRQHandler+0x24>
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
      HAL_I2S_ErrorCallback(hi2s);
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001ace:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b03      	cmp	r3, #3
 8001ad6:	d02e      	beq.n	8001b36 <I2S_IRQHandler+0x7e>
      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
      HAL_I2S_ErrorCallback(hi2s);
    }
  }
}
 8001ad8:	b004      	add	sp, #16
 8001ada:	bd10      	pop	{r4, pc}
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001adc:	9b03      	ldr	r3, [sp, #12]
 8001ade:	f013 0f01 	tst.w	r3, #1
 8001ae2:	d003      	beq.n	8001aec <I2S_IRQHandler+0x34>
 8001ae4:	6853      	ldr	r3, [r2, #4]
 8001ae6:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001aea:	d121      	bne.n	8001b30 <I2S_IRQHandler+0x78>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001aec:	9b03      	ldr	r3, [sp, #12]
 8001aee:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001af2:	d0ec      	beq.n	8001ace <I2S_IRQHandler+0x16>
 8001af4:	6823      	ldr	r3, [r4, #0]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	f012 0f20 	tst.w	r2, #32
 8001afc:	d0e7      	beq.n	8001ace <I2S_IRQHandler+0x16>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b04:	0412      	lsls	r2, r2, #16
 8001b06:	0c12      	lsrs	r2, r2, #16
 8001b08:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	9201      	str	r2, [sp, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	9301      	str	r3, [sp, #4]
 8001b18:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b28:	4620      	mov	r0, r4
 8001b2a:	f002 fabf 	bl	80040ac <HAL_I2S_ErrorCallback>
 8001b2e:	e7ce      	b.n	8001ace <I2S_IRQHandler+0x16>
      I2S_Receive_IT(hi2s);
 8001b30:	f7ff fec6 	bl	80018c0 <I2S_Receive_IT>
 8001b34:	e7da      	b.n	8001aec <I2S_IRQHandler+0x34>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001b36:	9b03      	ldr	r3, [sp, #12]
 8001b38:	f013 0f02 	tst.w	r3, #2
 8001b3c:	d004      	beq.n	8001b48 <I2S_IRQHandler+0x90>
 8001b3e:	6823      	ldr	r3, [r4, #0]
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b46:	d11f      	bne.n	8001b88 <I2S_IRQHandler+0xd0>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b48:	9b03      	ldr	r3, [sp, #12]
 8001b4a:	f013 0f08 	tst.w	r3, #8
 8001b4e:	d0c3      	beq.n	8001ad8 <I2S_IRQHandler+0x20>
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	f012 0f20 	tst.w	r2, #32
 8001b58:	d0be      	beq.n	8001ad8 <I2S_IRQHandler+0x20>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b5a:	685a      	ldr	r2, [r3, #4]
 8001b5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b60:	0412      	lsls	r2, r2, #16
 8001b62:	0c12      	lsrs	r2, r2, #16
 8001b64:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001b66:	2300      	movs	r3, #0
 8001b68:	9302      	str	r3, [sp, #8]
 8001b6a:	6823      	ldr	r3, [r4, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	9302      	str	r3, [sp, #8]
 8001b70:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b72:	2301      	movs	r3, #1
 8001b74:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8001b78:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b80:	4620      	mov	r0, r4
 8001b82:	f002 fa93 	bl	80040ac <HAL_I2S_ErrorCallback>
}
 8001b86:	e7a7      	b.n	8001ad8 <I2S_IRQHandler+0x20>
        I2S_Transmit_IT(hi2s);
 8001b88:	4620      	mov	r0, r4
 8001b8a:	f7ff fe77 	bl	800187c <I2S_Transmit_IT>
 8001b8e:	e7db      	b.n	8001b48 <I2S_IRQHandler+0x90>

08001b90 <I2S_DMAError>:
{
 8001b90:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001b92:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8001b94:	6802      	ldr	r2, [r0, #0]
 8001b96:	6853      	ldr	r3, [r2, #4]
 8001b98:	f023 0303 	bic.w	r3, r3, #3
 8001b9c:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8001ba2:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 8001baa:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8001bac:	f043 0308 	orr.w	r3, r3, #8
 8001bb0:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8001bb2:	f002 fa7b 	bl	80040ac <HAL_I2S_ErrorCallback>
 8001bb6:	bd08      	pop	{r3, pc}

08001bb8 <HAL_I2S_GetState>:
  return hi2s->State;
 8001bb8:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001bbc:	4770      	bx	lr

08001bbe <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001bbe:	4770      	bx	lr

08001bc0 <I2SEx_FullDuplexTx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8001bc0:	b508      	push	{r3, lr}
  if(i2sUsed == I2S_USE_I2S)
 8001bc2:	b9f1      	cbnz	r1, 8001c02 <I2SEx_FullDuplexTx_IT+0x42>
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001bc4:	6802      	ldr	r2, [r0, #0]
 8001bc6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001bc8:	1c99      	adds	r1, r3, #2
 8001bca:	6241      	str	r1, [r0, #36]	; 0x24
 8001bcc:	881b      	ldrh	r3, [r3, #0]
 8001bce:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001bd0:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	3b01      	subs	r3, #1
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8543      	strh	r3, [r0, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8001bda:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b94b      	cbnz	r3, 8001bf4 <I2SEx_FullDuplexTx_IT+0x34>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001be0:	6802      	ldr	r2, [r0, #0]
 8001be2:	6853      	ldr	r3, [r2, #4]
 8001be4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001be8:	041b      	lsls	r3, r3, #16
 8001bea:	0c1b      	lsrs	r3, r3, #16
 8001bec:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 8001bee:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	b103      	cbz	r3, 8001bf6 <I2SEx_FullDuplexTx_IT+0x36>
 8001bf4:	bd08      	pop	{r3, pc}
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001bfc:	f7ff ffdf 	bl	8001bbe <HAL_I2SEx_TxRxCpltCallback>
 8001c00:	bd08      	pop	{r3, pc}
    }
  }
  else
  {
    /* Write Data on DR register */
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c02:	6802      	ldr	r2, [r0, #0]
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <I2SEx_FullDuplexTx_IT+0x9c>)
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d023      	beq.n	8001c52 <I2SEx_FullDuplexTx_IT+0x92>
 8001c0a:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c0e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c10:	1c99      	adds	r1, r3, #2
 8001c12:	6241      	str	r1, [r0, #36]	; 0x24
 8001c14:	881b      	ldrh	r3, [r3, #0]
 8001c16:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001c18:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c1a:	b29b      	uxth	r3, r3
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	8543      	strh	r3, [r0, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 8001c22:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1e4      	bne.n	8001bf4 <I2SEx_FullDuplexTx_IT+0x34>
    {
      /* Disable I2Sext TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c2a:	6802      	ldr	r2, [r0, #0]
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <I2SEx_FullDuplexTx_IT+0x9c>)
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d011      	beq.n	8001c56 <I2SEx_FullDuplexTx_IT+0x96>
 8001c32:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001c36:	6853      	ldr	r3, [r2, #4]
 8001c38:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001c3c:	6053      	str	r3, [r2, #4]

      if(hi2s->RxXferCount == 0U)
 8001c3e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c40:	b29b      	uxth	r3, r3
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1d6      	bne.n	8001bf4 <I2SEx_FullDuplexTx_IT+0x34>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001c4c:	f7ff ffb7 	bl	8001bbe <HAL_I2SEx_TxRxCpltCallback>
      }
    }
  }
}
 8001c50:	e7d0      	b.n	8001bf4 <I2SEx_FullDuplexTx_IT+0x34>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001c52:	4a03      	ldr	r2, [pc, #12]	; (8001c60 <I2SEx_FullDuplexTx_IT+0xa0>)
 8001c54:	e7db      	b.n	8001c0e <I2SEx_FullDuplexTx_IT+0x4e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001c56:	4a02      	ldr	r2, [pc, #8]	; (8001c60 <I2SEx_FullDuplexTx_IT+0xa0>)
 8001c58:	e7ed      	b.n	8001c36 <I2SEx_FullDuplexTx_IT+0x76>
 8001c5a:	bf00      	nop
 8001c5c:	40003800 	.word	0x40003800
 8001c60:	40003400 	.word	0x40003400

08001c64 <I2SEx_FullDuplexRx_IT>:
  * @param hi2s I2S handle
  * @param i2sUsed indicate if I2Sx or I2Sx_ext is concerned
  * @retval None
  */
static void I2SEx_FullDuplexRx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
 8001c64:	b508      	push	{r3, lr}
  if(i2sUsed == I2S_USE_I2S)
 8001c66:	b9f1      	cbnz	r1, 8001ca6 <I2SEx_FullDuplexRx_IT+0x42>
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001c68:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001c6a:	1c9a      	adds	r2, r3, #2
 8001c6c:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001c6e:	6802      	ldr	r2, [r0, #0]
 8001c70:	68d2      	ldr	r2, [r2, #12]
 8001c72:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8001c74:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	3b01      	subs	r3, #1
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	8643      	strh	r3, [r0, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8001c7e:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001c80:	b29b      	uxth	r3, r3
 8001c82:	b94b      	cbnz	r3, 8001c98 <I2SEx_FullDuplexRx_IT+0x34>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001c84:	6802      	ldr	r2, [r0, #0]
 8001c86:	6853      	ldr	r3, [r2, #4]
 8001c88:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001c8c:	041b      	lsls	r3, r3, #16
 8001c8e:	0c1b      	lsrs	r3, r3, #16
 8001c90:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 8001c92:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	b103      	cbz	r3, 8001c9a <I2SEx_FullDuplexRx_IT+0x36>
 8001c98:	bd08      	pop	{r3, pc}
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ca0:	f7ff ff8d 	bl	8001bbe <HAL_I2SEx_TxRxCpltCallback>
 8001ca4:	bd08      	pop	{r3, pc}
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001ca6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001ca8:	1c9a      	adds	r2, r3, #2
 8001caa:	62c2      	str	r2, [r0, #44]	; 0x2c
 8001cac:	6801      	ldr	r1, [r0, #0]
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <I2SEx_FullDuplexRx_IT+0x9c>)
 8001cb0:	4291      	cmp	r1, r2
 8001cb2:	d020      	beq.n	8001cf6 <I2SEx_FullDuplexRx_IT+0x92>
 8001cb4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cb8:	68d2      	ldr	r2, [r2, #12]
 8001cba:	801a      	strh	r2, [r3, #0]
    hi2s->RxXferCount--;
 8001cbc:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8643      	strh	r3, [r0, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 8001cc6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d1e4      	bne.n	8001c98 <I2SEx_FullDuplexRx_IT+0x34>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cce:	6802      	ldr	r2, [r0, #0]
 8001cd0:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <I2SEx_FullDuplexRx_IT+0x9c>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d012      	beq.n	8001cfc <I2SEx_FullDuplexRx_IT+0x98>
 8001cd6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001cda:	6853      	ldr	r3, [r2, #4]
 8001cdc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001ce0:	6053      	str	r3, [r2, #4]

      if(hi2s->TxXferCount == 0U)
 8001ce2:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1d6      	bne.n	8001c98 <I2SEx_FullDuplexRx_IT+0x34>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001cea:	2301      	movs	r3, #1
 8001cec:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001cf0:	f7ff ff65 	bl	8001bbe <HAL_I2SEx_TxRxCpltCallback>
      }
    }
  }
}
 8001cf4:	e7d0      	b.n	8001c98 <I2SEx_FullDuplexRx_IT+0x34>
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001cf6:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8001cfa:	e7dd      	b.n	8001cb8 <I2SEx_FullDuplexRx_IT+0x54>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001cfc:	4a01      	ldr	r2, [pc, #4]	; (8001d04 <I2SEx_FullDuplexRx_IT+0xa0>)
 8001cfe:	e7ec      	b.n	8001cda <I2SEx_FullDuplexRx_IT+0x76>
 8001d00:	40003800 	.word	0x40003800
 8001d04:	40003400 	.word	0x40003400

08001d08 <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 8001d08:	b510      	push	{r4, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	4604      	mov	r4, r0
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001d0e:	6803      	ldr	r3, [r0, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	9203      	str	r2, [sp, #12]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001d14:	4a7c      	ldr	r2, [pc, #496]	; (8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d05d      	beq.n	8001dd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xce>
 8001d1a:	f04f 2140 	mov.w	r1, #1073758208	; 0x40004000
 8001d1e:	688a      	ldr	r2, [r1, #8]
 8001d20:	9202      	str	r2, [sp, #8]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8001d22:	69da      	ldr	r2, [r3, #28]
 8001d24:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001d28:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 8001d2c:	d004      	beq.n	8001d38 <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	f412 7f40 	tst.w	r2, #768	; 0x300
 8001d34:	f040 8081 	bne.w	8001e3a <HAL_I2SEx_FullDuplex_IRQHandler+0x132>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001d38:	9a03      	ldr	r2, [sp, #12]
 8001d3a:	f012 0f02 	tst.w	r2, #2
 8001d3e:	d003      	beq.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001d46:	d148      	bne.n	8001dda <HAL_I2SEx_FullDuplex_IRQHandler+0xd2>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001d48:	9b02      	ldr	r3, [sp, #8]
 8001d4a:	f013 0f01 	tst.w	r3, #1
 8001d4e:	d009      	beq.n	8001d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x5c>
 8001d50:	6822      	ldr	r2, [r4, #0]
 8001d52:	4b6d      	ldr	r3, [pc, #436]	; (8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d045      	beq.n	8001de4 <HAL_I2SEx_FullDuplex_IRQHandler+0xdc>
 8001d58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d62:	d142      	bne.n	8001dea <HAL_I2SEx_FullDuplex_IRQHandler+0xe2>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d64:	9b02      	ldr	r3, [sp, #8]
 8001d66:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001d6a:	d009      	beq.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x78>
 8001d6c:	6822      	ldr	r2, [r4, #0]
 8001d6e:	4b66      	ldr	r3, [pc, #408]	; (8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8001d70:	429a      	cmp	r2, r3
 8001d72:	d03f      	beq.n	8001df4 <HAL_I2SEx_FullDuplex_IRQHandler+0xec>
 8001d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	f012 0f20 	tst.w	r2, #32
 8001d7e:	d13c      	bne.n	8001dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xf2>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001d80:	9b03      	ldr	r3, [sp, #12]
 8001d82:	f013 0f08 	tst.w	r3, #8
 8001d86:	d024      	beq.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
 8001d88:	6823      	ldr	r3, [r4, #0]
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	f012 0f20 	tst.w	r2, #32
 8001d90:	d01f      	beq.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001d98:	0412      	lsls	r2, r2, #16
 8001d9a:	0c12      	lsrs	r2, r2, #16
 8001d9c:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d047      	beq.n	8001e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x12e>
 8001da6:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001daa:	6853      	ldr	r3, [r2, #4]
 8001dac:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001db0:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001db2:	2300      	movs	r3, #0
 8001db4:	9301      	str	r3, [sp, #4]
 8001db6:	6823      	ldr	r3, [r4, #0]
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	9301      	str	r3, [sp, #4]
 8001dbc:	9b01      	ldr	r3, [sp, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8001dc4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f002 f96d 	bl	80040ac <HAL_I2S_ErrorCallback>
}
 8001dd2:	b004      	add	sp, #16
 8001dd4:	bd10      	pop	{r4, pc}
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001dd6:	494d      	ldr	r1, [pc, #308]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>)
 8001dd8:	e7a1      	b.n	8001d1e <HAL_I2SEx_FullDuplex_IRQHandler+0x16>
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2S);
 8001dda:	2100      	movs	r1, #0
 8001ddc:	4620      	mov	r0, r4
 8001dde:	f7ff feef 	bl	8001bc0 <I2SEx_FullDuplexTx_IT>
 8001de2:	e7b1      	b.n	8001d48 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001de4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001de8:	e7b8      	b.n	8001d5c <HAL_I2SEx_FullDuplex_IRQHandler+0x54>
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2SEXT);
 8001dea:	2101      	movs	r1, #1
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff ff39 	bl	8001c64 <I2SEx_FullDuplexRx_IT>
 8001df2:	e7b7      	b.n	8001d64 <HAL_I2SEx_FullDuplex_IRQHandler+0x5c>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001df4:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001df8:	e7be      	b.n	8001d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x70>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e00:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e02:	6822      	ldr	r2, [r4, #0]
 8001e04:	6853      	ldr	r3, [r2, #4]
 8001e06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e0a:	041b      	lsls	r3, r3, #16
 8001e0c:	0c1b      	lsrs	r3, r3, #16
 8001e0e:	6053      	str	r3, [r2, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001e10:	2300      	movs	r3, #0
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	6823      	ldr	r3, [r4, #0]
 8001e16:	68da      	ldr	r2, [r3, #12]
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	9b00      	ldr	r3, [sp, #0]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e20:	2301      	movs	r3, #1
 8001e22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001e26:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e28:	f043 0302 	orr.w	r3, r3, #2
 8001e2c:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e2e:	4620      	mov	r0, r4
 8001e30:	f002 f93c 	bl	80040ac <HAL_I2S_ErrorCallback>
 8001e34:	e7a4      	b.n	8001d80 <HAL_I2SEx_FullDuplex_IRQHandler+0x78>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e36:	4a35      	ldr	r2, [pc, #212]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>)
 8001e38:	e7b7      	b.n	8001daa <HAL_I2SEx_FullDuplex_IRQHandler+0xa2>
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001e3a:	9b02      	ldr	r3, [sp, #8]
 8001e3c:	f013 0f02 	tst.w	r3, #2
 8001e40:	d003      	beq.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8001e42:	684b      	ldr	r3, [r1, #4]
 8001e44:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001e48:	d14f      	bne.n	8001eea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e2>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001e4a:	9b03      	ldr	r3, [sp, #12]
 8001e4c:	f013 0f01 	tst.w	r3, #1
 8001e50:	d004      	beq.n	8001e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 8001e52:	6823      	ldr	r3, [r4, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e5a:	d14b      	bne.n	8001ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ec>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001e5c:	9b03      	ldr	r3, [sp, #12]
 8001e5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001e62:	d01e      	beq.n	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8001e64:	6823      	ldr	r3, [r4, #0]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	f012 0f20 	tst.w	r2, #32
 8001e6c:	d019      	beq.n	8001ea2 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001e6e:	685a      	ldr	r2, [r3, #4]
 8001e70:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e74:	0412      	lsls	r2, r2, #16
 8001e76:	0c12      	lsrs	r2, r2, #16
 8001e78:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001e7a:	6822      	ldr	r2, [r4, #0]
 8001e7c:	4b22      	ldr	r3, [pc, #136]	; (8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d03d      	beq.n	8001efe <HAL_I2SEx_FullDuplex_IRQHandler+0x1f6>
 8001e82:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001e86:	6853      	ldr	r3, [r2, #4]
 8001e88:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001e8c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001e94:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e96:	f043 0302 	orr.w	r3, r3, #2
 8001e9a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001e9c:	4620      	mov	r0, r4
 8001e9e:	f002 f905 	bl	80040ac <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001ea2:	9b02      	ldr	r3, [sp, #8]
 8001ea4:	f013 0f08 	tst.w	r3, #8
 8001ea8:	d093      	beq.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
 8001eaa:	6822      	ldr	r2, [r4, #0]
 8001eac:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <HAL_I2SEx_FullDuplex_IRQHandler+0x200>)
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d027      	beq.n	8001f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x1fa>
 8001eb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	f012 0f20 	tst.w	r2, #32
 8001ebc:	d089      	beq.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ec4:	605a      	str	r2, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	6853      	ldr	r3, [r2, #4]
 8001eca:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001ece:	041b      	lsls	r3, r3, #16
 8001ed0:	0c1b      	lsrs	r3, r3, #16
 8001ed2:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8001eda:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001edc:	f043 0304 	orr.w	r3, r3, #4
 8001ee0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f002 f8e2 	bl	80040ac <HAL_I2S_ErrorCallback>
}
 8001ee8:	e773      	b.n	8001dd2 <HAL_I2SEx_FullDuplex_IRQHandler+0xca>
      I2SEx_FullDuplexTx_IT(hi2s, I2S_USE_I2SEXT);
 8001eea:	2101      	movs	r1, #1
 8001eec:	4620      	mov	r0, r4
 8001eee:	f7ff fe67 	bl	8001bc0 <I2SEx_FullDuplexTx_IT>
 8001ef2:	e7aa      	b.n	8001e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
      I2SEx_FullDuplexRx_IT(hi2s, I2S_USE_I2S);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4620      	mov	r0, r4
 8001ef8:	f7ff feb4 	bl	8001c64 <I2SEx_FullDuplexRx_IT>
 8001efc:	e7ae      	b.n	8001e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>)
 8001f00:	e7c1      	b.n	8001e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x17e>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001f02:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8001f06:	e7d6      	b.n	8001eb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1ae>
 8001f08:	40003800 	.word	0x40003800
 8001f0c:	40003400 	.word	0x40003400

08001f10 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f10:	2800      	cmp	r0, #0
 8001f12:	f000 81bb 	beq.w	800228c <HAL_RCC_OscConfig+0x37c>
{
 8001f16:	b570      	push	{r4, r5, r6, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1c:	6803      	ldr	r3, [r0, #0]
 8001f1e:	f013 0f01 	tst.w	r3, #1
 8001f22:	d03b      	beq.n	8001f9c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f24:	4ba7      	ldr	r3, [pc, #668]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001f26:	689b      	ldr	r3, [r3, #8]
 8001f28:	f003 030c 	and.w	r3, r3, #12
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d02c      	beq.n	8001f8a <HAL_RCC_OscConfig+0x7a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f30:	4ba4      	ldr	r3, [pc, #656]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f38:	2b08      	cmp	r3, #8
 8001f3a:	d021      	beq.n	8001f80 <HAL_RCC_OscConfig+0x70>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	6863      	ldr	r3, [r4, #4]
 8001f3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f42:	d04f      	beq.n	8001fe4 <HAL_RCC_OscConfig+0xd4>
 8001f44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f48:	d052      	beq.n	8001ff0 <HAL_RCC_OscConfig+0xe0>
 8001f4a:	4b9e      	ldr	r3, [pc, #632]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f5a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f5c:	6863      	ldr	r3, [r4, #4]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d050      	beq.n	8002004 <HAL_RCC_OscConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f62:	f7ff f84f 	bl	8001004 <HAL_GetTick>
 8001f66:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f68:	4b96      	ldr	r3, [pc, #600]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f70:	d114      	bne.n	8001f9c <HAL_RCC_OscConfig+0x8c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f72:	f7ff f847 	bl	8001004 <HAL_GetTick>
 8001f76:	1b40      	subs	r0, r0, r5
 8001f78:	2864      	cmp	r0, #100	; 0x64
 8001f7a:	d9f5      	bls.n	8001f68 <HAL_RCC_OscConfig+0x58>
          {
            return HAL_TIMEOUT;
 8001f7c:	2003      	movs	r0, #3
 8001f7e:	e18a      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f80:	4b90      	ldr	r3, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001f88:	d0d8      	beq.n	8001f3c <HAL_RCC_OscConfig+0x2c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f8a:	4b8e      	ldr	r3, [pc, #568]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001f92:	d003      	beq.n	8001f9c <HAL_RCC_OscConfig+0x8c>
 8001f94:	6863      	ldr	r3, [r4, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 817a 	beq.w	8002290 <HAL_RCC_OscConfig+0x380>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f013 0f02 	tst.w	r3, #2
 8001fa2:	d055      	beq.n	8002050 <HAL_RCC_OscConfig+0x140>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fa4:	4b87      	ldr	r3, [pc, #540]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f013 0f0c 	tst.w	r3, #12
 8001fac:	d03e      	beq.n	800202c <HAL_RCC_OscConfig+0x11c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b85      	ldr	r3, [pc, #532]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001fb0:	689b      	ldr	r3, [r3, #8]
 8001fb2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb6:	2b08      	cmp	r3, #8
 8001fb8:	d033      	beq.n	8002022 <HAL_RCC_OscConfig+0x112>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fba:	68e3      	ldr	r3, [r4, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d068      	beq.n	8002092 <HAL_RCC_OscConfig+0x182>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4b81      	ldr	r3, [pc, #516]	; (80021c8 <HAL_RCC_OscConfig+0x2b8>)
 8001fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc6:	f7ff f81d 	bl	8001004 <HAL_GetTick>
 8001fca:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fcc:	4b7d      	ldr	r3, [pc, #500]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f013 0f02 	tst.w	r3, #2
 8001fd4:	d154      	bne.n	8002080 <HAL_RCC_OscConfig+0x170>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fd6:	f7ff f815 	bl	8001004 <HAL_GetTick>
 8001fda:	1b40      	subs	r0, r0, r5
 8001fdc:	2802      	cmp	r0, #2
 8001fde:	d9f5      	bls.n	8001fcc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001fe0:	2003      	movs	r0, #3
 8001fe2:	e158      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fe4:	4a77      	ldr	r2, [pc, #476]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001fe6:	6813      	ldr	r3, [r2, #0]
 8001fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fec:	6013      	str	r3, [r2, #0]
 8001fee:	e7b5      	b.n	8001f5c <HAL_RCC_OscConfig+0x4c>
 8001ff0:	4b74      	ldr	r3, [pc, #464]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ff8:	601a      	str	r2, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002000:	601a      	str	r2, [r3, #0]
 8002002:	e7ab      	b.n	8001f5c <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 8002004:	f7fe fffe 	bl	8001004 <HAL_GetTick>
 8002008:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800200a:	4b6e      	ldr	r3, [pc, #440]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002012:	d0c3      	beq.n	8001f9c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002014:	f7fe fff6 	bl	8001004 <HAL_GetTick>
 8002018:	1b40      	subs	r0, r0, r5
 800201a:	2864      	cmp	r0, #100	; 0x64
 800201c:	d9f5      	bls.n	800200a <HAL_RCC_OscConfig+0xfa>
            return HAL_TIMEOUT;
 800201e:	2003      	movs	r0, #3
 8002020:	e139      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002022:	4b68      	ldr	r3, [pc, #416]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 800202a:	d1c6      	bne.n	8001fba <HAL_RCC_OscConfig+0xaa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800202c:	4b65      	ldr	r3, [pc, #404]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f013 0f02 	tst.w	r3, #2
 8002034:	d004      	beq.n	8002040 <HAL_RCC_OscConfig+0x130>
 8002036:	68e3      	ldr	r3, [r4, #12]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d001      	beq.n	8002040 <HAL_RCC_OscConfig+0x130>
        return HAL_ERROR;
 800203c:	2001      	movs	r0, #1
 800203e:	e12a      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4a60      	ldr	r2, [pc, #384]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8002042:	6813      	ldr	r3, [r2, #0]
 8002044:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002048:	6921      	ldr	r1, [r4, #16]
 800204a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800204e:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002050:	6823      	ldr	r3, [r4, #0]
 8002052:	f013 0f08 	tst.w	r3, #8
 8002056:	d040      	beq.n	80020da <HAL_RCC_OscConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002058:	6963      	ldr	r3, [r4, #20]
 800205a:	b363      	cbz	r3, 80020b6 <HAL_RCC_OscConfig+0x1a6>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800205c:	2201      	movs	r2, #1
 800205e:	4b5b      	ldr	r3, [pc, #364]	; (80021cc <HAL_RCC_OscConfig+0x2bc>)
 8002060:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002062:	f7fe ffcf 	bl	8001004 <HAL_GetTick>
 8002066:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002068:	4b56      	ldr	r3, [pc, #344]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 800206a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800206c:	f013 0f02 	tst.w	r3, #2
 8002070:	d133      	bne.n	80020da <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002072:	f7fe ffc7 	bl	8001004 <HAL_GetTick>
 8002076:	1b40      	subs	r0, r0, r5
 8002078:	2802      	cmp	r0, #2
 800207a:	d9f5      	bls.n	8002068 <HAL_RCC_OscConfig+0x158>
        {
          return HAL_TIMEOUT;
 800207c:	2003      	movs	r0, #3
 800207e:	e10a      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002080:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8002082:	6813      	ldr	r3, [r2, #0]
 8002084:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002088:	6921      	ldr	r1, [r4, #16]
 800208a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e7de      	b.n	8002050 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8002092:	2200      	movs	r2, #0
 8002094:	4b4c      	ldr	r3, [pc, #304]	; (80021c8 <HAL_RCC_OscConfig+0x2b8>)
 8002096:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002098:	f7fe ffb4 	bl	8001004 <HAL_GetTick>
 800209c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209e:	4b49      	ldr	r3, [pc, #292]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f013 0f02 	tst.w	r3, #2
 80020a6:	d0d3      	beq.n	8002050 <HAL_RCC_OscConfig+0x140>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe ffac 	bl	8001004 <HAL_GetTick>
 80020ac:	1b40      	subs	r0, r0, r5
 80020ae:	2802      	cmp	r0, #2
 80020b0:	d9f5      	bls.n	800209e <HAL_RCC_OscConfig+0x18e>
            return HAL_TIMEOUT;
 80020b2:	2003      	movs	r0, #3
 80020b4:	e0ef      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020b6:	2200      	movs	r2, #0
 80020b8:	4b44      	ldr	r3, [pc, #272]	; (80021cc <HAL_RCC_OscConfig+0x2bc>)
 80020ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020bc:	f7fe ffa2 	bl	8001004 <HAL_GetTick>
 80020c0:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c2:	4b40      	ldr	r3, [pc, #256]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 80020c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c6:	f013 0f02 	tst.w	r3, #2
 80020ca:	d006      	beq.n	80020da <HAL_RCC_OscConfig+0x1ca>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020cc:	f7fe ff9a 	bl	8001004 <HAL_GetTick>
 80020d0:	1b40      	subs	r0, r0, r5
 80020d2:	2802      	cmp	r0, #2
 80020d4:	d9f5      	bls.n	80020c2 <HAL_RCC_OscConfig+0x1b2>
        {
          return HAL_TIMEOUT;
 80020d6:	2003      	movs	r0, #3
 80020d8:	e0dd      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020da:	6823      	ldr	r3, [r4, #0]
 80020dc:	f013 0f04 	tst.w	r3, #4
 80020e0:	d079      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2c6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b38      	ldr	r3, [pc, #224]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80020ea:	d133      	bne.n	8002154 <HAL_RCC_OscConfig+0x244>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	2300      	movs	r3, #0
 80020ee:	9301      	str	r3, [sp, #4]
 80020f0:	4b34      	ldr	r3, [pc, #208]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 80020f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020f4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40
 80020fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	9301      	str	r3, [sp, #4]
 8002102:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002104:	2501      	movs	r5, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002106:	4b32      	ldr	r3, [pc, #200]	; (80021d0 <HAL_RCC_OscConfig+0x2c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f413 7f80 	tst.w	r3, #256	; 0x100
 800210e:	d023      	beq.n	8002158 <HAL_RCC_OscConfig+0x248>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002110:	68a3      	ldr	r3, [r4, #8]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d034      	beq.n	8002180 <HAL_RCC_OscConfig+0x270>
 8002116:	2b05      	cmp	r3, #5
 8002118:	d038      	beq.n	800218c <HAL_RCC_OscConfig+0x27c>
 800211a:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 800211c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800211e:	f022 0201 	bic.w	r2, r2, #1
 8002122:	671a      	str	r2, [r3, #112]	; 0x70
 8002124:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002126:	f022 0204 	bic.w	r2, r2, #4
 800212a:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800212c:	68a3      	ldr	r3, [r4, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d036      	beq.n	80021a0 <HAL_RCC_OscConfig+0x290>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002132:	f7fe ff67 	bl	8001004 <HAL_GetTick>
 8002136:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	4b22      	ldr	r3, [pc, #136]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 800213a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800213c:	f013 0f02 	tst.w	r3, #2
 8002140:	d148      	bne.n	80021d4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002142:	f7fe ff5f 	bl	8001004 <HAL_GetTick>
 8002146:	1b80      	subs	r0, r0, r6
 8002148:	f241 3388 	movw	r3, #5000	; 0x1388
 800214c:	4298      	cmp	r0, r3
 800214e:	d9f3      	bls.n	8002138 <HAL_RCC_OscConfig+0x228>
        {
          return HAL_TIMEOUT;
 8002150:	2003      	movs	r0, #3
 8002152:	e0a0      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
    FlagStatus       pwrclkchanged = RESET;
 8002154:	2500      	movs	r5, #0
 8002156:	e7d6      	b.n	8002106 <HAL_RCC_OscConfig+0x1f6>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002158:	4a1d      	ldr	r2, [pc, #116]	; (80021d0 <HAL_RCC_OscConfig+0x2c0>)
 800215a:	6813      	ldr	r3, [r2, #0]
 800215c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002160:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002162:	f7fe ff4f 	bl	8001004 <HAL_GetTick>
 8002166:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002168:	4b19      	ldr	r3, [pc, #100]	; (80021d0 <HAL_RCC_OscConfig+0x2c0>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002170:	d1ce      	bne.n	8002110 <HAL_RCC_OscConfig+0x200>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002172:	f7fe ff47 	bl	8001004 <HAL_GetTick>
 8002176:	1b80      	subs	r0, r0, r6
 8002178:	2802      	cmp	r0, #2
 800217a:	d9f5      	bls.n	8002168 <HAL_RCC_OscConfig+0x258>
          return HAL_TIMEOUT;
 800217c:	2003      	movs	r0, #3
 800217e:	e08a      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002180:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 8002182:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6713      	str	r3, [r2, #112]	; 0x70
 800218a:	e7cf      	b.n	800212c <HAL_RCC_OscConfig+0x21c>
 800218c:	4b0d      	ldr	r3, [pc, #52]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 800218e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002190:	f042 0204 	orr.w	r2, r2, #4
 8002194:	671a      	str	r2, [r3, #112]	; 0x70
 8002196:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002198:	f042 0201 	orr.w	r2, r2, #1
 800219c:	671a      	str	r2, [r3, #112]	; 0x70
 800219e:	e7c5      	b.n	800212c <HAL_RCC_OscConfig+0x21c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021a0:	f7fe ff30 	bl	8001004 <HAL_GetTick>
 80021a4:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021a6:	4b07      	ldr	r3, [pc, #28]	; (80021c4 <HAL_RCC_OscConfig+0x2b4>)
 80021a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021aa:	f013 0f02 	tst.w	r3, #2
 80021ae:	d011      	beq.n	80021d4 <HAL_RCC_OscConfig+0x2c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe ff28 	bl	8001004 <HAL_GetTick>
 80021b4:	1b80      	subs	r0, r0, r6
 80021b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80021ba:	4298      	cmp	r0, r3
 80021bc:	d9f3      	bls.n	80021a6 <HAL_RCC_OscConfig+0x296>
        {
          return HAL_TIMEOUT;
 80021be:	2003      	movs	r0, #3
 80021c0:	e069      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
 80021c2:	bf00      	nop
 80021c4:	40023800 	.word	0x40023800
 80021c8:	42470000 	.word	0x42470000
 80021cc:	42470e80 	.word	0x42470e80
 80021d0:	40007000 	.word	0x40007000
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	b9e5      	cbnz	r5, 8002210 <HAL_RCC_OscConfig+0x300>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021d6:	69a3      	ldr	r3, [r4, #24]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d05b      	beq.n	8002294 <HAL_RCC_OscConfig+0x384>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80021dc:	4a30      	ldr	r2, [pc, #192]	; (80022a0 <HAL_RCC_OscConfig+0x390>)
 80021de:	6892      	ldr	r2, [r2, #8]
 80021e0:	f002 020c 	and.w	r2, r2, #12
 80021e4:	2a08      	cmp	r2, #8
 80021e6:	d058      	beq.n	800229a <HAL_RCC_OscConfig+0x38a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d017      	beq.n	800221c <HAL_RCC_OscConfig+0x30c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ec:	2200      	movs	r2, #0
 80021ee:	4b2d      	ldr	r3, [pc, #180]	; (80022a4 <HAL_RCC_OscConfig+0x394>)
 80021f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f2:	f7fe ff07 	bl	8001004 <HAL_GetTick>
 80021f6:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCC_OscConfig+0x390>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002200:	d042      	beq.n	8002288 <HAL_RCC_OscConfig+0x378>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002202:	f7fe feff 	bl	8001004 <HAL_GetTick>
 8002206:	1b00      	subs	r0, r0, r4
 8002208:	2802      	cmp	r0, #2
 800220a:	d9f5      	bls.n	80021f8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 800220c:	2003      	movs	r0, #3
 800220e:	e042      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002210:	4a23      	ldr	r2, [pc, #140]	; (80022a0 <HAL_RCC_OscConfig+0x390>)
 8002212:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	e7dc      	b.n	80021d6 <HAL_RCC_OscConfig+0x2c6>
        __HAL_RCC_PLL_DISABLE();
 800221c:	2200      	movs	r2, #0
 800221e:	4b21      	ldr	r3, [pc, #132]	; (80022a4 <HAL_RCC_OscConfig+0x394>)
 8002220:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002222:	f7fe feef 	bl	8001004 <HAL_GetTick>
 8002226:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_OscConfig+0x390>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002230:	d006      	beq.n	8002240 <HAL_RCC_OscConfig+0x330>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002232:	f7fe fee7 	bl	8001004 <HAL_GetTick>
 8002236:	1b40      	subs	r0, r0, r5
 8002238:	2802      	cmp	r0, #2
 800223a:	d9f5      	bls.n	8002228 <HAL_RCC_OscConfig+0x318>
            return HAL_TIMEOUT;
 800223c:	2003      	movs	r0, #3
 800223e:	e02a      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002240:	69e3      	ldr	r3, [r4, #28]
 8002242:	6a22      	ldr	r2, [r4, #32]
 8002244:	4313      	orrs	r3, r2
 8002246:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002248:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800224c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800224e:	0852      	lsrs	r2, r2, #1
 8002250:	3a01      	subs	r2, #1
 8002252:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002256:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002258:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800225c:	4a10      	ldr	r2, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x390>)
 800225e:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 8002260:	2201      	movs	r2, #1
 8002262:	4b10      	ldr	r3, [pc, #64]	; (80022a4 <HAL_RCC_OscConfig+0x394>)
 8002264:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002266:	f7fe fecd 	bl	8001004 <HAL_GetTick>
 800226a:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800226c:	4b0c      	ldr	r3, [pc, #48]	; (80022a0 <HAL_RCC_OscConfig+0x390>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002274:	d106      	bne.n	8002284 <HAL_RCC_OscConfig+0x374>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002276:	f7fe fec5 	bl	8001004 <HAL_GetTick>
 800227a:	1b00      	subs	r0, r0, r4
 800227c:	2802      	cmp	r0, #2
 800227e:	d9f5      	bls.n	800226c <HAL_RCC_OscConfig+0x35c>
            return HAL_TIMEOUT;
 8002280:	2003      	movs	r0, #3
 8002282:	e008      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
    else
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8002284:	2000      	movs	r0, #0
 8002286:	e006      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
 8002288:	2000      	movs	r0, #0
 800228a:	e004      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
    return HAL_ERROR;
 800228c:	2001      	movs	r0, #1
 800228e:	4770      	bx	lr
        return HAL_ERROR;
 8002290:	2001      	movs	r0, #1
 8002292:	e000      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
  return HAL_OK;
 8002294:	2000      	movs	r0, #0
}
 8002296:	b002      	add	sp, #8
 8002298:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 800229a:	2001      	movs	r0, #1
 800229c:	e7fb      	b.n	8002296 <HAL_RCC_OscConfig+0x386>
 800229e:	bf00      	nop
 80022a0:	40023800 	.word	0x40023800
 80022a4:	42470060 	.word	0x42470060

080022a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022aa:	4b25      	ldr	r3, [pc, #148]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022ac:	689b      	ldr	r3, [r3, #8]
 80022ae:	f003 030c 	and.w	r3, r3, #12
 80022b2:	2b04      	cmp	r3, #4
 80022b4:	d041      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x92>
 80022b6:	2b08      	cmp	r3, #8
 80022b8:	d001      	beq.n	80022be <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022ba:	4822      	ldr	r0, [pc, #136]	; (8002344 <HAL_RCC_GetSysClockFreq+0x9c>)
 80022bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 80022cc:	d012      	beq.n	80022f4 <HAL_RCC_GetSysClockFreq+0x4c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ce:	4b1c      	ldr	r3, [pc, #112]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022d0:	6859      	ldr	r1, [r3, #4]
 80022d2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80022d6:	2300      	movs	r3, #0
 80022d8:	481b      	ldr	r0, [pc, #108]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
 80022da:	fba1 0100 	umull	r0, r1, r1, r0
 80022de:	f7fe fcbd 	bl	8000c5c <__aeabi_uldivmod>
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022e2:	4b17      	ldr	r3, [pc, #92]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80022ea:	3301      	adds	r3, #1
 80022ec:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80022ee:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 80022f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022f4:	4b12      	ldr	r3, [pc, #72]	; (8002340 <HAL_RCC_GetSysClockFreq+0x98>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80022fc:	461e      	mov	r6, r3
 80022fe:	2700      	movs	r7, #0
 8002300:	015c      	lsls	r4, r3, #5
 8002302:	2500      	movs	r5, #0
 8002304:	1ae4      	subs	r4, r4, r3
 8002306:	eb65 0507 	sbc.w	r5, r5, r7
 800230a:	01a9      	lsls	r1, r5, #6
 800230c:	ea41 6194 	orr.w	r1, r1, r4, lsr #26
 8002310:	01a0      	lsls	r0, r4, #6
 8002312:	1b00      	subs	r0, r0, r4
 8002314:	eb61 0105 	sbc.w	r1, r1, r5
 8002318:	00cb      	lsls	r3, r1, #3
 800231a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800231e:	00c4      	lsls	r4, r0, #3
 8002320:	19a0      	adds	r0, r4, r6
 8002322:	eb43 0107 	adc.w	r1, r3, r7
 8002326:	028b      	lsls	r3, r1, #10
 8002328:	ea43 5390 	orr.w	r3, r3, r0, lsr #22
 800232c:	0284      	lsls	r4, r0, #10
 800232e:	4620      	mov	r0, r4
 8002330:	4619      	mov	r1, r3
 8002332:	2300      	movs	r3, #0
 8002334:	f7fe fc92 	bl	8000c5c <__aeabi_uldivmod>
 8002338:	e7d3      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x3a>
      sysclockfreq = HSE_VALUE;
 800233a:	4803      	ldr	r0, [pc, #12]	; (8002348 <HAL_RCC_GetSysClockFreq+0xa0>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800233c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800233e:	bf00      	nop
 8002340:	40023800 	.word	0x40023800
 8002344:	00f42400 	.word	0x00f42400
 8002348:	017d7840 	.word	0x017d7840

0800234c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800234c:	2800      	cmp	r0, #0
 800234e:	f000 809d 	beq.w	800248c <HAL_RCC_ClockConfig+0x140>
{
 8002352:	b570      	push	{r4, r5, r6, lr}
 8002354:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002356:	4b4f      	ldr	r3, [pc, #316]	; (8002494 <HAL_RCC_ClockConfig+0x148>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	428b      	cmp	r3, r1
 8002360:	d209      	bcs.n	8002376 <HAL_RCC_ClockConfig+0x2a>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002362:	b2cb      	uxtb	r3, r1
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <HAL_RCC_ClockConfig+0x148>)
 8002366:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002368:	6813      	ldr	r3, [r2, #0]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	4299      	cmp	r1, r3
 8002370:	d001      	beq.n	8002376 <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
 8002372:	2001      	movs	r0, #1
 8002374:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002376:	6823      	ldr	r3, [r4, #0]
 8002378:	f013 0f02 	tst.w	r3, #2
 800237c:	d017      	beq.n	80023ae <HAL_RCC_ClockConfig+0x62>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800237e:	f013 0f04 	tst.w	r3, #4
 8002382:	d004      	beq.n	800238e <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002384:	4a44      	ldr	r2, [pc, #272]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 8002386:	6893      	ldr	r3, [r2, #8]
 8002388:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800238c:	6093      	str	r3, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800238e:	6823      	ldr	r3, [r4, #0]
 8002390:	f013 0f08 	tst.w	r3, #8
 8002394:	d004      	beq.n	80023a0 <HAL_RCC_ClockConfig+0x54>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002396:	4a40      	ldr	r2, [pc, #256]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 8002398:	6893      	ldr	r3, [r2, #8]
 800239a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800239e:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023a0:	4a3d      	ldr	r2, [pc, #244]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 80023a2:	6893      	ldr	r3, [r2, #8]
 80023a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a8:	68a0      	ldr	r0, [r4, #8]
 80023aa:	4303      	orrs	r3, r0
 80023ac:	6093      	str	r3, [r2, #8]
 80023ae:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023b0:	6823      	ldr	r3, [r4, #0]
 80023b2:	f013 0f01 	tst.w	r3, #1
 80023b6:	d032      	beq.n	800241e <HAL_RCC_ClockConfig+0xd2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b8:	6863      	ldr	r3, [r4, #4]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d021      	beq.n	8002402 <HAL_RCC_ClockConfig+0xb6>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023be:	1e9a      	subs	r2, r3, #2
 80023c0:	2a01      	cmp	r2, #1
 80023c2:	d925      	bls.n	8002410 <HAL_RCC_ClockConfig+0xc4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023c4:	4a34      	ldr	r2, [pc, #208]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 80023c6:	6812      	ldr	r2, [r2, #0]
 80023c8:	f012 0f02 	tst.w	r2, #2
 80023cc:	d060      	beq.n	8002490 <HAL_RCC_ClockConfig+0x144>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4932      	ldr	r1, [pc, #200]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 80023d0:	688a      	ldr	r2, [r1, #8]
 80023d2:	f022 0203 	bic.w	r2, r2, #3
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 80023da:	f7fe fe13 	bl	8001004 <HAL_GetTick>
 80023de:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f003 030c 	and.w	r3, r3, #12
 80023e8:	6862      	ldr	r2, [r4, #4]
 80023ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80023ee:	d016      	beq.n	800241e <HAL_RCC_ClockConfig+0xd2>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f0:	f7fe fe08 	bl	8001004 <HAL_GetTick>
 80023f4:	1b80      	subs	r0, r0, r6
 80023f6:	f241 3388 	movw	r3, #5000	; 0x1388
 80023fa:	4298      	cmp	r0, r3
 80023fc:	d9f0      	bls.n	80023e0 <HAL_RCC_ClockConfig+0x94>
        return HAL_TIMEOUT;
 80023fe:	2003      	movs	r0, #3
 8002400:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002402:	4a25      	ldr	r2, [pc, #148]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 8002404:	6812      	ldr	r2, [r2, #0]
 8002406:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 800240a:	d1e0      	bne.n	80023ce <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800240c:	2001      	movs	r0, #1
 800240e:	bd70      	pop	{r4, r5, r6, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002410:	4a21      	ldr	r2, [pc, #132]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 8002412:	6812      	ldr	r2, [r2, #0]
 8002414:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8002418:	d1d9      	bne.n	80023ce <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 800241a:	2001      	movs	r0, #1
 800241c:	bd70      	pop	{r4, r5, r6, pc}
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800241e:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_ClockConfig+0x148>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	429d      	cmp	r5, r3
 8002428:	d209      	bcs.n	800243e <HAL_RCC_ClockConfig+0xf2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242a:	b2ea      	uxtb	r2, r5
 800242c:	4b19      	ldr	r3, [pc, #100]	; (8002494 <HAL_RCC_ClockConfig+0x148>)
 800242e:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	429d      	cmp	r5, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_ClockConfig+0xf2>
      return HAL_ERROR;
 800243a:	2001      	movs	r0, #1
}
 800243c:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800243e:	6823      	ldr	r3, [r4, #0]
 8002440:	f013 0f04 	tst.w	r3, #4
 8002444:	d006      	beq.n	8002454 <HAL_RCC_ClockConfig+0x108>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002446:	4a14      	ldr	r2, [pc, #80]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 8002448:	6893      	ldr	r3, [r2, #8]
 800244a:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 800244e:	68e1      	ldr	r1, [r4, #12]
 8002450:	430b      	orrs	r3, r1
 8002452:	6093      	str	r3, [r2, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002454:	6823      	ldr	r3, [r4, #0]
 8002456:	f013 0f08 	tst.w	r3, #8
 800245a:	d007      	beq.n	800246c <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800245c:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 800245e:	6893      	ldr	r3, [r2, #8]
 8002460:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002464:	6921      	ldr	r1, [r4, #16]
 8002466:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800246a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800246c:	f7ff ff1c 	bl	80022a8 <HAL_RCC_GetSysClockFreq>
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_ClockConfig+0x14c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002478:	4a08      	ldr	r2, [pc, #32]	; (800249c <HAL_RCC_ClockConfig+0x150>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	40d8      	lsrs	r0, r3
 800247e:	4b08      	ldr	r3, [pc, #32]	; (80024a0 <HAL_RCC_ClockConfig+0x154>)
 8002480:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8002482:	2000      	movs	r0, #0
 8002484:	f7fe fd72 	bl	8000f6c <HAL_InitTick>
  return HAL_OK;
 8002488:	2000      	movs	r0, #0
 800248a:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 800248c:	2001      	movs	r0, #1
 800248e:	4770      	bx	lr
        return HAL_ERROR;
 8002490:	2001      	movs	r0, #1
 8002492:	bd70      	pop	{r4, r5, r6, pc}
 8002494:	40023c00 	.word	0x40023c00
 8002498:	40023800 	.word	0x40023800
 800249c:	0801c658 	.word	0x0801c658
 80024a0:	20000418 	.word	0x20000418

080024a4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80024a4:	4b01      	ldr	r3, [pc, #4]	; (80024ac <HAL_RCC_GetHCLKFreq+0x8>)
 80024a6:	6818      	ldr	r0, [r3, #0]
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000418 	.word	0x20000418

080024b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024b0:	b530      	push	{r4, r5, lr}
 80024b2:	b083      	sub	sp, #12
 80024b4:	4605      	mov	r5, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80024b6:	6803      	ldr	r3, [r0, #0]
 80024b8:	f013 0f05 	tst.w	r3, #5
 80024bc:	d106      	bne.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x1c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80024be:	682b      	ldr	r3, [r5, #0]
 80024c0:	f013 0f02 	tst.w	r3, #2
 80024c4:	d12e      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x74>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80024c6:	2000      	movs	r0, #0
}
 80024c8:	b003      	add	sp, #12
 80024ca:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 80024cc:	2200      	movs	r2, #0
 80024ce:	4b49      	ldr	r3, [pc, #292]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 80024d0:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 80024d2:	f7fe fd97 	bl	8001004 <HAL_GetTick>
 80024d6:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80024d8:	4b47      	ldr	r3, [pc, #284]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80024e0:	d006      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x40>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80024e2:	f7fe fd8f 	bl	8001004 <HAL_GetTick>
 80024e6:	1b00      	subs	r0, r0, r4
 80024e8:	2802      	cmp	r0, #2
 80024ea:	d9f5      	bls.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
        return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e7eb      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80024f0:	686a      	ldr	r2, [r5, #4]
 80024f2:	68ab      	ldr	r3, [r5, #8]
 80024f4:	071b      	lsls	r3, r3, #28
 80024f6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80024fa:	4a3f      	ldr	r2, [pc, #252]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80024fc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8002500:	2201      	movs	r2, #1
 8002502:	4b3c      	ldr	r3, [pc, #240]	; (80025f4 <HAL_RCCEx_PeriphCLKConfig+0x144>)
 8002504:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8002506:	f7fe fd7d 	bl	8001004 <HAL_GetTick>
 800250a:	4604      	mov	r4, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800250c:	4b3a      	ldr	r3, [pc, #232]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 8002514:	d1d3      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0xe>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002516:	f7fe fd75 	bl	8001004 <HAL_GetTick>
 800251a:	1b00      	subs	r0, r0, r4
 800251c:	2802      	cmp	r0, #2
 800251e:	d9f5      	bls.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x5c>
        return HAL_TIMEOUT;
 8002520:	2003      	movs	r0, #3
 8002522:	e7d1      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_PWR_CLK_ENABLE();
 8002524:	2300      	movs	r3, #0
 8002526:	9301      	str	r3, [sp, #4]
 8002528:	4b33      	ldr	r3, [pc, #204]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800252a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800252c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002530:	641a      	str	r2, [r3, #64]	; 0x40
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002538:	9301      	str	r3, [sp, #4]
 800253a:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 800253c:	4a2f      	ldr	r2, [pc, #188]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800253e:	6813      	ldr	r3, [r2, #0]
 8002540:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002544:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002546:	f7fe fd5d 	bl	8001004 <HAL_GetTick>
 800254a:	4604      	mov	r4, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800254c:	4b2b      	ldr	r3, [pc, #172]	; (80025fc <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002554:	d106      	bne.n	8002564 <HAL_RCCEx_PeriphCLKConfig+0xb4>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7fe fd55 	bl	8001004 <HAL_GetTick>
 800255a:	1b00      	subs	r0, r0, r4
 800255c:	2802      	cmp	r0, #2
 800255e:	d9f5      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x9c>
        return HAL_TIMEOUT;
 8002560:	2003      	movs	r0, #3
 8002562:	e7b1      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002564:	4b24      	ldr	r3, [pc, #144]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 8002566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002568:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800256c:	d012      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xe4>
 800256e:	68ea      	ldr	r2, [r5, #12]
 8002570:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002578:	4b1f      	ldr	r3, [pc, #124]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 800257a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800257c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8002580:	491f      	ldr	r1, [pc, #124]	; (8002600 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002582:	2001      	movs	r0, #1
 8002584:	6008      	str	r0, [r1, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002586:	2000      	movs	r0, #0
 8002588:	6008      	str	r0, [r1, #0]
      RCC->BDCR = tmpreg1;
 800258a:	671a      	str	r2, [r3, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800258c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258e:	f013 0f01 	tst.w	r3, #1
 8002592:	d113      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x10c>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002594:	68eb      	ldr	r3, [r5, #12]
 8002596:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800259a:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 800259e:	d01e      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x12e>
 80025a0:	4a15      	ldr	r2, [pc, #84]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025a2:	6893      	ldr	r3, [r2, #8]
 80025a4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80025a8:	6093      	str	r3, [r2, #8]
 80025aa:	4913      	ldr	r1, [pc, #76]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025ac:	6f0b      	ldr	r3, [r1, #112]	; 0x70
 80025ae:	68ea      	ldr	r2, [r5, #12]
 80025b0:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80025b4:	4313      	orrs	r3, r2
 80025b6:	670b      	str	r3, [r1, #112]	; 0x70
  return HAL_OK;
 80025b8:	2000      	movs	r0, #0
 80025ba:	e785      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x18>
        tickstart = HAL_GetTick();
 80025bc:	f7fe fd22 	bl	8001004 <HAL_GetTick>
 80025c0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025c2:	4b0d      	ldr	r3, [pc, #52]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c6:	f013 0f02 	tst.w	r3, #2
 80025ca:	d1e3      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xe4>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025cc:	f7fe fd1a 	bl	8001004 <HAL_GetTick>
 80025d0:	1b00      	subs	r0, r0, r4
 80025d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80025d6:	4298      	cmp	r0, r3
 80025d8:	d9f3      	bls.n	80025c2 <HAL_RCCEx_PeriphCLKConfig+0x112>
            return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
 80025dc:	e774      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x18>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025de:	4906      	ldr	r1, [pc, #24]	; (80025f8 <HAL_RCCEx_PeriphCLKConfig+0x148>)
 80025e0:	688a      	ldr	r2, [r1, #8]
 80025e2:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 80025e6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80025ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025ee:	4313      	orrs	r3, r2
 80025f0:	608b      	str	r3, [r1, #8]
 80025f2:	e7da      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0xfa>
 80025f4:	42470068 	.word	0x42470068
 80025f8:	40023800 	.word	0x40023800
 80025fc:	40007000 	.word	0x40007000
 8002600:	42470e40 	.word	0x42470e40

08002604 <HAL_RCCEx_GetPeriphCLKConfig>:
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8002604:	2303      	movs	r3, #3
 8002606:	6003      	str	r3, [r0, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
 800260a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800260e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002612:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002614:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002618:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800261c:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800261e:	6893      	ldr	r3, [r2, #8]
 8002620:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002624:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002626:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800262a:	4313      	orrs	r3, r2
 800262c:	60c3      	str	r3, [r0, #12]
 800262e:	4770      	bx	lr
 8002630:	40023800 	.word	0x40023800

08002634 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002634:	2801      	cmp	r0, #1
 8002636:	d12a      	bne.n	800268e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002638:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800263a:	689b      	ldr	r3, [r3, #8]
      switch (srcclk)
 800263c:	f413 0300 	ands.w	r3, r3, #8388608	; 0x800000
 8002640:	d003      	beq.n	800264a <HAL_RCCEx_GetPeriphCLKFreq+0x16>
 8002642:	2b01      	cmp	r3, #1
 8002644:	d125      	bne.n	8002692 <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8002646:	4815      	ldr	r0, [pc, #84]	; (800269c <HAL_RCCEx_GetPeriphCLKFreq+0x68>)
 8002648:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8002652:	d014      	beq.n	800267e <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800265c:	4810      	ldr	r0, [pc, #64]	; (80026a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>)
 800265e:	fbb0 f3f3 	udiv	r3, r0, r3
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002662:	4a0d      	ldr	r2, [pc, #52]	; (8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002664:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
 8002668:	f3c0 1088 	ubfx	r0, r0, #6, #9
 800266c:	fb00 f003 	mul.w	r0, r0, r3
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002670:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002674:	f3c3 7302 	ubfx	r3, r3, #28, #3
 8002678:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800267c:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_RCCEx_GetPeriphCLKFreq+0x64>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002686:	4807      	ldr	r0, [pc, #28]	; (80026a4 <HAL_RCCEx_GetPeriphCLKFreq+0x70>)
 8002688:	fbb0 f3f3 	udiv	r3, r0, r3
 800268c:	e7e9      	b.n	8002662 <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
  uint32_t frequency = 0U;
 800268e:	2000      	movs	r0, #0
 8002690:	4770      	bx	lr
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002692:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	40023800 	.word	0x40023800
 800269c:	00bb8000 	.word	0x00bb8000
 80026a0:	017d7840 	.word	0x017d7840
 80026a4:	00f42400 	.word	0x00f42400

080026a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80026a8:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026aa:	6a03      	ldr	r3, [r0, #32]
 80026ac:	f023 0301 	bic.w	r3, r3, #1
 80026b0:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026b2:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80026b4:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026b6:	6982      	ldr	r2, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026bc:	680d      	ldr	r5, [r1, #0]
 80026be:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c0:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026c4:	688d      	ldr	r5, [r1, #8]
 80026c6:	432b      	orrs	r3, r5

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80026c8:	4d0f      	ldr	r5, [pc, #60]	; (8002708 <TIM_OC1_SetConfig+0x60>)
 80026ca:	42a8      	cmp	r0, r5
 80026cc:	d01a      	beq.n	8002704 <TIM_OC1_SetConfig+0x5c>
 80026ce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80026d2:	42a8      	cmp	r0, r5
 80026d4:	d014      	beq.n	8002700 <TIM_OC1_SetConfig+0x58>
 80026d6:	2500      	movs	r5, #0
 80026d8:	b15d      	cbz	r5, 80026f2 <TIM_OC1_SetConfig+0x4a>
  {   
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026da:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026de:	68cd      	ldr	r5, [r1, #12]
 80026e0:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026e2:	f023 0304 	bic.w	r3, r3, #4
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026e6:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026ea:	694d      	ldr	r5, [r1, #20]
 80026ec:	432c      	orrs	r4, r5
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026ee:	698d      	ldr	r5, [r1, #24]
 80026f0:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f2:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f4:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026f6:	684a      	ldr	r2, [r1, #4]
 80026f8:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80026fa:	6203      	str	r3, [r0, #32]
} 
 80026fc:	bc30      	pop	{r4, r5}
 80026fe:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002700:	2501      	movs	r5, #1
 8002702:	e7e9      	b.n	80026d8 <TIM_OC1_SetConfig+0x30>
 8002704:	2501      	movs	r5, #1
 8002706:	e7e7      	b.n	80026d8 <TIM_OC1_SetConfig+0x30>
 8002708:	40010000 	.word	0x40010000

0800270c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800270c:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800270e:	6a03      	ldr	r3, [r0, #32]
 8002710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002714:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002716:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002718:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800271a:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800271c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002720:	680d      	ldr	r5, [r1, #0]
 8002722:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002724:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002728:	688d      	ldr	r5, [r1, #8]
 800272a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800272e:	4d11      	ldr	r5, [pc, #68]	; (8002774 <TIM_OC3_SetConfig+0x68>)
 8002730:	42a8      	cmp	r0, r5
 8002732:	d01d      	beq.n	8002770 <TIM_OC3_SetConfig+0x64>
 8002734:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002738:	42a8      	cmp	r0, r5
 800273a:	d017      	beq.n	800276c <TIM_OC3_SetConfig+0x60>
 800273c:	2500      	movs	r5, #0
 800273e:	b175      	cbz	r5, 800275e <TIM_OC3_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002744:	68cd      	ldr	r5, [r1, #12]
 8002746:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800274a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800274e:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002752:	694d      	ldr	r5, [r1, #20]
 8002754:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002758:	698d      	ldr	r5, [r1, #24]
 800275a:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800275e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002760:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002762:	684a      	ldr	r2, [r1, #4]
 8002764:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002766:	6203      	str	r3, [r0, #32]
}
 8002768:	bc30      	pop	{r4, r5}
 800276a:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800276c:	2501      	movs	r5, #1
 800276e:	e7e6      	b.n	800273e <TIM_OC3_SetConfig+0x32>
 8002770:	2501      	movs	r5, #1
 8002772:	e7e4      	b.n	800273e <TIM_OC3_SetConfig+0x32>
 8002774:	40010000 	.word	0x40010000

08002778 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002778:	b430      	push	{r4, r5}
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800277a:	6a03      	ldr	r3, [r0, #32]
 800277c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002780:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002782:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002784:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002786:	69c2      	ldr	r2, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002788:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800278c:	680d      	ldr	r5, [r1, #0]
 800278e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002792:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002796:	688d      	ldr	r5, [r1, #8]
 8002798:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800279c:	4d0c      	ldr	r5, [pc, #48]	; (80027d0 <TIM_OC4_SetConfig+0x58>)
 800279e:	42a8      	cmp	r0, r5
 80027a0:	d013      	beq.n	80027ca <TIM_OC4_SetConfig+0x52>
 80027a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80027a6:	42a8      	cmp	r0, r5
 80027a8:	d00d      	beq.n	80027c6 <TIM_OC4_SetConfig+0x4e>
 80027aa:	2500      	movs	r5, #0
 80027ac:	b125      	cbz	r5, 80027b8 <TIM_OC4_SetConfig+0x40>
  {
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027ae:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027b2:	694d      	ldr	r5, [r1, #20]
 80027b4:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027b8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 80027ba:	61c2      	str	r2, [r0, #28]
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027bc:	684a      	ldr	r2, [r1, #4]
 80027be:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c0:	6203      	str	r3, [r0, #32]
}
 80027c2:	bc30      	pop	{r4, r5}
 80027c4:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80027c6:	2501      	movs	r5, #1
 80027c8:	e7f0      	b.n	80027ac <TIM_OC4_SetConfig+0x34>
 80027ca:	2501      	movs	r5, #1
 80027cc:	e7ee      	b.n	80027ac <TIM_OC4_SetConfig+0x34>
 80027ce:	bf00      	nop
 80027d0:	40010000 	.word	0x40010000

080027d4 <HAL_TIM_Base_MspInit>:
{
 80027d4:	4770      	bx	lr

080027d6 <HAL_TIM_Base_Start>:
  htim->State= HAL_TIM_STATE_BUSY;
 80027d6:	2302      	movs	r3, #2
 80027d8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 80027dc:	6802      	ldr	r2, [r0, #0]
 80027de:	6813      	ldr	r3, [r2, #0]
 80027e0:	f043 0301 	orr.w	r3, r3, #1
 80027e4:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80027ec:	2000      	movs	r0, #0
 80027ee:	4770      	bx	lr

080027f0 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027f0:	6802      	ldr	r2, [r0, #0]
 80027f2:	68d3      	ldr	r3, [r2, #12]
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_ENABLE(htim);
 80027fa:	6802      	ldr	r2, [r0, #0]
 80027fc:	6813      	ldr	r3, [r2, #0]
 80027fe:	f043 0301 	orr.w	r3, r3, #1
 8002802:	6013      	str	r3, [r2, #0]
}
 8002804:	2000      	movs	r0, #0
 8002806:	4770      	bx	lr

08002808 <HAL_TIM_PWM_MspInit>:
{
 8002808:	4770      	bx	lr

0800280a <HAL_TIM_OC_DelayElapsedCallback>:
{
 800280a:	4770      	bx	lr

0800280c <HAL_TIM_IC_CaptureCallback>:
{
 800280c:	4770      	bx	lr

0800280e <HAL_TIM_PWM_PulseFinishedCallback>:
{
 800280e:	4770      	bx	lr

08002810 <HAL_TIM_TriggerCallback>:
{
 8002810:	4770      	bx	lr

08002812 <HAL_TIM_IRQHandler>:
{
 8002812:	b510      	push	{r4, lr}
 8002814:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002816:	6803      	ldr	r3, [r0, #0]
 8002818:	691a      	ldr	r2, [r3, #16]
 800281a:	f012 0f02 	tst.w	r2, #2
 800281e:	d011      	beq.n	8002844 <HAL_TIM_IRQHandler+0x32>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	f012 0f02 	tst.w	r2, #2
 8002826:	d00d      	beq.n	8002844 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002828:	f06f 0202 	mvn.w	r2, #2
 800282c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800282e:	2301      	movs	r3, #1
 8002830:	7603      	strb	r3, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002832:	6803      	ldr	r3, [r0, #0]
 8002834:	699b      	ldr	r3, [r3, #24]
 8002836:	f013 0f03 	tst.w	r3, #3
 800283a:	d070      	beq.n	800291e <HAL_TIM_IRQHandler+0x10c>
          HAL_TIM_IC_CaptureCallback(htim);
 800283c:	f7ff ffe6 	bl	800280c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002840:	2300      	movs	r3, #0
 8002842:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002844:	6823      	ldr	r3, [r4, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	f012 0f04 	tst.w	r2, #4
 800284c:	d012      	beq.n	8002874 <HAL_TIM_IRQHandler+0x62>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800284e:	68da      	ldr	r2, [r3, #12]
 8002850:	f012 0f04 	tst.w	r2, #4
 8002854:	d00e      	beq.n	8002874 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002856:	f06f 0204 	mvn.w	r2, #4
 800285a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800285c:	2302      	movs	r3, #2
 800285e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002860:	6823      	ldr	r3, [r4, #0]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002868:	d05f      	beq.n	800292a <HAL_TIM_IRQHandler+0x118>
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff ffce 	bl	800280c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002870:	2300      	movs	r3, #0
 8002872:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	691a      	ldr	r2, [r3, #16]
 8002878:	f012 0f08 	tst.w	r2, #8
 800287c:	d012      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x92>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800287e:	68da      	ldr	r2, [r3, #12]
 8002880:	f012 0f08 	tst.w	r2, #8
 8002884:	d00e      	beq.n	80028a4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002886:	f06f 0208 	mvn.w	r2, #8
 800288a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288c:	2304      	movs	r3, #4
 800288e:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	f013 0f03 	tst.w	r3, #3
 8002898:	d04e      	beq.n	8002938 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff ffb6 	bl	800280c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028a0:	2300      	movs	r3, #0
 80028a2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80028a4:	6823      	ldr	r3, [r4, #0]
 80028a6:	691a      	ldr	r2, [r3, #16]
 80028a8:	f012 0f10 	tst.w	r2, #16
 80028ac:	d012      	beq.n	80028d4 <HAL_TIM_IRQHandler+0xc2>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	f012 0f10 	tst.w	r2, #16
 80028b4:	d00e      	beq.n	80028d4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80028b6:	f06f 0210 	mvn.w	r2, #16
 80028ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028bc:	2308      	movs	r3, #8
 80028be:	7623      	strb	r3, [r4, #24]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028c0:	6823      	ldr	r3, [r4, #0]
 80028c2:	69db      	ldr	r3, [r3, #28]
 80028c4:	f413 7f40 	tst.w	r3, #768	; 0x300
 80028c8:	d03d      	beq.n	8002946 <HAL_TIM_IRQHandler+0x134>
        HAL_TIM_IC_CaptureCallback(htim);
 80028ca:	4620      	mov	r0, r4
 80028cc:	f7ff ff9e 	bl	800280c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028d0:	2300      	movs	r3, #0
 80028d2:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d4:	6823      	ldr	r3, [r4, #0]
 80028d6:	691a      	ldr	r2, [r3, #16]
 80028d8:	f012 0f01 	tst.w	r2, #1
 80028dc:	d003      	beq.n	80028e6 <HAL_TIM_IRQHandler+0xd4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80028de:	68da      	ldr	r2, [r3, #12]
 80028e0:	f012 0f01 	tst.w	r2, #1
 80028e4:	d136      	bne.n	8002954 <HAL_TIM_IRQHandler+0x142>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028e6:	6823      	ldr	r3, [r4, #0]
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028ee:	d003      	beq.n	80028f8 <HAL_TIM_IRQHandler+0xe6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80028f0:	68da      	ldr	r2, [r3, #12]
 80028f2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80028f6:	d134      	bne.n	8002962 <HAL_TIM_IRQHandler+0x150>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028f8:	6823      	ldr	r3, [r4, #0]
 80028fa:	691a      	ldr	r2, [r3, #16]
 80028fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002900:	d003      	beq.n	800290a <HAL_TIM_IRQHandler+0xf8>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8002902:	68da      	ldr	r2, [r3, #12]
 8002904:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002908:	d132      	bne.n	8002970 <HAL_TIM_IRQHandler+0x15e>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800290a:	6823      	ldr	r3, [r4, #0]
 800290c:	691a      	ldr	r2, [r3, #16]
 800290e:	f012 0f20 	tst.w	r2, #32
 8002912:	d003      	beq.n	800291c <HAL_TIM_IRQHandler+0x10a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	f012 0f20 	tst.w	r2, #32
 800291a:	d130      	bne.n	800297e <HAL_TIM_IRQHandler+0x16c>
 800291c:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800291e:	f7ff ff74 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002922:	4620      	mov	r0, r4
 8002924:	f7ff ff73 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
 8002928:	e78a      	b.n	8002840 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff ff6d 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	4620      	mov	r0, r4
 8002932:	f7ff ff6c 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
 8002936:	e79b      	b.n	8002870 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002938:	4620      	mov	r0, r4
 800293a:	f7ff ff66 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff ff65 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
 8002944:	e7ac      	b.n	80028a0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	4620      	mov	r0, r4
 8002948:	f7ff ff5f 	bl	800280a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	4620      	mov	r0, r4
 800294e:	f7ff ff5e 	bl	800280e <HAL_TIM_PWM_PulseFinishedCallback>
 8002952:	e7bd      	b.n	80028d0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002954:	f06f 0201 	mvn.w	r2, #1
 8002958:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800295a:	4620      	mov	r0, r4
 800295c:	f002 f864 	bl	8004a28 <HAL_TIM_PeriodElapsedCallback>
 8002960:	e7c1      	b.n	80028e6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002962:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002966:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002968:	4620      	mov	r0, r4
 800296a:	f000 f9a8 	bl	8002cbe <HAL_TIMEx_BreakCallback>
 800296e:	e7c3      	b.n	80028f8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002970:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002974:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002976:	4620      	mov	r0, r4
 8002978:	f7ff ff4a 	bl	8002810 <HAL_TIM_TriggerCallback>
 800297c:	e7c5      	b.n	800290a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800297e:	f06f 0220 	mvn.w	r2, #32
 8002982:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002984:	4620      	mov	r0, r4
 8002986:	f000 f999 	bl	8002cbc <HAL_TIMEx_CommutationCallback>
}
 800298a:	e7c7      	b.n	800291c <HAL_TIM_IRQHandler+0x10a>

0800298c <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 800298c:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800298e:	4a45      	ldr	r2, [pc, #276]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 8002990:	4290      	cmp	r0, r2
 8002992:	d04a      	beq.n	8002a2a <TIM_Base_SetConfig+0x9e>
 8002994:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002998:	d049      	beq.n	8002a2e <TIM_Base_SetConfig+0xa2>
 800299a:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800299e:	4290      	cmp	r0, r2
 80029a0:	d047      	beq.n	8002a32 <TIM_Base_SetConfig+0xa6>
 80029a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029a6:	4290      	cmp	r0, r2
 80029a8:	d045      	beq.n	8002a36 <TIM_Base_SetConfig+0xaa>
 80029aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029ae:	4290      	cmp	r0, r2
 80029b0:	d043      	beq.n	8002a3a <TIM_Base_SetConfig+0xae>
 80029b2:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029b6:	4290      	cmp	r0, r2
 80029b8:	d035      	beq.n	8002a26 <TIM_Base_SetConfig+0x9a>
 80029ba:	2200      	movs	r2, #0
 80029bc:	b11a      	cbz	r2, 80029c6 <TIM_Base_SetConfig+0x3a>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80029c2:	684a      	ldr	r2, [r1, #4]
 80029c4:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 80029c6:	4a37      	ldr	r2, [pc, #220]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 80029c8:	4290      	cmp	r0, r2
 80029ca:	d03a      	beq.n	8002a42 <TIM_Base_SetConfig+0xb6>
 80029cc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80029d0:	d050      	beq.n	8002a74 <TIM_Base_SetConfig+0xe8>
 80029d2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80029d6:	4290      	cmp	r0, r2
 80029d8:	d04e      	beq.n	8002a78 <TIM_Base_SetConfig+0xec>
 80029da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029de:	4290      	cmp	r0, r2
 80029e0:	d04c      	beq.n	8002a7c <TIM_Base_SetConfig+0xf0>
 80029e2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029e6:	4290      	cmp	r0, r2
 80029e8:	d04a      	beq.n	8002a80 <TIM_Base_SetConfig+0xf4>
 80029ea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80029ee:	4290      	cmp	r0, r2
 80029f0:	d048      	beq.n	8002a84 <TIM_Base_SetConfig+0xf8>
 80029f2:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 80029f6:	4290      	cmp	r0, r2
 80029f8:	d046      	beq.n	8002a88 <TIM_Base_SetConfig+0xfc>
 80029fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80029fe:	4290      	cmp	r0, r2
 8002a00:	d044      	beq.n	8002a8c <TIM_Base_SetConfig+0x100>
 8002a02:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a06:	4290      	cmp	r0, r2
 8002a08:	d042      	beq.n	8002a90 <TIM_Base_SetConfig+0x104>
 8002a0a:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8002a0e:	4290      	cmp	r0, r2
 8002a10:	d040      	beq.n	8002a94 <TIM_Base_SetConfig+0x108>
 8002a12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a16:	4290      	cmp	r0, r2
 8002a18:	d03e      	beq.n	8002a98 <TIM_Base_SetConfig+0x10c>
 8002a1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002a1e:	4290      	cmp	r0, r2
 8002a20:	d00d      	beq.n	8002a3e <TIM_Base_SetConfig+0xb2>
 8002a22:	2200      	movs	r2, #0
 8002a24:	e00e      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002a26:	2201      	movs	r2, #1
 8002a28:	e7c8      	b.n	80029bc <TIM_Base_SetConfig+0x30>
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	e7c6      	b.n	80029bc <TIM_Base_SetConfig+0x30>
 8002a2e:	2201      	movs	r2, #1
 8002a30:	e7c4      	b.n	80029bc <TIM_Base_SetConfig+0x30>
 8002a32:	2201      	movs	r2, #1
 8002a34:	e7c2      	b.n	80029bc <TIM_Base_SetConfig+0x30>
 8002a36:	2201      	movs	r2, #1
 8002a38:	e7c0      	b.n	80029bc <TIM_Base_SetConfig+0x30>
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	e7be      	b.n	80029bc <TIM_Base_SetConfig+0x30>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a3e:	2201      	movs	r2, #1
 8002a40:	e000      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a42:	2201      	movs	r2, #1
 8002a44:	b11a      	cbz	r2, 8002a4e <TIM_Base_SetConfig+0xc2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4a:	68ca      	ldr	r2, [r1, #12]
 8002a4c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002a4e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a50:	688b      	ldr	r3, [r1, #8]
 8002a52:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002a54:	680b      	ldr	r3, [r1, #0]
 8002a56:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a58:	4b12      	ldr	r3, [pc, #72]	; (8002aa4 <TIM_Base_SetConfig+0x118>)
 8002a5a:	4298      	cmp	r0, r3
 8002a5c:	d020      	beq.n	8002aa0 <TIM_Base_SetConfig+0x114>
 8002a5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a62:	4298      	cmp	r0, r3
 8002a64:	d01a      	beq.n	8002a9c <TIM_Base_SetConfig+0x110>
 8002a66:	2300      	movs	r3, #0
 8002a68:	b10b      	cbz	r3, 8002a6e <TIM_Base_SetConfig+0xe2>
    TIMx->RCR = Structure->RepetitionCounter;
 8002a6a:	690b      	ldr	r3, [r1, #16]
 8002a6c:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	6143      	str	r3, [r0, #20]
 8002a72:	4770      	bx	lr
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 8002a74:	2201      	movs	r2, #1
 8002a76:	e7e5      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a78:	2201      	movs	r2, #1
 8002a7a:	e7e3      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	e7e1      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a80:	2201      	movs	r2, #1
 8002a82:	e7df      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a84:	2201      	movs	r2, #1
 8002a86:	e7dd      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a88:	2201      	movs	r2, #1
 8002a8a:	e7db      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a8c:	2201      	movs	r2, #1
 8002a8e:	e7d9      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a90:	2201      	movs	r2, #1
 8002a92:	e7d7      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a94:	2201      	movs	r2, #1
 8002a96:	e7d5      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
 8002a98:	2201      	movs	r2, #1
 8002a9a:	e7d3      	b.n	8002a44 <TIM_Base_SetConfig+0xb8>
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e7e3      	b.n	8002a68 <TIM_Base_SetConfig+0xdc>
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	e7e1      	b.n	8002a68 <TIM_Base_SetConfig+0xdc>
 8002aa4:	40010000 	.word	0x40010000

08002aa8 <HAL_TIM_Base_Init>:
  if(htim == NULL)
 8002aa8:	b1a8      	cbz	r0, 8002ad6 <HAL_TIM_Base_Init+0x2e>
{ 
 8002aaa:	b510      	push	{r4, lr}
 8002aac:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002aae:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ab2:	b15b      	cbz	r3, 8002acc <HAL_TIM_Base_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002aba:	1d21      	adds	r1, r4, #4
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	f7ff ff65 	bl	800298c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002ac8:	2000      	movs	r0, #0
 8002aca:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002acc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002ad0:	f7ff fe80 	bl	80027d4 <HAL_TIM_Base_MspInit>
 8002ad4:	e7ee      	b.n	8002ab4 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002ad6:	2001      	movs	r0, #1
 8002ad8:	4770      	bx	lr

08002ada <HAL_TIM_PWM_Init>:
  if(htim == NULL)
 8002ada:	b1a8      	cbz	r0, 8002b08 <HAL_TIM_PWM_Init+0x2e>
{
 8002adc:	b510      	push	{r4, lr}
 8002ade:	4604      	mov	r4, r0
  if(htim->State == HAL_TIM_STATE_RESET)
 8002ae0:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002ae4:	b15b      	cbz	r3, 8002afe <HAL_TIM_PWM_Init+0x24>
  htim->State= HAL_TIM_STATE_BUSY;  
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002aec:	1d21      	adds	r1, r4, #4
 8002aee:	6820      	ldr	r0, [r4, #0]
 8002af0:	f7ff ff4c 	bl	800298c <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002afa:	2000      	movs	r0, #0
 8002afc:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002afe:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002b02:	f7ff fe81 	bl	8002808 <HAL_TIM_PWM_MspInit>
 8002b06:	e7ee      	b.n	8002ae6 <HAL_TIM_PWM_Init+0xc>
    return HAL_ERROR;
 8002b08:	2001      	movs	r0, #1
 8002b0a:	4770      	bx	lr

08002b0c <TIM_OC2_SetConfig>:
{
 8002b0c:	b430      	push	{r4, r5}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b0e:	6a03      	ldr	r3, [r0, #32]
 8002b10:	f023 0310 	bic.w	r3, r3, #16
 8002b14:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002b16:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002b18:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8002b1a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002b1c:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b20:	680d      	ldr	r5, [r1, #0]
 8002b22:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer &= ~TIM_CCER_CC2P;
 8002b26:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002b2a:	688d      	ldr	r5, [r1, #8]
 8002b2c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b30:	4d11      	ldr	r5, [pc, #68]	; (8002b78 <TIM_OC2_SetConfig+0x6c>)
 8002b32:	42a8      	cmp	r0, r5
 8002b34:	d01d      	beq.n	8002b72 <TIM_OC2_SetConfig+0x66>
 8002b36:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002b3a:	42a8      	cmp	r0, r5
 8002b3c:	d017      	beq.n	8002b6e <TIM_OC2_SetConfig+0x62>
 8002b3e:	2500      	movs	r5, #0
 8002b40:	b175      	cbz	r5, 8002b60 <TIM_OC2_SetConfig+0x54>
    tmpccer &= ~TIM_CCER_CC2NP;
 8002b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002b46:	68cd      	ldr	r5, [r1, #12]
 8002b48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b50:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b54:	694d      	ldr	r5, [r1, #20]
 8002b56:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b5a:	698d      	ldr	r5, [r1, #24]
 8002b5c:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8002b60:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8002b62:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8002b64:	684a      	ldr	r2, [r1, #4]
 8002b66:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8002b68:	6203      	str	r3, [r0, #32]
}
 8002b6a:	bc30      	pop	{r4, r5}
 8002b6c:	4770      	bx	lr
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 8002b6e:	2501      	movs	r5, #1
 8002b70:	e7e6      	b.n	8002b40 <TIM_OC2_SetConfig+0x34>
 8002b72:	2501      	movs	r5, #1
 8002b74:	e7e4      	b.n	8002b40 <TIM_OC2_SetConfig+0x34>
 8002b76:	bf00      	nop
 8002b78:	40010000 	.word	0x40010000

08002b7c <HAL_TIM_PWM_ConfigChannel>:
{
 8002b7c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002b7e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d066      	beq.n	8002c54 <HAL_TIM_PWM_ConfigChannel+0xd8>
 8002b86:	460d      	mov	r5, r1
 8002b88:	4604      	mov	r4, r0
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 8002b90:	2302      	movs	r3, #2
 8002b92:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  switch (Channel)
 8002b96:	2a0c      	cmp	r2, #12
 8002b98:	d81a      	bhi.n	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x54>
 8002b9a:	e8df f002 	tbb	[pc, r2]
 8002b9e:	1907      	.short	0x1907
 8002ba0:	19201919 	.word	0x19201919
 8002ba4:	19341919 	.word	0x19341919
 8002ba8:	1919      	.short	0x1919
 8002baa:	47          	.byte	0x47
 8002bab:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002bac:	6800      	ldr	r0, [r0, #0]
 8002bae:	f7ff fd7b 	bl	80026a8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb2:	6822      	ldr	r2, [r4, #0]
 8002bb4:	6993      	ldr	r3, [r2, #24]
 8002bb6:	f043 0308 	orr.w	r3, r3, #8
 8002bba:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	6993      	ldr	r3, [r2, #24]
 8002bc0:	f023 0304 	bic.w	r3, r3, #4
 8002bc4:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bc6:	6822      	ldr	r2, [r4, #0]
 8002bc8:	6993      	ldr	r3, [r2, #24]
 8002bca:	6929      	ldr	r1, [r5, #16]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	6193      	str	r3, [r2, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002bd6:	2000      	movs	r0, #0
 8002bd8:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
  return HAL_OK;
 8002bdc:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002bde:	6800      	ldr	r0, [r0, #0]
 8002be0:	f7ff ff94 	bl	8002b0c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	6993      	ldr	r3, [r2, #24]
 8002be8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bec:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002bee:	6822      	ldr	r2, [r4, #0]
 8002bf0:	6993      	ldr	r3, [r2, #24]
 8002bf2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf6:	6193      	str	r3, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002bf8:	6822      	ldr	r2, [r4, #0]
 8002bfa:	6993      	ldr	r3, [r2, #24]
 8002bfc:	6929      	ldr	r1, [r5, #16]
 8002bfe:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c02:	6193      	str	r3, [r2, #24]
    break;
 8002c04:	e7e4      	b.n	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c06:	6800      	ldr	r0, [r0, #0]
 8002c08:	f7ff fd80 	bl	800270c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c0c:	6822      	ldr	r2, [r4, #0]
 8002c0e:	69d3      	ldr	r3, [r2, #28]
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c16:	6822      	ldr	r2, [r4, #0]
 8002c18:	69d3      	ldr	r3, [r2, #28]
 8002c1a:	f023 0304 	bic.w	r3, r3, #4
 8002c1e:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002c20:	6822      	ldr	r2, [r4, #0]
 8002c22:	69d3      	ldr	r3, [r2, #28]
 8002c24:	6929      	ldr	r1, [r5, #16]
 8002c26:	430b      	orrs	r3, r1
 8002c28:	61d3      	str	r3, [r2, #28]
    break;
 8002c2a:	e7d1      	b.n	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x54>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c2c:	6800      	ldr	r0, [r0, #0]
 8002c2e:	f7ff fda3 	bl	8002778 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c32:	6822      	ldr	r2, [r4, #0]
 8002c34:	69d3      	ldr	r3, [r2, #28]
 8002c36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002c3a:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c3c:	6822      	ldr	r2, [r4, #0]
 8002c3e:	69d3      	ldr	r3, [r2, #28]
 8002c40:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c44:	61d3      	str	r3, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002c46:	6822      	ldr	r2, [r4, #0]
 8002c48:	69d3      	ldr	r3, [r2, #28]
 8002c4a:	6929      	ldr	r1, [r5, #16]
 8002c4c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002c50:	61d3      	str	r3, [r2, #28]
    break;
 8002c52:	e7bd      	b.n	8002bd0 <HAL_TIM_PWM_ConfigChannel+0x54>
  __HAL_LOCK(htim);
 8002c54:	2002      	movs	r0, #2
}
 8002c56:	bd38      	pop	{r3, r4, r5, pc}

08002c58 <TIM_CCxChannelCmd>:
{
 8002c58:	b410      	push	{r4}
  tmp = TIM_CCER_CC1E << Channel;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	fa03 f401 	lsl.w	r4, r3, r1
  TIMx->CCER &= ~tmp;
 8002c60:	6a03      	ldr	r3, [r0, #32]
 8002c62:	ea23 0304 	bic.w	r3, r3, r4
 8002c66:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 8002c68:	6a03      	ldr	r3, [r0, #32]
 8002c6a:	408a      	lsls	r2, r1
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	6203      	str	r3, [r0, #32]
}
 8002c70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c74:	4770      	bx	lr
	...

08002c78 <HAL_TIM_PWM_Start>:
{
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	6800      	ldr	r0, [r0, #0]
 8002c80:	f7ff ffea 	bl	8002c58 <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	4a0c      	ldr	r2, [pc, #48]	; (8002cb8 <HAL_TIM_PWM_Start+0x40>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d012      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x3a>
 8002c8c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d00c      	beq.n	8002cae <HAL_TIM_PWM_Start+0x36>
 8002c94:	2200      	movs	r2, #0
 8002c96:	b11a      	cbz	r2, 8002ca0 <HAL_TIM_PWM_Start+0x28>
    __HAL_TIM_MOE_ENABLE(htim);
 8002c98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c9a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c9e:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8002ca0:	6822      	ldr	r2, [r4, #0]
 8002ca2:	6813      	ldr	r3, [r2, #0]
 8002ca4:	f043 0301 	orr.w	r3, r3, #1
 8002ca8:	6013      	str	r3, [r2, #0]
} 
 8002caa:	2000      	movs	r0, #0
 8002cac:	bd10      	pop	{r4, pc}
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 8002cae:	2201      	movs	r2, #1
 8002cb0:	e7f1      	b.n	8002c96 <HAL_TIM_PWM_Start+0x1e>
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	e7ef      	b.n	8002c96 <HAL_TIM_PWM_Start+0x1e>
 8002cb6:	bf00      	nop
 8002cb8:	40010000 	.word	0x40010000

08002cbc <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002cbe:	4770      	bx	lr

08002cc0 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cc4:	ed2d 8b10 	vpush	{d8-d15}
 8002cc8:	b08d      	sub	sp, #52	; 0x34
 8002cca:	9208      	str	r2, [sp, #32]
 8002ccc:	930b      	str	r3, [sp, #44]	; 0x2c
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;

   n2 = fftLen;
 8002cce:	9107      	str	r1, [sp, #28]
 8002cd0:	9106      	str	r1, [sp, #24]
 8002cd2:	4680      	mov	r8, r0
   
   do 
   {
      n1 = n2;
      n2 = n2 >> 3;
 8002cd4:	9b06      	ldr	r3, [sp, #24]
 8002cd6:	ea4f 09d3 	mov.w	r9, r3, lsr #3
      i1 = 0;
 8002cda:	2700      	movs	r7, #0
 8002cdc:	46be      	mov	lr, r7
      
      do
      {
         i2 = i1 + n2;
 8002cde:	eb0e 0109 	add.w	r1, lr, r9
         i3 = i2 + n2;
 8002ce2:	eb09 0401 	add.w	r4, r9, r1
         i4 = i3 + n2;
 8002ce6:	eb09 0304 	add.w	r3, r9, r4
         i5 = i4 + n2;
 8002cea:	eb09 0503 	add.w	r5, r9, r3
         i6 = i5 + n2;
 8002cee:	eb09 0205 	add.w	r2, r9, r5
         i7 = i6 + n2;
 8002cf2:	eb09 0002 	add.w	r0, r9, r2
         i8 = i7 + n2;
 8002cf6:	eb09 0600 	add.w	r6, r9, r0
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002cfa:	ea4f 07ce 	mov.w	r7, lr, lsl #3
 8002cfe:	eb08 0b07 	add.w	fp, r8, r7
 8002d02:	ed9b 7a00 	vldr	s14, [fp]
 8002d06:	00ed      	lsls	r5, r5, #3
 8002d08:	eb08 0a05 	add.w	sl, r8, r5
 8002d0c:	edda 7a00 	vldr	s15, [sl]
 8002d10:	ee37 5a27 	vadd.f32	s10, s14, s15
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002d14:	ee37 6a67 	vsub.f32	s12, s14, s15
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002d18:	00c9      	lsls	r1, r1, #3
 8002d1a:	9100      	str	r1, [sp, #0]
 8002d1c:	4441      	add	r1, r8
 8002d1e:	9101      	str	r1, [sp, #4]
 8002d20:	edd1 2a00 	vldr	s5, [r1]
 8002d24:	00d2      	lsls	r2, r2, #3
 8002d26:	eb08 0c02 	add.w	ip, r8, r2
 8002d2a:	f8cd c008 	str.w	ip, [sp, #8]
 8002d2e:	ed9c 7a00 	vldr	s14, [ip]
 8002d32:	ee72 7a87 	vadd.f32	s15, s5, s14
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002d36:	ee72 2ac7 	vsub.f32	s5, s5, s14
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002d3a:	00e4      	lsls	r4, r4, #3
 8002d3c:	eb08 0c04 	add.w	ip, r8, r4
 8002d40:	eddc 5a00 	vldr	s11, [ip]
 8002d44:	00c0      	lsls	r0, r0, #3
 8002d46:	eb08 0100 	add.w	r1, r8, r0
 8002d4a:	9103      	str	r1, [sp, #12]
 8002d4c:	edd1 6a00 	vldr	s13, [r1]
 8002d50:	ee35 7aa6 	vadd.f32	s14, s11, s13
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002d54:	ee35 3ae6 	vsub.f32	s6, s11, s13
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	eb08 0103 	add.w	r1, r8, r3
 8002d5e:	9104      	str	r1, [sp, #16]
 8002d60:	edd1 4a00 	vldr	s9, [r1]
 8002d64:	00f6      	lsls	r6, r6, #3
 8002d66:	eb08 0106 	add.w	r1, r8, r6
 8002d6a:	9105      	str	r1, [sp, #20]
 8002d6c:	edd1 5a00 	vldr	s11, [r1]
 8002d70:	ee74 6aa5 	vadd.f32	s13, s9, s11
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002d74:	ee74 4ae5 	vsub.f32	s9, s9, s11
         t1 = r1 - r3;
 8002d78:	ee35 0a47 	vsub.f32	s0, s10, s14
         r1 = r1 + r3;
 8002d7c:	ee35 7a07 	vadd.f32	s14, s10, s14
         r3 = r2 - r4;
 8002d80:	ee77 0ae6 	vsub.f32	s1, s15, s13
         r2 = r2 + r4;
 8002d84:	ee77 7aa6 	vadd.f32	s15, s15, s13
         pSrc[2 * i1] = r1 + r2;   
 8002d88:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002d8c:	edcb 6a00 	vstr	s13, [fp]
         pSrc[2 * i5] = r1 - r2;
 8002d90:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d94:	edca 7a00 	vstr	s15, [sl]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8002d98:	3704      	adds	r7, #4
 8002d9a:	4447      	add	r7, r8
 8002d9c:	ed97 4a00 	vldr	s8, [r7]
 8002da0:	3504      	adds	r5, #4
 8002da2:	4445      	add	r5, r8
 8002da4:	edd5 7a00 	vldr	s15, [r5]
 8002da8:	ee74 1a27 	vadd.f32	s3, s8, s15
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002dac:	ee34 4a67 	vsub.f32	s8, s8, s15
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8002db0:	9900      	ldr	r1, [sp, #0]
 8002db2:	3104      	adds	r1, #4
 8002db4:	4441      	add	r1, r8
 8002db6:	ed91 5a00 	vldr	s10, [r1]
 8002dba:	3204      	adds	r2, #4
 8002dbc:	4442      	add	r2, r8
 8002dbe:	edd2 7a00 	vldr	s15, [r2]
 8002dc2:	ee35 2a27 	vadd.f32	s4, s10, s15
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 8002dc6:	ee35 5a67 	vsub.f32	s10, s10, s15
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002dca:	3404      	adds	r4, #4
 8002dcc:	4444      	add	r4, r8
 8002dce:	edd4 6a00 	vldr	s13, [r4]
 8002dd2:	3004      	adds	r0, #4
 8002dd4:	4440      	add	r0, r8
 8002dd6:	edd0 7a00 	vldr	s15, [r0]
 8002dda:	ee36 7aa7 	vadd.f32	s14, s13, s15
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002dde:	ee76 6ae7 	vsub.f32	s13, s13, s15
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002de2:	3304      	adds	r3, #4
 8002de4:	4443      	add	r3, r8
 8002de6:	edd3 5a00 	vldr	s11, [r3]
 8002dea:	3604      	adds	r6, #4
 8002dec:	4446      	add	r6, r8
 8002dee:	edd6 7a00 	vldr	s15, [r6]
 8002df2:	ee75 3aa7 	vadd.f32	s7, s11, s15
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002df6:	ee75 5ae7 	vsub.f32	s11, s11, s15
         t2 = r1 - s3;
 8002dfa:	ee31 1ac7 	vsub.f32	s2, s3, s14
         r1 = r1 + s3;
 8002dfe:	ee31 7a87 	vadd.f32	s14, s3, s14
         s3 = r2 - r4;
 8002e02:	ee72 1a63 	vsub.f32	s3, s4, s7
         r2 = r2 + r4;
 8002e06:	ee72 7a23 	vadd.f32	s15, s4, s7
         pSrc[2 * i1 + 1] = r1 + r2;
 8002e0a:	ee77 3a27 	vadd.f32	s7, s14, s15
 8002e0e:	edc7 3a00 	vstr	s7, [r7]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002e12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e16:	edc5 7a00 	vstr	s15, [r5]
         pSrc[2 * i3]     = t1 + s3;
 8002e1a:	ee70 7a21 	vadd.f32	s15, s0, s3
 8002e1e:	edcc 7a00 	vstr	s15, [ip]
         pSrc[2 * i7]     = t1 - s3;
 8002e22:	ee70 1a61 	vsub.f32	s3, s0, s3
 8002e26:	9d03      	ldr	r5, [sp, #12]
 8002e28:	edc5 1a00 	vstr	s3, [r5]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002e2c:	ee71 7a60 	vsub.f32	s15, s2, s1
 8002e30:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002e34:	ee30 1a81 	vadd.f32	s2, s1, s2
 8002e38:	ed80 1a00 	vstr	s2, [r0]
         r1 = (r6 - r8) * C81;
 8002e3c:	ee32 7ae4 	vsub.f32	s14, s5, s9
 8002e40:	eddf 7aee 	vldr	s15, [pc, #952]	; 80031fc <arm_radix8_butterfly_f32+0x53c>
 8002e44:	ee27 7a27 	vmul.f32	s14, s14, s15
         r6 = (r6 + r8) * C81;
 8002e48:	ee72 3aa4 	vadd.f32	s7, s5, s9
 8002e4c:	ee63 3aa7 	vmul.f32	s7, s7, s15
         r2 = (s6 - s8) * C81;
 8002e50:	ee75 4a65 	vsub.f32	s9, s10, s11
 8002e54:	ee64 4aa7 	vmul.f32	s9, s9, s15
         s6 = (s6 + s8) * C81;
 8002e58:	ee75 5a25 	vadd.f32	s11, s10, s11
 8002e5c:	ee65 7aa7 	vmul.f32	s15, s11, s15
         t1 = r5 - r1;
 8002e60:	ee36 2a47 	vsub.f32	s4, s12, s14
         r5 = r5 + r1;
 8002e64:	ee36 7a07 	vadd.f32	s14, s12, s14
         r8 = r7 - r6;
 8002e68:	ee73 2a63 	vsub.f32	s5, s6, s7
         r7 = r7 + r6;
 8002e6c:	ee73 5a23 	vadd.f32	s11, s6, s7
         t2 = s5 - r2;
 8002e70:	ee34 5a64 	vsub.f32	s10, s8, s9
         s5 = s5 + r2;
 8002e74:	ee34 6a24 	vadd.f32	s12, s8, s9
         s8 = s7 - s6;
 8002e78:	ee76 4ae7 	vsub.f32	s9, s13, s15
         s7 = s7 + s6;
 8002e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
         pSrc[2 * i2]     = r5 + s7;
 8002e80:	ee77 6a27 	vadd.f32	s13, s14, s15
 8002e84:	9801      	ldr	r0, [sp, #4]
 8002e86:	edc0 6a00 	vstr	s13, [r0]
         pSrc[2 * i8]     = r5 - s7;
 8002e8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e8e:	9c05      	ldr	r4, [sp, #20]
 8002e90:	edc4 7a00 	vstr	s15, [r4]
         pSrc[2 * i6]     = t1 + s8;
 8002e94:	ee72 7a24 	vadd.f32	s15, s4, s9
 8002e98:	9802      	ldr	r0, [sp, #8]
 8002e9a:	edc0 7a00 	vstr	s15, [r0]
         pSrc[2 * i4]     = t1 - s8;
 8002e9e:	ee72 4a64 	vsub.f32	s9, s4, s9
 8002ea2:	9804      	ldr	r0, [sp, #16]
 8002ea4:	edc0 4a00 	vstr	s9, [r0]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002ea8:	ee76 7a65 	vsub.f32	s15, s12, s11
 8002eac:	edc1 7a00 	vstr	s15, [r1]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002eb0:	ee35 6a86 	vadd.f32	s12, s11, s12
 8002eb4:	ed86 6a00 	vstr	s12, [r6]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002eb8:	ee75 7a62 	vsub.f32	s15, s10, s5
 8002ebc:	edc2 7a00 	vstr	s15, [r2]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002ec0:	ee32 5a85 	vadd.f32	s10, s5, s10
 8002ec4:	ed83 5a00 	vstr	s10, [r3]
         
         i1 += n1;
 8002ec8:	9b06      	ldr	r3, [sp, #24]
 8002eca:	449e      	add	lr, r3
      } while(i1 < fftLen);
 8002ecc:	9b07      	ldr	r3, [sp, #28]
 8002ece:	4573      	cmp	r3, lr
 8002ed0:	f63f af05 	bhi.w	8002cde <arm_radix8_butterfly_f32+0x1e>
      
      if(n2 < 8)
 8002ed4:	f1b9 0f07 	cmp.w	r9, #7
 8002ed8:	f240 81b4 	bls.w	8003244 <arm_radix8_butterfly_f32+0x584>
 8002edc:	2301      	movs	r3, #1
 8002ede:	930a      	str	r3, [sp, #40]	; 0x28
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8002ee4:	46ce      	mov	lr, r9
      j = 1;
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ee8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002eea:	4413      	add	r3, r2
 8002eec:	461d      	mov	r5, r3
         ia1 = id;
         ia2 = ia1 + id;
         ia3 = ia2 + id;
 8002eee:	461a      	mov	r2, r3
 8002ef0:	eb03 0443 	add.w	r4, r3, r3, lsl #1
         ia4 = ia3 + id;
 8002ef4:	1918      	adds	r0, r3, r4
         ia5 = ia4 + id;
 8002ef6:	1819      	adds	r1, r3, r0
         ia6 = ia5 + id;
 8002ef8:	440a      	add	r2, r1
         ia7 = ia6 + id;
 8002efa:	4413      	add	r3, r2
                  
         co2 = pCoef[2 * ia1];
 8002efc:	9509      	str	r5, [sp, #36]	; 0x24
 8002efe:	00ee      	lsls	r6, r5, #3
 8002f00:	9f08      	ldr	r7, [sp, #32]
 8002f02:	463d      	mov	r5, r7
 8002f04:	4435      	add	r5, r6
 8002f06:	edd5 ba00 	vldr	s23, [r5]
         co3 = pCoef[2 * ia2];
 8002f0a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8002f0c:	012d      	lsls	r5, r5, #4
 8002f0e:	442f      	add	r7, r5
 8002f10:	ed97 ba00 	vldr	s22, [r7]
         co4 = pCoef[2 * ia3];
 8002f14:	00e4      	lsls	r4, r4, #3
 8002f16:	9f08      	ldr	r7, [sp, #32]
 8002f18:	4427      	add	r7, r4
 8002f1a:	edd7 aa00 	vldr	s21, [r7]
         co5 = pCoef[2 * ia4];
 8002f1e:	00c0      	lsls	r0, r0, #3
 8002f20:	9f08      	ldr	r7, [sp, #32]
 8002f22:	4407      	add	r7, r0
 8002f24:	ed97 aa00 	vldr	s20, [r7]
         co6 = pCoef[2 * ia5];
 8002f28:	00c9      	lsls	r1, r1, #3
 8002f2a:	9f08      	ldr	r7, [sp, #32]
 8002f2c:	440f      	add	r7, r1
 8002f2e:	edd7 9a00 	vldr	s19, [r7]
         co7 = pCoef[2 * ia6];
 8002f32:	00d2      	lsls	r2, r2, #3
 8002f34:	9f08      	ldr	r7, [sp, #32]
 8002f36:	4417      	add	r7, r2
 8002f38:	ed97 9a00 	vldr	s18, [r7]
         co8 = pCoef[2 * ia7];
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	9f08      	ldr	r7, [sp, #32]
 8002f40:	441f      	add	r7, r3
 8002f42:	edd7 8a00 	vldr	s17, [r7]
         si2 = pCoef[2 * ia1 + 1];
 8002f46:	3604      	adds	r6, #4
 8002f48:	9f08      	ldr	r7, [sp, #32]
 8002f4a:	443e      	add	r6, r7
 8002f4c:	ed96 8a00 	vldr	s16, [r6]
         si3 = pCoef[2 * ia2 + 1];
 8002f50:	3504      	adds	r5, #4
 8002f52:	443d      	add	r5, r7
 8002f54:	ed95 0a00 	vldr	s0, [r5]
         si4 = pCoef[2 * ia3 + 1];
 8002f58:	3404      	adds	r4, #4
 8002f5a:	443c      	add	r4, r7
 8002f5c:	edd4 0a00 	vldr	s1, [r4]
         si5 = pCoef[2 * ia4 + 1];
 8002f60:	3004      	adds	r0, #4
 8002f62:	4438      	add	r0, r7
 8002f64:	ed90 1a00 	vldr	s2, [r0]
         si6 = pCoef[2 * ia5 + 1];
 8002f68:	3104      	adds	r1, #4
 8002f6a:	4439      	add	r1, r7
 8002f6c:	edd1 1a00 	vldr	s3, [r1]
         si7 = pCoef[2 * ia6 + 1];
 8002f70:	3204      	adds	r2, #4
 8002f72:	443a      	add	r2, r7
 8002f74:	ed92 2a00 	vldr	s4, [r2]
         si8 = pCoef[2 * ia7 + 1];         
 8002f78:	3304      	adds	r3, #4
 8002f7a:	443b      	add	r3, r7
 8002f7c:	edd3 2a00 	vldr	s5, [r3]
         
         i1 = j;
 8002f80:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8002f84:	46cc      	mov	ip, r9
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002f86:	eb0c 010e 	add.w	r1, ip, lr
            i3 = i2 + n2;
 8002f8a:	eb0e 0401 	add.w	r4, lr, r1
            i4 = i3 + n2;
 8002f8e:	eb0e 0304 	add.w	r3, lr, r4
            i5 = i4 + n2;
 8002f92:	eb0e 0503 	add.w	r5, lr, r3
            i6 = i5 + n2;
 8002f96:	eb0e 0205 	add.w	r2, lr, r5
            i7 = i6 + n2;
 8002f9a:	eb0e 0002 	add.w	r0, lr, r2
            i8 = i7 + n2;
 8002f9e:	eb0e 0600 	add.w	r6, lr, r0
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002fa2:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 8002fa6:	eb08 0b07 	add.w	fp, r8, r7
 8002faa:	eddb 4a00 	vldr	s9, [fp]
 8002fae:	00ed      	lsls	r5, r5, #3
 8002fb0:	eb08 0a05 	add.w	sl, r8, r5
 8002fb4:	edda 7a00 	vldr	s15, [sl]
 8002fb8:	ee34 3aa7 	vadd.f32	s6, s9, s15
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002fbc:	ee74 4ae7 	vsub.f32	s9, s9, s15
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002fc0:	00c9      	lsls	r1, r1, #3
 8002fc2:	9100      	str	r1, [sp, #0]
 8002fc4:	4441      	add	r1, r8
 8002fc6:	9101      	str	r1, [sp, #4]
 8002fc8:	edd1 6a00 	vldr	s13, [r1]
 8002fcc:	00d2      	lsls	r2, r2, #3
 8002fce:	eb08 0902 	add.w	r9, r8, r2
 8002fd2:	f8cd 9008 	str.w	r9, [sp, #8]
 8002fd6:	edd9 7a00 	vldr	s15, [r9]
 8002fda:	ee36 7aa7 	vadd.f32	s14, s13, s15
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002fde:	ee36 dae7 	vsub.f32	s26, s13, s15
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002fe2:	00e4      	lsls	r4, r4, #3
 8002fe4:	eb08 0904 	add.w	r9, r8, r4
 8002fe8:	edd9 6a00 	vldr	s13, [r9]
 8002fec:	00c0      	lsls	r0, r0, #3
 8002fee:	eb08 0100 	add.w	r1, r8, r0
 8002ff2:	9103      	str	r1, [sp, #12]
 8002ff4:	edd1 7a00 	vldr	s15, [r1]
 8002ff8:	ee76 5aa7 	vadd.f32	s11, s13, s15
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002ffc:	ee36 5ae7 	vsub.f32	s10, s13, s15
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	eb08 0103 	add.w	r1, r8, r3
 8003006:	9104      	str	r1, [sp, #16]
 8003008:	edd1 6a00 	vldr	s13, [r1]
 800300c:	00f6      	lsls	r6, r6, #3
 800300e:	eb08 0106 	add.w	r1, r8, r6
 8003012:	9105      	str	r1, [sp, #20]
 8003014:	edd1 7a00 	vldr	s15, [r1]
 8003018:	ee36 6aa7 	vadd.f32	s12, s13, s15
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800301c:	ee76 6ae7 	vsub.f32	s13, s13, s15
            t1 = r1 - r3;
 8003020:	ee33 fa65 	vsub.f32	s30, s6, s11
            r1 = r1 + r3;
 8003024:	ee33 3a25 	vadd.f32	s6, s6, s11
            r3 = r2 - r4;
 8003028:	ee77 ea46 	vsub.f32	s29, s14, s12
            r2 = r2 + r4;
 800302c:	ee37 7a06 	vadd.f32	s14, s14, s12
            pSrc[2 * i1] = r1 + r2;
 8003030:	ee73 7a07 	vadd.f32	s15, s6, s14
 8003034:	edcb 7a00 	vstr	s15, [fp]
            r2 = r1 - r2;
 8003038:	ee73 da47 	vsub.f32	s27, s6, s14
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800303c:	3704      	adds	r7, #4
 800303e:	4447      	add	r7, r8
 8003040:	ed97 7a00 	vldr	s14, [r7]
 8003044:	3504      	adds	r5, #4
 8003046:	4445      	add	r5, r8
 8003048:	edd5 7a00 	vldr	s15, [r5]
 800304c:	ee37 ca27 	vadd.f32	s24, s14, s15
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003050:	ee77 5a67 	vsub.f32	s11, s14, s15
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8003054:	9900      	ldr	r1, [sp, #0]
 8003056:	3104      	adds	r1, #4
 8003058:	4441      	add	r1, r8
 800305a:	edd1 3a00 	vldr	s7, [r1]
 800305e:	3204      	adds	r2, #4
 8003060:	4442      	add	r2, r8
 8003062:	edd2 7a00 	vldr	s15, [r2]
 8003066:	ee73 caa7 	vadd.f32	s25, s7, s15
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800306a:	ee73 3ae7 	vsub.f32	s7, s7, s15
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800306e:	3404      	adds	r4, #4
 8003070:	4444      	add	r4, r8
 8003072:	ed94 6a00 	vldr	s12, [r4]
 8003076:	3004      	adds	r0, #4
 8003078:	4440      	add	r0, r8
 800307a:	ed90 7a00 	vldr	s14, [r0]
 800307e:	ee76 7a07 	vadd.f32	s15, s12, s14
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003082:	ee36 6a47 	vsub.f32	s12, s12, s14
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8003086:	3304      	adds	r3, #4
 8003088:	4443      	add	r3, r8
 800308a:	ed93 4a00 	vldr	s8, [r3]
 800308e:	3604      	adds	r6, #4
 8003090:	4446      	add	r6, r8
 8003092:	ed96 7a00 	vldr	s14, [r6]
 8003096:	ee34 3a07 	vadd.f32	s6, s8, s14
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800309a:	ee34 4a47 	vsub.f32	s8, s8, s14
            t2 = s1 - s3;
 800309e:	ee3c ea67 	vsub.f32	s28, s24, s15
            s1 = s1 + s3;
 80030a2:	ee3c ca27 	vadd.f32	s24, s24, s15
            s3 = s2 - s4;
 80030a6:	ee7c 7ac3 	vsub.f32	s15, s25, s6
            s2 = s2 + s4;
 80030aa:	ee3c 3a83 	vadd.f32	s6, s25, s6
            r1 = t1 + s3;
 80030ae:	ee7f ca27 	vadd.f32	s25, s30, s15
            t1 = t1 - s3;
 80030b2:	ee7f 7a67 	vsub.f32	s15, s30, s15
            pSrc[2 * i1 + 1] = s1 + s2;
 80030b6:	ee3c 7a03 	vadd.f32	s14, s24, s6
 80030ba:	ed87 7a00 	vstr	s14, [r7]
            s2 = s1 - s2;
 80030be:	ee3c 7a43 	vsub.f32	s14, s24, s6
            s1 = t2 - r3;
 80030c2:	ee3e ca6e 	vsub.f32	s24, s28, s29
            t2 = t2 + r3;
 80030c6:	ee3e ea8e 	vadd.f32	s28, s29, s28
            p1 = co5 * r2;
 80030ca:	ee2a fa2d 	vmul.f32	s30, s20, s27
            p2 = si5 * s2;
 80030ce:	ee61 ea07 	vmul.f32	s29, s2, s14
            p3 = co5 * s2;
 80030d2:	ee2a 7a07 	vmul.f32	s14, s20, s14
            p4 = si5 * r2;
 80030d6:	ee21 3a2d 	vmul.f32	s6, s2, s27
            pSrc[2 * i5]     = p1 + p2;
 80030da:	ee7f da2e 	vadd.f32	s27, s30, s29
 80030de:	edca da00 	vstr	s27, [sl]
            pSrc[2 * i5 + 1] = p3 - p4;
 80030e2:	ee37 7a43 	vsub.f32	s14, s14, s6
 80030e6:	ed85 7a00 	vstr	s14, [r5]
            p1 = co3 * r1;
 80030ea:	ee2b 3a2c 	vmul.f32	s6, s22, s25
            p2 = si3 * s1;
 80030ee:	ee20 7a0c 	vmul.f32	s14, s0, s24
            p3 = co3 * s1;
 80030f2:	ee2b ca0c 	vmul.f32	s24, s22, s24
            p4 = si3 * r1;
 80030f6:	ee60 ca2c 	vmul.f32	s25, s0, s25
            pSrc[2 * i3]     = p1 + p2;
 80030fa:	ee33 7a07 	vadd.f32	s14, s6, s14
 80030fe:	ed89 7a00 	vstr	s14, [r9]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003102:	ee3c ca6c 	vsub.f32	s24, s24, s25
 8003106:	ed84 ca00 	vstr	s24, [r4]
            p1 = co7 * t1;
 800310a:	ee29 3a27 	vmul.f32	s6, s18, s15
            p2 = si7 * t2;
 800310e:	ee22 7a0e 	vmul.f32	s14, s4, s28
            p3 = co7 * t2;
 8003112:	ee29 ea0e 	vmul.f32	s28, s18, s28
            p4 = si7 * t1;
 8003116:	ee62 7a27 	vmul.f32	s15, s4, s15
            pSrc[2 * i7]     = p1 + p2;
 800311a:	ee33 7a07 	vadd.f32	s14, s6, s14
 800311e:	9c03      	ldr	r4, [sp, #12]
 8003120:	ed84 7a00 	vstr	s14, [r4]
            pSrc[2 * i7 + 1] = p3 - p4;
 8003124:	ee3e ea67 	vsub.f32	s28, s28, s15
 8003128:	ed80 ea00 	vstr	s28, [r0]
            r1 = (r6 - r8) * C81;
 800312c:	ee3d ca66 	vsub.f32	s24, s26, s13
 8003130:	ed9f 3a32 	vldr	s6, [pc, #200]	; 80031fc <arm_radix8_butterfly_f32+0x53c>
 8003134:	ee2c ca03 	vmul.f32	s24, s24, s6
            r6 = (r6 + r8) * C81;
 8003138:	ee7d 6a26 	vadd.f32	s13, s26, s13
 800313c:	ee66 6a83 	vmul.f32	s13, s13, s6
            s1 = (s6 - s8) * C81;
 8003140:	ee33 7ac4 	vsub.f32	s14, s7, s8
 8003144:	ee27 7a03 	vmul.f32	s14, s14, s6
            s6 = (s6 + s8) * C81;
 8003148:	ee33 4a84 	vadd.f32	s8, s7, s8
 800314c:	ee24 3a03 	vmul.f32	s6, s8, s6
            t1 = r5 - r1;
 8003150:	ee74 7acc 	vsub.f32	s15, s9, s24
            r5 = r5 + r1;
 8003154:	ee74 4a8c 	vadd.f32	s9, s9, s24
            r8 = r7 - r6;
 8003158:	ee75 3a66 	vsub.f32	s7, s10, s13
            r7 = r7 + r6;
 800315c:	ee75 6a26 	vadd.f32	s13, s10, s13
            t2 = s5 - s1;
 8003160:	ee35 cac7 	vsub.f32	s24, s11, s14
            s5 = s5 + s1;
 8003164:	ee35 7a87 	vadd.f32	s14, s11, s14
            s8 = s7 - s6;
 8003168:	ee36 5a43 	vsub.f32	s10, s12, s6
            s7 = s7 + s6;
 800316c:	ee36 6a03 	vadd.f32	s12, s12, s6
            r1 = r5 + s7;
 8003170:	ee74 5a86 	vadd.f32	s11, s9, s12
            r5 = r5 - s7;
 8003174:	ee34 6ac6 	vsub.f32	s12, s9, s12
            r6 = t1 + s8;
 8003178:	ee37 4a85 	vadd.f32	s8, s15, s10
            t1 = t1 - s8;
 800317c:	ee77 4ac5 	vsub.f32	s9, s15, s10
            s1 = s5 - r7;
 8003180:	ee37 5a66 	vsub.f32	s10, s14, s13
            s5 = s5 + r7;
 8003184:	ee76 7a87 	vadd.f32	s15, s13, s14
            s6 = t2 - r8;
 8003188:	ee7c 6a63 	vsub.f32	s13, s24, s7
            t2 = t2 + r8;
 800318c:	ee33 7a8c 	vadd.f32	s14, s7, s24
            p1 = co2 * r1;
 8003190:	ee2b 3aa5 	vmul.f32	s6, s23, s11
            p2 = si2 * s1;
 8003194:	ee68 3a05 	vmul.f32	s7, s16, s10
            p3 = co2 * s1;
 8003198:	ee2b 5a85 	vmul.f32	s10, s23, s10
            p4 = si2 * r1;
 800319c:	ee68 5a25 	vmul.f32	s11, s16, s11
            pSrc[2 * i2]     = p1 + p2;
 80031a0:	ee73 3a23 	vadd.f32	s7, s6, s7
 80031a4:	9801      	ldr	r0, [sp, #4]
 80031a6:	edc0 3a00 	vstr	s7, [r0]
            pSrc[2 * i2 + 1] = p3 - p4;
 80031aa:	ee75 5a65 	vsub.f32	s11, s10, s11
 80031ae:	edc1 5a00 	vstr	s11, [r1]
            p1 = co8 * r5;
 80031b2:	ee28 5a86 	vmul.f32	s10, s17, s12
            p2 = si8 * s5;
 80031b6:	ee62 5aa7 	vmul.f32	s11, s5, s15
            p3 = co8 * s5;
 80031ba:	ee68 7aa7 	vmul.f32	s15, s17, s15
            p4 = si8 * r5;
 80031be:	ee22 6a86 	vmul.f32	s12, s5, s12
            pSrc[2 * i8]     = p1 + p2;
 80031c2:	ee75 5a25 	vadd.f32	s11, s10, s11
 80031c6:	9805      	ldr	r0, [sp, #20]
 80031c8:	edc0 5a00 	vstr	s11, [r0]
            pSrc[2 * i8 + 1] = p3 - p4;
 80031cc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80031d0:	edc6 7a00 	vstr	s15, [r6]
            p1 = co6 * r6;
 80031d4:	ee69 5a84 	vmul.f32	s11, s19, s8
            p2 = si6 * s6;
 80031d8:	ee61 7aa6 	vmul.f32	s15, s3, s13
            p3 = co6 * s6;
 80031dc:	ee29 6aa6 	vmul.f32	s12, s19, s13
            p4 = si6 * r6;
 80031e0:	ee61 6a84 	vmul.f32	s13, s3, s8
            pSrc[2 * i6]     = p1 + p2;
 80031e4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80031e8:	9902      	ldr	r1, [sp, #8]
 80031ea:	edc1 7a00 	vstr	s15, [r1]
            pSrc[2 * i6 + 1] = p3 - p4;
 80031ee:	ee76 6a66 	vsub.f32	s13, s12, s13
 80031f2:	edc2 6a00 	vstr	s13, [r2]
            p1 = co4 * t1;
 80031f6:	ee2a 6aa4 	vmul.f32	s12, s21, s9
 80031fa:	e001      	b.n	8003200 <arm_radix8_butterfly_f32+0x540>
 80031fc:	3f3504f3 	.word	0x3f3504f3
            p2 = si4 * t2;
 8003200:	ee60 6a87 	vmul.f32	s13, s1, s14
            p3 = co4 * t2;
 8003204:	ee2a 7a87 	vmul.f32	s14, s21, s14
            p4 = si4 * t1;
 8003208:	ee60 7aa4 	vmul.f32	s15, s1, s9
            pSrc[2 * i4]     = p1 + p2;
 800320c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8003210:	9904      	ldr	r1, [sp, #16]
 8003212:	edc1 6a00 	vstr	s13, [r1]
            pSrc[2 * i4 + 1] = p3 - p4;
 8003216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800321a:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 800321e:	9b06      	ldr	r3, [sp, #24]
 8003220:	449c      	add	ip, r3
         } while(i1 < fftLen);
 8003222:	9b07      	ldr	r3, [sp, #28]
 8003224:	4563      	cmp	r3, ip
 8003226:	f63f aeae 	bhi.w	8002f86 <arm_radix8_butterfly_f32+0x2c6>
         
         j++;
 800322a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800322c:	3301      	adds	r3, #1
 800322e:	930a      	str	r3, [sp, #40]	; 0x28
      } while(j < n2);
 8003230:	459e      	cmp	lr, r3
 8003232:	f63f ae58 	bhi.w	8002ee6 <arm_radix8_butterfly_f32+0x226>
      
      twidCoefModifier <<= 3;
 8003236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003238:	00db      	lsls	r3, r3, #3
 800323a:	b29b      	uxth	r3, r3
 800323c:	930b      	str	r3, [sp, #44]	; 0x2c
      n2 = n2 >> 3;
 800323e:	f8cd e018 	str.w	lr, [sp, #24]
 8003242:	e547      	b.n	8002cd4 <arm_radix8_butterfly_f32+0x14>
   } while(n2 > 7);   
}
 8003244:	b00d      	add	sp, #52	; 0x34
 8003246:	ecbd 8b10 	vpop	{d8-d15}
 800324a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800324e:	bf00      	nop

08003250 <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 8003250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003254:	4604      	mov	r4, r0
 8003256:	460d      	mov	r5, r1
 8003258:	4617      	mov	r7, r2

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 800325a:	0896      	lsrs	r6, r2, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800325c:	e00d      	b.n	800327a <arm_cmplx_mag_f32+0x2a>

      return (ARM_MATH_SUCCESS);
    }
    else
    {
      *pOut = 0.0f;
 800325e:	2300      	movs	r3, #0
 8003260:	602b      	str	r3, [r5, #0]
 8003262:	e01f      	b.n	80032a4 <arm_cmplx_mag_f32+0x54>
 8003264:	2300      	movs	r3, #0
 8003266:	606b      	str	r3, [r5, #4]
 8003268:	e02f      	b.n	80032ca <arm_cmplx_mag_f32+0x7a>
 800326a:	2300      	movs	r3, #0
 800326c:	60ab      	str	r3, [r5, #8]
 800326e:	e03f      	b.n	80032f0 <arm_cmplx_mag_f32+0xa0>
 8003270:	2300      	movs	r3, #0
 8003272:	60eb      	str	r3, [r5, #12]
    imagIn = *pSrc++;
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);


    /* Decrement the loop counter */
    blkCnt--;
 8003274:	3e01      	subs	r6, #1
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8003276:	4625      	mov	r5, r4
    imagIn = *pSrc++;
 8003278:	4644      	mov	r4, r8
  while(blkCnt > 0u)
 800327a:	2e00      	cmp	r6, #0
 800327c:	d050      	beq.n	8003320 <arm_cmplx_mag_f32+0xd0>
    realIn = *pSrc++;
 800327e:	ed94 0a00 	vldr	s0, [r4]
    imagIn = *pSrc++;
 8003282:	edd4 7a01 	vldr	s15, [r4, #4]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8003286:	ee20 0a00 	vmul.f32	s0, s0, s0
 800328a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800328e:	ee30 0a27 	vadd.f32	s0, s0, s15
    if(in >= 0.0f)
 8003292:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	dbe0      	blt.n	800325e <arm_cmplx_mag_f32+0xe>
      *pOut = __builtin_sqrtf(in);
 800329c:	f004 fb1a 	bl	80078d4 <sqrtf>
 80032a0:	ed85 0a00 	vstr	s0, [r5]
    realIn = *pSrc++;
 80032a4:	ed94 0a02 	vldr	s0, [r4, #8]
    imagIn = *pSrc++;
 80032a8:	edd4 7a03 	vldr	s15, [r4, #12]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80032ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80032b0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032b4:	ee30 0a27 	vadd.f32	s0, s0, s15
    if(in >= 0.0f)
 80032b8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	dbd0      	blt.n	8003264 <arm_cmplx_mag_f32+0x14>
      *pOut = __builtin_sqrtf(in);
 80032c2:	f004 fb07 	bl	80078d4 <sqrtf>
 80032c6:	ed85 0a01 	vstr	s0, [r5, #4]
    realIn = *pSrc++;
 80032ca:	ed94 0a04 	vldr	s0, [r4, #16]
    imagIn = *pSrc++;
 80032ce:	edd4 7a05 	vldr	s15, [r4, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80032d2:	ee20 0a00 	vmul.f32	s0, s0, s0
 80032d6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032da:	ee30 0a27 	vadd.f32	s0, s0, s15
    if(in >= 0.0f)
 80032de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	dbc0      	blt.n	800326a <arm_cmplx_mag_f32+0x1a>
      *pOut = __builtin_sqrtf(in);
 80032e8:	f004 faf4 	bl	80078d4 <sqrtf>
 80032ec:	ed85 0a02 	vstr	s0, [r5, #8]
    realIn = *pSrc++;
 80032f0:	ed94 0a06 	vldr	s0, [r4, #24]
    imagIn = *pSrc++;
 80032f4:	f104 0820 	add.w	r8, r4, #32
 80032f8:	edd4 7a07 	vldr	s15, [r4, #28]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80032fc:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003300:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003304:	ee30 0a27 	vadd.f32	s0, s0, s15
 8003308:	f105 0410 	add.w	r4, r5, #16
    if(in >= 0.0f)
 800330c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003310:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003314:	dbac      	blt.n	8003270 <arm_cmplx_mag_f32+0x20>
      *pOut = __builtin_sqrtf(in);
 8003316:	f004 fadd 	bl	80078d4 <sqrtf>
 800331a:	ed85 0a03 	vstr	s0, [r5, #12]
 800331e:	e7a9      	b.n	8003274 <arm_cmplx_mag_f32+0x24>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 8003320:	f007 0703 	and.w	r7, r7, #3

  while(blkCnt > 0u)
 8003324:	e004      	b.n	8003330 <arm_cmplx_mag_f32+0xe0>
      *pOut = 0.0f;
 8003326:	2300      	movs	r3, #0
 8003328:	602b      	str	r3, [r5, #0]
    imagIn = *pSrc++;
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);

    /* Decrement the loop counter */
    blkCnt--;
 800332a:	3f01      	subs	r7, #1
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800332c:	4625      	mov	r5, r4
    imagIn = *pSrc++;
 800332e:	4634      	mov	r4, r6
  while(blkCnt > 0u)
 8003330:	b1b7      	cbz	r7, 8003360 <arm_cmplx_mag_f32+0x110>
    realIn = *pSrc++;
 8003332:	4626      	mov	r6, r4
 8003334:	3608      	adds	r6, #8
 8003336:	ed94 0a00 	vldr	s0, [r4]
    imagIn = *pSrc++;
 800333a:	edd4 7a01 	vldr	s15, [r4, #4]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 800333e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8003342:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003346:	ee30 0a27 	vadd.f32	s0, s0, s15
 800334a:	1d2c      	adds	r4, r5, #4
    if(in >= 0.0f)
 800334c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	dbe7      	blt.n	8003326 <arm_cmplx_mag_f32+0xd6>
      *pOut = __builtin_sqrtf(in);
 8003356:	f004 fabd 	bl	80078d4 <sqrtf>
 800335a:	ed85 0a00 	vstr	s0, [r5]
 800335e:	e7e4      	b.n	800332a <arm_cmplx_mag_f32+0xda>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8003360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003364 <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 8003364:	b410      	push	{r4}
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 8003366:	089c      	lsrs	r4, r3, #2

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 8003368:	e023      	b.n	80033b2 <arm_mult_f32+0x4e>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    /* read sample from sourceA */
    inA1 = *pSrcA;
 800336a:	ed90 6a00 	vldr	s12, [r0]
    /* read sample from sourceB */

    inB1 = *pSrcB;
 800336e:	ed91 7a00 	vldr	s14, [r1]
    /* read sample from sourceA */
    inA2 = *(pSrcA + 1);
 8003372:	edd0 6a01 	vldr	s13, [r0, #4]
    /* read sample from sourceB */
    inB2 = *(pSrcB + 1);
 8003376:	edd1 7a01 	vldr	s15, [r1, #4]

    /* out = sourceA * sourceB */
    out1 = inA1 * inB1;
 800337a:	ee26 6a07 	vmul.f32	s12, s12, s14

    /* read sample from sourceA */
    inA3 = *(pSrcA + 2);
 800337e:	ed90 7a02 	vldr	s14, [r0, #8]
    /* read sample from sourceB */
    inB3 = *(pSrcB + 2);
 8003382:	edd1 5a02 	vldr	s11, [r1, #8]

    /* out = sourceA * sourceB */
    out2 = inA2 * inB2;
 8003386:	ee66 6aa7 	vmul.f32	s13, s13, s15

    /* read sample from sourceA */
    inA4 = *(pSrcA + 3);
 800338a:	edd0 7a03 	vldr	s15, [r0, #12]

    /* store result to destination buffer */
    *pDst = out1;
 800338e:	ed82 6a00 	vstr	s12, [r2]

    /* read sample from sourceB */
    inB4 = *(pSrcB + 3);
 8003392:	ed91 6a03 	vldr	s12, [r1, #12]

    /* out = sourceA * sourceB */
    out3 = inA3 * inB3;
 8003396:	ee27 7a25 	vmul.f32	s14, s14, s11

    /* store result to destination buffer */
    *(pDst + 1) = out2;
 800339a:	edc2 6a01 	vstr	s13, [r2, #4]

    /* out = sourceA * sourceB */
    out4 = inA4 * inB4;
 800339e:	ee67 7a86 	vmul.f32	s15, s15, s12
    /* store result to destination buffer */
    *(pDst + 2) = out3;
 80033a2:	ed82 7a02 	vstr	s14, [r2, #8]
    /* store result to destination buffer */
    *(pDst + 3) = out4;
 80033a6:	edc2 7a03 	vstr	s15, [r2, #12]


    /* update pointers to process next samples */
    pSrcA += 4u;
 80033aa:	3010      	adds	r0, #16
    pSrcB += 4u;
 80033ac:	3110      	adds	r1, #16
    pDst += 4u;
 80033ae:	3210      	adds	r2, #16

    /* Decrement the blockSize loop counter */
    blkCnt--;
 80033b0:	3c01      	subs	r4, #1
  while(blkCnt > 0u)
 80033b2:	2c00      	cmp	r4, #0
 80033b4:	d1d9      	bne.n	800336a <arm_mult_f32+0x6>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 80033b6:	f003 0303 	and.w	r3, r3, #3
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80033ba:	e00b      	b.n	80033d4 <arm_mult_f32+0x70>
  {
    /* C = A * B */
    /* Multiply the inputs and store the results in output buffer */
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 80033bc:	edd0 7a00 	vldr	s15, [r0]
 80033c0:	ed91 7a00 	vldr	s14, [r1]
 80033c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c8:	edc2 7a00 	vstr	s15, [r2]

    /* Decrement the blockSize loop counter */
    blkCnt--;
 80033cc:	3b01      	subs	r3, #1
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 80033ce:	3204      	adds	r2, #4
 80033d0:	3104      	adds	r1, #4
 80033d2:	3004      	adds	r0, #4
  while(blkCnt > 0u)
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f1      	bne.n	80033bc <arm_mult_f32+0x58>
  }
}
 80033d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033dc:	4770      	bx	lr

080033de <stage_rfft_f32>:
#include "arm_math.h"

void stage_rfft_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p, float32_t * pOut)
{
 80033de:	b470      	push	{r4, r5, r6}
   uint32_t  k;								   /* Loop Counter                     */
   float32_t twR, twI;						   /* RFFT Twiddle coefficients        */
   float32_t * pCoeff = S->pTwiddleRFFT;  /* Points to RFFT Twiddle factors   */
 80033e0:	6945      	ldr	r5, [r0, #20]
   float32_t xAR, xAI, xBR, xBI;				/* temporary variables              */
   float32_t t1a, t1b;				         /* temporary variables              */
   float32_t p0, p1, p2, p3;				   /* temporary variables              */


   k = (S->Sint).fftLen - 1;					
 80033e2:	8800      	ldrh	r0, [r0, #0]
 80033e4:	3801      	subs	r0, #1

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 80033e6:	edd1 7a00 	vldr	s15, [r1]
   xBI = pB[1];
 80033ea:	ed91 7a01 	vldr	s14, [r1, #4]
   xAR = pA[0];
   xAI = pA[1];

   twR = *pCoeff++ ;
   twI = *pCoeff++ ;
 80033ee:	3508      	adds	r5, #8
   
   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 80033f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
   
   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 80033f4:	ee37 7a07 	vadd.f32	s14, s14, s14

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 80033f8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80033fc:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8003400:	ee66 6a86 	vmul.f32	s13, s13, s12
 8003404:	4614      	mov	r4, r2
 8003406:	ee16 3a90 	vmov	r3, s13
 800340a:	f844 3b08 	str.w	r3, [r4], #8
   *pOut++ = 0.5f * ( t1a - t1b );
 800340e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003412:	ee67 7a86 	vmul.f32	s15, s15, s12
 8003416:	edc2 7a01 	vstr	s15, [r2, #4]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800341a:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
   pA += 2;
 800341e:	3108      	adds	r1, #8
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 8003420:	edd6 4a01 	vldr	s9, [r6, #4]
      xBR = pB[0];
 8003424:	4633      	mov	r3, r6
 8003426:	3e08      	subs	r6, #8
 8003428:	edd3 5a00 	vldr	s11, [r3]
      xAR = pA[0];
 800342c:	ed91 4a00 	vldr	s8, [r1]
      xAI = pA[1];
 8003430:	ed91 6a01 	vldr	s12, [r1, #4]

      twR = *pCoeff++;
 8003434:	462b      	mov	r3, r5
 8003436:	3308      	adds	r3, #8
 8003438:	edd5 6a00 	vldr	s13, [r5]
      twI = *pCoeff++;
 800343c:	ed95 7a01 	vldr	s14, [r5, #4]

      t1a = xBR - xAR ;
 8003440:	ee75 7ac4 	vsub.f32	s15, s11, s8
      t1b = xBI + xAI ;
 8003444:	ee74 3a86 	vadd.f32	s7, s9, s12

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8003448:	ee26 5aa7 	vmul.f32	s10, s13, s15
      p1 = twI * t1a;
 800344c:	ee67 7a27 	vmul.f32	s15, s14, s15
      p2 = twR * t1b;
 8003450:	ee66 6aa3 	vmul.f32	s13, s13, s7
      p3 = twI * t1b;
 8003454:	ee27 7a23 	vmul.f32	s14, s14, s7

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8003458:	ee75 5a84 	vadd.f32	s11, s11, s8
 800345c:	ee75 5a25 	vadd.f32	s11, s10, s11
 8003460:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003464:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 8003468:	ee27 7a25 	vmul.f32	s14, s14, s11
 800346c:	4622      	mov	r2, r4
 800346e:	ee17 5a10 	vmov	r5, s14
 8003472:	f842 5b08 	str.w	r5, [r2], #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8003476:	ee36 6a64 	vsub.f32	s12, s12, s9
 800347a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800347e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003482:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8003486:	edc4 7a01 	vstr	s15, [r4, #4]

      pA += 2;
 800348a:	3108      	adds	r1, #8
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800348c:	4614      	mov	r4, r2
      twI = *pCoeff++;
 800348e:	461d      	mov	r5, r3
      pB -= 2;
      k--;
   } while(k > 0u);
 8003490:	3801      	subs	r0, #1
 8003492:	d1c5      	bne.n	8003420 <stage_rfft_f32+0x42>
}
 8003494:	bc70      	pop	{r4, r5, r6}
 8003496:	4770      	bx	lr

08003498 <merge_rfft_f32>:

/* Prepares data for inverse cfft */
void merge_rfft_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut)
{
 8003498:	b470      	push	{r4, r5, r6}
   uint32_t  k;								/* Loop Counter                     */
   float32_t twR, twI;						/* RFFT Twiddle coefficients        */
   float32_t *pCoeff = S->pTwiddleRFFT;		/* Points to RFFT Twiddle factors   */
 800349a:	6945      	ldr	r5, [r0, #20]
   float32_t *pA = p;						/* increasing pointer               */
   float32_t *pB = p;						/* decreasing pointer               */
   float32_t xAR, xAI, xBR, xBI;			/* temporary variables              */
   float32_t t1a, t1b, r, s, t, u;			/* temporary variables              */

   k = (S->Sint).fftLen - 1;					
 800349c:	8800      	ldrh	r0, [r0, #0]
 800349e:	3801      	subs	r0, #1

   xAR = pA[0];
 80034a0:	edd1 7a00 	vldr	s15, [r1]
   xAI = pA[1];
 80034a4:	ed91 6a01 	vldr	s12, [r1, #4]

   pCoeff += 2 ;
 80034a8:	3508      	adds	r5, #8

   *pOut++ = 0.5f * ( xAR + xAI );
 80034aa:	ee37 7a86 	vadd.f32	s14, s15, s12
 80034ae:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80034b2:	ee27 7a26 	vmul.f32	s14, s14, s13
 80034b6:	4614      	mov	r4, r2
 80034b8:	ee17 3a10 	vmov	r3, s14
 80034bc:	f844 3b08 	str.w	r3, [r4], #8
   *pOut++ = 0.5f * ( xAR - xAI );
 80034c0:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80034c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c8:	edc2 7a01 	vstr	s15, [r2, #4]

   pB  =  p + 2*k ;
 80034cc:	eb01 06c0 	add.w	r6, r1, r0, lsl #3
   pA +=  2	   ;
 80034d0:	3108      	adds	r1, #8

   while(k > 0u)
 80034d2:	e038      	b.n	8003546 <merge_rfft_f32+0xae>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 80034d4:	ed96 5a01 	vldr	s10, [r6, #4]
      xBR =   pB[0]    ;
 80034d8:	4633      	mov	r3, r6
 80034da:	3e08      	subs	r6, #8
 80034dc:	ed93 7a00 	vldr	s14, [r3]
      xAR =  pA[0];
 80034e0:	edd1 5a00 	vldr	s11, [r1]
      xAI =  pA[1];
 80034e4:	ed91 6a01 	vldr	s12, [r1, #4]

      twR = *pCoeff++;
 80034e8:	462a      	mov	r2, r5
 80034ea:	3208      	adds	r2, #8
 80034ec:	edd5 6a00 	vldr	s13, [r5]
      twI = *pCoeff++;
 80034f0:	edd5 7a01 	vldr	s15, [r5, #4]

      t1a = xAR - xBR ;
 80034f4:	ee35 4ac7 	vsub.f32	s8, s11, s14
      t1b = xAI + xBI ;
 80034f8:	ee75 4a06 	vadd.f32	s9, s10, s12

      r = twR * t1a;
 80034fc:	ee26 3a84 	vmul.f32	s6, s13, s8
      s = twI * t1b;
 8003500:	ee67 3aa4 	vmul.f32	s7, s15, s9
      t = twI * t1a;
 8003504:	ee67 7a84 	vmul.f32	s15, s15, s8
      u = twR * t1b;
 8003508:	ee66 6aa4 	vmul.f32	s13, s13, s9

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800350c:	ee37 7a25 	vadd.f32	s14, s14, s11
 8003510:	ee37 7a43 	vsub.f32	s14, s14, s6
 8003514:	ee37 7a63 	vsub.f32	s14, s14, s7
 8003518:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800351c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8003520:	4623      	mov	r3, r4
 8003522:	ee17 5a10 	vmov	r5, s14
 8003526:	f843 5b08 	str.w	r5, [r3], #8
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800352a:	ee36 6a45 	vsub.f32	s12, s12, s10
 800352e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8003532:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003536:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800353a:	edc4 7a01 	vstr	s15, [r4, #4]

      pA += 2;
 800353e:	3108      	adds	r1, #8
      pB -= 2;
      k--;
 8003540:	3801      	subs	r0, #1
      twI = *pCoeff++;
 8003542:	4615      	mov	r5, r2
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8003544:	461c      	mov	r4, r3
   while(k > 0u)
 8003546:	2800      	cmp	r0, #0
 8003548:	d1c4      	bne.n	80034d4 <merge_rfft_f32+0x3c>
   }

}
 800354a:	bc70      	pop	{r4, r5, r6}
 800354c:	4770      	bx	lr

0800354e <arm_rfft_fast_f32>:

void arm_rfft_fast_f32(
arm_rfft_fast_instance_f32 * S,
float32_t * p, float32_t * pOut,
uint8_t ifftFlag)
{
 800354e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003550:	4604      	mov	r4, r0
 8003552:	460d      	mov	r5, r1
 8003554:	4616      	mov	r6, r2
   arm_cfft_instance_f32 * Sint = &(S->Sint);
   Sint->fftLen = S->fftLenRFFT / 2;
 8003556:	8a02      	ldrh	r2, [r0, #16]
 8003558:	0852      	lsrs	r2, r2, #1
 800355a:	8002      	strh	r2, [r0, #0]

   /* Calculation of Real FFT */
   if(ifftFlag)
 800355c:	461f      	mov	r7, r3
 800355e:	b94b      	cbnz	r3, 8003574 <arm_rfft_fast_f32+0x26>
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
   }
   else
   {
      /* Calculation of RFFT of input */
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8003560:	2301      	movs	r3, #1
 8003562:	463a      	mov	r2, r7
 8003564:	f001 fe9e 	bl	80052a4 <arm_cfft_f32>
   
      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
 8003568:	4632      	mov	r2, r6
 800356a:	4629      	mov	r1, r5
 800356c:	4620      	mov	r0, r4
 800356e:	f7ff ff36 	bl	80033de <stage_rfft_f32>
 8003572:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      merge_rfft_f32(S, p, pOut);
 8003574:	4632      	mov	r2, r6
 8003576:	f7ff ff8f 	bl	8003498 <merge_rfft_f32>
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800357a:	2301      	movs	r3, #1
 800357c:	463a      	mov	r2, r7
 800357e:	4631      	mov	r1, r6
 8003580:	4620      	mov	r0, r4
 8003582:	f001 fe8f 	bl	80052a4 <arm_cfft_f32>
 8003586:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003588 <arm_rfft_fast_init_f32>:
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
  Sint->fftLen = fftLen/2;
 8003588:	084b      	lsrs	r3, r1, #1
 800358a:	8003      	strh	r3, [r0, #0]
  S->fftLenRFFT = fftLen;
 800358c:	8201      	strh	r1, [r0, #16]

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 800358e:	2b80      	cmp	r3, #128	; 0x80
 8003590:	d042      	beq.n	8003618 <arm_rfft_fast_init_f32+0x90>
 8003592:	d914      	bls.n	80035be <arm_rfft_fast_init_f32+0x36>
 8003594:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003598:	d033      	beq.n	8003602 <arm_rfft_fast_init_f32+0x7a>
 800359a:	d919      	bls.n	80035d0 <arm_rfft_fast_init_f32+0x48>
 800359c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a0:	d024      	beq.n	80035ec <arm_rfft_fast_init_f32+0x64>
 80035a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a6:	d110      	bne.n	80035ca <arm_rfft_fast_init_f32+0x42>
  {
  case 2048u:
    /*  Initializations of structure parameters for 2048 point FFT */
    /*  Initialise the bit reversal table length */
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 80035a8:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 80035ac:	8183      	strh	r3, [r0, #12]
    /*  Initialise the bit reversal table pointer */
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 80035ae:	4b2e      	ldr	r3, [pc, #184]	; (8003668 <arm_rfft_fast_init_f32+0xe0>)
 80035b0:	6083      	str	r3, [r0, #8]
    /*  Initialise the Twiddle coefficient pointers */
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 80035b2:	4b2e      	ldr	r3, [pc, #184]	; (800366c <arm_rfft_fast_init_f32+0xe4>)
 80035b4:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80035b6:	4b2e      	ldr	r3, [pc, #184]	; (8003670 <arm_rfft_fast_init_f32+0xe8>)
 80035b8:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 80035ba:	2000      	movs	r0, #0
    break;
 80035bc:	4770      	bx	lr
  switch (Sint->fftLen)
 80035be:	2b20      	cmp	r3, #32
 80035c0:	d03e      	beq.n	8003640 <arm_rfft_fast_init_f32+0xb8>
 80035c2:	2b40      	cmp	r3, #64	; 0x40
 80035c4:	d032      	beq.n	800362c <arm_rfft_fast_init_f32+0xa4>
 80035c6:	2b10      	cmp	r3, #16
 80035c8:	d044      	beq.n	8003654 <arm_rfft_fast_init_f32+0xcc>
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
    break;
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 80035ca:	f04f 30ff 	mov.w	r0, #4294967295
    break;
  }

  return (status);
}
 80035ce:	4770      	bx	lr
  switch (Sint->fftLen)
 80035d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d4:	d1f9      	bne.n	80035ca <arm_rfft_fast_init_f32+0x42>
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 80035d6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80035da:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 80035dc:	4b25      	ldr	r3, [pc, #148]	; (8003674 <arm_rfft_fast_init_f32+0xec>)
 80035de:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 80035e0:	4b25      	ldr	r3, [pc, #148]	; (8003678 <arm_rfft_fast_init_f32+0xf0>)
 80035e2:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 80035e4:	4b25      	ldr	r3, [pc, #148]	; (800367c <arm_rfft_fast_init_f32+0xf4>)
 80035e6:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 80035e8:	2000      	movs	r0, #0
    break;
 80035ea:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 80035ec:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80035f0:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <arm_rfft_fast_init_f32+0xf8>)
 80035f4:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 80035f6:	4b23      	ldr	r3, [pc, #140]	; (8003684 <arm_rfft_fast_init_f32+0xfc>)
 80035f8:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80035fa:	4b23      	ldr	r3, [pc, #140]	; (8003688 <arm_rfft_fast_init_f32+0x100>)
 80035fc:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 80035fe:	2000      	movs	r0, #0
    break;
 8003600:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8003602:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8003606:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8003608:	4b20      	ldr	r3, [pc, #128]	; (800368c <arm_rfft_fast_init_f32+0x104>)
 800360a:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 800360c:	4b20      	ldr	r3, [pc, #128]	; (8003690 <arm_rfft_fast_init_f32+0x108>)
 800360e:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8003610:	4b20      	ldr	r3, [pc, #128]	; (8003694 <arm_rfft_fast_init_f32+0x10c>)
 8003612:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8003614:	2000      	movs	r0, #0
    break;
 8003616:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8003618:	23d0      	movs	r3, #208	; 0xd0
 800361a:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <arm_rfft_fast_init_f32+0x110>)
 800361e:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8003620:	4b1e      	ldr	r3, [pc, #120]	; (800369c <arm_rfft_fast_init_f32+0x114>)
 8003622:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8003624:	4b1e      	ldr	r3, [pc, #120]	; (80036a0 <arm_rfft_fast_init_f32+0x118>)
 8003626:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8003628:	2000      	movs	r0, #0
    break;
 800362a:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 800362c:	2338      	movs	r3, #56	; 0x38
 800362e:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 8003630:	4b1c      	ldr	r3, [pc, #112]	; (80036a4 <arm_rfft_fast_init_f32+0x11c>)
 8003632:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8003634:	4b1c      	ldr	r3, [pc, #112]	; (80036a8 <arm_rfft_fast_init_f32+0x120>)
 8003636:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8003638:	4b1c      	ldr	r3, [pc, #112]	; (80036ac <arm_rfft_fast_init_f32+0x124>)
 800363a:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 800363c:	2000      	movs	r0, #0
    break;
 800363e:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 8003640:	2330      	movs	r3, #48	; 0x30
 8003642:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8003644:	4b1a      	ldr	r3, [pc, #104]	; (80036b0 <arm_rfft_fast_init_f32+0x128>)
 8003646:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8003648:	4b1a      	ldr	r3, [pc, #104]	; (80036b4 <arm_rfft_fast_init_f32+0x12c>)
 800364a:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <arm_rfft_fast_init_f32+0x130>)
 800364e:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8003650:	2000      	movs	r0, #0
    break;
 8003652:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 8003654:	2314      	movs	r3, #20
 8003656:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8003658:	4b18      	ldr	r3, [pc, #96]	; (80036bc <arm_rfft_fast_init_f32+0x134>)
 800365a:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 800365c:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <arm_rfft_fast_init_f32+0x138>)
 800365e:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8003660:	4b18      	ldr	r3, [pc, #96]	; (80036c4 <arm_rfft_fast_init_f32+0x13c>)
 8003662:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 8003664:	2000      	movs	r0, #0
    break;
 8003666:	4770      	bx	lr
 8003668:	0800a1c0 	.word	0x0800a1c0
 800366c:	0800ebc0 	.word	0x0800ebc0
 8003670:	08017d40 	.word	0x08017d40
 8003674:	0800bf80 	.word	0x0800bf80
 8003678:	08012bc0 	.word	0x08012bc0
 800367c:	0801bd40 	.word	0x0801bd40
 8003680:	080091e8 	.word	0x080091e8
 8003684:	0800c740 	.word	0x0800c740
 8003688:	080158c0 	.word	0x080158c0
 800368c:	0800c350 	.word	0x0800c350
 8003690:	080134c0 	.word	0x080134c0
 8003694:	080146c0 	.word	0x080146c0
 8003698:	08009ff8 	.word	0x08009ff8
 800369c:	0800e740 	.word	0x0800e740
 80036a0:	080178c0 	.word	0x080178c0
 80036a4:	0800c6d0 	.word	0x0800c6d0
 80036a8:	080144c0 	.word	0x080144c0
 80036ac:	080156c0 	.word	0x080156c0
 80036b0:	0800c2f0 	.word	0x0800c2f0
 80036b4:	080133c0 	.word	0x080133c0
 80036b8:	0801c540 	.word	0x0801c540
 80036bc:	0800a198 	.word	0x0800a198
 80036c0:	0800eb40 	.word	0x0800eb40
 80036c4:	08017cc0 	.word	0x08017cc0

080036c8 <PCM_to_Float>:
}

void PCM_to_Float(uint16_t *samples_PCM, float32_t *samples_float32,
		uint16_t length_array) {

	for (uint16_t i = 0; i < length_array; i++) {
 80036c8:	2300      	movs	r3, #0
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d213      	bcs.n	80036f6 <PCM_to_Float+0x2e>
		uint16_t length_array) {
 80036ce:	b510      	push	{r4, lr}
		samples_float32[i] = (float32_t) samples_PCM[i] * (1.0f / 65535.0f);
 80036d0:	eb01 0483 	add.w	r4, r1, r3, lsl #2
 80036d4:	f830 e013 	ldrh.w	lr, [r0, r3, lsl #1]
 80036d8:	ee07 ea90 	vmov	s15, lr
 80036dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036e0:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80036f8 <PCM_to_Float+0x30>
 80036e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80036e8:	edc4 7a00 	vstr	s15, [r4]
	for (uint16_t i = 0; i < length_array; i++) {
 80036ec:	3301      	adds	r3, #1
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d3ed      	bcc.n	80036d0 <PCM_to_Float+0x8>
	}

}
 80036f4:	bd10      	pop	{r4, pc}
 80036f6:	4770      	bx	lr
 80036f8:	37800080 	.word	0x37800080

080036fc <PCM_Preprocess>:

void PCM_Preprocess(float32_t *input_ptr, float32_t *window,
		float32_t *output_ptr, uint8_t length_block) {
 80036fc:	b508      	push	{r3, lr}

	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 80036fe:	f7ff fe31 	bl	8003364 <arm_mult_f32>
 8003702:	bd08      	pop	{r3, pc}

08003704 <BSP_AUDIO_IN_TransferComplete_CallBack>:

}

void BSP_AUDIO_IN_TransferComplete_CallBack(void) {

	if (AUDIODataReady == 0) {
 8003704:	4b23      	ldr	r3, [pc, #140]	; (8003794 <BSP_AUDIO_IN_TransferComplete_CallBack+0x90>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	b103      	cbz	r3, 800370c <BSP_AUDIO_IN_TransferComplete_CallBack+0x8>
 800370a:	4770      	bx	lr
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 800370c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		buff_pos = ITCounter * PCM_OUT_SIZE;
 8003710:	4d21      	ldr	r5, [pc, #132]	; (8003798 <BSP_AUDIO_IN_TransferComplete_CallBack+0x94>)
 8003712:	682b      	ldr	r3, [r5, #0]
 8003714:	f44f 547a 	mov.w	r4, #16000	; 0x3e80
 8003718:	fb04 f303 	mul.w	r3, r4, r3
 800371c:	4f1f      	ldr	r7, [pc, #124]	; (800379c <BSP_AUDIO_IN_TransferComplete_CallBack+0x98>)
 800371e:	fba7 2303 	umull	r2, r3, r7, r3
 8003722:	f3c3 138f 	ubfx	r3, r3, #6, #16
 8003726:	4a1e      	ldr	r2, [pc, #120]	; (80037a0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>)
 8003728:	8013      	strh	r3, [r2, #0]
		BSP_AUDIO_IN_PDMToPCM(
 800372a:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80037b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xb4>
 800372e:	4641      	mov	r1, r8
 8003730:	481c      	ldr	r0, [pc, #112]	; (80037a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xa0>)
 8003732:	f000 fbc3 	bl	8003ebc <BSP_AUDIO_IN_PDMToPCM>
				(uint16_t *) &InternalBuffer[INTERNAL_BUFF_SIZE / 2],
				(uint16_t *) &PCM_Buf[0]);

		PCM_to_Float((uint16_t *) &PCM_Buf[0], (float32_t *) &float_array[0],
 8003736:	4e1c      	ldr	r6, [pc, #112]	; (80037a8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xa4>)
 8003738:	2210      	movs	r2, #16
 800373a:	4631      	mov	r1, r6
 800373c:	4640      	mov	r0, r8
 800373e:	f7ff ffc3 	bl	80036c8 <PCM_to_Float>
		PCM_OUT_SIZE);
		PCM_Preprocess((float32_t *) &float_array[0],
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 8003742:	6829      	ldr	r1, [r5, #0]
 8003744:	fb04 f101 	mul.w	r1, r4, r1
 8003748:	fba7 3101 	umull	r3, r1, r7, r1
 800374c:	0989      	lsrs	r1, r1, #6
				(float32_t *) &FFT_Input[ITCounter * PCM_OUT_SIZE],
 800374e:	682a      	ldr	r2, [r5, #0]
 8003750:	fb04 f402 	mul.w	r4, r4, r2
 8003754:	fba7 3404 	umull	r3, r4, r7, r4
 8003758:	09a4      	lsrs	r4, r4, #6
		PCM_Preprocess((float32_t *) &float_array[0],
 800375a:	2310      	movs	r3, #16
 800375c:	4a13      	ldr	r2, [pc, #76]	; (80037ac <BSP_AUDIO_IN_TransferComplete_CallBack+0xa8>)
 800375e:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8003762:	4813      	ldr	r0, [pc, #76]	; (80037b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xac>)
 8003764:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003768:	4630      	mov	r0, r6
 800376a:	f7ff ffc7 	bl	80036fc <PCM_Preprocess>
				PCM_OUT_SIZE);

		if (ITCounter == sample_runs) {
 800376e:	682a      	ldr	r2, [r5, #0]
 8003770:	4b10      	ldr	r3, [pc, #64]	; (80037b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xb0>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d005      	beq.n	8003784 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>
			AUDIODataReady = 1;
			ITCounter = 0;
		} else {
			ITCounter++;
 8003778:	4a07      	ldr	r2, [pc, #28]	; (8003798 <BSP_AUDIO_IN_TransferComplete_CallBack+0x94>)
 800377a:	6813      	ldr	r3, [r2, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			AUDIODataReady = 1;
 8003784:	2201      	movs	r2, #1
 8003786:	4b03      	ldr	r3, [pc, #12]	; (8003794 <BSP_AUDIO_IN_TransferComplete_CallBack+0x90>)
 8003788:	601a      	str	r2, [r3, #0]
			ITCounter = 0;
 800378a:	2200      	movs	r2, #0
 800378c:	602a      	str	r2, [r5, #0]
 800378e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003792:	bf00      	nop
 8003794:	200004ac 	.word	0x200004ac
 8003798:	200004b4 	.word	0x200004b4
 800379c:	10624dd3 	.word	0x10624dd3
 80037a0:	200004b8 	.word	0x200004b8
 80037a4:	200007ac 	.word	0x200007ac
 80037a8:	20000a34 	.word	0x20000a34
 80037ac:	200010b0 	.word	0x200010b0
 80037b0:	2000052c 	.word	0x2000052c
 80037b4:	20000a2c 	.word	0x20000a2c
 80037b8:	20000e8c 	.word	0x20000e8c

080037bc <BSP_AUDIO_IN_HalfTransfer_CallBack>:
		}
	}
}

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
	if (AUDIODataReady == 0) {
 80037bc:	4b23      	ldr	r3, [pc, #140]	; (800384c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x90>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	b103      	cbz	r3, 80037c4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x8>
 80037c2:	4770      	bx	lr
void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 80037c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		buff_pos = ITCounter * PCM_OUT_SIZE;
 80037c8:	4d21      	ldr	r5, [pc, #132]	; (8003850 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x94>)
 80037ca:	682b      	ldr	r3, [r5, #0]
 80037cc:	f44f 547a 	mov.w	r4, #16000	; 0x3e80
 80037d0:	fb04 f303 	mul.w	r3, r4, r3
 80037d4:	4f1f      	ldr	r7, [pc, #124]	; (8003854 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x98>)
 80037d6:	fba7 2303 	umull	r2, r3, r7, r3
 80037da:	f3c3 138f 	ubfx	r3, r3, #6, #16
 80037de:	4a1e      	ldr	r2, [pc, #120]	; (8003858 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>)
 80037e0:	8013      	strh	r3, [r2, #0]
		/* PDM to PCM data convert */
		BSP_AUDIO_IN_PDMToPCM((uint16_t *) &InternalBuffer[0],
 80037e2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8003870 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xb4>
 80037e6:	4641      	mov	r1, r8
 80037e8:	481c      	ldr	r0, [pc, #112]	; (800385c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa0>)
 80037ea:	f000 fb67 	bl	8003ebc <BSP_AUDIO_IN_PDMToPCM>
				(uint16_t *) &PCM_Buf[0]);
		PCM_to_Float((uint16_t *) &PCM_Buf[0], (float32_t *) &float_array[0],
 80037ee:	4e1c      	ldr	r6, [pc, #112]	; (8003860 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa4>)
 80037f0:	2210      	movs	r2, #16
 80037f2:	4631      	mov	r1, r6
 80037f4:	4640      	mov	r0, r8
 80037f6:	f7ff ff67 	bl	80036c8 <PCM_to_Float>
		PCM_OUT_SIZE);
		PCM_Preprocess((float32_t *) &float_array[0],
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 80037fa:	6829      	ldr	r1, [r5, #0]
 80037fc:	fb04 f101 	mul.w	r1, r4, r1
 8003800:	fba7 3101 	umull	r3, r1, r7, r1
 8003804:	0989      	lsrs	r1, r1, #6
				(float32_t *) &FFT_Input[ITCounter * PCM_OUT_SIZE],
 8003806:	682a      	ldr	r2, [r5, #0]
 8003808:	fb04 f402 	mul.w	r4, r4, r2
 800380c:	fba7 3404 	umull	r3, r4, r7, r4
 8003810:	09a4      	lsrs	r4, r4, #6
		PCM_Preprocess((float32_t *) &float_array[0],
 8003812:	2310      	movs	r3, #16
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xa8>)
 8003816:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800381a:	4813      	ldr	r0, [pc, #76]	; (8003868 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xac>)
 800381c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8003820:	4630      	mov	r0, r6
 8003822:	f7ff ff6b 	bl	80036fc <PCM_Preprocess>
				PCM_OUT_SIZE);

		if (ITCounter == sample_runs) {
 8003826:	682a      	ldr	r2, [r5, #0]
 8003828:	4b10      	ldr	r3, [pc, #64]	; (800386c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xb0>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d005      	beq.n	800383c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>
			AUDIODataReady = 1;
			ITCounter = 0;
		} else {
			ITCounter++;
 8003830:	4a07      	ldr	r2, [pc, #28]	; (8003850 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x94>)
 8003832:	6813      	ldr	r3, [r2, #0]
 8003834:	3301      	adds	r3, #1
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			AUDIODataReady = 1;
 800383c:	2201      	movs	r2, #1
 800383e:	4b03      	ldr	r3, [pc, #12]	; (800384c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x90>)
 8003840:	601a      	str	r2, [r3, #0]
			ITCounter = 0;
 8003842:	2200      	movs	r2, #0
 8003844:	602a      	str	r2, [r5, #0]
 8003846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800384a:	bf00      	nop
 800384c:	200004ac 	.word	0x200004ac
 8003850:	200004b4 	.word	0x200004b4
 8003854:	10624dd3 	.word	0x10624dd3
 8003858:	200004b8 	.word	0x200004b8
 800385c:	2000072c 	.word	0x2000072c
 8003860:	20000a34 	.word	0x20000a34
 8003864:	200010b0 	.word	0x200010b0
 8003868:	2000052c 	.word	0x2000052c
 800386c:	20000a2c 	.word	0x20000a2c
 8003870:	20000e8c 	.word	0x20000e8c

08003874 <calc_mag_output>:

	float32_t * m_o;
	float32_t * m_n;
	m_n = mag_new;
	m_o = mag_old;
	for (uint16_t i = 1; i < len; ++i) {
 8003874:	2301      	movs	r3, #1
 8003876:	e011      	b.n	800389c <calc_mag_output+0x28>
		*m_o = ((*(m_n) * 0.02F) + (*(m_o) * 0.98F));
 8003878:	ecf1 7a01 	vldmia	r1!, {s15}
 800387c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80038a4 <calc_mag_output+0x30>
 8003880:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003884:	ed90 7a00 	vldr	s14, [r0]
 8003888:	eddf 6a07 	vldr	s13, [pc, #28]	; 80038a8 <calc_mag_output+0x34>
 800388c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8003890:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003894:	ece0 7a01 	vstmia	r0!, {s15}
	for (uint16_t i = 1; i < len; ++i) {
 8003898:	3301      	adds	r3, #1
 800389a:	b29b      	uxth	r3, r3
 800389c:	4293      	cmp	r3, r2
 800389e:	d3eb      	bcc.n	8003878 <calc_mag_output+0x4>
		m_n++;
		m_o++;
	}
}
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	3ca3d70a 	.word	0x3ca3d70a
 80038a8:	3f7ae148 	.word	0x3f7ae148

080038ac <StartRFFTTask>:
uint8_t StartRFFTTask() {
 80038ac:	b538      	push	{r3, r4, r5, lr}
	BSP_LED_Toggle(LED5);
 80038ae:	2002      	movs	r0, #2
 80038b0:	f000 fa72 	bl	8003d98 <BSP_LED_Toggle>
	arm_rfft_fast_f32(&rfft_s, &FFT_Input[0], &FFT_Bins[0], 0);
 80038b4:	4d0c      	ldr	r5, [pc, #48]	; (80038e8 <StartRFFTTask+0x3c>)
 80038b6:	2300      	movs	r3, #0
 80038b8:	462a      	mov	r2, r5
 80038ba:	490c      	ldr	r1, [pc, #48]	; (80038ec <StartRFFTTask+0x40>)
 80038bc:	480c      	ldr	r0, [pc, #48]	; (80038f0 <StartRFFTTask+0x44>)
 80038be:	f7ff fe46 	bl	800354e <arm_rfft_fast_f32>
	arm_cmplx_mag_f32(&FFT_Bins[0], &FFT_MagBuf[0], (FFT_LEN / 2));
 80038c2:	4c0c      	ldr	r4, [pc, #48]	; (80038f4 <StartRFFTTask+0x48>)
 80038c4:	2240      	movs	r2, #64	; 0x40
 80038c6:	4621      	mov	r1, r4
 80038c8:	4628      	mov	r0, r5
 80038ca:	f7ff fcc1 	bl	8003250 <arm_cmplx_mag_f32>
	calc_mag_output(&FFT_MagBuf_IIR[0], &FFT_MagBuf[0], FFT_LEN / 2);
 80038ce:	2240      	movs	r2, #64	; 0x40
 80038d0:	4621      	mov	r1, r4
 80038d2:	4809      	ldr	r0, [pc, #36]	; (80038f8 <StartRFFTTask+0x4c>)
 80038d4:	f7ff ffce 	bl	8003874 <calc_mag_output>
	AUDIODataReady = 0;
 80038d8:	2200      	movs	r2, #0
 80038da:	4b08      	ldr	r3, [pc, #32]	; (80038fc <StartRFFTTask+0x50>)
 80038dc:	601a      	str	r2, [r3, #0]
	FFT_Ready = 1;
 80038de:	2001      	movs	r0, #1
 80038e0:	4b07      	ldr	r3, [pc, #28]	; (8003900 <StartRFFTTask+0x54>)
 80038e2:	6018      	str	r0, [r3, #0]
}
 80038e4:	bd38      	pop	{r3, r4, r5, pc}
 80038e6:	bf00      	nop
 80038e8:	20000b74 	.word	0x20000b74
 80038ec:	200010b0 	.word	0x200010b0
 80038f0:	20000e74 	.word	0x20000e74
 80038f4:	20000a74 	.word	0x20000a74
 80038f8:	20000d74 	.word	0x20000d74
 80038fc:	200004ac 	.word	0x200004ac
 8003900:	200004b0 	.word	0x200004b0

08003904 <enablefpu>:

// Enable the FPU (Cortex-M4 - STM32F4xx and higher)
// http://infocenter.arm.com/help/topic/com.arm.doc.dui0553a/BEHBJHIG.html
void enablefpu() {
	__asm volatile(
 8003904:	f8df 0014 	ldr.w	r0, [pc, #20]	; 800391c <enablefpu+0x18>
 8003908:	6801      	ldr	r1, [r0, #0]
 800390a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800390e:	6001      	str	r1, [r0, #0]
 8003910:	f3bf 8f4f 	dsb	sy
 8003914:	f3bf 8f6f 	isb	sy
 8003918:	4770      	bx	lr
 800391a:	0000      	.short	0x0000
 800391c:	e000ed88 	.word	0xe000ed88

08003920 <timer_setup>:
			"  isb" /* reset pipeline now the FPU is enabled */);
}

int timer_setup(void)

{
 8003920:	b530      	push	{r4, r5, lr}
 8003922:	b083      	sub	sp, #12
	__TIM4_CLK_ENABLE()
 8003924:	2500      	movs	r5, #0
 8003926:	9501      	str	r5, [sp, #4]
 8003928:	4b11      	ldr	r3, [pc, #68]	; (8003970 <timer_setup+0x50>)
 800392a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800392c:	f042 0204 	orr.w	r2, r2, #4
 8003930:	641a      	str	r2, [r3, #64]	; 0x40
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	f003 0304 	and.w	r3, r3, #4
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	9b01      	ldr	r3, [sp, #4]
	;
	TIM_Handle.Init.Prescaler = 42000;
 800393c:	4c0d      	ldr	r4, [pc, #52]	; (8003974 <timer_setup+0x54>)
 800393e:	f24a 4310 	movw	r3, #42000	; 0xa410
 8003942:	6063      	str	r3, [r4, #4]
	TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003944:	60a5      	str	r5, [r4, #8]
	TIM_Handle.Init.Period = 80;
 8003946:	2350      	movs	r3, #80	; 0x50
 8003948:	60e3      	str	r3, [r4, #12]
	TIM_Handle.Instance = TIM4;   //Same timer whose clocks we enabled
 800394a:	4b0b      	ldr	r3, [pc, #44]	; (8003978 <timer_setup+0x58>)
 800394c:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Init(&TIM_Handle);     // Init timer
 800394e:	4620      	mov	r0, r4
 8003950:	f7ff f8aa 	bl	8002aa8 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&TIM_Handle); // start timer interrupts
 8003954:	4620      	mov	r0, r4
 8003956:	f7fe ff4b 	bl	80027f0 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 800395a:	2201      	movs	r2, #1
 800395c:	4629      	mov	r1, r5
 800395e:	201e      	movs	r0, #30
 8003960:	f7fd fb68 	bl	8001034 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003964:	201e      	movs	r0, #30
 8003966:	f7fd fb97 	bl	8001098 <HAL_NVIC_EnableIRQ>
	return 1;

}
 800396a:	2001      	movs	r0, #1
 800396c:	b003      	add	sp, #12
 800396e:	bd30      	pop	{r4, r5, pc}
 8003970:	40023800 	.word	0x40023800
 8003974:	20001510 	.word	0x20001510
 8003978:	40000800 	.word	0x40000800

0800397c <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)

{
 800397c:	b508      	push	{r3, lr}
	if (__HAL_TIM_GET_FLAG(&TIM_Handle, TIM_FLAG_UPDATE) != RESET) //In case other interrupts are also running
 800397e:	4b08      	ldr	r3, [pc, #32]	; (80039a0 <TIM4_IRQHandler+0x24>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	691a      	ldr	r2, [r3, #16]
 8003984:	f012 0f01 	tst.w	r2, #1
 8003988:	d003      	beq.n	8003992 <TIM4_IRQHandler+0x16>
			{
		if (__HAL_TIM_GET_ITSTATUS(&TIM_Handle, TIM_IT_UPDATE) != RESET) {
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	f012 0f01 	tst.w	r2, #1
 8003990:	d100      	bne.n	8003994 <TIM4_IRQHandler+0x18>
 8003992:	bd08      	pop	{r3, pc}
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle, TIM_FLAG_UPDATE);
 8003994:	f06f 0201 	mvn.w	r2, #1
 8003998:	611a      	str	r2, [r3, #16]
			visHandle();
 800399a:	f000 fce7 	bl	800436c <visHandle>
		}
	}
}
 800399e:	e7f8      	b.n	8003992 <TIM4_IRQHandler+0x16>
 80039a0:	20001510 	.word	0x20001510

080039a4 <Hanning>:




float32_t *Hanning(uint32_t N, uint8_t itype) {
 80039a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039a8:	ed2d 8b02 	vpush	{d8}
 80039ac:	4605      	mov	r5, r0
 80039ae:	460f      	mov	r7, r1
	uint32_t half, i, idx, n;

	memset(hann_window, 0, (N * 4));
 80039b0:	0082      	lsls	r2, r0, #2
 80039b2:	2100      	movs	r1, #0
 80039b4:	484f      	ldr	r0, [pc, #316]	; (8003af4 <Hanning+0x150>)
 80039b6:	f003 fbcf 	bl	8007158 <memset>

	if (itype == 1) //periodic function
 80039ba:	2f01      	cmp	r7, #1
 80039bc:	d007      	beq.n	80039ce <Hanning+0x2a>
		n = N - 1;
	else
		n = N;
 80039be:	462e      	mov	r6, r5

	if (n % 2 == 0) {
 80039c0:	f016 0f01 	tst.w	r6, #1
 80039c4:	d146      	bne.n	8003a54 <Hanning+0xb0>
		half = n / 2;
 80039c6:	0874      	lsrs	r4, r6, #1
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
 80039c8:	f04f 0800 	mov.w	r8, #0
 80039cc:	e02c      	b.n	8003a28 <Hanning+0x84>
		n = N - 1;
 80039ce:	1e6e      	subs	r6, r5, #1
 80039d0:	e7f6      	b.n	80039c0 <Hanning+0x1c>
			hann_window[i] = 0.5 * (1 - cos(2 * PI * (i + 1) / (n + 1)));
 80039d2:	f108 0901 	add.w	r9, r8, #1
 80039d6:	ee07 9a90 	vmov	s15, r9
 80039da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039de:	eddf 7a46 	vldr	s15, [pc, #280]	; 8003af8 <Hanning+0x154>
 80039e2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80039e6:	1c73      	adds	r3, r6, #1
 80039e8:	ee07 3a90 	vmov	s15, r3
 80039ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039f0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80039f4:	ee16 0a90 	vmov	r0, s13
 80039f8:	f7fc fdaa 	bl	8000550 <__aeabi_f2d>
 80039fc:	ec41 0b10 	vmov	d0, r0, r1
 8003a00:	f003 fd5a 	bl	80074b8 <cos>
 8003a04:	ec53 2b10 	vmov	r2, r3, d0
 8003a08:	2000      	movs	r0, #0
 8003a0a:	493c      	ldr	r1, [pc, #240]	; (8003afc <Hanning+0x158>)
 8003a0c:	f7fc fc40 	bl	8000290 <__aeabi_dsub>
 8003a10:	2200      	movs	r2, #0
 8003a12:	4b3b      	ldr	r3, [pc, #236]	; (8003b00 <Hanning+0x15c>)
 8003a14:	f7fc fdf0 	bl	80005f8 <__aeabi_dmul>
 8003a18:	f7fd f8d0 	bl	8000bbc <__aeabi_d2f>
 8003a1c:	4b35      	ldr	r3, [pc, #212]	; (8003af4 <Hanning+0x150>)
 8003a1e:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8003a22:	f8c8 0000 	str.w	r0, [r8]
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
 8003a26:	46c8      	mov	r8, r9
 8003a28:	45a0      	cmp	r8, r4
 8003a2a:	d3d2      	bcc.n	80039d2 <Hanning+0x2e>

		idx = half - 1;
 8003a2c:	1e62      	subs	r2, r4, #1
		for (i = half; i < n; i++) {
 8003a2e:	e008      	b.n	8003a42 <Hanning+0x9e>
			hann_window[i] = hann_window[idx];
 8003a30:	4b30      	ldr	r3, [pc, #192]	; (8003af4 <Hanning+0x150>)
 8003a32:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8003a36:	6809      	ldr	r1, [r1, #0]
 8003a38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003a3c:	6019      	str	r1, [r3, #0]
			idx--;
 8003a3e:	3a01      	subs	r2, #1
		for (i = half; i < n; i++) {
 8003a40:	3401      	adds	r4, #1
 8003a42:	42b4      	cmp	r4, r6
 8003a44:	d3f4      	bcc.n	8003a30 <Hanning+0x8c>
			hann_window[i] = hann_window[idx];
			idx--;
		}
	}

	if (itype == 1) //periodic function
 8003a46:	2f01      	cmp	r7, #1
 8003a48:	d043      	beq.n	8003ad2 <Hanning+0x12e>
		for (i = N - 1; i >= 1; i--)
			hann_window[i] = hann_window[i - 1];
		hann_window[0] = 0.0;
	}
	return (&hann_window[0]);
}
 8003a4a:	482a      	ldr	r0, [pc, #168]	; (8003af4 <Hanning+0x150>)
 8003a4c:	ecbd 8b02 	vpop	{d8}
 8003a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		half = (n + 1) / 2;
 8003a54:	1c73      	adds	r3, r6, #1
 8003a56:	ee08 3a10 	vmov	s16, r3
 8003a5a:	085c      	lsrs	r4, r3, #1
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
 8003a5c:	f04f 0800 	mov.w	r8, #0
 8003a60:	e027      	b.n	8003ab2 <Hanning+0x10e>
			hann_window[i] = 0.5 * (1 - cos(2 * PI * (i + 1) / (n + 1)));
 8003a62:	f108 0901 	add.w	r9, r8, #1
 8003a66:	ee07 9a90 	vmov	s15, r9
 8003a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a6e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8003af8 <Hanning+0x154>
 8003a72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a76:	eeb8 7a48 	vcvt.f32.u32	s14, s16
 8003a7a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003a7e:	ee16 0a90 	vmov	r0, s13
 8003a82:	f7fc fd65 	bl	8000550 <__aeabi_f2d>
 8003a86:	ec41 0b10 	vmov	d0, r0, r1
 8003a8a:	f003 fd15 	bl	80074b8 <cos>
 8003a8e:	ec53 2b10 	vmov	r2, r3, d0
 8003a92:	2000      	movs	r0, #0
 8003a94:	4919      	ldr	r1, [pc, #100]	; (8003afc <Hanning+0x158>)
 8003a96:	f7fc fbfb 	bl	8000290 <__aeabi_dsub>
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4b18      	ldr	r3, [pc, #96]	; (8003b00 <Hanning+0x15c>)
 8003a9e:	f7fc fdab 	bl	80005f8 <__aeabi_dmul>
 8003aa2:	f7fd f88b 	bl	8000bbc <__aeabi_d2f>
 8003aa6:	4b13      	ldr	r3, [pc, #76]	; (8003af4 <Hanning+0x150>)
 8003aa8:	eb03 0888 	add.w	r8, r3, r8, lsl #2
 8003aac:	f8c8 0000 	str.w	r0, [r8]
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
 8003ab0:	46c8      	mov	r8, r9
 8003ab2:	45a0      	cmp	r8, r4
 8003ab4:	d3d5      	bcc.n	8003a62 <Hanning+0xbe>
		idx = half - 2;
 8003ab6:	1ea2      	subs	r2, r4, #2
		for (i = half; i < n; i++) {
 8003ab8:	e008      	b.n	8003acc <Hanning+0x128>
			hann_window[i] = hann_window[idx];
 8003aba:	4b0e      	ldr	r3, [pc, #56]	; (8003af4 <Hanning+0x150>)
 8003abc:	eb03 0182 	add.w	r1, r3, r2, lsl #2
 8003ac0:	6809      	ldr	r1, [r1, #0]
 8003ac2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8003ac6:	6019      	str	r1, [r3, #0]
			idx--;
 8003ac8:	3a01      	subs	r2, #1
		for (i = half; i < n; i++) {
 8003aca:	3401      	adds	r4, #1
 8003acc:	42b4      	cmp	r4, r6
 8003ace:	d3f4      	bcc.n	8003aba <Hanning+0x116>
 8003ad0:	e7b9      	b.n	8003a46 <Hanning+0xa2>
		for (i = N - 1; i >= 1; i--)
 8003ad2:	1e6b      	subs	r3, r5, #1
 8003ad4:	e008      	b.n	8003ae8 <Hanning+0x144>
			hann_window[i] = hann_window[i - 1];
 8003ad6:	1e5a      	subs	r2, r3, #1
 8003ad8:	4d06      	ldr	r5, [pc, #24]	; (8003af4 <Hanning+0x150>)
 8003ada:	eb05 0182 	add.w	r1, r5, r2, lsl #2
 8003ade:	6809      	ldr	r1, [r1, #0]
 8003ae0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003ae4:	6029      	str	r1, [r5, #0]
		for (i = N - 1; i >= 1; i--)
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f4      	bne.n	8003ad6 <Hanning+0x132>
		hann_window[0] = 0.0;
 8003aec:	2200      	movs	r2, #0
 8003aee:	4b01      	ldr	r3, [pc, #4]	; (8003af4 <Hanning+0x150>)
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e7aa      	b.n	8003a4a <Hanning+0xa6>
 8003af4:	2000052c 	.word	0x2000052c
 8003af8:	40c90fdb 	.word	0x40c90fdb
 8003afc:	3ff00000 	.word	0x3ff00000
 8003b00:	3fe00000 	.word	0x3fe00000

08003b04 <NMI_Handler>:
/**
 * @brief  This function handles NMI exception.
 * @param  None
 * @retval None
 */
void NMI_Handler(void) {
 8003b04:	4770      	bx	lr

08003b06 <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 8003b06:	e7fe      	b.n	8003b06 <HardFault_Handler>

08003b08 <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 8003b08:	e7fe      	b.n	8003b08 <MemManage_Handler>

08003b0a <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 8003b0a:	e7fe      	b.n	8003b0a <BusFault_Handler>

08003b0c <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 8003b0c:	e7fe      	b.n	8003b0c <UsageFault_Handler>

08003b0e <SVC_Handler>:
/**
 * @brief  This function handles SVCall exception.
 * @param  None
 * @retval None
 */
void SVC_Handler(void) {
 8003b0e:	4770      	bx	lr

08003b10 <DebugMon_Handler>:
/**
 * @brief  This function handles Debug Monitor exception.
 * @param  None
 * @retval None
 */
void DebugMon_Handler(void) {
 8003b10:	4770      	bx	lr

08003b12 <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 8003b12:	4770      	bx	lr

08003b14 <DMA1_Stream3_IRQHandler>:
/**
 * @brief  This function handles DMA Stream interrupt request.
 * @param  None
 * @retval None
 */
void I2S2_IRQHandler(void) {
 8003b14:	b508      	push	{r3, lr}
	HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8003b16:	4b02      	ldr	r3, [pc, #8]	; (8003b20 <DMA1_Stream3_IRQHandler+0xc>)
 8003b18:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003b1a:	f7fd fc63 	bl	80013e4 <HAL_DMA_IRQHandler>
 8003b1e:	bd08      	pop	{r3, pc}
 8003b20:	20001594 	.word	0x20001594

08003b24 <_Error_Handler>:
}

void _Error_Handler(char *file, int line) {
 8003b24:	e7fe      	b.n	8003b24 <_Error_Handler>
	...

08003b28 <SystemClock_Config>:
void SystemClock_Config(void) {
 8003b28:	b500      	push	{lr}
 8003b2a:	b099      	sub	sp, #100	; 0x64
	__HAL_RCC_PWR_CLK_ENABLE()
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	9101      	str	r1, [sp, #4]
 8003b30:	4b32      	ldr	r3, [pc, #200]	; (8003bfc <SystemClock_Config+0xd4>)
 8003b32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b34:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003b38:	641a      	str	r2, [r3, #64]	; 0x40
 8003b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b40:	9301      	str	r3, [sp, #4]
 8003b42:	9b01      	ldr	r3, [sp, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b44:	9102      	str	r1, [sp, #8]
 8003b46:	4b2e      	ldr	r3, [pc, #184]	; (8003c00 <SystemClock_Config+0xd8>)
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b4e:	601a      	str	r2, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b56:	9302      	str	r3, [sp, #8]
 8003b58:	9b02      	ldr	r3, [sp, #8]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	930c      	str	r3, [sp, #48]	; 0x30
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003b5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003b62:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b64:	2302      	movs	r3, #2
 8003b66:	9312      	str	r3, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003b68:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003b6c:	9213      	str	r2, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003b6e:	2208      	movs	r2, #8
 8003b70:	9214      	str	r2, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 8003b72:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8003b76:	9215      	str	r2, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003b78:	9316      	str	r3, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003b7a:	2307      	movs	r3, #7
 8003b7c:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003b7e:	a80c      	add	r0, sp, #48	; 0x30
 8003b80:	f7fe f9c6 	bl	8001f10 <HAL_RCC_OscConfig>
 8003b84:	bb70      	cbnz	r0, 8003be4 <SystemClock_Config+0xbc>
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003b86:	230f      	movs	r3, #15
 8003b88:	9307      	str	r3, [sp, #28]
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b8a:	2302      	movs	r3, #2
 8003b8c:	9308      	str	r3, [sp, #32]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	9309      	str	r3, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003b92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b96:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b9c:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8003b9e:	2105      	movs	r1, #5
 8003ba0:	a807      	add	r0, sp, #28
 8003ba2:	f7fe fbd3 	bl	800234c <HAL_RCC_ClockConfig>
 8003ba6:	bb08      	cbnz	r0, 8003bec <SystemClock_Config+0xc4>
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	9303      	str	r3, [sp, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8003bac:	23c0      	movs	r3, #192	; 0xc0
 8003bae:	9304      	str	r3, [sp, #16]
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	9305      	str	r3, [sp, #20]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003bb4:	a803      	add	r0, sp, #12
 8003bb6:	f7fe fc7b 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 8003bba:	b9d8      	cbnz	r0, 8003bf4 <SystemClock_Config+0xcc>
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 8003bbc:	f7fe fc72 	bl	80024a4 <HAL_RCC_GetHCLKFreq>
 8003bc0:	4b10      	ldr	r3, [pc, #64]	; (8003c04 <SystemClock_Config+0xdc>)
 8003bc2:	fba3 3000 	umull	r3, r0, r3, r0
 8003bc6:	0980      	lsrs	r0, r0, #6
 8003bc8:	f7fd fa72 	bl	80010b0 <HAL_SYSTICK_Config>
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003bcc:	2004      	movs	r0, #4
 8003bce:	f7fd fa85 	bl	80010dc <HAL_SYSTICK_CLKSourceConfig>
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	4611      	mov	r1, r2
 8003bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8003bda:	f7fd fa2b 	bl	8001034 <HAL_NVIC_SetPriority>
}
 8003bde:	b019      	add	sp, #100	; 0x64
 8003be0:	f85d fb04 	ldr.w	pc, [sp], #4
		_Error_Handler(__FILE__, __LINE__);
 8003be4:	21a1      	movs	r1, #161	; 0xa1
 8003be6:	4808      	ldr	r0, [pc, #32]	; (8003c08 <SystemClock_Config+0xe0>)
 8003be8:	f7ff ff9c 	bl	8003b24 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8003bec:	21ae      	movs	r1, #174	; 0xae
 8003bee:	4806      	ldr	r0, [pc, #24]	; (8003c08 <SystemClock_Config+0xe0>)
 8003bf0:	f7ff ff98 	bl	8003b24 <_Error_Handler>
		_Error_Handler(__FILE__, __LINE__);
 8003bf4:	21b5      	movs	r1, #181	; 0xb5
 8003bf6:	4804      	ldr	r0, [pc, #16]	; (8003c08 <SystemClock_Config+0xe0>)
 8003bf8:	f7ff ff94 	bl	8003b24 <_Error_Handler>
 8003bfc:	40023800 	.word	0x40023800
 8003c00:	40007000 	.word	0x40007000
 8003c04:	10624dd3 	.word	0x10624dd3
 8003c08:	0801c640 	.word	0x0801c640

08003c0c <fft_ws2812_Init>:
void fft_ws2812_Init() {
 8003c0c:	b508      	push	{r3, lr}
	sample_runs = 15;
 8003c0e:	220f      	movs	r2, #15
 8003c10:	4b16      	ldr	r3, [pc, #88]	; (8003c6c <fft_ws2812_Init+0x60>)
 8003c12:	601a      	str	r2, [r3, #0]
	enablefpu();
 8003c14:	f7ff fe76 	bl	8003904 <enablefpu>
	HAL_Init();
 8003c18:	f7fd f9ce 	bl	8000fb8 <HAL_Init>
	SystemClock_Config();
 8003c1c:	f7ff ff84 	bl	8003b28 <SystemClock_Config>
	visInit();
 8003c20:	f000 fba0 	bl	8004364 <visInit>
	timer_setup();
 8003c24:	f7ff fe7c 	bl	8003920 <timer_setup>
	BSP_LED_Init(LED4);
 8003c28:	2000      	movs	r0, #0
 8003c2a:	f000 f84b 	bl	8003cc4 <BSP_LED_Init>
	BSP_LED_Init(LED5);
 8003c2e:	2002      	movs	r0, #2
 8003c30:	f000 f848 	bl	8003cc4 <BSP_LED_Init>
	BSP_LED_Init(LED6);
 8003c34:	2003      	movs	r0, #3
 8003c36:	f000 f845 	bl	8003cc4 <BSP_LED_Init>
	BSP_LED_On(LED4);
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	f000 f89c 	bl	8003d78 <BSP_LED_On>
	hann_ptr = Hanning((FFT_LEN), 1);
 8003c40:	2101      	movs	r1, #1
 8003c42:	2080      	movs	r0, #128	; 0x80
 8003c44:	f7ff feae 	bl	80039a4 <Hanning>
 8003c48:	4b09      	ldr	r3, [pc, #36]	; (8003c70 <fft_ws2812_Init+0x64>)
 8003c4a:	6018      	str	r0, [r3, #0]
	arm_rfft_fast_init_f32(&rfft_s, FFT_LEN);
 8003c4c:	2180      	movs	r1, #128	; 0x80
 8003c4e:	4809      	ldr	r0, [pc, #36]	; (8003c74 <fft_ws2812_Init+0x68>)
 8003c50:	f7ff fc9a 	bl	8003588 <arm_rfft_fast_init_f32>
	BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION,
 8003c54:	2201      	movs	r2, #1
 8003c56:	2110      	movs	r1, #16
 8003c58:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8003c5c:	f000 f9fc 	bl	8004058 <BSP_AUDIO_IN_Init>
	BSP_AUDIO_IN_Record((uint16_t *) &InternalBuffer[0], INTERNAL_BUFF_SIZE); // start reading pdm data into buffer
 8003c60:	2180      	movs	r1, #128	; 0x80
 8003c62:	4805      	ldr	r0, [pc, #20]	; (8003c78 <fft_ws2812_Init+0x6c>)
 8003c64:	f000 f920 	bl	8003ea8 <BSP_AUDIO_IN_Record>
 8003c68:	bd08      	pop	{r3, pc}
 8003c6a:	bf00      	nop
 8003c6c:	20000a2c 	.word	0x20000a2c
 8003c70:	20000eac 	.word	0x20000eac
 8003c74:	20000e74 	.word	0x20000e74
 8003c78:	2000072c 	.word	0x2000072c

08003c7c <main>:
int main(void) {
 8003c7c:	b508      	push	{r3, lr}
	fft_ws2812_Init();
 8003c7e:	f7ff ffc5 	bl	8003c0c <fft_ws2812_Init>
 8003c82:	e002      	b.n	8003c8a <main+0xe>
		if (FFT_Ready) {
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <main+0x28>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	b933      	cbnz	r3, 8003c98 <main+0x1c>
		if (AUDIODataReady == 1) {
 8003c8a:	4b07      	ldr	r3, [pc, #28]	; (8003ca8 <main+0x2c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d1f8      	bne.n	8003c84 <main+0x8>
			StartRFFTTask();
 8003c92:	f7ff fe0b 	bl	80038ac <StartRFFTTask>
 8003c96:	e7f5      	b.n	8003c84 <main+0x8>
			generate_rgb(&FFT_Bins[0], &FFT_MagBuf_IIR[0], (FFT_LEN / 2));
 8003c98:	2240      	movs	r2, #64	; 0x40
 8003c9a:	4904      	ldr	r1, [pc, #16]	; (8003cac <main+0x30>)
 8003c9c:	4804      	ldr	r0, [pc, #16]	; (8003cb0 <main+0x34>)
 8003c9e:	f000 fb73 	bl	8004388 <generate_rgb>
 8003ca2:	e7f2      	b.n	8003c8a <main+0xe>
 8003ca4:	200004b0 	.word	0x200004b0
 8003ca8:	200004ac 	.word	0x200004ac
 8003cac:	20000d74 	.word	0x20000d74
 8003cb0:	20000b74 	.word	0x20000b74

08003cb4 <BSP_AUDIO_IN_Error_Callback>:
void BSP_AUDIO_IN_Error_Callback(void) {
 8003cb4:	b508      	push	{r3, lr}
	Error_Handler();
 8003cb6:	f240 1189 	movw	r1, #393	; 0x189
 8003cba:	4801      	ldr	r0, [pc, #4]	; (8003cc0 <BSP_AUDIO_IN_Error_Callback+0xc>)
 8003cbc:	f7ff ff32 	bl	8003b24 <_Error_Handler>
 8003cc0:	0801c640 	.word	0x0801c640

08003cc4 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8003cc4:	b570      	push	{r4, r5, r6, lr}
 8003cc6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8003cc8:	4604      	mov	r4, r0
 8003cca:	b190      	cbz	r0, 8003cf2 <BSP_LED_Init+0x2e>
 8003ccc:	2801      	cmp	r0, #1
 8003cce:	d033      	beq.n	8003d38 <BSP_LED_Init+0x74>
 8003cd0:	2802      	cmp	r0, #2
 8003cd2:	d03e      	beq.n	8003d52 <BSP_LED_Init+0x8e>
 8003cd4:	2803      	cmp	r0, #3
 8003cd6:	d118      	bne.n	8003d0a <BSP_LED_Init+0x46>
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9304      	str	r3, [sp, #16]
 8003cdc:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <BSP_LED_Init+0xa8>)
 8003cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce0:	f042 0208 	orr.w	r2, r2, #8
 8003ce4:	631a      	str	r2, [r3, #48]	; 0x30
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f003 0308 	and.w	r3, r3, #8
 8003cec:	9304      	str	r3, [sp, #16]
 8003cee:	9b04      	ldr	r3, [sp, #16]
 8003cf0:	e00b      	b.n	8003d0a <BSP_LED_Init+0x46>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <BSP_LED_Init+0xa8>)
 8003cf8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003cfa:	f042 0208 	orr.w	r2, r2, #8
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
 8003d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	9301      	str	r3, [sp, #4]
 8003d08:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003d0a:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <BSP_LED_Init+0xac>)
 8003d0c:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
 8003d10:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d12:	2301      	movs	r3, #1
 8003d14:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d16:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003d18:	2302      	movs	r3, #2
 8003d1a:	9308      	str	r3, [sp, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003d1c:	4d15      	ldr	r5, [pc, #84]	; (8003d74 <BSP_LED_Init+0xb0>)
 8003d1e:	a905      	add	r1, sp, #20
 8003d20:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003d24:	f7fd fc4c 	bl	80015c0 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003d28:	2200      	movs	r2, #0
 8003d2a:	4631      	mov	r1, r6
 8003d2c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003d30:	f7fd fd2c 	bl	800178c <HAL_GPIO_WritePin>
}
 8003d34:	b00a      	add	sp, #40	; 0x28
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	4b0b      	ldr	r3, [pc, #44]	; (8003d6c <BSP_LED_Init+0xa8>)
 8003d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d40:	f042 0208 	orr.w	r2, r2, #8
 8003d44:	631a      	str	r2, [r3, #48]	; 0x30
 8003d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d48:	f003 0308 	and.w	r3, r3, #8
 8003d4c:	9302      	str	r3, [sp, #8]
 8003d4e:	9b02      	ldr	r3, [sp, #8]
 8003d50:	e7db      	b.n	8003d0a <BSP_LED_Init+0x46>
 8003d52:	2300      	movs	r3, #0
 8003d54:	9303      	str	r3, [sp, #12]
 8003d56:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <BSP_LED_Init+0xa8>)
 8003d58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5a:	f042 0208 	orr.w	r2, r2, #8
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
 8003d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d62:	f003 0308 	and.w	r3, r3, #8
 8003d66:	9303      	str	r3, [sp, #12]
 8003d68:	9b03      	ldr	r3, [sp, #12]
 8003d6a:	e7ce      	b.n	8003d0a <BSP_LED_Init+0x46>
 8003d6c:	40023800 	.word	0x40023800
 8003d70:	0801c650 	.word	0x0801c650
 8003d74:	20000408 	.word	0x20000408

08003d78 <BSP_LED_On>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8003d78:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	4b04      	ldr	r3, [pc, #16]	; (8003d90 <BSP_LED_On+0x18>)
 8003d7e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003d82:	4b04      	ldr	r3, [pc, #16]	; (8003d94 <BSP_LED_On+0x1c>)
 8003d84:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003d88:	f7fd fd00 	bl	800178c <HAL_GPIO_WritePin>
 8003d8c:	bd08      	pop	{r3, pc}
 8003d8e:	bf00      	nop
 8003d90:	0801c650 	.word	0x0801c650
 8003d94:	20000408 	.word	0x20000408

08003d98 <BSP_LED_Toggle>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 8003d98:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003d9a:	4b04      	ldr	r3, [pc, #16]	; (8003dac <BSP_LED_Toggle+0x14>)
 8003d9c:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003da0:	4b03      	ldr	r3, [pc, #12]	; (8003db0 <BSP_LED_Toggle+0x18>)
 8003da2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003da6:	f7fd fcf7 	bl	8001798 <HAL_GPIO_TogglePin>
 8003daa:	bd08      	pop	{r3, pc}
 8003dac:	0801c650 	.word	0x0801c650
 8003db0:	20000408 	.word	0x20000408

08003db4 <I2S2_Init>:
  *         Devices RevA/Z and through dedicated PLLI2S_R in Devices RevB/Y)
  *         is already configured and ready to be used.    
  * @param  AudioFreq: Audio frequency to be configured for the I2S peripheral. 
  */
static uint8_t I2S2_Init(uint32_t AudioFreq)
{
 8003db4:	b508      	push	{r3, lr}
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
 8003db6:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <I2S2_Init+0x40>)
 8003db8:	4a0f      	ldr	r2, [pc, #60]	; (8003df8 <I2S2_Init+0x44>)
 8003dba:	601a      	str	r2, [r3, #0]
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8003dbc:	69d1      	ldr	r1, [r2, #28]
 8003dbe:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8003dc2:	0409      	lsls	r1, r1, #16
 8003dc4:	0c09      	lsrs	r1, r1, #16
 8003dc6:	61d1      	str	r1, [r2, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8003dc8:	0040      	lsls	r0, r0, #1
 8003dca:	6158      	str	r0, [r3, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 8003dcc:	2200      	movs	r2, #0
 8003dce:	61da      	str	r2, [r3, #28]
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8003dd0:	2108      	movs	r1, #8
 8003dd2:	6199      	str	r1, [r3, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 8003dd4:	60da      	str	r2, [r3, #12]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8003dd6:	611a      	str	r2, [r3, #16]
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 8003dd8:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003ddc:	605a      	str	r2, [r3, #4]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8003dde:	2220      	movs	r2, #32
 8003de0:	609a      	str	r2, [r3, #8]

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8003de2:	4618      	mov	r0, r3
 8003de4:	f7fd fd9e 	bl	8001924 <HAL_I2S_Init>
 8003de8:	b908      	cbnz	r0, 8003dee <I2S2_Init+0x3a>
  {
    return AUDIO_ERROR;
  }
  else
  {
    return AUDIO_OK; 
 8003dea:	2000      	movs	r0, #0
  }
}  
 8003dec:	bd08      	pop	{r3, pc}
    return AUDIO_ERROR;
 8003dee:	2001      	movs	r0, #1
 8003df0:	bd08      	pop	{r3, pc}
 8003df2:	bf00      	nop
 8003df4:	20001594 	.word	0x20001594
 8003df8:	40003800 	.word	0x40003800

08003dfc <PDMDecoder_Init>:
{
 8003dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e00:	b082      	sub	sp, #8
 8003e02:	4680      	mov	r8, r0
 8003e04:	460e      	mov	r6, r1
 8003e06:	4617      	mov	r7, r2
  __HAL_RCC_CRC_CLK_ENABLE();
 8003e08:	2400      	movs	r4, #0
 8003e0a:	9401      	str	r4, [sp, #4]
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <PDMDecoder_Init+0x78>)
 8003e0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003e14:	631a      	str	r2, [r3, #48]	; 0x30
 8003e16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e1c:	9301      	str	r3, [sp, #4]
 8003e1e:	9b01      	ldr	r3, [sp, #4]
  for(index = 0; index < ChnlNbrIn; index++)
 8003e20:	e023      	b.n	8003e6a <PDMDecoder_Init+0x6e>
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8003e22:	4915      	ldr	r1, [pc, #84]	; (8003e78 <PDMDecoder_Init+0x7c>)
 8003e24:	234c      	movs	r3, #76	; 0x4c
 8003e26:	fb03 f304 	mul.w	r3, r3, r4
 8003e2a:	18cd      	adds	r5, r1, r3
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	52ca      	strh	r2, [r1, r3]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8003e30:	806a      	strh	r2, [r5, #2]
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <PDMDecoder_Init+0x80>)
 8003e34:	606b      	str	r3, [r5, #4]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8003e36:	816f      	strh	r7, [r5, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8003e38:	812e      	strh	r6, [r5, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 8003e3a:	4628      	mov	r0, r5
 8003e3c:	f002 ffb2 	bl	8006da4 <PDM_Filter_Init>
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8003e40:	4b0f      	ldr	r3, [pc, #60]	; (8003e80 <PDMDecoder_Init+0x84>)
 8003e42:	fba3 2308 	umull	r2, r3, r3, r8
 8003e46:	099b      	lsrs	r3, r3, #6
 8003e48:	f8df e038 	ldr.w	lr, [pc, #56]	; 8003e84 <PDMDecoder_Init+0x88>
 8003e4c:	0062      	lsls	r2, r4, #1
 8003e4e:	4422      	add	r2, r4
 8003e50:	0050      	lsls	r0, r2, #1
 8003e52:	eb0e 0100 	add.w	r1, lr, r0
 8003e56:	804b      	strh	r3, [r1, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 8003e58:	2318      	movs	r3, #24
 8003e5a:	808b      	strh	r3, [r1, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	f82e 3000 	strh.w	r3, [lr, r0]
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8003e62:	4628      	mov	r0, r5
 8003e64:	f003 f838 	bl	8006ed8 <PDM_Filter_setConfig>
  for(index = 0; index < ChnlNbrIn; index++)
 8003e68:	3401      	adds	r4, #1
 8003e6a:	42b4      	cmp	r4, r6
 8003e6c:	d3d9      	bcc.n	8003e22 <PDMDecoder_Init+0x26>
}
 8003e6e:	b002      	add	sp, #8
 8003e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e74:	40023800 	.word	0x40023800
 8003e78:	200015e8 	.word	0x200015e8
 8003e7c:	7e809d48 	.word	0x7e809d48
 8003e80:	10624dd3 	.word	0x10624dd3
 8003e84:	200015dc 	.word	0x200015dc

08003e88 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
{
 8003e88:	4770      	bx	lr
	...

08003e8c <HAL_I2S_TxCpltCallback>:
{
 8003e8c:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8003e8e:	6802      	ldr	r2, [r0, #0]
 8003e90:	4b03      	ldr	r3, [pc, #12]	; (8003ea0 <HAL_I2S_TxCpltCallback+0x14>)
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d000      	beq.n	8003e98 <HAL_I2S_TxCpltCallback+0xc>
 8003e96:	bd08      	pop	{r3, pc}
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8003e98:	f7ff fff6 	bl	8003e88 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003e9c:	e7fb      	b.n	8003e96 <HAL_I2S_TxCpltCallback+0xa>
 8003e9e:	bf00      	nop
 8003ea0:	40003c00 	.word	0x40003c00

08003ea4 <BSP_AUDIO_OUT_Error_CallBack>:
{
 8003ea4:	4770      	bx	lr
	...

08003ea8 <BSP_AUDIO_IN_Record>:
{
 8003ea8:	b508      	push	{r3, lr}
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8003eaa:	b28a      	uxth	r2, r1
 8003eac:	4601      	mov	r1, r0
 8003eae:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <BSP_AUDIO_IN_Record+0x10>)
 8003eb0:	f7fd fc76 	bl	80017a0 <HAL_I2S_Receive_DMA>
}
 8003eb4:	2000      	movs	r0, #0
 8003eb6:	bd08      	pop	{r3, pc}
 8003eb8:	20001594 	.word	0x20001594

08003ebc <BSP_AUDIO_IN_PDMToPCM>:
{
 8003ebc:	b530      	push	{r4, r5, lr}
 8003ebe:	b0a1      	sub	sp, #132	; 0x84
 8003ec0:	460c      	mov	r4, r1
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e00a      	b.n	8003edc <BSP_AUDIO_IN_PDMToPCM+0x20>
    AppPDM[index] = HTONS(PDMBuf[index]);
 8003ec6:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8003eca:	020a      	lsls	r2, r1, #8
 8003ecc:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 8003ed0:	a920      	add	r1, sp, #128	; 0x80
 8003ed2:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003ed6:	f821 2c80 	strh.w	r2, [r1, #-128]
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8003eda:	3301      	adds	r3, #1
 8003edc:	2b3f      	cmp	r3, #63	; 0x3f
 8003ede:	d9f2      	bls.n	8003ec6 <BSP_AUDIO_IN_PDMToPCM+0xa>
 8003ee0:	2500      	movs	r5, #0
 8003ee2:	e009      	b.n	8003ef8 <BSP_AUDIO_IN_PDMToPCM+0x3c>
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8003ee4:	0068      	lsls	r0, r5, #1
 8003ee6:	4b0c      	ldr	r3, [pc, #48]	; (8003f18 <BSP_AUDIO_IN_PDMToPCM+0x5c>)
 8003ee8:	224c      	movs	r2, #76	; 0x4c
 8003eea:	fb02 3205 	mla	r2, r2, r5, r3
 8003eee:	1821      	adds	r1, r4, r0
 8003ef0:	4468      	add	r0, sp
 8003ef2:	f003 f8eb 	bl	80070cc <PDM_Filter>
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
 8003ef6:	3501      	adds	r5, #1
 8003ef8:	2d00      	cmp	r5, #0
 8003efa:	d0f3      	beq.n	8003ee4 <BSP_AUDIO_IN_PDMToPCM+0x28>
 8003efc:	2300      	movs	r3, #0
 8003efe:	e005      	b.n	8003f0c <BSP_AUDIO_IN_PDMToPCM+0x50>
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	3202      	adds	r2, #2
 8003f04:	f834 1023 	ldrh.w	r1, [r4, r3, lsl #2]
 8003f08:	52a1      	strh	r1, [r4, r2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	2b0f      	cmp	r3, #15
 8003f0e:	d9f7      	bls.n	8003f00 <BSP_AUDIO_IN_PDMToPCM+0x44>
}
 8003f10:	2000      	movs	r0, #0
 8003f12:	b021      	add	sp, #132	; 0x84
 8003f14:	bd30      	pop	{r4, r5, pc}
 8003f16:	bf00      	nop
 8003f18:	200015e8 	.word	0x200015e8

08003f1c <BSP_AUDIO_IN_ClockConfig>:
{
 8003f1c:	b510      	push	{r4, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	460c      	mov	r4, r1
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8003f22:	4668      	mov	r0, sp
 8003f24:	f7fe fb6e 	bl	8002604 <HAL_RCCEx_GetPeriphCLKConfig>
  if ((AudioFreq & 0x7) == 0)
 8003f28:	f014 0f07 	tst.w	r4, #7
 8003f2c:	d00b      	beq.n	8003f46 <BSP_AUDIO_IN_ClockConfig+0x2a>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8003f32:	f44f 7391 	mov.w	r3, #290	; 0x122
 8003f36:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8003f38:	2302      	movs	r3, #2
 8003f3a:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8003f3c:	4668      	mov	r0, sp
 8003f3e:	f7fe fab7 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
}
 8003f42:	b004      	add	sp, #16
 8003f44:	bd10      	pop	{r4, pc}
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8003f46:	2301      	movs	r3, #1
 8003f48:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8003f4a:	23c0      	movs	r3, #192	; 0xc0
 8003f4c:	9301      	str	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 8003f4e:	2306      	movs	r3, #6
 8003f50:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8003f52:	4668      	mov	r0, sp
 8003f54:	f7fe faac 	bl	80024b0 <HAL_RCCEx_PeriphCLKConfig>
 8003f58:	e7f3      	b.n	8003f42 <BSP_AUDIO_IN_ClockConfig+0x26>
	...

08003f5c <BSP_AUDIO_IN_MspInit>:
{
 8003f5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f5e:	b08b      	sub	sp, #44	; 0x2c
 8003f60:	4606      	mov	r6, r0
  I2S2_CLK_ENABLE();
 8003f62:	2500      	movs	r5, #0
 8003f64:	9501      	str	r5, [sp, #4]
 8003f66:	4c36      	ldr	r4, [pc, #216]	; (8004040 <BSP_AUDIO_IN_MspInit+0xe4>)
 8003f68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f6e:	6423      	str	r3, [r4, #64]	; 0x40
 8003f70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	9b01      	ldr	r3, [sp, #4]
  I2S2_SCK_GPIO_CLK_ENABLE();
 8003f7a:	9502      	str	r5, [sp, #8]
 8003f7c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f7e:	f043 0302 	orr.w	r3, r3, #2
 8003f82:	6323      	str	r3, [r4, #48]	; 0x30
 8003f84:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	9302      	str	r3, [sp, #8]
 8003f8c:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8003f8e:	9503      	str	r5, [sp, #12]
 8003f90:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f92:	f043 0304 	orr.w	r3, r3, #4
 8003f96:	6323      	str	r3, [r4, #48]	; 0x30
 8003f98:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	9303      	str	r3, [sp, #12]
 8003fa0:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003fa6:	9507      	str	r5, [sp, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003fa8:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8003faa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fae:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8003fb0:	2705      	movs	r7, #5
 8003fb2:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8003fb4:	a905      	add	r1, sp, #20
 8003fb6:	4823      	ldr	r0, [pc, #140]	; (8004044 <BSP_AUDIO_IN_MspInit+0xe8>)
 8003fb8:	f7fd fb02 	bl	80015c0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 8003fbc:	2308      	movs	r3, #8
 8003fbe:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8003fc0:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8003fc2:	a905      	add	r1, sp, #20
 8003fc4:	4820      	ldr	r0, [pc, #128]	; (8004048 <BSP_AUDIO_IN_MspInit+0xec>)
 8003fc6:	f7fd fafb 	bl	80015c0 <HAL_GPIO_Init>
  I2S2_DMAx_CLK_ENABLE();
 8003fca:	9504      	str	r5, [sp, #16]
 8003fcc:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fd2:	6323      	str	r3, [r4, #48]	; 0x30
 8003fd4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fda:	9304      	str	r3, [sp, #16]
 8003fdc:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 8003fde:	6832      	ldr	r2, [r6, #0]
 8003fe0:	4b1a      	ldr	r3, [pc, #104]	; (800404c <BSP_AUDIO_IN_MspInit+0xf0>)
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d009      	beq.n	8003ffa <BSP_AUDIO_IN_MspInit+0x9e>
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	210f      	movs	r1, #15
 8003fea:	200e      	movs	r0, #14
 8003fec:	f7fd f822 	bl	8001034 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8003ff0:	200e      	movs	r0, #14
 8003ff2:	f7fd f851 	bl	8001098 <HAL_NVIC_EnableIRQ>
}
 8003ff6:	b00b      	add	sp, #44	; 0x2c
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8003ffa:	4c15      	ldr	r4, [pc, #84]	; (8004050 <BSP_AUDIO_IN_MspInit+0xf4>)
 8003ffc:	6065      	str	r5, [r4, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8003ffe:	60a5      	str	r5, [r4, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004000:	60e5      	str	r5, [r4, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8004002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004006:	6122      	str	r2, [r4, #16]
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8004008:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800400c:	6162      	str	r2, [r4, #20]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 800400e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004012:	61a2      	str	r2, [r4, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8004014:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004018:	61e2      	str	r2, [r4, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 800401a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800401e:	6222      	str	r2, [r4, #32]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004020:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004022:	2203      	movs	r2, #3
 8004024:	62a2      	str	r2, [r4, #40]	; 0x28
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004026:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8004028:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 800402a:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <BSP_AUDIO_IN_MspInit+0xf8>)
 800402c:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 800402e:	63f4      	str	r4, [r6, #60]	; 0x3c
 8004030:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sRx);
 8004032:	4620      	mov	r0, r4
 8004034:	f7fd f94c 	bl	80012d0 <HAL_DMA_DeInit>
    HAL_DMA_Init(&hdma_i2sRx);      
 8004038:	4620      	mov	r0, r4
 800403a:	f7fd f8e1 	bl	8001200 <HAL_DMA_Init>
 800403e:	e7d2      	b.n	8003fe6 <BSP_AUDIO_IN_MspInit+0x8a>
 8004040:	40023800 	.word	0x40023800
 8004044:	40020400 	.word	0x40020400
 8004048:	40020800 	.word	0x40020800
 800404c:	40003800 	.word	0x40003800
 8004050:	200004bc 	.word	0x200004bc
 8004054:	40026058 	.word	0x40026058

08004058 <BSP_AUDIO_IN_Init>:
{
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	4604      	mov	r4, r0
 800405c:	4616      	mov	r6, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 800405e:	4d0d      	ldr	r5, [pc, #52]	; (8004094 <BSP_AUDIO_IN_Init+0x3c>)
 8004060:	2200      	movs	r2, #0
 8004062:	4601      	mov	r1, r0
 8004064:	4628      	mov	r0, r5
 8004066:	f7ff ff59 	bl	8003f1c <BSP_AUDIO_IN_ClockConfig>
  PDMDecoder_Init(AudioFreq, ChnlNbr, 2);
 800406a:	2202      	movs	r2, #2
 800406c:	4631      	mov	r1, r6
 800406e:	4620      	mov	r0, r4
 8004070:	f7ff fec4 	bl	8003dfc <PDMDecoder_Init>
  hAudioInI2s.Instance = I2S2;
 8004074:	4b08      	ldr	r3, [pc, #32]	; (8004098 <BSP_AUDIO_IN_Init+0x40>)
 8004076:	602b      	str	r3, [r5, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8004078:	4628      	mov	r0, r5
 800407a:	f7fd fd9d 	bl	8001bb8 <HAL_I2S_GetState>
 800407e:	b120      	cbz	r0, 800408a <BSP_AUDIO_IN_Init+0x32>
  I2S2_Init(AudioFreq);
 8004080:	4620      	mov	r0, r4
 8004082:	f7ff fe97 	bl	8003db4 <I2S2_Init>
}
 8004086:	2000      	movs	r0, #0
 8004088:	bd70      	pop	{r4, r5, r6, pc}
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 800408a:	2100      	movs	r1, #0
 800408c:	4628      	mov	r0, r5
 800408e:	f7ff ff65 	bl	8003f5c <BSP_AUDIO_IN_MspInit>
 8004092:	e7f5      	b.n	8004080 <BSP_AUDIO_IN_Init+0x28>
 8004094:	20001594 	.word	0x20001594
 8004098:	40003800 	.word	0x40003800

0800409c <HAL_I2S_RxCpltCallback>:
{
 800409c:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800409e:	f7ff fb31 	bl	8003704 <BSP_AUDIO_IN_TransferComplete_CallBack>
 80040a2:	bd08      	pop	{r3, pc}

080040a4 <HAL_I2S_RxHalfCpltCallback>:
{
 80040a4:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80040a6:	f7ff fb89 	bl	80037bc <BSP_AUDIO_IN_HalfTransfer_CallBack>
 80040aa:	bd08      	pop	{r3, pc}

080040ac <HAL_I2S_ErrorCallback>:
/**
  * @brief  I2S error callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80040ac:	b510      	push	{r4, lr}
 80040ae:	4604      	mov	r4, r0
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 80040b0:	6802      	ldr	r2, [r0, #0]
 80040b2:	4b07      	ldr	r3, [pc, #28]	; (80040d0 <HAL_I2S_ErrorCallback+0x24>)
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d004      	beq.n	80040c2 <HAL_I2S_ErrorCallback+0x16>
  {
    BSP_AUDIO_OUT_Error_CallBack();
  }
  if(hi2s->Instance == I2S2)
 80040b8:	6822      	ldr	r2, [r4, #0]
 80040ba:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <HAL_I2S_ErrorCallback+0x28>)
 80040bc:	429a      	cmp	r2, r3
 80040be:	d003      	beq.n	80040c8 <HAL_I2S_ErrorCallback+0x1c>
 80040c0:	bd10      	pop	{r4, pc}
    BSP_AUDIO_OUT_Error_CallBack();
 80040c2:	f7ff feef 	bl	8003ea4 <BSP_AUDIO_OUT_Error_CallBack>
 80040c6:	e7f7      	b.n	80040b8 <HAL_I2S_ErrorCallback+0xc>
  {
    BSP_AUDIO_IN_Error_Callback();
 80040c8:	f7ff fdf4 	bl	8003cb4 <BSP_AUDIO_IN_Error_Callback>
  }
}
 80040cc:	e7f8      	b.n	80040c0 <HAL_I2S_ErrorCallback+0x14>
 80040ce:	bf00      	nop
 80040d0:	40003c00 	.word	0x40003c00
 80040d4:	40003800 	.word	0x40003800

080040d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80040d8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80040da:	2007      	movs	r0, #7
 80040dc:	f7fc ff98 	bl	8001010 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80040e0:	2200      	movs	r2, #0
 80040e2:	4611      	mov	r1, r2
 80040e4:	f06f 000b 	mvn.w	r0, #11
 80040e8:	f7fc ffa4 	bl	8001034 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80040ec:	2200      	movs	r2, #0
 80040ee:	4611      	mov	r1, r2
 80040f0:	f06f 000a 	mvn.w	r0, #10
 80040f4:	f7fc ff9e 	bl	8001034 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80040f8:	2200      	movs	r2, #0
 80040fa:	4611      	mov	r1, r2
 80040fc:	f06f 0009 	mvn.w	r0, #9
 8004100:	f7fc ff98 	bl	8001034 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8004104:	2200      	movs	r2, #0
 8004106:	4611      	mov	r1, r2
 8004108:	f06f 0004 	mvn.w	r0, #4
 800410c:	f7fc ff92 	bl	8001034 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8004110:	2200      	movs	r2, #0
 8004112:	4611      	mov	r1, r2
 8004114:	f06f 0003 	mvn.w	r0, #3
 8004118:	f7fc ff8c 	bl	8001034 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 800411c:	2200      	movs	r2, #0
 800411e:	4611      	mov	r1, r2
 8004120:	f06f 0001 	mvn.w	r0, #1
 8004124:	f7fc ff86 	bl	8001034 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8004128:	2200      	movs	r2, #0
 800412a:	4611      	mov	r1, r2
 800412c:	f04f 30ff 	mov.w	r0, #4294967295
 8004130:	f7fc ff80 	bl	8001034 <HAL_NVIC_SetPriority>
 8004134:	bd08      	pop	{r3, pc}
	...

08004138 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 8004138:	6802      	ldr	r2, [r0, #0]
 800413a:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_I2S_MspInit+0x5c>)
 800413c:	429a      	cmp	r2, r3
 800413e:	d000      	beq.n	8004142 <HAL_I2S_MspInit+0xa>
 8004140:	4770      	bx	lr
{
 8004142:	b570      	push	{r4, r5, r6, lr}
 8004144:	b086      	sub	sp, #24
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004146:	2400      	movs	r4, #0
 8004148:	9400      	str	r4, [sp, #0]
 800414a:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 800414e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004154:	641a      	str	r2, [r3, #64]	; 0x40
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	9b00      	ldr	r3, [sp, #0]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8004160:	2310      	movs	r3, #16
 8004162:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004164:	2602      	movs	r6, #2
 8004166:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004168:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800416a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800416c:	2506      	movs	r5, #6
 800416e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004170:	a901      	add	r1, sp, #4
 8004172:	4809      	ldr	r0, [pc, #36]	; (8004198 <HAL_I2S_MspInit+0x60>)
 8004174:	f7fd fa24 	bl	80015c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8004178:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800417c:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004180:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004182:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004184:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004186:	a901      	add	r1, sp, #4
 8004188:	4804      	ldr	r0, [pc, #16]	; (800419c <HAL_I2S_MspInit+0x64>)
 800418a:	f7fd fa19 	bl	80015c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800418e:	b006      	add	sp, #24
 8004190:	bd70      	pop	{r4, r5, r6, pc}
 8004192:	bf00      	nop
 8004194:	40003c00 	.word	0x40003c00
 8004198:	40020000 	.word	0x40020000
 800419c:	40020800 	.word	0x40020800

080041a0 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 80041a0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80041a2:	f7fc ff23 	bl	8000fec <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
 80041a6:	f7fc ffaa 	bl	80010fe <HAL_SYSTICK_IRQHandler>
 80041aa:	bd08      	pop	{r3, pc}

080041ac <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80041ac:	490f      	ldr	r1, [pc, #60]	; (80041ec <SystemInit+0x40>)
 80041ae:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80041b2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80041ba:	4b0d      	ldr	r3, [pc, #52]	; (80041f0 <SystemInit+0x44>)
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80041c4:	2000      	movs	r0, #0
 80041c6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80041ce:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80041d2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80041d4:	4a07      	ldr	r2, [pc, #28]	; (80041f4 <SystemInit+0x48>)
 80041d6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041de:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80041e0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80041e2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80041e6:	608b      	str	r3, [r1, #8]
 80041e8:	4770      	bx	lr
 80041ea:	bf00      	nop
 80041ec:	e000ed00 	.word	0xe000ed00
 80041f0:	40023800 	.word	0x40023800
 80041f4:	24003010 	.word	0x24003010

080041f8 <hsv2rgb>:

uint8_t w_pos;

extern WS2812_BufferItem * ws2812b_getBufferItem(buf_state status);

rgb hsv2rgb(hsv in) {
 80041f8:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}
 80041fc:	ed2d 8b06 	vpush	{d8-d10}
 8004200:	b090      	sub	sp, #64	; 0x40
 8004202:	ed8d 0a07 	vstr	s0, [sp, #28]
 8004206:	ed8d 1a09 	vstr	s2, [sp, #36]	; 0x24
	float32_t hh, p, q, t, ff;
	uint16_t i;
	rgb out;

	if (in.s <= 0.0) {
 800420a:	eef5 0ac0 	vcmpe.f32	s1, #0.0
 800420e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004212:	d95b      	bls.n	80042cc <hsv2rgb+0xd4>
		out.r = in.v;
		out.g = in.v;
		out.b = in.v;
		return out;
	}
	hh = in.h;
 8004214:	eddd 7a07 	vldr	s15, [sp, #28]
	if (hh >= 360.0)
 8004218:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004354 <hsv2rgb+0x15c>
 800421c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	db01      	blt.n	800422a <hsv2rgb+0x32>
		hh = 0.0;
 8004226:	eddf 7a4c 	vldr	s15, [pc, #304]	; 8004358 <hsv2rgb+0x160>
 800422a:	eeb0 8a60 	vmov.f32	s16, s1
	hh /= 60.0;
 800422e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800435c <hsv2rgb+0x164>
 8004232:	ee87 9a87 	vdiv.f32	s18, s15, s14
	i = (uint16_t) hh;
 8004236:	eefc 7ac9 	vcvt.u32.f32	s15, s18
 800423a:	edcd 7a01 	vstr	s15, [sp, #4]
 800423e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
	ff = hh - i;
 8004242:	ee07 4a90 	vmov	s15, r4
 8004246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800424a:	ee39 9a67 	vsub.f32	s18, s18, s15
	p = in.v * (1.0f - in.s);
 800424e:	eddd 9a09 	vldr	s19, [sp, #36]	; 0x24
 8004252:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004256:	ee37 7ae0 	vsub.f32	s14, s15, s1
 800425a:	ee29 aa87 	vmul.f32	s20, s19, s14
	q = in.v * (1.0f - (in.s * ff));
 800425e:	ee20 7a89 	vmul.f32	s14, s1, s18
 8004262:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004266:	ee69 8aa7 	vmul.f32	s17, s19, s15
	t = in.v * (1.0f - (in.s * (1.0 - ff)));
 800426a:	ee19 0a90 	vmov	r0, s19
 800426e:	f7fc f96f 	bl	8000550 <__aeabi_f2d>
 8004272:	4606      	mov	r6, r0
 8004274:	460f      	mov	r7, r1
 8004276:	ee18 0a10 	vmov	r0, s16
 800427a:	f7fc f969 	bl	8000550 <__aeabi_f2d>
 800427e:	4680      	mov	r8, r0
 8004280:	4689      	mov	r9, r1
 8004282:	ee19 0a10 	vmov	r0, s18
 8004286:	f7fc f963 	bl	8000550 <__aeabi_f2d>
 800428a:	4602      	mov	r2, r0
 800428c:	460b      	mov	r3, r1
 800428e:	2000      	movs	r0, #0
 8004290:	4933      	ldr	r1, [pc, #204]	; (8004360 <hsv2rgb+0x168>)
 8004292:	f7fb fffd 	bl	8000290 <__aeabi_dsub>
 8004296:	4602      	mov	r2, r0
 8004298:	460b      	mov	r3, r1
 800429a:	4640      	mov	r0, r8
 800429c:	4649      	mov	r1, r9
 800429e:	f7fc f9ab 	bl	80005f8 <__aeabi_dmul>
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	2000      	movs	r0, #0
 80042a8:	492d      	ldr	r1, [pc, #180]	; (8004360 <hsv2rgb+0x168>)
 80042aa:	f7fb fff1 	bl	8000290 <__aeabi_dsub>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	4630      	mov	r0, r6
 80042b4:	4639      	mov	r1, r7
 80042b6:	f7fc f99f 	bl	80005f8 <__aeabi_dmul>
 80042ba:	f7fc fc7f 	bl	8000bbc <__aeabi_d2f>

	switch (i) {
 80042be:	2c04      	cmp	r4, #4
 80042c0:	d841      	bhi.n	8004346 <hsv2rgb+0x14e>
 80042c2:	e8df f004 	tbb	[pc, r4]
 80042c6:	2610      	.short	0x2610
 80042c8:	332d      	.short	0x332d
 80042ca:	3a          	.byte	0x3a
 80042cb:	00          	.byte	0x00
		out.r = in.v;
 80042cc:	ed8d 1a0a 	vstr	s2, [sp, #40]	; 0x28
		out.g = in.v;
 80042d0:	ed8d 1a0b 	vstr	s2, [sp, #44]	; 0x2c
		out.b = in.v;
 80042d4:	ed8d 1a0c 	vstr	s2, [sp, #48]	; 0x30
		return out;
 80042d8:	ab0a      	add	r3, sp, #40	; 0x28
 80042da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042de:	ab10      	add	r3, sp, #64	; 0x40
 80042e0:	e903 0007 	stmdb	r3, {r0, r1, r2}
 80042e4:	e00a      	b.n	80042fc <hsv2rgb+0x104>
	case 0:
		out.r = in.v;
 80042e6:	edcd 9a0a 	vstr	s19, [sp, #40]	; 0x28
		out.g = t;
 80042ea:	900b      	str	r0, [sp, #44]	; 0x2c
		out.b = p;
 80042ec:	ed8d aa0c 	vstr	s20, [sp, #48]	; 0x30
		out.r = in.v;
		out.g = p;
		out.b = q;
		break;
	}
	return out;
 80042f0:	ab0a      	add	r3, sp, #40	; 0x28
 80042f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80042f6:	ab10      	add	r3, sp, #64	; 0x40
 80042f8:	e903 0007 	stmdb	r3, {r0, r1, r2}
}
 80042fc:	ed9d 0a0d 	vldr	s0, [sp, #52]	; 0x34
 8004300:	eddd 0a0e 	vldr	s1, [sp, #56]	; 0x38
 8004304:	ed9d 1a0f 	vldr	s2, [sp, #60]	; 0x3c
 8004308:	b010      	add	sp, #64	; 0x40
 800430a:	ecbd 8b06 	vpop	{d8-d10}
 800430e:	e8bd 83d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, pc}
		out.r = q;
 8004312:	edcd 8a0a 	vstr	s17, [sp, #40]	; 0x28
		out.g = in.v;
 8004316:	edcd 9a0b 	vstr	s19, [sp, #44]	; 0x2c
		out.b = p;
 800431a:	ed8d aa0c 	vstr	s20, [sp, #48]	; 0x30
		break;
 800431e:	e7e7      	b.n	80042f0 <hsv2rgb+0xf8>
		out.r = p;
 8004320:	ed8d aa0a 	vstr	s20, [sp, #40]	; 0x28
		out.g = in.v;
 8004324:	edcd 9a0b 	vstr	s19, [sp, #44]	; 0x2c
		out.b = t;
 8004328:	900c      	str	r0, [sp, #48]	; 0x30
		break;
 800432a:	e7e1      	b.n	80042f0 <hsv2rgb+0xf8>
		out.r = p;
 800432c:	ed8d aa0a 	vstr	s20, [sp, #40]	; 0x28
		out.g = q;
 8004330:	edcd 8a0b 	vstr	s17, [sp, #44]	; 0x2c
		out.b = in.v;
 8004334:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
		break;
 8004338:	e7da      	b.n	80042f0 <hsv2rgb+0xf8>
		out.r = t;
 800433a:	900a      	str	r0, [sp, #40]	; 0x28
		out.g = p;
 800433c:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
		out.b = in.v;
 8004340:	edcd 9a0c 	vstr	s19, [sp, #48]	; 0x30
		break;
 8004344:	e7d4      	b.n	80042f0 <hsv2rgb+0xf8>
		out.r = in.v;
 8004346:	edcd 9a0a 	vstr	s19, [sp, #40]	; 0x28
		out.g = p;
 800434a:	ed8d aa0b 	vstr	s20, [sp, #44]	; 0x2c
		out.b = q;
 800434e:	edcd 8a0c 	vstr	s17, [sp, #48]	; 0x30
		break;
 8004352:	e7cd      	b.n	80042f0 <hsv2rgb+0xf8>
 8004354:	43b40000 	.word	0x43b40000
 8004358:	00000000 	.word	0x00000000
 800435c:	42700000 	.word	0x42700000
 8004360:	3ff00000 	.word	0x3ff00000

08004364 <visInit>:

void visInit() {
 8004364:	b508      	push	{r3, lr}

	ws2812b_init();
 8004366:	f000 fa7f 	bl	8004868 <ws2812b_init>
 800436a:	bd08      	pop	{r3, pc}

0800436c <visHandle>:
}

uint8_t visHandle() {
 800436c:	b508      	push	{r3, lr}

	static volatile WS2812_BufferItem *  bf;
	bf  = ws2812b_getBufferItem(BUFFER_FULL);
 800436e:	2002      	movs	r0, #2
 8004370:	f000 fc24 	bl	8004bbc <ws2812b_getBufferItem>
	if (bf != NULL  && bf->transferComplete == 0){
 8004374:	b108      	cbz	r0, 800437a <visHandle+0xe>
 8004376:	7a43      	ldrb	r3, [r0, #9]
 8004378:	b10b      	cbz	r3, 800437e <visHandle+0x12>
		ws2812b_handle();
	}
	return 0;

}
 800437a:	2000      	movs	r0, #0
 800437c:	bd08      	pop	{r3, pc}
		ws2812b_handle();
 800437e:	f000 fc2f 	bl	8004be0 <ws2812b_handle>
 8004382:	e7fa      	b.n	800437a <visHandle+0xe>
 8004384:	0000      	movs	r0, r0
	...

08004388 <generate_rgb>:

uint8_t generate_rgb(float32_t * fft, float32_t * mag, uint32_t array_len) {
 8004388:	b5f0      	push	{r4, r5, r6, r7, lr}
 800438a:	ed2d 8b02 	vpush	{d8}
 800438e:	b089      	sub	sp, #36	; 0x24
 8004390:	4607      	mov	r7, r0
 8004392:	460e      	mov	r6, r1
	float32_t * _mag = mag;
	hsv hsv_struct;
	volatile rgb rgb_struct;
	volatile uint8_t * u_ptr;
	//ws_item_ptr = Null;
	ws_item_ptr = (WS2812_BufferItem *) ws2812b_getBufferItem(bs);
 8004394:	2003      	movs	r0, #3
 8004396:	f000 fc11 	bl	8004bbc <ws2812b_getBufferItem>
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <generate_rgb+0x110>)
 800439c:	6018      	str	r0, [r3, #0]

	if (ws_item_ptr != NULL) {
 800439e:	2800      	cmp	r0, #0
 80043a0:	d073      	beq.n	800448a <generate_rgb+0x102>
		ws_item_ptr->WS2812_buf_state = WRITE_LOCKED;
 80043a2:	2401      	movs	r4, #1
 80043a4:	72c4      	strb	r4, [r0, #11]
		u_ptr = ws_item_ptr->frameBufferPointer;
 80043a6:	68c5      	ldr	r5, [r0, #12]
		_Real = fft;
		for (uint16_t i = 1; i < (FFT_LEN / 2); ++i) { ///  hard-coded buffer size need runtime evaluation
 80043a8:	e008      	b.n	80043bc <generate_rgb+0x34>
				*(++u_ptr) = (uint8_t) (rgb_struct.r * 255);
				*(++u_ptr) = (uint8_t) (rgb_struct.g * 255);
				*(++u_ptr) = (uint8_t) (rgb_struct.b * 255);

			} else {
				_Real += 2;
 80043aa:	3708      	adds	r7, #8
				_mag++;
 80043ac:	3604      	adds	r6, #4
				*(++u_ptr) = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	706b      	strb	r3, [r5, #1]
				*(++u_ptr) = 0;
 80043b2:	70ab      	strb	r3, [r5, #2]
				*(++u_ptr) = 0;
 80043b4:	70eb      	strb	r3, [r5, #3]
 80043b6:	3503      	adds	r5, #3
		for (uint16_t i = 1; i < (FFT_LEN / 2); ++i) { ///  hard-coded buffer size need runtime evaluation
 80043b8:	3401      	adds	r4, #1
 80043ba:	b2a4      	uxth	r4, r4
 80043bc:	2c3f      	cmp	r4, #63	; 0x3f
 80043be:	d858      	bhi.n	8004472 <generate_rgb+0xea>
			if (*(_mag) > 0.0f) {
 80043c0:	edd6 7a00 	vldr	s15, [r6]
 80043c4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80043c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043cc:	dded      	ble.n	80043aa <generate_rgb+0x22>
				hsv_struct.h = (atan(*(_mag) / *(_Real))) * (180.0 / PI);
 80043ce:	463b      	mov	r3, r7
 80043d0:	3708      	adds	r7, #8
 80043d2:	ed93 8a00 	vldr	s16, [r3]
 80043d6:	eec7 8a88 	vdiv.f32	s17, s15, s16
 80043da:	ee18 0a90 	vmov	r0, s17
 80043de:	f7fc f8b7 	bl	8000550 <__aeabi_f2d>
 80043e2:	ec41 0b10 	vmov	d0, r0, r1
 80043e6:	f002 febf 	bl	8007168 <atan>
 80043ea:	a329      	add	r3, pc, #164	; (adr r3, 8004490 <generate_rgb+0x108>)
 80043ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f0:	ec51 0b10 	vmov	r0, r1, d0
 80043f4:	f7fc f900 	bl	80005f8 <__aeabi_dmul>
 80043f8:	f7fc fbe0 	bl	8000bbc <__aeabi_d2f>
 80043fc:	9005      	str	r0, [sp, #20]
				hsv_struct.v = (*(_mag) / *(_Real));
 80043fe:	edcd 8a07 	vstr	s17, [sp, #28]
				hsv_struct.s = ((*_Real) / f32_FFT_len);
 8004402:	eddf 0a26 	vldr	s1, [pc, #152]	; 800449c <generate_rgb+0x114>
 8004406:	ee68 0a20 	vmul.f32	s1, s16, s1
 800440a:	edcd 0a06 	vstr	s1, [sp, #24]
				_mag++;
 800440e:	3604      	adds	r6, #4
				rgb_struct = hsv2rgb(hsv_struct);
 8004410:	ee00 0a10 	vmov	s0, r0
 8004414:	eeb0 1a68 	vmov.f32	s2, s17
 8004418:	f7ff feee 	bl	80041f8 <hsv2rgb>
 800441c:	ed8d 0a02 	vstr	s0, [sp, #8]
 8004420:	edcd 0a03 	vstr	s1, [sp, #12]
 8004424:	ed8d 1a04 	vstr	s2, [sp, #16]
				*(++u_ptr) = (uint8_t) (rgb_struct.r * 255);
 8004428:	eddd 7a02 	vldr	s15, [sp, #8]
 800442c:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 80044a0 <generate_rgb+0x118>
 8004430:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004438:	edcd 7a01 	vstr	s15, [sp, #4]
 800443c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004440:	706b      	strb	r3, [r5, #1]
				*(++u_ptr) = (uint8_t) (rgb_struct.g * 255);
 8004442:	eddd 7a03 	vldr	s15, [sp, #12]
 8004446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800444a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800444e:	edcd 7a01 	vstr	s15, [sp, #4]
 8004452:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004456:	70ab      	strb	r3, [r5, #2]
				*(++u_ptr) = (uint8_t) (rgb_struct.b * 255);
 8004458:	eddd 7a04 	vldr	s15, [sp, #16]
 800445c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004460:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004464:	edcd 7a01 	vstr	s15, [sp, #4]
 8004468:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800446c:	70eb      	strb	r3, [r5, #3]
 800446e:	3503      	adds	r5, #3
 8004470:	e7a2      	b.n	80043b8 <generate_rgb+0x30>
			}

		}

		ws_item_ptr->WS2812_buf_state = BUFFER_FULL;
 8004472:	4b09      	ldr	r3, [pc, #36]	; (8004498 <generate_rgb+0x110>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2202      	movs	r2, #2
 8004478:	72da      	strb	r2, [r3, #11]
		ws_item_ptr->transferComplete = 0;
 800447a:	2200      	movs	r2, #0
 800447c:	725a      	strb	r2, [r3, #9]
		ws_item_ptr->startTransfer = 1;
 800447e:	2001      	movs	r0, #1
 8004480:	7218      	strb	r0, [r3, #8]
		return 1;
	} else {
		return 0;
	}

}
 8004482:	b009      	add	sp, #36	; 0x24
 8004484:	ecbd 8b02 	vpop	{d8}
 8004488:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
 800448a:	2000      	movs	r0, #0
 800448c:	e7f9      	b.n	8004482 <generate_rgb+0xfa>
 800448e:	bf00      	nop
 8004490:	0d03cf26 	.word	0x0d03cf26
 8004494:	404ca5dc 	.word	0x404ca5dc
 8004498:	200012b0 	.word	0x200012b0
 800449c:	3c000000 	.word	0x3c000000
 80044a0:	437f0000 	.word	0x437f0000

080044a4 <DMA_TransferError>:

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
}

void DMA_TransferError(DMA_HandleTypeDef *DmaHandle) {
 80044a4:	4770      	bx	lr

080044a6 <DMA_TransferHalfHandler>:

}

void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle) {
 80044a6:	4770      	bx	lr

080044a8 <DMA_TransferCompleteHandler>:
}

void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle) {

#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80044a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80044ac:	4b29      	ldr	r3, [pc, #164]	; (8004554 <DMA_TransferCompleteHandler+0xac>)
 80044ae:	619a      	str	r2, [r3, #24]
#endif

	// Stop timer
	TIM1->CR1 &= ~TIM_CR1_CEN;
 80044b0:	4a29      	ldr	r2, [pc, #164]	; (8004558 <DMA_TransferCompleteHandler+0xb0>)
 80044b2:	6813      	ldr	r3, [r2, #0]
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	6013      	str	r3, [r2, #0]

	// Disable DMA
	__HAL_DMA_DISABLE(&dmaUpdate);
 80044ba:	4b28      	ldr	r3, [pc, #160]	; (800455c <DMA_TransferCompleteHandler+0xb4>)
 80044bc:	6819      	ldr	r1, [r3, #0]
 80044be:	680b      	ldr	r3, [r1, #0]
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	600b      	str	r3, [r1, #0]
	__HAL_DMA_DISABLE(&dmaCC1);
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <DMA_TransferCompleteHandler+0xb8>)
 80044c8:	6819      	ldr	r1, [r3, #0]
 80044ca:	680b      	ldr	r3, [r1, #0]
 80044cc:	f023 0301 	bic.w	r3, r3, #1
 80044d0:	600b      	str	r3, [r1, #0]
	__HAL_DMA_DISABLE(&dmaCC2);
 80044d2:	4b24      	ldr	r3, [pc, #144]	; (8004564 <DMA_TransferCompleteHandler+0xbc>)
 80044d4:	6819      	ldr	r1, [r3, #0]
 80044d6:	680b      	ldr	r3, [r1, #0]
 80044d8:	f023 0301 	bic.w	r3, r3, #1
 80044dc:	600b      	str	r3, [r1, #0]

	// Disable the DMA requests
	__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <DMA_TransferCompleteHandler+0xc0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	68d9      	ldr	r1, [r3, #12]
 80044e4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80044e8:	60d9      	str	r1, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 80044ea:	68d9      	ldr	r1, [r3, #12]
 80044ec:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80044f0:	60d9      	str	r1, [r3, #12]
	__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 80044f2:	68d9      	ldr	r1, [r3, #12]
 80044f4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80044f8:	60d9      	str	r1, [r3, #12]

	// Set 50us period for Treset pulse
	//TIM2->PSC = 1000; // For this long period we need prescaler 1000
	TIM1->ARR = timer_reset_pulse_period;
 80044fa:	491c      	ldr	r1, [pc, #112]	; (800456c <DMA_TransferCompleteHandler+0xc4>)
 80044fc:	6809      	ldr	r1, [r1, #0]
 80044fe:	62d1      	str	r1, [r2, #44]	; 0x2c
	// Reset the timer
	TIM1->CNT = 0;
 8004500:	2100      	movs	r1, #0
 8004502:	6251      	str	r1, [r2, #36]	; 0x24

	// Generate an update event to reload the prescaler value immediately
	TIM1->EGR = TIM_EGR_UG;
 8004504:	2101      	movs	r1, #1
 8004506:	6151      	str	r1, [r2, #20]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8004508:	f06f 0001 	mvn.w	r0, #1
 800450c:	6118      	str	r0, [r3, #16]

	// Enable TIM2 Update interrupt for 50us Treset signal
	__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 800450e:	68d8      	ldr	r0, [r3, #12]
 8004510:	4308      	orrs	r0, r1
 8004512:	60d8      	str	r0, [r3, #12]
	// Enable timer
	TIM1->CR1 |= TIM_CR1_CEN;
 8004514:	6813      	ldr	r3, [r2, #0]
 8004516:	430b      	orrs	r3, r1
 8004518:	6013      	str	r3, [r2, #0]

	// Manually set outputs to low to generate 50us reset impulse
	WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 800451a:	4b15      	ldr	r3, [pc, #84]	; (8004570 <DMA_TransferCompleteHandler+0xc8>)
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <DMA_TransferCompleteHandler+0xcc>)
 8004520:	619a      	str	r2, [r3, #24]
	//READ_ws2812b_item->buf_state = NOT_IN_USE;
	global_WS2812_Struct.transferComplete = 1;
 8004522:	4b15      	ldr	r3, [pc, #84]	; (8004578 <DMA_TransferCompleteHandler+0xd0>)
 8004524:	7419      	strb	r1, [r3, #16]
	global_WS2812_Struct.item[0].transferComplete = 1;
 8004526:	7259      	strb	r1, [r3, #9]
	global_WS2812_Struct.item[1].transferComplete = 1;
 8004528:	7659      	strb	r1, [r3, #25]

	if (global_WS2812_Struct.item[0].WS2812_buf_state == READ_LOCKED) {
 800452a:	7adb      	ldrb	r3, [r3, #11]
 800452c:	b143      	cbz	r3, 8004540 <DMA_TransferCompleteHandler+0x98>
		global_WS2812_Struct.item[0].WS2812_buf_state = NOT_IN_USE;
		global_WS2812_Struct.item[0].startTransfer = 0;
		global_WS2812_Struct.item[0].transferComplete = 1;
	} else if (global_WS2812_Struct.item[1].WS2812_buf_state == READ_LOCKED) {
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <DMA_TransferCompleteHandler+0xd0>)
 8004530:	7edb      	ldrb	r3, [r3, #27]
 8004532:	b953      	cbnz	r3, 800454a <DMA_TransferCompleteHandler+0xa2>
		global_WS2812_Struct.item[1].WS2812_buf_state = NOT_IN_USE;
 8004534:	4b10      	ldr	r3, [pc, #64]	; (8004578 <DMA_TransferCompleteHandler+0xd0>)
 8004536:	2203      	movs	r2, #3
 8004538:	76da      	strb	r2, [r3, #27]
		global_WS2812_Struct.item[1].startTransfer = 0;
 800453a:	2200      	movs	r2, #0
 800453c:	761a      	strb	r2, [r3, #24]
 800453e:	e004      	b.n	800454a <DMA_TransferCompleteHandler+0xa2>
		global_WS2812_Struct.item[0].WS2812_buf_state = NOT_IN_USE;
 8004540:	4b0d      	ldr	r3, [pc, #52]	; (8004578 <DMA_TransferCompleteHandler+0xd0>)
 8004542:	2203      	movs	r2, #3
 8004544:	72da      	strb	r2, [r3, #11]
		global_WS2812_Struct.item[0].startTransfer = 0;
 8004546:	2200      	movs	r2, #0
 8004548:	721a      	strb	r2, [r3, #8]
		global_WS2812_Struct.item[1].transferComplete = 1;
	}

#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 800454a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800454e:	4b01      	ldr	r3, [pc, #4]	; (8004554 <DMA_TransferCompleteHandler+0xac>)
 8004550:	619a      	str	r2, [r3, #24]
 8004552:	4770      	bx	lr
 8004554:	40020c00 	.word	0x40020c00
 8004558:	40010000 	.word	0x40010000
 800455c:	200025b0 	.word	0x200025b0
 8004560:	20001924 	.word	0x20001924
 8004564:	200016e8 	.word	0x200016e8
 8004568:	20001764 	.word	0x20001764
 800456c:	200016e4 	.word	0x200016e4
 8004570:	20000420 	.word	0x20000420
 8004574:	40020800 	.word	0x40020800
 8004578:	20001994 	.word	0x20001994

0800457c <ws2812b_gpio_init>:
static void ws2812b_gpio_init(void) {
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	b088      	sub	sp, #32
	WS2812B_GPIO_CLK_ENABLE()
 8004580:	2500      	movs	r5, #0
 8004582:	9501      	str	r5, [sp, #4]
 8004584:	4c19      	ldr	r4, [pc, #100]	; (80045ec <ws2812b_gpio_init+0x70>)
 8004586:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004588:	f043 0304 	orr.w	r3, r3, #4
 800458c:	6323      	str	r3, [r4, #48]	; 0x30
 800458e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	9301      	str	r3, [sp, #4]
 8004596:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = WS2812B_PINS;
 8004598:	2601      	movs	r6, #1
 800459a:	9603      	str	r6, [sp, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800459c:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800459e:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045a0:	9506      	str	r5, [sp, #24]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 80045a2:	a903      	add	r1, sp, #12
 80045a4:	4812      	ldr	r0, [pc, #72]	; (80045f0 <ws2812b_gpio_init+0x74>)
 80045a6:	f7fd f80b 	bl	80015c0 <HAL_GPIO_Init>
	__HAL_RCC_GPIOD_CLK_ENABLE()
 80045aa:	9502      	str	r5, [sp, #8]
 80045ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045ae:	f043 0308 	orr.w	r3, r3, #8
 80045b2:	6323      	str	r3, [r4, #48]	; 0x30
 80045b4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	9302      	str	r3, [sp, #8]
 80045bc:	9b02      	ldr	r3, [sp, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80045be:	9604      	str	r6, [sp, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045c0:	9505      	str	r5, [sp, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80045c2:	2302      	movs	r3, #2
 80045c4:	9306      	str	r3, [sp, #24]
	GPIO_InitStruct.Pin = LED_BLUE_PIN;
 80045c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ca:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 80045cc:	f5a4 5430 	sub.w	r4, r4, #11264	; 0x2c00
 80045d0:	a903      	add	r1, sp, #12
 80045d2:	4620      	mov	r0, r4
 80045d4:	f7fc fff4 	bl	80015c0 <HAL_GPIO_Init>
	GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 80045d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80045dc:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 80045de:	a903      	add	r1, sp, #12
 80045e0:	4620      	mov	r0, r4
 80045e2:	f7fc ffed 	bl	80015c0 <HAL_GPIO_Init>
}
 80045e6:	b008      	add	sp, #32
 80045e8:	bd70      	pop	{r4, r5, r6, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800
 80045f0:	40020800 	.word	0x40020800

080045f4 <DMA2_init>:
static void DMA2_init(void) {
 80045f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f8:	b083      	sub	sp, #12
	__HAL_RCC_DMA2_CLK_ENABLE()
 80045fa:	2500      	movs	r5, #0
 80045fc:	9501      	str	r5, [sp, #4]
 80045fe:	4b47      	ldr	r3, [pc, #284]	; (800471c <DMA2_init+0x128>)
 8004600:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004602:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004606:	631a      	str	r2, [r3, #48]	; 0x30
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800460e:	9301      	str	r3, [sp, #4]
 8004610:	9b01      	ldr	r3, [sp, #4]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004612:	4c43      	ldr	r4, [pc, #268]	; (8004720 <DMA2_init+0x12c>)
 8004614:	f04f 0a40 	mov.w	sl, #64	; 0x40
 8004618:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 800461c:	60e5      	str	r5, [r4, #12]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800461e:	6125      	str	r5, [r4, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004620:	f44f 5b80 	mov.w	fp, #4096	; 0x1000
 8004624:	f8c4 b014 	str.w	fp, [r4, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004628:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800462c:	61a3      	str	r3, [r4, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 800462e:	f44f 7980 	mov.w	r9, #256	; 0x100
 8004632:	f8c4 901c 	str.w	r9, [r4, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004636:	f44f 3840 	mov.w	r8, #196608	; 0x30000
 800463a:	f8c4 8020 	str.w	r8, [r4, #32]
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 800463e:	f04f 6740 	mov.w	r7, #201326592	; 0xc000000
 8004642:	6067      	str	r7, [r4, #4]
	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004644:	6265      	str	r5, [r4, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004646:	2603      	movs	r6, #3
 8004648:	62a6      	str	r6, [r4, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 800464a:	62e5      	str	r5, [r4, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800464c:	6325      	str	r5, [r4, #48]	; 0x30
	dmaUpdate.Instance = DMA2_Stream5;
 800464e:	4b35      	ldr	r3, [pc, #212]	; (8004724 <DMA2_init+0x130>)
 8004650:	6023      	str	r3, [r4, #0]
	HAL_DMA_DeInit(&dmaUpdate);
 8004652:	4620      	mov	r0, r4
 8004654:	f7fc fe3c 	bl	80012d0 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 8004658:	4620      	mov	r0, r4
 800465a:	f7fc fdd1 	bl	8001200 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaUpdate, (uint32_t) WS2812_IO_High,
 800465e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004662:	4a31      	ldr	r2, [pc, #196]	; (8004728 <DMA2_init+0x134>)
 8004664:	4931      	ldr	r1, [pc, #196]	; (800472c <DMA2_init+0x138>)
 8004666:	4620      	mov	r0, r4
 8004668:	f7fc fe5e 	bl	8001328 <HAL_DMA_Start>
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800466c:	4c30      	ldr	r4, [pc, #192]	; (8004730 <DMA2_init+0x13c>)
 800466e:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004672:	60e5      	str	r5, [r4, #12]
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 8004674:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004678:	6123      	str	r3, [r4, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800467a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800467e:	6163      	str	r3, [r4, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004680:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004684:	61a3      	str	r3, [r4, #24]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8004686:	f8c4 901c 	str.w	r9, [r4, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800468a:	f8c4 8020 	str.w	r8, [r4, #32]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 800468e:	6067      	str	r7, [r4, #4]
	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004690:	6265      	str	r5, [r4, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004692:	62a6      	str	r6, [r4, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 8004694:	62e5      	str	r5, [r4, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004696:	6325      	str	r5, [r4, #48]	; 0x30
	dmaCC1.Instance = DMA2_Stream1;
 8004698:	4b26      	ldr	r3, [pc, #152]	; (8004734 <DMA2_init+0x140>)
 800469a:	6023      	str	r3, [r4, #0]
	HAL_DMA_DeInit(&dmaCC1);
 800469c:	4620      	mov	r0, r4
 800469e:	f7fc fe17 	bl	80012d0 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 80046a2:	4620      	mov	r0, r4
 80046a4:	f7fc fdac 	bl	8001200 <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t) ws2812bDmaBitBuffer,
 80046a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80046ac:	4a22      	ldr	r2, [pc, #136]	; (8004738 <DMA2_init+0x144>)
 80046ae:	4923      	ldr	r1, [pc, #140]	; (800473c <DMA2_init+0x148>)
 80046b0:	4620      	mov	r0, r4
 80046b2:	f7fc fe39 	bl	8001328 <HAL_DMA_Start>
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80046b6:	4c22      	ldr	r4, [pc, #136]	; (8004740 <DMA2_init+0x14c>)
 80046b8:	f8c4 a008 	str.w	sl, [r4, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 80046bc:	60e5      	str	r5, [r4, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 80046be:	6125      	str	r5, [r4, #16]
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80046c0:	f8c4 b014 	str.w	fp, [r4, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80046c4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80046c8:	61a3      	str	r3, [r4, #24]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 80046ca:	f8c4 901c 	str.w	r9, [r4, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80046ce:	f8c4 8020 	str.w	r8, [r4, #32]
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 80046d2:	6067      	str	r7, [r4, #4]
	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80046d4:	6265      	str	r5, [r4, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80046d6:	62a6      	str	r6, [r4, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 80046d8:	62e5      	str	r5, [r4, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80046da:	6325      	str	r5, [r4, #48]	; 0x30
	dmaCC2.Instance = DMA2_Stream2;
 80046dc:	4b19      	ldr	r3, [pc, #100]	; (8004744 <DMA2_init+0x150>)
 80046de:	6023      	str	r3, [r4, #0]
	dmaCC2.XferCpltCallback = DMA_TransferCompleteHandler;
 80046e0:	4b19      	ldr	r3, [pc, #100]	; (8004748 <DMA2_init+0x154>)
 80046e2:	63e3      	str	r3, [r4, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 80046e4:	4b19      	ldr	r3, [pc, #100]	; (800474c <DMA2_init+0x158>)
 80046e6:	6423      	str	r3, [r4, #64]	; 0x40
	dmaCC2.XferErrorCallback = DMA_TransferError;
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <DMA2_init+0x15c>)
 80046ea:	64e3      	str	r3, [r4, #76]	; 0x4c
	HAL_DMA_DeInit(&dmaCC2);
 80046ec:	4620      	mov	r0, r4
 80046ee:	f7fc fdef 	bl	80012d0 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC2);
 80046f2:	4620      	mov	r0, r4
 80046f4:	f7fc fd84 	bl	8001200 <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80046f8:	462a      	mov	r2, r5
 80046fa:	4629      	mov	r1, r5
 80046fc:	203a      	movs	r0, #58	; 0x3a
 80046fe:	f7fc fc99 	bl	8001034 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004702:	203a      	movs	r0, #58	; 0x3a
 8004704:	f7fc fcc8 	bl	8001098 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t) WS2812_IO_Low,
 8004708:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800470c:	4a06      	ldr	r2, [pc, #24]	; (8004728 <DMA2_init+0x134>)
 800470e:	4911      	ldr	r1, [pc, #68]	; (8004754 <DMA2_init+0x160>)
 8004710:	4620      	mov	r0, r4
 8004712:	f7fc fe2d 	bl	8001370 <HAL_DMA_Start_IT>
}
 8004716:	b003      	add	sp, #12
 8004718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800471c:	40023800 	.word	0x40023800
 8004720:	200025b0 	.word	0x200025b0
 8004724:	40026488 	.word	0x40026488
 8004728:	40020818 	.word	0x40020818
 800472c:	2000041c 	.word	0x2000041c
 8004730:	20001924 	.word	0x20001924
 8004734:	40026428 	.word	0x40026428
 8004738:	4002081a 	.word	0x4002081a
 800473c:	200019b0 	.word	0x200019b0
 8004740:	200016e8 	.word	0x200016e8
 8004744:	40026440 	.word	0x40026440
 8004748:	080044a9 	.word	0x080044a9
 800474c:	080044a7 	.word	0x080044a7
 8004750:	080044a5 	.word	0x080044a5
 8004754:	20000420 	.word	0x20000420

08004758 <TIM1_init>:
static void TIM1_init(void) {
 8004758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800475c:	b082      	sub	sp, #8
	__HAL_RCC_TIM1_CLK_ENABLE()
 800475e:	2400      	movs	r4, #0
 8004760:	9401      	str	r4, [sp, #4]
 8004762:	4b35      	ldr	r3, [pc, #212]	; (8004838 <TIM1_init+0xe0>)
 8004764:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004766:	f042 0201 	orr.w	r2, r2, #1
 800476a:	645a      	str	r2, [r3, #68]	; 0x44
 800476c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800476e:	f003 0301 	and.w	r3, r3, #1
 8004772:	9301      	str	r3, [sp, #4]
 8004774:	9b01      	ldr	r3, [sp, #4]
	tim_period = SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 8004776:	4b31      	ldr	r3, [pc, #196]	; (800483c <TIM1_init+0xe4>)
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	0a13      	lsrs	r3, r2, #8
 800477c:	4930      	ldr	r1, [pc, #192]	; (8004840 <TIM1_init+0xe8>)
 800477e:	fba1 1303 	umull	r1, r3, r1, r3
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	492f      	ldr	r1, [pc, #188]	; (8004844 <TIM1_init+0xec>)
 8004786:	600b      	str	r3, [r1, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 8004788:	492f      	ldr	r1, [pc, #188]	; (8004848 <TIM1_init+0xf0>)
 800478a:	fba1 1202 	umull	r1, r2, r1, r2
 800478e:	0ad2      	lsrs	r2, r2, #11
 8004790:	492e      	ldr	r1, [pc, #184]	; (800484c <TIM1_init+0xf4>)
 8004792:	600a      	str	r2, [r1, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 8004794:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8004798:	004a      	lsls	r2, r1, #1
 800479a:	492d      	ldr	r1, [pc, #180]	; (8004850 <TIM1_init+0xf8>)
 800479c:	fba1 0102 	umull	r0, r1, r1, r2
 80047a0:	08cf      	lsrs	r7, r1, #3
	uint32_t cc2 = (10 * tim_period) / 15;
 80047a2:	492c      	ldr	r1, [pc, #176]	; (8004854 <TIM1_init+0xfc>)
 80047a4:	fba1 1202 	umull	r1, r2, r1, r2
 80047a8:	08d6      	lsrs	r6, r2, #3
	TIM1_handle.Instance = TIM1;
 80047aa:	4d2b      	ldr	r5, [pc, #172]	; (8004858 <TIM1_init+0x100>)
 80047ac:	4a2b      	ldr	r2, [pc, #172]	; (800485c <TIM1_init+0x104>)
 80047ae:	602a      	str	r2, [r5, #0]
	TIM1_handle.Init.Period = tim_period;
 80047b0:	60eb      	str	r3, [r5, #12]
	TIM1_handle.Init.RepetitionCounter = 0;
 80047b2:	616c      	str	r4, [r5, #20]
	TIM1_handle.Init.Prescaler = 0;
 80047b4:	606c      	str	r4, [r5, #4]
	TIM1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047b6:	612c      	str	r4, [r5, #16]
	TIM1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047b8:	60ac      	str	r4, [r5, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80047ba:	4628      	mov	r0, r5
 80047bc:	f7fe f98d 	bl	8002ada <HAL_TIM_PWM_Init>
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80047c0:	4622      	mov	r2, r4
 80047c2:	4621      	mov	r1, r4
 80047c4:	2019      	movs	r0, #25
 80047c6:	f7fc fc35 	bl	8001034 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80047ca:	2019      	movs	r0, #25
 80047cc:	f7fc fc64 	bl	8001098 <HAL_NVIC_EnableIRQ>
	tim2OC1.OCMode = TIM_OCMODE_PWM1;
 80047d0:	4923      	ldr	r1, [pc, #140]	; (8004860 <TIM1_init+0x108>)
 80047d2:	f04f 0860 	mov.w	r8, #96	; 0x60
 80047d6:	f8c1 8000 	str.w	r8, [r1]
	tim2OC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047da:	608c      	str	r4, [r1, #8]
	tim2OC1.Pulse = cc1;
 80047dc:	604f      	str	r7, [r1, #4]
	tim2OC1.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047de:	60cc      	str	r4, [r1, #12]
	tim2OC1.OCFastMode = TIM_OCFAST_DISABLE;
 80047e0:	610c      	str	r4, [r1, #16]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 80047e2:	4622      	mov	r2, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f7fe f9c9 	bl	8002b7c <HAL_TIM_PWM_ConfigChannel>
	tim2OC2.OCMode = TIM_OCMODE_PWM1;
 80047ea:	491e      	ldr	r1, [pc, #120]	; (8004864 <TIM1_init+0x10c>)
 80047ec:	f8c1 8000 	str.w	r8, [r1]
	tim2OC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 80047f0:	608c      	str	r4, [r1, #8]
	tim2OC2.Pulse = cc2;
 80047f2:	604e      	str	r6, [r1, #4]
	tim2OC2.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80047f4:	60cc      	str	r4, [r1, #12]
	tim2OC2.OCFastMode = TIM_OCFAST_DISABLE;
 80047f6:	610c      	str	r4, [r1, #16]
	tim2OC2.OCIdleState = TIM_OCIDLESTATE_RESET;
 80047f8:	614c      	str	r4, [r1, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80047fa:	618c      	str	r4, [r1, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 80047fc:	2204      	movs	r2, #4
 80047fe:	4628      	mov	r0, r5
 8004800:	f7fe f9bc 	bl	8002b7c <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_Start(&TIM1_handle);
 8004804:	4628      	mov	r0, r5
 8004806:	f7fd ffe6 	bl	80027d6 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 800480a:	4621      	mov	r1, r4
 800480c:	4628      	mov	r0, r5
 800480e:	f7fe fa33 	bl	8002c78 <HAL_TIM_PWM_Start>
	__HAL_TIM_DISABLE(&TIM1_handle);
 8004812:	682b      	ldr	r3, [r5, #0]
 8004814:	6a19      	ldr	r1, [r3, #32]
 8004816:	f241 1211 	movw	r2, #4369	; 0x1111
 800481a:	4211      	tst	r1, r2
 800481c:	d108      	bne.n	8004830 <TIM1_init+0xd8>
 800481e:	6a19      	ldr	r1, [r3, #32]
 8004820:	f240 4244 	movw	r2, #1092	; 0x444
 8004824:	4211      	tst	r1, r2
 8004826:	d103      	bne.n	8004830 <TIM1_init+0xd8>
 8004828:	681a      	ldr	r2, [r3, #0]
 800482a:	f022 0201 	bic.w	r2, r2, #1
 800482e:	601a      	str	r2, [r3, #0]
}
 8004830:	b002      	add	sp, #8
 8004832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004836:	bf00      	nop
 8004838:	40023800 	.word	0x40023800
 800483c:	20000418 	.word	0x20000418
 8004840:	014f8b59 	.word	0x014f8b59
 8004844:	200017a0 	.word	0x200017a0
 8004848:	1b4e81b5 	.word	0x1b4e81b5
 800484c:	200016e4 	.word	0x200016e4
 8004850:	38e38e39 	.word	0x38e38e39
 8004854:	88888889 	.word	0x88888889
 8004858:	20001764 	.word	0x20001764
 800485c:	40010000 	.word	0x40010000
 8004860:	20001748 	.word	0x20001748
 8004864:	200016c8 	.word	0x200016c8

08004868 <ws2812b_init>:
void ws2812b_init() {
 8004868:	b508      	push	{r3, lr}
	ws2812b_gpio_init();
 800486a:	f7ff fe87 	bl	800457c <ws2812b_gpio_init>
	DMA2_init();
 800486e:	f7ff fec1 	bl	80045f4 <DMA2_init>
	TIM1_init();
 8004872:	f7ff ff71 	bl	8004758 <TIM1_init>
	global_WS2812_Struct.item[0].channel = 0;
 8004876:	4b0a      	ldr	r3, [pc, #40]	; (80048a0 <ws2812b_init+0x38>)
 8004878:	2200      	movs	r2, #0
 800487a:	729a      	strb	r2, [r3, #10]
	global_WS2812_Struct.item[1].channel = 0;
 800487c:	769a      	strb	r2, [r3, #26]
	global_WS2812_Struct.item[0].WS2812_buf_state = NOT_IN_USE;
 800487e:	2103      	movs	r1, #3
 8004880:	72d9      	strb	r1, [r3, #11]
	global_WS2812_Struct.item[1].WS2812_buf_state = NOT_IN_USE;
 8004882:	76d9      	strb	r1, [r3, #27]
	global_WS2812_Struct.item[0].frameBufferCounter = 0;
 8004884:	605a      	str	r2, [r3, #4]
	global_WS2812_Struct.item[1].frameBufferCounter = 0;
 8004886:	615a      	str	r2, [r3, #20]
	global_WS2812_Struct.item[0].frameBufferPointer = &frame_Buffer1[0];
 8004888:	4906      	ldr	r1, [pc, #24]	; (80048a4 <ws2812b_init+0x3c>)
 800488a:	60d9      	str	r1, [r3, #12]
	global_WS2812_Struct.item[1].frameBufferPointer = &frame_Buffer2[0];
 800488c:	4906      	ldr	r1, [pc, #24]	; (80048a8 <ws2812b_init+0x40>)
 800488e:	61d9      	str	r1, [r3, #28]
	global_WS2812_Struct.item[0].frameBufferSize = (3 * (FFT_LEN / 2));
 8004890:	21c0      	movs	r1, #192	; 0xc0
 8004892:	6019      	str	r1, [r3, #0]
	global_WS2812_Struct.item[1].frameBufferSize = (3 * (FFT_LEN / 2));
 8004894:	6119      	str	r1, [r3, #16]
	global_WS2812_Struct.item[0].startTransfer = 0;
 8004896:	721a      	strb	r2, [r3, #8]
	global_WS2812_Struct.item[1].startTransfer = 0;
 8004898:	761a      	strb	r2, [r3, #24]
	global_WS2812_Struct.transferComplete = 1;
 800489a:	2201      	movs	r2, #1
 800489c:	741a      	strb	r2, [r3, #16]
 800489e:	bd08      	pop	{r3, pc}
 80048a0:	20001994 	.word	0x20001994
 80048a4:	200017a4 	.word	0x200017a4
 80048a8:	20001864 	.word	0x20001864

080048ac <WS2812_sendbuf_helper>:
void WS2812_sendbuf_helper(WS2812_BufferItem * WS_ouput) {
 80048ac:	b430      	push	{r4, r5}
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate,
 80048ae:	4b48      	ldr	r3, [pc, #288]	; (80049d0 <WS2812_sendbuf_helper+0x124>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	4a48      	ldr	r2, [pc, #288]	; (80049d4 <WS2812_sendbuf_helper+0x128>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d91c      	bls.n	80048f2 <WS2812_sendbuf_helper+0x46>
 80048b8:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80048bc:	4b46      	ldr	r3, [pc, #280]	; (80049d8 <WS2812_sendbuf_helper+0x12c>)
 80048be:	60da      	str	r2, [r3, #12]
	__HAL_DMA_CLEAR_FLAG(&dmaCC1,
 80048c0:	4b46      	ldr	r3, [pc, #280]	; (80049dc <WS2812_sendbuf_helper+0x130>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	4a43      	ldr	r2, [pc, #268]	; (80049d4 <WS2812_sendbuf_helper+0x128>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d928      	bls.n	800491c <WS2812_sendbuf_helper+0x70>
 80048ca:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80048ce:	4b42      	ldr	r3, [pc, #264]	; (80049d8 <WS2812_sendbuf_helper+0x12c>)
 80048d0:	60da      	str	r2, [r3, #12]
	__HAL_DMA_CLEAR_FLAG(&dmaCC2,
 80048d2:	4b43      	ldr	r3, [pc, #268]	; (80049e0 <WS2812_sendbuf_helper+0x134>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a3f      	ldr	r2, [pc, #252]	; (80049d4 <WS2812_sendbuf_helper+0x128>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d834      	bhi.n	8004946 <WS2812_sendbuf_helper+0x9a>
 80048dc:	4a41      	ldr	r2, [pc, #260]	; (80049e4 <WS2812_sendbuf_helper+0x138>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d86b      	bhi.n	80049ba <WS2812_sendbuf_helper+0x10e>
 80048e2:	4a41      	ldr	r2, [pc, #260]	; (80049e8 <WS2812_sendbuf_helper+0x13c>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d86d      	bhi.n	80049c4 <WS2812_sendbuf_helper+0x118>
 80048e8:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80048ec:	4b3f      	ldr	r3, [pc, #252]	; (80049ec <WS2812_sendbuf_helper+0x140>)
 80048ee:	609a      	str	r2, [r3, #8]
 80048f0:	e02d      	b.n	800494e <WS2812_sendbuf_helper+0xa2>
	__HAL_DMA_CLEAR_FLAG(&dmaUpdate,
 80048f2:	4a3c      	ldr	r2, [pc, #240]	; (80049e4 <WS2812_sendbuf_helper+0x138>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d904      	bls.n	8004902 <WS2812_sendbuf_helper+0x56>
 80048f8:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 80048fc:	4b36      	ldr	r3, [pc, #216]	; (80049d8 <WS2812_sendbuf_helper+0x12c>)
 80048fe:	609a      	str	r2, [r3, #8]
 8004900:	e7de      	b.n	80048c0 <WS2812_sendbuf_helper+0x14>
 8004902:	4a39      	ldr	r2, [pc, #228]	; (80049e8 <WS2812_sendbuf_helper+0x13c>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d904      	bls.n	8004912 <WS2812_sendbuf_helper+0x66>
 8004908:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 800490c:	4b37      	ldr	r3, [pc, #220]	; (80049ec <WS2812_sendbuf_helper+0x140>)
 800490e:	60da      	str	r2, [r3, #12]
 8004910:	e7d6      	b.n	80048c0 <WS2812_sendbuf_helper+0x14>
 8004912:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8004916:	4b35      	ldr	r3, [pc, #212]	; (80049ec <WS2812_sendbuf_helper+0x140>)
 8004918:	609a      	str	r2, [r3, #8]
 800491a:	e7d1      	b.n	80048c0 <WS2812_sendbuf_helper+0x14>
	__HAL_DMA_CLEAR_FLAG(&dmaCC1,
 800491c:	4a31      	ldr	r2, [pc, #196]	; (80049e4 <WS2812_sendbuf_helper+0x138>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d904      	bls.n	800492c <WS2812_sendbuf_helper+0x80>
 8004922:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8004926:	4b2c      	ldr	r3, [pc, #176]	; (80049d8 <WS2812_sendbuf_helper+0x12c>)
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	e7d2      	b.n	80048d2 <WS2812_sendbuf_helper+0x26>
 800492c:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <WS2812_sendbuf_helper+0x13c>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d904      	bls.n	800493c <WS2812_sendbuf_helper+0x90>
 8004932:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8004936:	4b2d      	ldr	r3, [pc, #180]	; (80049ec <WS2812_sendbuf_helper+0x140>)
 8004938:	60da      	str	r2, [r3, #12]
 800493a:	e7ca      	b.n	80048d2 <WS2812_sendbuf_helper+0x26>
 800493c:	f44f 6260 	mov.w	r2, #3584	; 0xe00
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <WS2812_sendbuf_helper+0x140>)
 8004942:	609a      	str	r2, [r3, #8]
 8004944:	e7c5      	b.n	80048d2 <WS2812_sendbuf_helper+0x26>
	__HAL_DMA_CLEAR_FLAG(&dmaCC2,
 8004946:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 800494a:	4b23      	ldr	r3, [pc, #140]	; (80049d8 <WS2812_sendbuf_helper+0x12c>)
 800494c:	60da      	str	r2, [r3, #12]
	dmaUpdate.Instance->NDTR = BUFFER_SIZE;
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <WS2812_sendbuf_helper+0x124>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004956:	605a      	str	r2, [r3, #4]
	dmaCC1.Instance->NDTR = BUFFER_SIZE;
 8004958:	4c20      	ldr	r4, [pc, #128]	; (80049dc <WS2812_sendbuf_helper+0x130>)
 800495a:	6821      	ldr	r1, [r4, #0]
 800495c:	604a      	str	r2, [r1, #4]
	dmaCC2.Instance->NDTR = BUFFER_SIZE;
 800495e:	4820      	ldr	r0, [pc, #128]	; (80049e0 <WS2812_sendbuf_helper+0x134>)
 8004960:	6801      	ldr	r1, [r0, #0]
 8004962:	604a      	str	r2, [r1, #4]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle,
 8004964:	4922      	ldr	r1, [pc, #136]	; (80049f0 <WS2812_sendbuf_helper+0x144>)
 8004966:	680a      	ldr	r2, [r1, #0]
 8004968:	f06f 051f 	mvn.w	r5, #31
 800496c:	6115      	str	r5, [r2, #16]
	__HAL_DMA_ENABLE(&dmaUpdate);
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	f042 0201 	orr.w	r2, r2, #1
 8004974:	601a      	str	r2, [r3, #0]
	__HAL_DMA_ENABLE(&dmaCC1);
 8004976:	6822      	ldr	r2, [r4, #0]
 8004978:	6813      	ldr	r3, [r2, #0]
 800497a:	f043 0301 	orr.w	r3, r3, #1
 800497e:	6013      	str	r3, [r2, #0]
	__HAL_DMA_ENABLE(&dmaCC2);
 8004980:	6802      	ldr	r2, [r0, #0]
 8004982:	6813      	ldr	r3, [r2, #0]
 8004984:	f043 0301 	orr.w	r3, r3, #1
 8004988:	6013      	str	r3, [r2, #0]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 800498a:	680b      	ldr	r3, [r1, #0]
 800498c:	68da      	ldr	r2, [r3, #12]
 800498e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004992:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8004994:	68da      	ldr	r2, [r3, #12]
 8004996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800499a:	60da      	str	r2, [r3, #12]
	__HAL_TIM_ENABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 800499c:	68da      	ldr	r2, [r3, #12]
 800499e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049a2:	60da      	str	r2, [r3, #12]
	TIM1->CNT = tim_period - 1;
 80049a4:	4a13      	ldr	r2, [pc, #76]	; (80049f4 <WS2812_sendbuf_helper+0x148>)
 80049a6:	6812      	ldr	r2, [r2, #0]
 80049a8:	3a01      	subs	r2, #1
 80049aa:	4913      	ldr	r1, [pc, #76]	; (80049f8 <WS2812_sendbuf_helper+0x14c>)
 80049ac:	624a      	str	r2, [r1, #36]	; 0x24
	__HAL_TIM_ENABLE(&TIM1_handle);
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	f042 0201 	orr.w	r2, r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
}
 80049b6:	bc30      	pop	{r4, r5}
 80049b8:	4770      	bx	lr
	__HAL_DMA_CLEAR_FLAG(&dmaCC2,
 80049ba:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80049be:	4b06      	ldr	r3, [pc, #24]	; (80049d8 <WS2812_sendbuf_helper+0x12c>)
 80049c0:	609a      	str	r2, [r3, #8]
 80049c2:	e7c4      	b.n	800494e <WS2812_sendbuf_helper+0xa2>
 80049c4:	f44f 1260 	mov.w	r2, #3670016	; 0x380000
 80049c8:	4b08      	ldr	r3, [pc, #32]	; (80049ec <WS2812_sendbuf_helper+0x140>)
 80049ca:	60da      	str	r2, [r3, #12]
 80049cc:	e7bf      	b.n	800494e <WS2812_sendbuf_helper+0xa2>
 80049ce:	bf00      	nop
 80049d0:	200025b0 	.word	0x200025b0
 80049d4:	40026458 	.word	0x40026458
 80049d8:	40026400 	.word	0x40026400
 80049dc:	20001924 	.word	0x20001924
 80049e0:	200016e8 	.word	0x200016e8
 80049e4:	400260b8 	.word	0x400260b8
 80049e8:	40026058 	.word	0x40026058
 80049ec:	40026000 	.word	0x40026000
 80049f0:	20001764 	.word	0x20001764
 80049f4:	200017a0 	.word	0x200017a0
 80049f8:	40010000 	.word	0x40010000

080049fc <DMA2_Stream2_IRQHandler>:
#endif

}

void DMA2_Stream2_IRQHandler(void) {
 80049fc:	b508      	push	{r3, lr}

	HAL_DMA_IRQHandler(&dmaCC2);
 80049fe:	4802      	ldr	r0, [pc, #8]	; (8004a08 <DMA2_Stream2_IRQHandler+0xc>)
 8004a00:	f7fc fcf0 	bl	80013e4 <HAL_DMA_IRQHandler>
 8004a04:	bd08      	pop	{r3, pc}
 8004a06:	bf00      	nop
 8004a08:	200016e8 	.word	0x200016e8

08004a0c <TIM1_UP_TIM10_IRQHandler>:

}

void TIM1_UP_TIM10_IRQHandler(void) {
 8004a0c:	b508      	push	{r3, lr}
#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8004a0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a12:	4b03      	ldr	r3, [pc, #12]	; (8004a20 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8004a14:	619a      	str	r2, [r3, #24]
#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 8004a16:	4803      	ldr	r0, [pc, #12]	; (8004a24 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8004a18:	f7fd fefb 	bl	8002812 <HAL_TIM_IRQHandler>
 8004a1c:	bd08      	pop	{r3, pc}
 8004a1e:	bf00      	nop
 8004a20:	40020c00 	.word	0x40020c00
 8004a24:	20001764 	.word	0x20001764

08004a28 <HAL_TIM_PeriodElapsedCallback>:
// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{

	// I have to wait 50us to generate Treset signal
	if (global_WS2812_Struct.timerPeriodCounter < (uint8_t)WS2812_RESET_PERIOD)
 8004a28:	4b1b      	ldr	r3, [pc, #108]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b31      	cmp	r3, #49	; 0x31
 8004a2e:	d91e      	bls.n	8004a6e <HAL_TIM_PeriodElapsedCallback+0x46>
		// count the number of timer periods
		global_WS2812_Struct.timerPeriodCounter++;
	}
	else
	{
		global_WS2812_Struct.timerPeriodCounter = 0;
 8004a30:	2200      	movs	r2, #0
 8004a32:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004a34:	615a      	str	r2, [r3, #20]
		__HAL_TIM_DISABLE(&TIM1_handle);
 8004a36:	4b19      	ldr	r3, [pc, #100]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	6a19      	ldr	r1, [r3, #32]
 8004a3c:	f241 1211 	movw	r2, #4369	; 0x1111
 8004a40:	4211      	tst	r1, r2
 8004a42:	d108      	bne.n	8004a56 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8004a44:	6a19      	ldr	r1, [r3, #32]
 8004a46:	f240 4244 	movw	r2, #1092	; 0x444
 8004a4a:	4211      	tst	r1, r2
 8004a4c:	d103      	bne.n	8004a56 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	f022 0201 	bic.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
		TIM1->CR1 = 0; // disable timer
 8004a56:	2200      	movs	r2, #0
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004a5a:	601a      	str	r2, [r3, #0]

		// disable the TIM2 Update
		__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8004a5c:	4b0f      	ldr	r3, [pc, #60]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	68d3      	ldr	r3, [r2, #12]
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	60d3      	str	r3, [r2, #12]
		// set TransferComplete flag
		global_WS2812_Struct.transferComplete = 1;
 8004a68:	2201      	movs	r2, #1
 8004a6a:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004a6c:	741a      	strb	r2, [r3, #16]
	}

	global_WS2812_Struct.timerPeriodCounter = 0;
 8004a6e:	480a      	ldr	r0, [pc, #40]	; (8004a98 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8004a70:	2300      	movs	r3, #0
 8004a72:	6143      	str	r3, [r0, #20]
    TIM1->CR1 = 0; // disable timer
 8004a74:	4a0a      	ldr	r2, [pc, #40]	; (8004aa0 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8004a76:	6013      	str	r3, [r2, #0]

	// disable the TIM2 Update IRQ
	__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 8004a78:	4b08      	ldr	r3, [pc, #32]	; (8004a9c <HAL_TIM_PeriodElapsedCallback+0x74>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68d9      	ldr	r1, [r3, #12]
 8004a7e:	f021 0101 	bic.w	r1, r1, #1
 8004a82:	60d9      	str	r1, [r3, #12]

	// Set back 1,25us period
	TIM1->ARR = tim_period;
 8004a84:	4907      	ldr	r1, [pc, #28]	; (8004aa4 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8004a86:	6809      	ldr	r1, [r1, #0]
 8004a88:	62d1      	str	r1, [r2, #44]	; 0x2c

	// Generate an update event to reload the Prescaler value immediatly
	TIM1->EGR = TIM_EGR_UG;
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	6151      	str	r1, [r2, #20]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8004a8e:	f06f 0201 	mvn.w	r2, #1
 8004a92:	611a      	str	r2, [r3, #16]

    // set transfer_complete flag
    global_WS2812_Struct.transferComplete = 1;
 8004a94:	7401      	strb	r1, [r0, #16]
 8004a96:	4770      	bx	lr
 8004a98:	20001994 	.word	0x20001994
 8004a9c:	20001764 	.word	0x20001764
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	200017a0 	.word	0x200017a0

08004aa8 <copy_to_BB>:

}

void copy_to_BB(WS2812_BufferItem * WS_Buf) {
 8004aa8:	b470      	push	{r4, r5, r6}
	static uint32_t counter = 0;
	static volatile uint8_t red;
	static volatile uint8_t green;
	static volatile uint8_t blue;
	static uint8_t * rgb_ptr = 0;
	rgb_ptr = WS_Buf->frameBufferPointer;
 8004aaa:	68c2      	ldr	r2, [r0, #12]
 8004aac:	4b37      	ldr	r3, [pc, #220]	; (8004b8c <copy_to_BB+0xe4>)
 8004aae:	601a      	str	r2, [r3, #0]

	for (counter = 1; counter < (FFT_LEN / 2); ++counter)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	4b37      	ldr	r3, [pc, #220]	; (8004b90 <copy_to_BB+0xe8>)
 8004ab4:	601a      	str	r2, [r3, #0]
 8004ab6:	e062      	b.n	8004b7e <copy_to_BB+0xd6>

	{
		red = *rgb_ptr;
 8004ab8:	4d34      	ldr	r5, [pc, #208]	; (8004b8c <copy_to_BB+0xe4>)
 8004aba:	6828      	ldr	r0, [r5, #0]
 8004abc:	4603      	mov	r3, r0
 8004abe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ac2:	4934      	ldr	r1, [pc, #208]	; (8004b94 <copy_to_BB+0xec>)
 8004ac4:	700e      	strb	r6, [r1, #0]
		green = *rgb_ptr++;
 8004ac6:	4a34      	ldr	r2, [pc, #208]	; (8004b98 <copy_to_BB+0xf0>)
 8004ac8:	7016      	strb	r6, [r2, #0]
		blue = *rgb_ptr++;
 8004aca:	3301      	adds	r3, #1
 8004acc:	602b      	str	r3, [r5, #0]
 8004ace:	7840      	ldrb	r0, [r0, #1]
 8004ad0:	4b32      	ldr	r3, [pc, #200]	; (8004b9c <copy_to_BB+0xf4>)
 8004ad2:	7018      	strb	r0, [r3, #0]
		// Apply gamma
	//	red = gammaTable[red];
	//	green = gammaTable[green];
	//	blue = gammaTable[blue];
		uint32_t invRed = ~red;
 8004ad4:	7808      	ldrb	r0, [r1, #0]
 8004ad6:	43c0      	mvns	r0, r0
		uint32_t invGreen = ~green;
 8004ad8:	7812      	ldrb	r2, [r2, #0]
 8004ada:	43d2      	mvns	r2, r2
		uint32_t invBlue = ~blue;
 8004adc:	7819      	ldrb	r1, [r3, #0]
 8004ade:	43c9      	mvns	r1, r1

		// Bitband optimisations with pure increments, 5us interrupts
		uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[counter * 24],
 8004ae0:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8004ae4:	00dd      	lsls	r5, r3, #3
 8004ae6:	4b2e      	ldr	r3, [pc, #184]	; (8004ba0 <copy_to_BB+0xf8>)
 8004ae8:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 8004aec:	f103 7388 	add.w	r3, r3, #17825792	; 0x1100000
 8004af0:	015b      	lsls	r3, r3, #5
				row);

		*bitBand = (invGreen >> 7);
 8004af2:	09d5      	lsrs	r5, r2, #7
 8004af4:	601d      	str	r5, [r3, #0]
		bitBand += 16;

		*bitBand = (invGreen >> 6);
 8004af6:	0995      	lsrs	r5, r2, #6
 8004af8:	641d      	str	r5, [r3, #64]	; 0x40
		bitBand += 16;

		*bitBand = (invGreen >> 5);
 8004afa:	0955      	lsrs	r5, r2, #5
 8004afc:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
		bitBand += 16;

		*bitBand = (invGreen >> 4);
 8004b00:	0915      	lsrs	r5, r2, #4
 8004b02:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
		bitBand += 16;

		*bitBand = (invGreen >> 3);
 8004b06:	08d5      	lsrs	r5, r2, #3
 8004b08:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
		bitBand += 16;

		*bitBand = (invGreen >> 2);
 8004b0c:	0895      	lsrs	r5, r2, #2
 8004b0e:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140
		bitBand += 16;

		*bitBand = (invGreen >> 1);
 8004b12:	0855      	lsrs	r5, r2, #1
 8004b14:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
		bitBand += 16;

		*bitBand = (invGreen >> 0);
 8004b18:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
		bitBand += 16;

		// RED
		*bitBand = (invRed >> 7);
 8004b1c:	09c2      	lsrs	r2, r0, #7
 8004b1e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		bitBand += 16;

		*bitBand = (invRed >> 6);
 8004b22:	0982      	lsrs	r2, r0, #6
 8004b24:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		bitBand += 16;

		*bitBand = (invRed >> 5);
 8004b28:	0942      	lsrs	r2, r0, #5
 8004b2a:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
		bitBand += 16;

		*bitBand = (invRed >> 4);
 8004b2e:	0902      	lsrs	r2, r0, #4
 8004b30:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
		bitBand += 16;

		*bitBand = (invRed >> 3);
 8004b34:	08c2      	lsrs	r2, r0, #3
 8004b36:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
		bitBand += 16;

		*bitBand = (invRed >> 2);
 8004b3a:	0882      	lsrs	r2, r0, #2
 8004b3c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
		bitBand += 16;

		*bitBand = (invRed >> 1);
 8004b40:	0842      	lsrs	r2, r0, #1
 8004b42:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380
		bitBand += 16;

		*bitBand = (invRed >> 0);
 8004b46:	f8c3 03c0 	str.w	r0, [r3, #960]	; 0x3c0
		bitBand += 16;

		// BLUE
		*bitBand = (invBlue >> 7);
 8004b4a:	09ca      	lsrs	r2, r1, #7
 8004b4c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
		bitBand += 16;

		*bitBand = (invBlue >> 6);
 8004b50:	098a      	lsrs	r2, r1, #6
 8004b52:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
		bitBand += 16;

		*bitBand = (invBlue >> 5);
 8004b56:	094a      	lsrs	r2, r1, #5
 8004b58:	f8c3 2480 	str.w	r2, [r3, #1152]	; 0x480
		bitBand += 16;

		*bitBand = (invBlue >> 4);
 8004b5c:	090a      	lsrs	r2, r1, #4
 8004b5e:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
		bitBand += 16;

		*bitBand = (invBlue >> 3);
 8004b62:	08ca      	lsrs	r2, r1, #3
 8004b64:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		bitBand += 16;

		*bitBand = (invBlue >> 2);
 8004b68:	088a      	lsrs	r2, r1, #2
 8004b6a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
		bitBand += 16;

		*bitBand = (invBlue >> 1);
 8004b6e:	084a      	lsrs	r2, r1, #1
 8004b70:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
		bitBand += 16;

		*bitBand = (invBlue >> 0);
 8004b74:	f8c3 15c0 	str.w	r1, [r3, #1472]	; 0x5c0
	for (counter = 1; counter < (FFT_LEN / 2); ++counter)
 8004b78:	3401      	adds	r4, #1
 8004b7a:	4b05      	ldr	r3, [pc, #20]	; (8004b90 <copy_to_BB+0xe8>)
 8004b7c:	601c      	str	r4, [r3, #0]
 8004b7e:	4b04      	ldr	r3, [pc, #16]	; (8004b90 <copy_to_BB+0xe8>)
 8004b80:	681c      	ldr	r4, [r3, #0]
 8004b82:	2c3f      	cmp	r4, #63	; 0x3f
 8004b84:	d998      	bls.n	8004ab8 <copy_to_BB+0x10>
		bitBand += 16;
	}

}
 8004b86:	bc70      	pop	{r4, r5, r6}
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000528 	.word	0x20000528
 8004b90:	20000520 	.word	0x20000520
 8004b94:	20000525 	.word	0x20000525
 8004b98:	20000524 	.word	0x20000524
 8004b9c:	2000051c 	.word	0x2000051c
 8004ba0:	200019b0 	.word	0x200019b0

08004ba4 <WS2812_sendbuf>:
static void WS2812_sendbuf(WS2812_BufferItem * item_ptr) {
 8004ba4:	b510      	push	{r4, lr}
 8004ba6:	4604      	mov	r4, r0
	item_ptr->WS2812_buf_state = READ_LOCKED;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	72c3      	strb	r3, [r0, #11]
	item_ptr->frameBufferCounter = 0;
 8004bac:	6043      	str	r3, [r0, #4]
	copy_to_BB(item_ptr);
 8004bae:	f7ff ff7b 	bl	8004aa8 <copy_to_BB>
	WS2812_sendbuf_helper(item_ptr);
 8004bb2:	4620      	mov	r0, r4
 8004bb4:	f7ff fe7a 	bl	80048ac <WS2812_sendbuf_helper>
 8004bb8:	bd10      	pop	{r4, pc}
	...

08004bbc <ws2812b_getBufferItem>:
	}

}

WS2812_BufferItem * ws2812b_getBufferItem(buf_state status) {
	if (global_WS2812_Struct.item[0].WS2812_buf_state == status) {
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <ws2812b_getBufferItem+0x1c>)
 8004bbe:	7adb      	ldrb	r3, [r3, #11]
 8004bc0:	4283      	cmp	r3, r0
 8004bc2:	d005      	beq.n	8004bd0 <ws2812b_getBufferItem+0x14>

		return &global_WS2812_Struct.item[0];
	}
	if (global_WS2812_Struct.item[1].WS2812_buf_state == status) {
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <ws2812b_getBufferItem+0x1c>)
 8004bc6:	7edb      	ldrb	r3, [r3, #27]
 8004bc8:	4298      	cmp	r0, r3
 8004bca:	d103      	bne.n	8004bd4 <ws2812b_getBufferItem+0x18>

		return &global_WS2812_Struct.item[1];
 8004bcc:	4803      	ldr	r0, [pc, #12]	; (8004bdc <ws2812b_getBufferItem+0x20>)
 8004bce:	4770      	bx	lr
		return &global_WS2812_Struct.item[0];
 8004bd0:	4801      	ldr	r0, [pc, #4]	; (8004bd8 <ws2812b_getBufferItem+0x1c>)
 8004bd2:	4770      	bx	lr
	}
	return NULL;
 8004bd4:	2000      	movs	r0, #0

}
 8004bd6:	4770      	bx	lr
 8004bd8:	20001994 	.word	0x20001994
 8004bdc:	200019a4 	.word	0x200019a4

08004be0 <ws2812b_handle>:
void ws2812b_handle() {
 8004be0:	b508      	push	{r3, lr}
	bf_ptr1 = ws2812b_getBufferItem(bs);
 8004be2:	2002      	movs	r0, #2
 8004be4:	f7ff ffea 	bl	8004bbc <ws2812b_getBufferItem>
	if (bf_ptr1 != NULL) {
 8004be8:	b108      	cbz	r0, 8004bee <ws2812b_handle+0xe>
		WS2812_sendbuf(bf_ptr1);
 8004bea:	f7ff ffdb 	bl	8004ba4 <WS2812_sendbuf>
 8004bee:	bd08      	pop	{r3, pc}

08004bf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004bf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bf6:	e003      	b.n	8004c00 <LoopCopyDataInit>

08004bf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bf8:	4b0c      	ldr	r3, [pc, #48]	; (8004c2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bfe:	3104      	adds	r1, #4

08004c00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c00:	480b      	ldr	r0, [pc, #44]	; (8004c30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c08:	d3f6      	bcc.n	8004bf8 <CopyDataInit>
  ldr  r2, =_sbss
 8004c0a:	4a0b      	ldr	r2, [pc, #44]	; (8004c38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c0c:	e002      	b.n	8004c14 <LoopFillZerobss>

08004c0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c10:	f842 3b04 	str.w	r3, [r2], #4

08004c14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004c14:	4b09      	ldr	r3, [pc, #36]	; (8004c3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004c16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004c18:	d3f9      	bcc.n	8004c0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004c1a:	f7ff fac7 	bl	80041ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004c1e:	f002 fa77 	bl	8007110 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004c22:	f7ff f82b 	bl	8003c7c <main>
  bx  lr    
 8004c26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004c28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004c2c:	0801c8c8 	.word	0x0801c8c8
  ldr  r0, =_sdata
 8004c30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c34:	2000048c 	.word	0x2000048c
  ldr  r2, =_sbss
 8004c38:	2000048c 	.word	0x2000048c
  ldr  r3, = _ebss
 8004c3c:	20002610 	.word	0x20002610

08004c40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c40:	e7fe      	b.n	8004c40 <ADC_IRQHandler>
	...

08004c44 <arm_cfft_radix8by2_f32>:
 8004c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c48:	ed2d 8b08 	vpush	{d8-d11}
 8004c4c:	f8b0 e000 	ldrh.w	lr, [r0]
 8004c50:	6842      	ldr	r2, [r0, #4]
 8004c52:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8004c56:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 8004c5a:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 8004c5e:	4607      	mov	r7, r0
 8004c60:	ea4f 038c 	mov.w	r3, ip, lsl #2
 8004c64:	f000 80af 	beq.w	8004dc6 <arm_cfft_radix8by2_f32+0x182>
 8004c68:	3310      	adds	r3, #16
 8004c6a:	18ce      	adds	r6, r1, r3
 8004c6c:	3210      	adds	r2, #16
 8004c6e:	4443      	add	r3, r8
 8004c70:	f101 0510 	add.w	r5, r1, #16
 8004c74:	f108 0410 	add.w	r4, r8, #16
 8004c78:	ed54 1a04 	vldr	s3, [r4, #-16]
 8004c7c:	ed13 4a04 	vldr	s8, [r3, #-16]
 8004c80:	ed53 3a03 	vldr	s7, [r3, #-12]
 8004c84:	ed53 5a02 	vldr	s11, [r3, #-8]
 8004c88:	ed13 5a01 	vldr	s10, [r3, #-4]
 8004c8c:	ed54 6a03 	vldr	s13, [r4, #-12]
 8004c90:	ed14 0a02 	vldr	s0, [r4, #-8]
 8004c94:	ed16 2a04 	vldr	s4, [r6, #-16]
 8004c98:	ed56 2a03 	vldr	s5, [r6, #-12]
 8004c9c:	ed15 6a03 	vldr	s12, [r5, #-12]
 8004ca0:	ed15 7a01 	vldr	s14, [r5, #-4]
 8004ca4:	ed15 3a04 	vldr	s6, [r5, #-16]
 8004ca8:	ed54 7a01 	vldr	s15, [r4, #-4]
 8004cac:	ed56 0a02 	vldr	s1, [r6, #-8]
 8004cb0:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004cb4:	ed55 4a02 	vldr	s9, [r5, #-8]
 8004cb8:	ee73 ba21 	vadd.f32	s23, s6, s3
 8004cbc:	ee36 ba26 	vadd.f32	s22, s12, s13
 8004cc0:	ee37 aa27 	vadd.f32	s20, s14, s15
 8004cc4:	ee72 9a04 	vadd.f32	s19, s4, s8
 8004cc8:	ee32 9aa3 	vadd.f32	s18, s5, s7
 8004ccc:	ee31 8a05 	vadd.f32	s16, s2, s10
 8004cd0:	ee74 aa80 	vadd.f32	s21, s9, s0
 8004cd4:	ee70 8aa5 	vadd.f32	s17, s1, s11
 8004cd8:	ed45 ba04 	vstr	s23, [r5, #-16]
 8004cdc:	ed05 ba03 	vstr	s22, [r5, #-12]
 8004ce0:	ed45 aa02 	vstr	s21, [r5, #-8]
 8004ce4:	ed05 aa01 	vstr	s20, [r5, #-4]
 8004ce8:	ed06 8a01 	vstr	s16, [r6, #-4]
 8004cec:	ed46 9a04 	vstr	s19, [r6, #-16]
 8004cf0:	ed06 9a03 	vstr	s18, [r6, #-12]
 8004cf4:	ed46 8a02 	vstr	s17, [r6, #-8]
 8004cf8:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004cfc:	ee73 3ae2 	vsub.f32	s7, s7, s5
 8004d00:	ed12 6a03 	vldr	s12, [r2, #-12]
 8004d04:	ed52 2a04 	vldr	s5, [r2, #-16]
 8004d08:	ee33 3a61 	vsub.f32	s6, s6, s3
 8004d0c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8004d10:	ee26 8a86 	vmul.f32	s16, s13, s12
 8004d14:	ee24 2a06 	vmul.f32	s4, s8, s12
 8004d18:	ee63 1a22 	vmul.f32	s3, s6, s5
 8004d1c:	ee24 4a22 	vmul.f32	s8, s8, s5
 8004d20:	ee23 3a06 	vmul.f32	s6, s6, s12
 8004d24:	ee66 6aa2 	vmul.f32	s13, s13, s5
 8004d28:	ee23 6a86 	vmul.f32	s12, s7, s12
 8004d2c:	ee63 3aa2 	vmul.f32	s7, s7, s5
 8004d30:	ee36 6a04 	vadd.f32	s12, s12, s8
 8004d34:	ee76 6ac3 	vsub.f32	s13, s13, s6
 8004d38:	ee72 3a63 	vsub.f32	s7, s4, s7
 8004d3c:	ee71 2a88 	vadd.f32	s5, s3, s16
 8004d40:	ed44 6a03 	vstr	s13, [r4, #-12]
 8004d44:	ed44 2a04 	vstr	s5, [r4, #-16]
 8004d48:	ed43 3a04 	vstr	s7, [r3, #-16]
 8004d4c:	ed03 6a03 	vstr	s12, [r3, #-12]
 8004d50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004d54:	ee75 6ae0 	vsub.f32	s13, s11, s1
 8004d58:	ed12 7a01 	vldr	s14, [r2, #-4]
 8004d5c:	ed52 5a02 	vldr	s11, [r2, #-8]
 8004d60:	ee35 6a41 	vsub.f32	s12, s10, s2
 8004d64:	ee74 4ac0 	vsub.f32	s9, s9, s0
 8004d68:	ee67 3a87 	vmul.f32	s7, s15, s14
 8004d6c:	ee26 5a87 	vmul.f32	s10, s13, s14
 8004d70:	ee24 4aa5 	vmul.f32	s8, s9, s11
 8004d74:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8004d78:	ee64 4a87 	vmul.f32	s9, s9, s14
 8004d7c:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8004d80:	ee26 7a07 	vmul.f32	s14, s12, s14
 8004d84:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004d88:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8004d8c:	ee74 5a23 	vadd.f32	s11, s8, s7
 8004d90:	ee35 6a46 	vsub.f32	s12, s10, s12
 8004d94:	ee37 7a26 	vadd.f32	s14, s14, s13
 8004d98:	f1be 0e01 	subs.w	lr, lr, #1
 8004d9c:	ed44 5a02 	vstr	s11, [r4, #-8]
 8004da0:	f105 0510 	add.w	r5, r5, #16
 8004da4:	ed44 7a01 	vstr	s15, [r4, #-4]
 8004da8:	f106 0610 	add.w	r6, r6, #16
 8004dac:	ed03 6a02 	vstr	s12, [r3, #-8]
 8004db0:	ed03 7a01 	vstr	s14, [r3, #-4]
 8004db4:	f102 0210 	add.w	r2, r2, #16
 8004db8:	f104 0410 	add.w	r4, r4, #16
 8004dbc:	f103 0310 	add.w	r3, r3, #16
 8004dc0:	f47f af5a 	bne.w	8004c78 <arm_cfft_radix8by2_f32+0x34>
 8004dc4:	687a      	ldr	r2, [r7, #4]
 8004dc6:	fa1f f48c 	uxth.w	r4, ip
 8004dca:	4608      	mov	r0, r1
 8004dcc:	2302      	movs	r3, #2
 8004dce:	4621      	mov	r1, r4
 8004dd0:	f7fd ff76 	bl	8002cc0 <arm_radix8_butterfly_f32>
 8004dd4:	ecbd 8b08 	vpop	{d8-d11}
 8004dd8:	4640      	mov	r0, r8
 8004dda:	4621      	mov	r1, r4
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	2302      	movs	r3, #2
 8004de0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004de4:	f7fd bf6c 	b.w	8002cc0 <arm_radix8_butterfly_f32>

08004de8 <arm_cfft_radix8by4_f32>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	ed2d 8b0a 	vpush	{d8-d12}
 8004df0:	8802      	ldrh	r2, [r0, #0]
 8004df2:	ed91 6a00 	vldr	s12, [r1]
 8004df6:	b08f      	sub	sp, #60	; 0x3c
 8004df8:	460f      	mov	r7, r1
 8004dfa:	0852      	lsrs	r2, r2, #1
 8004dfc:	0093      	lsls	r3, r2, #2
 8004dfe:	900c      	str	r0, [sp, #48]	; 0x30
 8004e00:	9103      	str	r1, [sp, #12]
 8004e02:	6841      	ldr	r1, [r0, #4]
 8004e04:	ed97 7a01 	vldr	s14, [r7, #4]
 8004e08:	4638      	mov	r0, r7
 8004e0a:	4418      	add	r0, r3
 8004e0c:	4606      	mov	r6, r0
 8004e0e:	9009      	str	r0, [sp, #36]	; 0x24
 8004e10:	4418      	add	r0, r3
 8004e12:	edd0 6a00 	vldr	s13, [r0]
 8004e16:	edd6 3a00 	vldr	s7, [r6]
 8004e1a:	edd6 2a01 	vldr	s5, [r6, #4]
 8004e1e:	edd0 7a01 	vldr	s15, [r0, #4]
 8004e22:	900a      	str	r0, [sp, #40]	; 0x28
 8004e24:	ee76 5a26 	vadd.f32	s11, s12, s13
 8004e28:	4604      	mov	r4, r0
 8004e2a:	4625      	mov	r5, r4
 8004e2c:	441c      	add	r4, r3
 8004e2e:	ed94 4a00 	vldr	s8, [r4]
 8004e32:	ed94 5a01 	vldr	s10, [r4, #4]
 8004e36:	9401      	str	r4, [sp, #4]
 8004e38:	ee75 4aa3 	vadd.f32	s9, s11, s7
 8004e3c:	4630      	mov	r0, r6
 8004e3e:	ee74 4a24 	vadd.f32	s9, s8, s9
 8004e42:	463e      	mov	r6, r7
 8004e44:	ee14 ea90 	vmov	lr, s9
 8004e48:	ee76 6a66 	vsub.f32	s13, s12, s13
 8004e4c:	f846 eb08 	str.w	lr, [r6], #8
 8004e50:	ee37 6a27 	vadd.f32	s12, s14, s15
 8004e54:	edd0 4a01 	vldr	s9, [r0, #4]
 8004e58:	9604      	str	r6, [sp, #16]
 8004e5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e5e:	9e01      	ldr	r6, [sp, #4]
 8004e60:	ee32 3aa6 	vadd.f32	s6, s5, s13
 8004e64:	ed96 2a01 	vldr	s4, [r6, #4]
 8004e68:	ee36 7a24 	vadd.f32	s14, s12, s9
 8004e6c:	ee75 5ae3 	vsub.f32	s11, s11, s7
 8004e70:	ee77 4ae3 	vsub.f32	s9, s15, s7
 8004e74:	ee36 6a62 	vsub.f32	s12, s12, s5
 8004e78:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004e7c:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8004e80:	ee73 3a45 	vsub.f32	s7, s6, s10
 8004e84:	4604      	mov	r4, r0
 8004e86:	ee36 6a45 	vsub.f32	s12, s12, s10
 8004e8a:	ee75 6a26 	vadd.f32	s13, s10, s13
 8004e8e:	46a3      	mov	fp, r4
 8004e90:	ee37 7a02 	vadd.f32	s14, s14, s4
 8004e94:	ee34 5a84 	vadd.f32	s10, s9, s8
 8004e98:	ee13 8a90 	vmov	r8, s7
 8004e9c:	46a4      	mov	ip, r4
 8004e9e:	ee75 5ac4 	vsub.f32	s11, s11, s8
 8004ea2:	ed87 7a01 	vstr	s14, [r7, #4]
 8004ea6:	f84b 8b08 	str.w	r8, [fp], #8
 8004eaa:	f1ac 0704 	sub.w	r7, ip, #4
 8004eae:	ed8c 5a01 	vstr	s10, [ip, #4]
 8004eb2:	f101 0c08 	add.w	ip, r1, #8
 8004eb6:	462c      	mov	r4, r5
 8004eb8:	f8cd c014 	str.w	ip, [sp, #20]
 8004ebc:	ee15 ca90 	vmov	ip, s11
 8004ec0:	f844 cb08 	str.w	ip, [r4], #8
 8004ec4:	9407      	str	r4, [sp, #28]
 8004ec6:	f101 0410 	add.w	r4, r1, #16
 8004eca:	ed85 6a01 	vstr	s12, [r5, #4]
 8004ece:	0852      	lsrs	r2, r2, #1
 8004ed0:	9402      	str	r4, [sp, #8]
 8004ed2:	462c      	mov	r4, r5
 8004ed4:	f101 0518 	add.w	r5, r1, #24
 8004ed8:	920b      	str	r2, [sp, #44]	; 0x2c
 8004eda:	46b2      	mov	sl, r6
 8004edc:	9506      	str	r5, [sp, #24]
 8004ede:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8004ee2:	3a02      	subs	r2, #2
 8004ee4:	ee16 5a90 	vmov	r5, s13
 8004ee8:	46b6      	mov	lr, r6
 8004eea:	4630      	mov	r0, r6
 8004eec:	0852      	lsrs	r2, r2, #1
 8004eee:	f84a 5b08 	str.w	r5, [sl], #8
 8004ef2:	f1a0 0604 	sub.w	r6, r0, #4
 8004ef6:	edce 7a01 	vstr	s15, [lr, #4]
 8004efa:	9208      	str	r2, [sp, #32]
 8004efc:	f000 8130 	beq.w	8005160 <arm_cfft_radix8by4_f32+0x378>
 8004f00:	4691      	mov	r9, r2
 8004f02:	9a03      	ldr	r2, [sp, #12]
 8004f04:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8004f08:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8004f0c:	3b08      	subs	r3, #8
 8004f0e:	f102 0510 	add.w	r5, r2, #16
 8004f12:	f101 0c20 	add.w	ip, r1, #32
 8004f16:	f1a4 020c 	sub.w	r2, r4, #12
 8004f1a:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 8004f1e:	4433      	add	r3, r6
 8004f20:	3410      	adds	r4, #16
 8004f22:	4650      	mov	r0, sl
 8004f24:	4659      	mov	r1, fp
 8004f26:	ed55 3a02 	vldr	s7, [r5, #-8]
 8004f2a:	ed14 5a02 	vldr	s10, [r4, #-8]
 8004f2e:	ed91 7a00 	vldr	s14, [r1]
 8004f32:	edd0 7a00 	vldr	s15, [r0]
 8004f36:	ed15 4a01 	vldr	s8, [r5, #-4]
 8004f3a:	ed54 5a01 	vldr	s11, [r4, #-4]
 8004f3e:	edd0 6a01 	vldr	s13, [r0, #4]
 8004f42:	ed91 6a01 	vldr	s12, [r1, #4]
 8004f46:	ee33 8a85 	vadd.f32	s16, s7, s10
 8004f4a:	ee34 0a25 	vadd.f32	s0, s8, s11
 8004f4e:	ee78 4a07 	vadd.f32	s9, s16, s14
 8004f52:	ee74 5a65 	vsub.f32	s11, s8, s11
 8004f56:	ee77 4aa4 	vadd.f32	s9, s15, s9
 8004f5a:	ee33 5ac5 	vsub.f32	s10, s7, s10
 8004f5e:	ed45 4a02 	vstr	s9, [r5, #-8]
 8004f62:	edd1 4a01 	vldr	s9, [r1, #4]
 8004f66:	ed90 4a01 	vldr	s8, [r0, #4]
 8004f6a:	ee70 4a24 	vadd.f32	s9, s0, s9
 8004f6e:	ee76 aa05 	vadd.f32	s21, s12, s10
 8004f72:	ee74 4a84 	vadd.f32	s9, s9, s8
 8004f76:	ee35 aac7 	vsub.f32	s20, s11, s14
 8004f7a:	ed45 4a01 	vstr	s9, [r5, #-4]
 8004f7e:	edd6 1a00 	vldr	s3, [r6]
 8004f82:	edd7 0a00 	vldr	s1, [r7]
 8004f86:	ed92 4a02 	vldr	s8, [r2, #8]
 8004f8a:	edd3 3a02 	vldr	s7, [r3, #8]
 8004f8e:	ed93 2a01 	vldr	s4, [r3, #4]
 8004f92:	ed16 1a01 	vldr	s2, [r6, #-4]
 8004f96:	edd2 2a01 	vldr	s5, [r2, #4]
 8004f9a:	ed57 9a01 	vldr	s19, [r7, #-4]
 8004f9e:	ee70 4aa1 	vadd.f32	s9, s1, s3
 8004fa2:	ee39 3a81 	vadd.f32	s6, s19, s2
 8004fa6:	ee74 8a84 	vadd.f32	s17, s9, s8
 8004faa:	ee70 1ae1 	vsub.f32	s3, s1, s3
 8004fae:	ee73 8aa8 	vadd.f32	s17, s7, s17
 8004fb2:	ee7a aae6 	vsub.f32	s21, s21, s13
 8004fb6:	ee18 aa90 	vmov	sl, s17
 8004fba:	f847 a908 	str.w	sl, [r7], #-8
 8004fbe:	edd2 8a01 	vldr	s17, [r2, #4]
 8004fc2:	ed93 9a01 	vldr	s18, [r3, #4]
 8004fc6:	ee73 8a28 	vadd.f32	s17, s6, s17
 8004fca:	ee3a aa27 	vadd.f32	s20, s20, s15
 8004fce:	ee78 8a89 	vadd.f32	s17, s17, s18
 8004fd2:	ee74 0a63 	vsub.f32	s1, s8, s7
 8004fd6:	edc7 8a01 	vstr	s17, [r7, #4]
 8004fda:	ed18 ba02 	vldr	s22, [r8, #-8]
 8004fde:	ed58 8a01 	vldr	s17, [r8, #-4]
 8004fe2:	ee39 1ac1 	vsub.f32	s2, s19, s2
 8004fe6:	ee6a ba28 	vmul.f32	s23, s20, s17
 8004fea:	ee2a ca8b 	vmul.f32	s24, s21, s22
 8004fee:	ee71 9ae2 	vsub.f32	s19, s3, s5
 8004ff2:	ee30 9a81 	vadd.f32	s18, s1, s2
 8004ff6:	ee79 9a82 	vadd.f32	s19, s19, s4
 8004ffa:	ee3c ca2b 	vadd.f32	s24, s24, s23
 8004ffe:	ee6a aaa8 	vmul.f32	s21, s21, s17
 8005002:	ee69 baa8 	vmul.f32	s23, s19, s17
 8005006:	ee2a aa0b 	vmul.f32	s20, s20, s22
 800500a:	ee69 9a8b 	vmul.f32	s19, s19, s22
 800500e:	ee69 8a28 	vmul.f32	s17, s18, s17
 8005012:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8005016:	ee1c aa10 	vmov	sl, s24
 800501a:	ee78 8aa9 	vadd.f32	s17, s17, s19
 800501e:	f841 ab08 	str.w	sl, [r1], #8
 8005022:	ee3a aa6a 	vsub.f32	s20, s20, s21
 8005026:	ee3b bacb 	vsub.f32	s22, s23, s22
 800502a:	ee34 4ac4 	vsub.f32	s8, s9, s8
 800502e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8005032:	ed01 aa01 	vstr	s20, [r1, #-4]
 8005036:	edc2 8a01 	vstr	s17, [r2, #4]
 800503a:	ed82 ba02 	vstr	s22, [r2, #8]
 800503e:	ed5c 4a04 	vldr	s9, [ip, #-16]
 8005042:	ee74 3a63 	vsub.f32	s7, s8, s7
 8005046:	ee38 8a47 	vsub.f32	s16, s16, s14
 800504a:	ed1c 4a03 	vldr	s8, [ip, #-12]
 800504e:	ee30 0a46 	vsub.f32	s0, s0, s12
 8005052:	ee33 3a42 	vsub.f32	s6, s6, s4
 8005056:	ee38 8a67 	vsub.f32	s16, s16, s15
 800505a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800505e:	ee23 9ae4 	vnmul.f32	s18, s7, s9
 8005062:	ee63 8a04 	vmul.f32	s17, s6, s8
 8005066:	ee28 aa24 	vmul.f32	s20, s16, s9
 800506a:	ee60 9a04 	vmul.f32	s19, s0, s8
 800506e:	ee28 8a04 	vmul.f32	s16, s16, s8
 8005072:	ee20 0a24 	vmul.f32	s0, s0, s9
 8005076:	ee63 3a84 	vmul.f32	s7, s7, s8
 800507a:	ee39 4a68 	vsub.f32	s8, s18, s17
 800507e:	ee7a 9a29 	vadd.f32	s19, s20, s19
 8005082:	ee14 aa10 	vmov	sl, s8
 8005086:	ee30 0a48 	vsub.f32	s0, s0, s16
 800508a:	ee63 4a24 	vmul.f32	s9, s6, s9
 800508e:	ed44 9a02 	vstr	s19, [r4, #-8]
 8005092:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8005096:	ed04 0a01 	vstr	s0, [r4, #-4]
 800509a:	f846 a908 	str.w	sl, [r6], #-8
 800509e:	ee35 6a46 	vsub.f32	s12, s10, s12
 80050a2:	ee35 7a87 	vadd.f32	s14, s11, s14
 80050a6:	edc6 3a01 	vstr	s7, [r6, #4]
 80050aa:	ee76 6a86 	vadd.f32	s13, s13, s12
 80050ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80050b2:	ed1e 6a05 	vldr	s12, [lr, #-20]	; 0xffffffec
 80050b6:	ed1e 7a06 	vldr	s14, [lr, #-24]	; 0xffffffe8
 80050ba:	ee67 5a86 	vmul.f32	s11, s15, s12
 80050be:	ee26 5a87 	vmul.f32	s10, s13, s14
 80050c2:	ee72 2a62 	vsub.f32	s5, s4, s5
 80050c6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80050ca:	ee72 2ae1 	vsub.f32	s5, s5, s3
 80050ce:	ee75 5a25 	vadd.f32	s11, s10, s11
 80050d2:	ee62 0a86 	vmul.f32	s1, s5, s12
 80050d6:	ee66 6a86 	vmul.f32	s13, s13, s12
 80050da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80050de:	ee21 6a06 	vmul.f32	s12, s2, s12
 80050e2:	ee62 2a87 	vmul.f32	s5, s5, s14
 80050e6:	ee21 1a07 	vmul.f32	s2, s2, s14
 80050ea:	ee15 aa90 	vmov	sl, s11
 80050ee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80050f2:	f840 ab08 	str.w	sl, [r0], #8
 80050f6:	ee30 1ac1 	vsub.f32	s2, s1, s2
 80050fa:	ee76 2a22 	vadd.f32	s5, s12, s5
 80050fe:	f1b9 0901 	subs.w	r9, r9, #1
 8005102:	ed40 7a01 	vstr	s15, [r0, #-4]
 8005106:	f105 0508 	add.w	r5, r5, #8
 800510a:	ed83 1a02 	vstr	s2, [r3, #8]
 800510e:	edc3 2a01 	vstr	s5, [r3, #4]
 8005112:	f108 0808 	add.w	r8, r8, #8
 8005116:	f1a2 0208 	sub.w	r2, r2, #8
 800511a:	f10c 0c10 	add.w	ip, ip, #16
 800511e:	f104 0408 	add.w	r4, r4, #8
 8005122:	f10e 0e18 	add.w	lr, lr, #24
 8005126:	f1a3 0308 	sub.w	r3, r3, #8
 800512a:	f47f aefc 	bne.w	8004f26 <arm_cfft_radix8by4_f32+0x13e>
 800512e:	9908      	ldr	r1, [sp, #32]
 8005130:	9802      	ldr	r0, [sp, #8]
 8005132:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
 8005136:	00cb      	lsls	r3, r1, #3
 8005138:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 800513c:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8005140:	9102      	str	r1, [sp, #8]
 8005142:	9904      	ldr	r1, [sp, #16]
 8005144:	4419      	add	r1, r3
 8005146:	9104      	str	r1, [sp, #16]
 8005148:	9905      	ldr	r1, [sp, #20]
 800514a:	4419      	add	r1, r3
 800514c:	9105      	str	r1, [sp, #20]
 800514e:	9907      	ldr	r1, [sp, #28]
 8005150:	449b      	add	fp, r3
 8005152:	4419      	add	r1, r3
 8005154:	449a      	add	sl, r3
 8005156:	9b06      	ldr	r3, [sp, #24]
 8005158:	9107      	str	r1, [sp, #28]
 800515a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800515e:	9306      	str	r3, [sp, #24]
 8005160:	9a04      	ldr	r2, [sp, #16]
 8005162:	9807      	ldr	r0, [sp, #28]
 8005164:	edd2 3a00 	vldr	s7, [r2]
 8005168:	ed90 4a00 	vldr	s8, [r0]
 800516c:	eddb 7a00 	vldr	s15, [fp]
 8005170:	ed9a 3a00 	vldr	s6, [sl]
 8005174:	edd2 4a01 	vldr	s9, [r2, #4]
 8005178:	ed90 7a01 	vldr	s14, [r0, #4]
 800517c:	ed9b 2a01 	vldr	s4, [fp, #4]
 8005180:	edda 5a01 	vldr	s11, [sl, #4]
 8005184:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8005188:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800518a:	ee73 6a84 	vadd.f32	s13, s7, s8
 800518e:	ee34 6a87 	vadd.f32	s12, s9, s14
 8005192:	ee36 5aa7 	vadd.f32	s10, s13, s15
 8005196:	ee34 7ac7 	vsub.f32	s14, s9, s14
 800519a:	ee33 5a05 	vadd.f32	s10, s6, s10
 800519e:	ee33 4ac4 	vsub.f32	s8, s7, s8
 80051a2:	ed82 5a00 	vstr	s10, [r2]
 80051a6:	ed9b 5a01 	vldr	s10, [fp, #4]
 80051aa:	edda 4a01 	vldr	s9, [sl, #4]
 80051ae:	ee36 5a05 	vadd.f32	s10, s12, s10
 80051b2:	ee72 3a04 	vadd.f32	s7, s4, s8
 80051b6:	ee35 5a24 	vadd.f32	s10, s10, s9
 80051ba:	ee77 4a67 	vsub.f32	s9, s14, s15
 80051be:	ed82 5a01 	vstr	s10, [r2, #4]
 80051c2:	9a05      	ldr	r2, [sp, #20]
 80051c4:	ee34 5a83 	vadd.f32	s10, s9, s6
 80051c8:	edd2 1a00 	vldr	s3, [r2]
 80051cc:	edd2 2a01 	vldr	s5, [r2, #4]
 80051d0:	9a02      	ldr	r2, [sp, #8]
 80051d2:	ee73 3ae5 	vsub.f32	s7, s7, s11
 80051d6:	ee36 6a42 	vsub.f32	s12, s12, s4
 80051da:	ee63 4aa1 	vmul.f32	s9, s7, s3
 80051de:	ee63 3aa2 	vmul.f32	s7, s7, s5
 80051e2:	ee65 2a22 	vmul.f32	s5, s10, s5
 80051e6:	ee25 5a21 	vmul.f32	s10, s10, s3
 80051ea:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80051ee:	ee35 5a63 	vsub.f32	s10, s10, s7
 80051f2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80051f6:	edcb 2a00 	vstr	s5, [fp]
 80051fa:	ed8b 5a01 	vstr	s10, [fp, #4]
 80051fe:	edd2 3a01 	vldr	s7, [r2, #4]
 8005202:	ed92 5a00 	vldr	s10, [r2]
 8005206:	9a06      	ldr	r2, [sp, #24]
 8005208:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800520c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8005210:	ee66 4a85 	vmul.f32	s9, s13, s10
 8005214:	ee26 5a05 	vmul.f32	s10, s12, s10
 8005218:	ee66 6aa3 	vmul.f32	s13, s13, s7
 800521c:	ee26 6a23 	vmul.f32	s12, s12, s7
 8005220:	ee75 6a66 	vsub.f32	s13, s10, s13
 8005224:	ee34 6a86 	vadd.f32	s12, s9, s12
 8005228:	ee34 4a42 	vsub.f32	s8, s8, s4
 800522c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005230:	edc0 6a01 	vstr	s13, [r0, #4]
 8005234:	ed80 6a00 	vstr	s12, [r0]
 8005238:	ed92 6a01 	vldr	s12, [r2, #4]
 800523c:	9803      	ldr	r0, [sp, #12]
 800523e:	ee77 7a43 	vsub.f32	s15, s14, s6
 8005242:	ee75 5a84 	vadd.f32	s11, s11, s8
 8005246:	ed92 7a00 	vldr	s14, [r2]
 800524a:	ee65 6a87 	vmul.f32	s13, s11, s14
 800524e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005252:	ee65 5a86 	vmul.f32	s11, s11, s12
 8005256:	ee67 7a86 	vmul.f32	s15, s15, s12
 800525a:	ee77 5a65 	vsub.f32	s11, s14, s11
 800525e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005262:	edca 5a01 	vstr	s11, [sl, #4]
 8005266:	edca 7a00 	vstr	s15, [sl]
 800526a:	6872      	ldr	r2, [r6, #4]
 800526c:	4621      	mov	r1, r4
 800526e:	2304      	movs	r3, #4
 8005270:	f7fd fd26 	bl	8002cc0 <arm_radix8_butterfly_f32>
 8005274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005276:	6872      	ldr	r2, [r6, #4]
 8005278:	4621      	mov	r1, r4
 800527a:	2304      	movs	r3, #4
 800527c:	f7fd fd20 	bl	8002cc0 <arm_radix8_butterfly_f32>
 8005280:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005282:	6872      	ldr	r2, [r6, #4]
 8005284:	4621      	mov	r1, r4
 8005286:	2304      	movs	r3, #4
 8005288:	f7fd fd1a 	bl	8002cc0 <arm_radix8_butterfly_f32>
 800528c:	9801      	ldr	r0, [sp, #4]
 800528e:	6872      	ldr	r2, [r6, #4]
 8005290:	4621      	mov	r1, r4
 8005292:	2304      	movs	r3, #4
 8005294:	b00f      	add	sp, #60	; 0x3c
 8005296:	ecbd 8b0a 	vpop	{d8-d12}
 800529a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529e:	f7fd bd0f 	b.w	8002cc0 <arm_radix8_butterfly_f32>
 80052a2:	bf00      	nop

080052a4 <arm_cfft_f32>:
 80052a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052a8:	2a01      	cmp	r2, #1
 80052aa:	4606      	mov	r6, r0
 80052ac:	4617      	mov	r7, r2
 80052ae:	460c      	mov	r4, r1
 80052b0:	4698      	mov	r8, r3
 80052b2:	8805      	ldrh	r5, [r0, #0]
 80052b4:	d054      	beq.n	8005360 <arm_cfft_f32+0xbc>
 80052b6:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 80052ba:	d04c      	beq.n	8005356 <arm_cfft_f32+0xb2>
 80052bc:	d916      	bls.n	80052ec <arm_cfft_f32+0x48>
 80052be:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 80052c2:	d01a      	beq.n	80052fa <arm_cfft_f32+0x56>
 80052c4:	d95c      	bls.n	8005380 <arm_cfft_f32+0xdc>
 80052c6:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 80052ca:	d044      	beq.n	8005356 <arm_cfft_f32+0xb2>
 80052cc:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 80052d0:	d105      	bne.n	80052de <arm_cfft_f32+0x3a>
 80052d2:	4620      	mov	r0, r4
 80052d4:	4629      	mov	r1, r5
 80052d6:	6872      	ldr	r2, [r6, #4]
 80052d8:	2301      	movs	r3, #1
 80052da:	f7fd fcf1 	bl	8002cc0 <arm_radix8_butterfly_f32>
 80052de:	f1b8 0f00 	cmp.w	r8, #0
 80052e2:	d111      	bne.n	8005308 <arm_cfft_f32+0x64>
 80052e4:	2f01      	cmp	r7, #1
 80052e6:	d016      	beq.n	8005316 <arm_cfft_f32+0x72>
 80052e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052ec:	2d20      	cmp	r5, #32
 80052ee:	d032      	beq.n	8005356 <arm_cfft_f32+0xb2>
 80052f0:	d94a      	bls.n	8005388 <arm_cfft_f32+0xe4>
 80052f2:	2d40      	cmp	r5, #64	; 0x40
 80052f4:	d0ed      	beq.n	80052d2 <arm_cfft_f32+0x2e>
 80052f6:	2d80      	cmp	r5, #128	; 0x80
 80052f8:	d1f1      	bne.n	80052de <arm_cfft_f32+0x3a>
 80052fa:	4630      	mov	r0, r6
 80052fc:	4621      	mov	r1, r4
 80052fe:	f7ff fca1 	bl	8004c44 <arm_cfft_radix8by2_f32>
 8005302:	f1b8 0f00 	cmp.w	r8, #0
 8005306:	d0ed      	beq.n	80052e4 <arm_cfft_f32+0x40>
 8005308:	4620      	mov	r0, r4
 800530a:	89b1      	ldrh	r1, [r6, #12]
 800530c:	68b2      	ldr	r2, [r6, #8]
 800530e:	f7fa ff5b 	bl	80001c8 <arm_bitreversal_32>
 8005312:	2f01      	cmp	r7, #1
 8005314:	d1e8      	bne.n	80052e8 <arm_cfft_f32+0x44>
 8005316:	ee07 5a90 	vmov	s15, r5
 800531a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800531e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005322:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8005326:	2d00      	cmp	r5, #0
 8005328:	d0de      	beq.n	80052e8 <arm_cfft_f32+0x44>
 800532a:	f104 0108 	add.w	r1, r4, #8
 800532e:	2300      	movs	r3, #0
 8005330:	3301      	adds	r3, #1
 8005332:	429d      	cmp	r5, r3
 8005334:	f101 0108 	add.w	r1, r1, #8
 8005338:	ed11 7a04 	vldr	s14, [r1, #-16]
 800533c:	ed51 7a03 	vldr	s15, [r1, #-12]
 8005340:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005344:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005348:	ed01 7a04 	vstr	s14, [r1, #-16]
 800534c:	ed41 7a03 	vstr	s15, [r1, #-12]
 8005350:	d1ee      	bne.n	8005330 <arm_cfft_f32+0x8c>
 8005352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005356:	4630      	mov	r0, r6
 8005358:	4621      	mov	r1, r4
 800535a:	f7ff fd45 	bl	8004de8 <arm_cfft_radix8by4_f32>
 800535e:	e7be      	b.n	80052de <arm_cfft_f32+0x3a>
 8005360:	b1ad      	cbz	r5, 800538e <arm_cfft_f32+0xea>
 8005362:	f101 030c 	add.w	r3, r1, #12
 8005366:	2200      	movs	r2, #0
 8005368:	ed53 7a02 	vldr	s15, [r3, #-8]
 800536c:	3201      	adds	r2, #1
 800536e:	eef1 7a67 	vneg.f32	s15, s15
 8005372:	4295      	cmp	r5, r2
 8005374:	ed43 7a02 	vstr	s15, [r3, #-8]
 8005378:	f103 0308 	add.w	r3, r3, #8
 800537c:	d1f4      	bne.n	8005368 <arm_cfft_f32+0xc4>
 800537e:	e79a      	b.n	80052b6 <arm_cfft_f32+0x12>
 8005380:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8005384:	d0a5      	beq.n	80052d2 <arm_cfft_f32+0x2e>
 8005386:	e7aa      	b.n	80052de <arm_cfft_f32+0x3a>
 8005388:	2d10      	cmp	r5, #16
 800538a:	d0b6      	beq.n	80052fa <arm_cfft_f32+0x56>
 800538c:	e7a7      	b.n	80052de <arm_cfft_f32+0x3a>
 800538e:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8005392:	d894      	bhi.n	80052be <arm_cfft_f32+0x1a>
 8005394:	e7aa      	b.n	80052ec <arm_cfft_f32+0x48>
 8005396:	bf00      	nop

08005398 <D16_GENERIC>:
 8005398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539c:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 800539e:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80053a0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80053a4:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80053a8:	69d3      	ldr	r3, [r2, #28]
 80053aa:	6896      	ldr	r6, [r2, #8]
 80053ac:	b087      	sub	sp, #28
 80053ae:	9402      	str	r4, [sp, #8]
 80053b0:	9103      	str	r1, [sp, #12]
 80053b2:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80053b4:	2d00      	cmp	r5, #0
 80053b6:	d066      	beq.n	8005486 <D16_GENERIC+0xee>
 80053b8:	f004 0510 	and.w	r5, r4, #16
 80053bc:	f004 0420 	and.w	r4, r4, #32
 80053c0:	9504      	str	r5, [sp, #16]
 80053c2:	4936      	ldr	r1, [pc, #216]	; (800549c <D16_GENERIC+0x104>)
 80053c4:	9405      	str	r4, [sp, #20]
 80053c6:	f04f 0e00 	mov.w	lr, #0
 80053ca:	4635      	mov	r5, r6
 80053cc:	e04f      	b.n	800546e <D16_GENERIC+0xd6>
 80053ce:	5d87      	ldrb	r7, [r0, r6]
 80053d0:	7804      	ldrb	r4, [r0, #0]
 80053d2:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80053d6:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 80053da:	b2fe      	uxtb	r6, r7
 80053dc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80053e0:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 80053e4:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80053e8:	441c      	add	r4, r3
 80053ea:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80053ee:	f3c4 0309 	ubfx	r3, r4, #0, #10
 80053f2:	f3c7 0609 	ubfx	r6, r7, #0, #10
 80053f6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80053fa:	4c29      	ldr	r4, [pc, #164]	; (80054a0 <D16_GENERIC+0x108>)
 80053fc:	0abb      	lsrs	r3, r7, #10
 80053fe:	fb26 5404 	smlad	r4, r6, r4, r5
 8005402:	4d28      	ldr	r5, [pc, #160]	; (80054a4 <D16_GENERIC+0x10c>)
 8005404:	fb26 f505 	smuad	r5, r6, r5
 8005408:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 800540c:	eb04 080a 	add.w	r8, r4, sl
 8005410:	ebcb 0808 	rsb	r8, fp, r8
 8005414:	4646      	mov	r6, r8
 8005416:	17f7      	asrs	r7, r6, #31
 8005418:	e9cd 6700 	strd	r6, r7, [sp]
 800541c:	9e04      	ldr	r6, [sp, #16]
 800541e:	f10e 0c01 	add.w	ip, lr, #1
 8005422:	b16e      	cbz	r6, 8005440 <D16_GENERIC+0xa8>
 8005424:	6a16      	ldr	r6, [r2, #32]
 8005426:	9f01      	ldr	r7, [sp, #4]
 8005428:	fba8 8906 	umull	r8, r9, r8, r6
 800542c:	fb06 9907 	mla	r9, r6, r7, r9
 8005430:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8005434:	f149 0900 	adc.w	r9, r9, #0
 8005438:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800543c:	46a3      	mov	fp, r4
 800543e:	4654      	mov	r4, sl
 8005440:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005442:	9f02      	ldr	r7, [sp, #8]
 8005444:	0424      	lsls	r4, r4, #16
 8005446:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800544a:	f04f 0900 	mov.w	r9, #0
 800544e:	fb0e fe06 	mul.w	lr, lr, r6
 8005452:	fbc7 8904 	smlal	r8, r9, r7, r4
 8005456:	9e03      	ldr	r6, [sp, #12]
 8005458:	464f      	mov	r7, r9
 800545a:	10bc      	asrs	r4, r7, #2
 800545c:	f304 040f 	ssat	r4, #16, r4
 8005460:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8005464:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005466:	fa1f fe8c 	uxth.w	lr, ip
 800546a:	4574      	cmp	r4, lr
 800546c:	d90a      	bls.n	8005484 <D16_GENERIC+0xec>
 800546e:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8005470:	2c01      	cmp	r4, #1
 8005472:	b2e6      	uxtb	r6, r4
 8005474:	d1ab      	bne.n	80053ce <D16_GENERIC+0x36>
 8005476:	9c05      	ldr	r4, [sp, #20]
 8005478:	f850 7b02 	ldr.w	r7, [r0], #2
 800547c:	2c00      	cmp	r4, #0
 800547e:	d0ac      	beq.n	80053da <D16_GENERIC+0x42>
 8005480:	ba7f      	rev16	r7, r7
 8005482:	e7aa      	b.n	80053da <D16_GENERIC+0x42>
 8005484:	462e      	mov	r6, r5
 8005486:	2000      	movs	r0, #0
 8005488:	6096      	str	r6, [r2, #8]
 800548a:	61d3      	str	r3, [r2, #28]
 800548c:	f8c2 a010 	str.w	sl, [r2, #16]
 8005490:	f8c2 b014 	str.w	fp, [r2, #20]
 8005494:	b007      	add	sp, #28
 8005496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800549a:	bf00      	nop
 800549c:	20000000 	.word	0x20000000
 80054a0:	00030001 	.word	0x00030001
 80054a4:	00010003 	.word	0x00010003

080054a8 <D24_GENERIC>:
 80054a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ac:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80054ae:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80054b0:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80054b4:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80054b8:	69d3      	ldr	r3, [r2, #28]
 80054ba:	6894      	ldr	r4, [r2, #8]
 80054bc:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80054c0:	b089      	sub	sp, #36	; 0x24
 80054c2:	9504      	str	r5, [sp, #16]
 80054c4:	9105      	str	r1, [sp, #20]
 80054c6:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80054c8:	2e00      	cmp	r6, #0
 80054ca:	f000 8096 	beq.w	80055fa <D24_GENERIC+0x152>
 80054ce:	f005 0610 	and.w	r6, r5, #16
 80054d2:	f005 0520 	and.w	r5, r5, #32
 80054d6:	4953      	ldr	r1, [pc, #332]	; (8005624 <D24_GENERIC+0x17c>)
 80054d8:	9606      	str	r6, [sp, #24]
 80054da:	9507      	str	r5, [sp, #28]
 80054dc:	f04f 0e00 	mov.w	lr, #0
 80054e0:	f8cd 9004 	str.w	r9, [sp, #4]
 80054e4:	e06a      	b.n	80055bc <D24_GENERIC+0x114>
 80054e6:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80054ea:	f810 8007 	ldrb.w	r8, [r0, r7]
 80054ee:	f890 c000 	ldrb.w	ip, [r0]
 80054f2:	042d      	lsls	r5, r5, #16
 80054f4:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80054f8:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 80054fc:	44ac      	add	ip, r5
 80054fe:	4438      	add	r0, r7
 8005500:	fa5f f68c 	uxtb.w	r6, ip
 8005504:	f3cc 2507 	ubfx	r5, ip, #8, #8
 8005508:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800550c:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8005510:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005514:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8005518:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 800551c:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8005520:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8005524:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005528:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 800552c:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8005530:	4d3d      	ldr	r5, [pc, #244]	; (8005628 <D24_GENERIC+0x180>)
 8005532:	fb26 b705 	smlad	r7, r6, r5, fp
 8005536:	4d3d      	ldr	r5, [pc, #244]	; (800562c <D24_GENERIC+0x184>)
 8005538:	fb26 4b05 	smlad	fp, r6, r5, r4
 800553c:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8005540:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8005544:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8005548:	2401      	movs	r4, #1
 800554a:	fb26 f604 	smuad	r6, r6, r4
 800554e:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8005552:	9f01      	ldr	r7, [sp, #4]
 8005554:	eb0e 0c04 	add.w	ip, lr, r4
 8005558:	eb08 0406 	add.w	r4, r8, r6
 800555c:	eb05 060a 	add.w	r6, r5, sl
 8005560:	1bf6      	subs	r6, r6, r7
 8005562:	4637      	mov	r7, r6
 8005564:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8005568:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800556c:	9f06      	ldr	r7, [sp, #24]
 800556e:	b177      	cbz	r7, 800558e <D24_GENERIC+0xe6>
 8005570:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8005574:	9501      	str	r5, [sp, #4]
 8005576:	fba6 9a08 	umull	r9, sl, r6, r8
 800557a:	9e03      	ldr	r6, [sp, #12]
 800557c:	fb08 aa06 	mla	sl, r8, r6, sl
 8005580:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8005584:	f14a 0700 	adc.w	r7, sl, #0
 8005588:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 800558c:	4655      	mov	r5, sl
 800558e:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8005590:	9f04      	ldr	r7, [sp, #16]
 8005592:	03ad      	lsls	r5, r5, #14
 8005594:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005598:	f04f 0900 	mov.w	r9, #0
 800559c:	fb0e fe06 	mul.w	lr, lr, r6
 80055a0:	fbc7 8905 	smlal	r8, r9, r7, r5
 80055a4:	9e05      	ldr	r6, [sp, #20]
 80055a6:	464f      	mov	r7, r9
 80055a8:	10bd      	asrs	r5, r7, #2
 80055aa:	f305 050f 	ssat	r5, #16, r5
 80055ae:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80055b2:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80055b4:	fa1f fe8c 	uxth.w	lr, ip
 80055b8:	4575      	cmp	r5, lr
 80055ba:	d91c      	bls.n	80055f6 <D24_GENERIC+0x14e>
 80055bc:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80055be:	b2ef      	uxtb	r7, r5
 80055c0:	2d01      	cmp	r5, #1
 80055c2:	b23e      	sxth	r6, r7
 80055c4:	d18f      	bne.n	80054e6 <D24_GENERIC+0x3e>
 80055c6:	9d07      	ldr	r5, [sp, #28]
 80055c8:	b15d      	cbz	r5, 80055e2 <D24_GENERIC+0x13a>
 80055ca:	f01e 0f01 	tst.w	lr, #1
 80055ce:	d120      	bne.n	8005612 <D24_GENERIC+0x16a>
 80055d0:	7806      	ldrb	r6, [r0, #0]
 80055d2:	78c7      	ldrb	r7, [r0, #3]
 80055d4:	7845      	ldrb	r5, [r0, #1]
 80055d6:	0236      	lsls	r6, r6, #8
 80055d8:	eb06 4c07 	add.w	ip, r6, r7, lsl #16
 80055dc:	44ac      	add	ip, r5
 80055de:	3002      	adds	r0, #2
 80055e0:	e78e      	b.n	8005500 <D24_GENERIC+0x58>
 80055e2:	7846      	ldrb	r6, [r0, #1]
 80055e4:	f890 c002 	ldrb.w	ip, [r0, #2]
 80055e8:	f810 5b03 	ldrb.w	r5, [r0], #3
 80055ec:	0236      	lsls	r6, r6, #8
 80055ee:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 80055f2:	44ac      	add	ip, r5
 80055f4:	e784      	b.n	8005500 <D24_GENERIC+0x58>
 80055f6:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80055fa:	6094      	str	r4, [r2, #8]
 80055fc:	2000      	movs	r0, #0
 80055fe:	f8c2 b00c 	str.w	fp, [r2, #12]
 8005602:	61d3      	str	r3, [r2, #28]
 8005604:	f8c2 a010 	str.w	sl, [r2, #16]
 8005608:	f8c2 9014 	str.w	r9, [r2, #20]
 800560c:	b009      	add	sp, #36	; 0x24
 800560e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005612:	78c6      	ldrb	r6, [r0, #3]
 8005614:	7887      	ldrb	r7, [r0, #2]
 8005616:	f810 5b04 	ldrb.w	r5, [r0], #4
 800561a:	0236      	lsls	r6, r6, #8
 800561c:	eb06 4c07 	add.w	ip, r6, r7, lsl #16
 8005620:	44ac      	add	ip, r5
 8005622:	e76d      	b.n	8005500 <D24_GENERIC+0x58>
 8005624:	20000000 	.word	0x20000000
 8005628:	00030001 	.word	0x00030001
 800562c:	00060007 	.word	0x00060007

08005630 <D32_GENERIC>:
 8005630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005634:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8005636:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005638:	f8d2 a010 	ldr.w	sl, [r2, #16]
 800563c:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8005640:	69d6      	ldr	r6, [r2, #28]
 8005642:	6893      	ldr	r3, [r2, #8]
 8005644:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8005648:	b087      	sub	sp, #28
 800564a:	9402      	str	r4, [sp, #8]
 800564c:	9103      	str	r1, [sp, #12]
 800564e:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8005650:	2d00      	cmp	r5, #0
 8005652:	f000 8098 	beq.w	8005786 <D32_GENERIC+0x156>
 8005656:	f004 0510 	and.w	r5, r4, #16
 800565a:	f004 0420 	and.w	r4, r4, #32
 800565e:	4950      	ldr	r1, [pc, #320]	; (80057a0 <D32_GENERIC+0x170>)
 8005660:	9504      	str	r5, [sp, #16]
 8005662:	9405      	str	r4, [sp, #20]
 8005664:	f04f 0c00 	mov.w	ip, #0
 8005668:	f8cd 9004 	str.w	r9, [sp, #4]
 800566c:	469e      	mov	lr, r3
 800566e:	e073      	b.n	8005758 <D32_GENERIC+0x128>
 8005670:	f818 3003 	ldrb.w	r3, [r8, r3]
 8005674:	f810 8007 	ldrb.w	r8, [r0, r7]
 8005678:	5d07      	ldrb	r7, [r0, r4]
 800567a:	7800      	ldrb	r0, [r0, #0]
 800567c:	041b      	lsls	r3, r3, #16
 800567e:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005682:	eb03 2707 	add.w	r7, r3, r7, lsl #8
 8005686:	4407      	add	r7, r0
 8005688:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 800568c:	b2fc      	uxtb	r4, r7
 800568e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8005692:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8005696:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800569a:	f3c7 4907 	ubfx	r9, r7, #16, #8
 800569e:	0e3f      	lsrs	r7, r7, #24
 80056a0:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 80056a4:	f851 3029 	ldr.w	r3, [r1, r9, lsl #2]
 80056a8:	f851 6027 	ldr.w	r6, [r1, r7, lsl #2]
 80056ac:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 80056b0:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 80056b4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80056b8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80056bc:	f3c6 0709 	ubfx	r7, r6, #0, #10
 80056c0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80056c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80056cc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80056d0:	4d34      	ldr	r5, [pc, #208]	; (80057a4 <D32_GENERIC+0x174>)
 80056d2:	fb24 bb05 	smlad	fp, r4, r5, fp
 80056d6:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 80056da:	fb23 b805 	smlad	r8, r3, r5, fp
 80056de:	4d32      	ldr	r5, [pc, #200]	; (80057a8 <D32_GENERIC+0x178>)
 80056e0:	fb24 eb05 	smlad	fp, r4, r5, lr
 80056e4:	4d31      	ldr	r5, [pc, #196]	; (80057ac <D32_GENERIC+0x17c>)
 80056e6:	fb23 bb05 	smlad	fp, r3, r5, fp
 80056ea:	2501      	movs	r5, #1
 80056ec:	fb24 f405 	smuad	r4, r4, r5
 80056f0:	4d2f      	ldr	r5, [pc, #188]	; (80057b0 <D32_GENERIC+0x180>)
 80056f2:	fb23 4e05 	smlad	lr, r3, r5, r4
 80056f6:	9d01      	ldr	r5, [sp, #4]
 80056f8:	f5a8 4380 	sub.w	r3, r8, #16384	; 0x4000
 80056fc:	eb03 040a 	add.w	r4, r3, sl
 8005700:	1b64      	subs	r4, r4, r5
 8005702:	9d04      	ldr	r5, [sp, #16]
 8005704:	f10c 0701 	add.w	r7, ip, #1
 8005708:	ea4f 79e4 	mov.w	r9, r4, asr #31
 800570c:	b16d      	cbz	r5, 800572a <D32_GENERIC+0xfa>
 800570e:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8005712:	9301      	str	r3, [sp, #4]
 8005714:	fba4 4508 	umull	r4, r5, r4, r8
 8005718:	fb08 5509 	mla	r5, r8, r9, r5
 800571c:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8005720:	f145 0500 	adc.w	r5, r5, #0
 8005724:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8005728:	4653      	mov	r3, sl
 800572a:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 800572c:	9d02      	ldr	r5, [sp, #8]
 800572e:	035b      	lsls	r3, r3, #13
 8005730:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005734:	f04f 0900 	mov.w	r9, #0
 8005738:	fb0c fc04 	mul.w	ip, ip, r4
 800573c:	fbc5 8903 	smlal	r8, r9, r5, r3
 8005740:	9c03      	ldr	r4, [sp, #12]
 8005742:	464d      	mov	r5, r9
 8005744:	10ab      	asrs	r3, r5, #2
 8005746:	f303 030f 	ssat	r3, #16, r3
 800574a:	f824 301c 	strh.w	r3, [r4, ip, lsl #1]
 800574e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005750:	fa1f fc87 	uxth.w	ip, r7
 8005754:	4563      	cmp	r3, ip
 8005756:	d913      	bls.n	8005780 <D32_GENERIC+0x150>
 8005758:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 800575a:	b2ec      	uxtb	r4, r5
 800575c:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8005760:	eb00 0807 	add.w	r8, r0, r7
 8005764:	4263      	negs	r3, r4
 8005766:	2d01      	cmp	r5, #1
 8005768:	eb08 0503 	add.w	r5, r8, r3
 800576c:	d180      	bne.n	8005670 <D32_GENERIC+0x40>
 800576e:	1d03      	adds	r3, r0, #4
 8005770:	6807      	ldr	r7, [r0, #0]
 8005772:	9805      	ldr	r0, [sp, #20]
 8005774:	b110      	cbz	r0, 800577c <D32_GENERIC+0x14c>
 8005776:	ba7f      	rev16	r7, r7
 8005778:	4618      	mov	r0, r3
 800577a:	e787      	b.n	800568c <D32_GENERIC+0x5c>
 800577c:	4618      	mov	r0, r3
 800577e:	e785      	b.n	800568c <D32_GENERIC+0x5c>
 8005780:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8005784:	4673      	mov	r3, lr
 8005786:	2000      	movs	r0, #0
 8005788:	6093      	str	r3, [r2, #8]
 800578a:	f8c2 b00c 	str.w	fp, [r2, #12]
 800578e:	61d6      	str	r6, [r2, #28]
 8005790:	f8c2 a010 	str.w	sl, [r2, #16]
 8005794:	f8c2 9014 	str.w	r9, [r2, #20]
 8005798:	b007      	add	sp, #28
 800579a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800579e:	bf00      	nop
 80057a0:	20000000 	.word	0x20000000
 80057a4:	00060003 	.word	0x00060003
 80057a8:	000a000c 	.word	0x000a000c
 80057ac:	000c000a 	.word	0x000c000a
 80057b0:	00030006 	.word	0x00030006

080057b4 <D48_GENERIC>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	b089      	sub	sp, #36	; 0x24
 80057ba:	68d4      	ldr	r4, [r2, #12]
 80057bc:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80057be:	6953      	ldr	r3, [r2, #20]
 80057c0:	9401      	str	r4, [sp, #4]
 80057c2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80057c4:	9303      	str	r3, [sp, #12]
 80057c6:	9404      	str	r4, [sp, #16]
 80057c8:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80057cc:	69d6      	ldr	r6, [r2, #28]
 80057ce:	6893      	ldr	r3, [r2, #8]
 80057d0:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80057d2:	9105      	str	r1, [sp, #20]
 80057d4:	2d00      	cmp	r5, #0
 80057d6:	f000 80c5 	beq.w	8005964 <D48_GENERIC+0x1b0>
 80057da:	f004 0510 	and.w	r5, r4, #16
 80057de:	f004 0420 	and.w	r4, r4, #32
 80057e2:	4966      	ldr	r1, [pc, #408]	; (800597c <D48_GENERIC+0x1c8>)
 80057e4:	9506      	str	r5, [sp, #24]
 80057e6:	9407      	str	r4, [sp, #28]
 80057e8:	f04f 0c00 	mov.w	ip, #0
 80057ec:	4657      	mov	r7, sl
 80057ee:	9302      	str	r3, [sp, #8]
 80057f0:	e09c      	b.n	800592c <D48_GENERIC+0x178>
 80057f2:	f81b 4005 	ldrb.w	r4, [fp, r5]
 80057f6:	f810 b009 	ldrb.w	fp, [r0, r9]
 80057fa:	f81a 9009 	ldrb.w	r9, [sl, r9]
 80057fe:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8005802:	7800      	ldrb	r0, [r0, #0]
 8005804:	0424      	lsls	r4, r4, #16
 8005806:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800580a:	f818 4005 	ldrb.w	r4, [r8, r5]
 800580e:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8005812:	44a8      	add	r8, r5
 8005814:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8005818:	eb0b 0500 	add.w	r5, fp, r0
 800581c:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8005820:	fa5f f885 	uxtb.w	r8, r5
 8005824:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8005828:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 800582c:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8005830:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8005834:	0e2d      	lsrs	r5, r5, #24
 8005836:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 800583a:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 800583e:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8005842:	b2e6      	uxtb	r6, r4
 8005844:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8005848:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800584c:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8005850:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8005854:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8005858:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 800585c:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005860:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8005864:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005868:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800586c:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8005870:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005874:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005878:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800587c:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8005880:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8005884:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8005888:	4c3d      	ldr	r4, [pc, #244]	; (8005980 <D48_GENERIC+0x1cc>)
 800588a:	9d01      	ldr	r5, [sp, #4]
 800588c:	fb2a 5404 	smlad	r4, sl, r4, r5
 8005890:	4d3c      	ldr	r5, [pc, #240]	; (8005984 <D48_GENERIC+0x1d0>)
 8005892:	fb28 4405 	smlad	r4, r8, r5, r4
 8005896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800589a:	fb2e 4b03 	smlad	fp, lr, r3, r4
 800589e:	4c3a      	ldr	r4, [pc, #232]	; (8005988 <D48_GENERIC+0x1d4>)
 80058a0:	9b02      	ldr	r3, [sp, #8]
 80058a2:	fb2a 3304 	smlad	r3, sl, r4, r3
 80058a6:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 80058aa:	fb28 3304 	smlad	r3, r8, r4, r3
 80058ae:	4c37      	ldr	r4, [pc, #220]	; (800598c <D48_GENERIC+0x1d8>)
 80058b0:	fb2e 3304 	smlad	r3, lr, r4, r3
 80058b4:	2501      	movs	r5, #1
 80058b6:	9301      	str	r3, [sp, #4]
 80058b8:	fb2a fa05 	smuad	sl, sl, r5
 80058bc:	4b34      	ldr	r3, [pc, #208]	; (8005990 <D48_GENERIC+0x1dc>)
 80058be:	fb28 a803 	smlad	r8, r8, r3, sl
 80058c2:	4b34      	ldr	r3, [pc, #208]	; (8005994 <D48_GENERIC+0x1e0>)
 80058c4:	fb2e 8303 	smlad	r3, lr, r3, r8
 80058c8:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 80058cc:	9302      	str	r3, [sp, #8]
 80058ce:	9b03      	ldr	r3, [sp, #12]
 80058d0:	eb04 0807 	add.w	r8, r4, r7
 80058d4:	ebc3 0808 	rsb	r8, r3, r8
 80058d8:	9b06      	ldr	r3, [sp, #24]
 80058da:	4465      	add	r5, ip
 80058dc:	ea4f 7be8 	mov.w	fp, r8, asr #31
 80058e0:	b163      	cbz	r3, 80058fc <D48_GENERIC+0x148>
 80058e2:	6a17      	ldr	r7, [r2, #32]
 80058e4:	9403      	str	r4, [sp, #12]
 80058e6:	fba8 8907 	umull	r8, r9, r8, r7
 80058ea:	fb07 990b 	mla	r9, r7, fp, r9
 80058ee:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 80058f2:	f149 0900 	adc.w	r9, r9, #0
 80058f6:	ea4f 0749 	mov.w	r7, r9, lsl #1
 80058fa:	463c      	mov	r4, r7
 80058fc:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8005900:	9b04      	ldr	r3, [sp, #16]
 8005902:	02e4      	lsls	r4, r4, #11
 8005904:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8005908:	f04f 0900 	mov.w	r9, #0
 800590c:	fb0c fc0e 	mul.w	ip, ip, lr
 8005910:	fbc3 8904 	smlal	r8, r9, r3, r4
 8005914:	9b05      	ldr	r3, [sp, #20]
 8005916:	ea4f 04a9 	mov.w	r4, r9, asr #2
 800591a:	f304 040f 	ssat	r4, #16, r4
 800591e:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8005922:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8005924:	fa1f fc85 	uxth.w	ip, r5
 8005928:	4564      	cmp	r4, ip
 800592a:	d919      	bls.n	8005960 <D48_GENERIC+0x1ac>
 800592c:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 800592e:	fa5f fe84 	uxtb.w	lr, r4
 8005932:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8005936:	f1ce 0500 	rsb	r5, lr, #0
 800593a:	eb00 0b09 	add.w	fp, r0, r9
 800593e:	eb0b 0a05 	add.w	sl, fp, r5
 8005942:	2c01      	cmp	r4, #1
 8005944:	eb0a 0809 	add.w	r8, sl, r9
 8005948:	f47f af53 	bne.w	80057f2 <D48_GENERIC+0x3e>
 800594c:	9b07      	ldr	r3, [sp, #28]
 800594e:	6805      	ldr	r5, [r0, #0]
 8005950:	6844      	ldr	r4, [r0, #4]
 8005952:	3006      	adds	r0, #6
 8005954:	2b00      	cmp	r3, #0
 8005956:	f43f af63 	beq.w	8005820 <D48_GENERIC+0x6c>
 800595a:	ba6d      	rev16	r5, r5
 800595c:	ba64      	rev16	r4, r4
 800595e:	e75f      	b.n	8005820 <D48_GENERIC+0x6c>
 8005960:	9b02      	ldr	r3, [sp, #8]
 8005962:	46ba      	mov	sl, r7
 8005964:	6093      	str	r3, [r2, #8]
 8005966:	9b01      	ldr	r3, [sp, #4]
 8005968:	60d3      	str	r3, [r2, #12]
 800596a:	9b03      	ldr	r3, [sp, #12]
 800596c:	61d6      	str	r6, [r2, #28]
 800596e:	2000      	movs	r0, #0
 8005970:	f8c2 a010 	str.w	sl, [r2, #16]
 8005974:	6153      	str	r3, [r2, #20]
 8005976:	b009      	add	sp, #36	; 0x24
 8005978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800597c:	20000000 	.word	0x20000000
 8005980:	000f000a 	.word	0x000f000a
 8005984:	00060003 	.word	0x00060003
 8005988:	00150019 	.word	0x00150019
 800598c:	00190015 	.word	0x00190015
 8005990:	00030006 	.word	0x00030006
 8005994:	000a000f 	.word	0x000a000f

08005998 <D64_GENERIC>:
 8005998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800599c:	b089      	sub	sp, #36	; 0x24
 800599e:	6895      	ldr	r5, [r2, #8]
 80059a0:	6913      	ldr	r3, [r2, #16]
 80059a2:	9501      	str	r5, [sp, #4]
 80059a4:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 80059a6:	68d5      	ldr	r5, [r2, #12]
 80059a8:	9304      	str	r3, [sp, #16]
 80059aa:	9502      	str	r5, [sp, #8]
 80059ac:	6953      	ldr	r3, [r2, #20]
 80059ae:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80059b0:	9305      	str	r3, [sp, #20]
 80059b2:	9506      	str	r5, [sp, #24]
 80059b4:	69d3      	ldr	r3, [r2, #28]
 80059b6:	9107      	str	r1, [sp, #28]
 80059b8:	2c00      	cmp	r4, #0
 80059ba:	f000 80db 	beq.w	8005b74 <D64_GENERIC+0x1dc>
 80059be:	6a11      	ldr	r1, [r2, #32]
 80059c0:	9103      	str	r1, [sp, #12]
 80059c2:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8005bb0 <D64_GENERIC+0x218>
 80059c6:	f04f 0c00 	mov.w	ip, #0
 80059ca:	4681      	mov	r9, r0
 80059cc:	e0c1      	b.n	8005b52 <D64_GENERIC+0x1ba>
 80059ce:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 80059d2:	427d      	negs	r5, r7
 80059d4:	eb09 0408 	add.w	r4, r9, r8
 80059d8:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
 80059dc:	eb0a 0048 	add.w	r0, sl, r8, lsl #1
 80059e0:	5d66      	ldrb	r6, [r4, r5]
 80059e2:	5d41      	ldrb	r1, [r0, r5]
 80059e4:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 80059e8:	f819 a008 	ldrb.w	sl, [r9, r8]
 80059ec:	f814 8015 	ldrb.w	r8, [r4, r5, lsl #1]
 80059f0:	f899 4000 	ldrb.w	r4, [r9]
 80059f4:	f810 9015 	ldrb.w	r9, [r0, r5, lsl #1]
 80059f8:	4428      	add	r0, r5
 80059fa:	0409      	lsls	r1, r1, #16
 80059fc:	0436      	lsls	r6, r6, #16
 80059fe:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8005a02:	eb06 660a 	add.w	r6, r6, sl, lsl #24
 8005a06:	f810 b015 	ldrb.w	fp, [r0, r5, lsl #1]
 8005a0a:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8005a0e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8005a12:	eb06 2608 	add.w	r6, r6, r8, lsl #8
 8005a16:	4459      	add	r1, fp
 8005a18:	eb05 0987 	add.w	r9, r5, r7, lsl #2
 8005a1c:	4426      	add	r6, r4
 8005a1e:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8005a22:	b2f4      	uxtb	r4, r6
 8005a24:	f85e 5020 	ldr.w	r5, [lr, r0, lsl #2]
 8005a28:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8005a2c:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8005a30:	0e36      	lsrs	r6, r6, #24
 8005a32:	eb03 0a04 	add.w	sl, r3, r4
 8005a36:	f85e 7020 	ldr.w	r7, [lr, r0, lsl #2]
 8005a3a:	f85e 4026 	ldr.w	r4, [lr, r6, lsl #2]
 8005a3e:	b2c8      	uxtb	r0, r1
 8005a40:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8005a44:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8005a48:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8005a4c:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8005a50:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8005a54:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8005a58:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8005a5c:	0e09      	lsrs	r1, r1, #24
 8005a5e:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8005a62:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8005a66:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8005a6a:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8005a6e:	eb03 2890 	add.w	r8, r3, r0, lsr #10
 8005a72:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005a76:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8005a7a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005a7e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8005a82:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005a86:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005a8a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005a8e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005a92:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005a96:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8005a9a:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8005a9e:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8005aa2:	0a8b      	lsrs	r3, r1, #10
 8005aa4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005aa8:	4939      	ldr	r1, [pc, #228]	; (8005b90 <D64_GENERIC+0x1f8>)
 8005aaa:	9c02      	ldr	r4, [sp, #8]
 8005aac:	fb2a 4101 	smlad	r1, sl, r1, r4
 8005ab0:	4c38      	ldr	r4, [pc, #224]	; (8005b94 <D64_GENERIC+0x1fc>)
 8005ab2:	fb27 1104 	smlad	r1, r7, r4, r1
 8005ab6:	4c38      	ldr	r4, [pc, #224]	; (8005b98 <D64_GENERIC+0x200>)
 8005ab8:	fb20 1104 	smlad	r1, r0, r4, r1
 8005abc:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8005ac0:	fb28 1106 	smlad	r1, r8, r6, r1
 8005ac4:	4c35      	ldr	r4, [pc, #212]	; (8005b9c <D64_GENERIC+0x204>)
 8005ac6:	9d01      	ldr	r5, [sp, #4]
 8005ac8:	fb2a 5404 	smlad	r4, sl, r4, r5
 8005acc:	4d33      	ldr	r5, [pc, #204]	; (8005b9c <D64_GENERIC+0x204>)
 8005ace:	fb28 4415 	smladx	r4, r8, r5, r4
 8005ad2:	4d33      	ldr	r5, [pc, #204]	; (8005ba0 <D64_GENERIC+0x208>)
 8005ad4:	fb27 4405 	smlad	r4, r7, r5, r4
 8005ad8:	fb20 4415 	smladx	r4, r0, r5, r4
 8005adc:	2501      	movs	r5, #1
 8005ade:	9402      	str	r4, [sp, #8]
 8005ae0:	fb2a fa05 	smuad	sl, sl, r5
 8005ae4:	4c2f      	ldr	r4, [pc, #188]	; (8005ba4 <D64_GENERIC+0x20c>)
 8005ae6:	fb27 a704 	smlad	r7, r7, r4, sl
 8005aea:	4c2f      	ldr	r4, [pc, #188]	; (8005ba8 <D64_GENERIC+0x210>)
 8005aec:	fb20 7004 	smlad	r0, r0, r4, r7
 8005af0:	4c2e      	ldr	r4, [pc, #184]	; (8005bac <D64_GENERIC+0x214>)
 8005af2:	fb28 0004 	smlad	r0, r8, r4, r0
 8005af6:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8005afa:	9903      	ldr	r1, [sp, #12]
 8005afc:	9001      	str	r0, [sp, #4]
 8005afe:	b189      	cbz	r1, 8005b24 <D64_GENERIC+0x18c>
 8005b00:	9804      	ldr	r0, [sp, #16]
 8005b02:	9c05      	ldr	r4, [sp, #20]
 8005b04:	9605      	str	r6, [sp, #20]
 8005b06:	4430      	add	r0, r6
 8005b08:	1b00      	subs	r0, r0, r4
 8005b0a:	17c5      	asrs	r5, r0, #31
 8005b0c:	460f      	mov	r7, r1
 8005b0e:	fba0 0101 	umull	r0, r1, r0, r1
 8005b12:	fb07 1105 	mla	r1, r7, r5, r1
 8005b16:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005b1a:	f141 0100 	adc.w	r1, r1, #0
 8005b1e:	0049      	lsls	r1, r1, #1
 8005b20:	9104      	str	r1, [sp, #16]
 8005b22:	460e      	mov	r6, r1
 8005b24:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8005b26:	9906      	ldr	r1, [sp, #24]
 8005b28:	9807      	ldr	r0, [sp, #28]
 8005b2a:	02b6      	lsls	r6, r6, #10
 8005b2c:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8005b30:	f04f 0800 	mov.w	r8, #0
 8005b34:	fb0c f404 	mul.w	r4, ip, r4
 8005b38:	fbc1 7806 	smlal	r7, r8, r1, r6
 8005b3c:	4641      	mov	r1, r8
 8005b3e:	1089      	asrs	r1, r1, #2
 8005b40:	f301 010f 	ssat	r1, #16, r1
 8005b44:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8005b48:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8005b4a:	f10c 0c01 	add.w	ip, ip, #1
 8005b4e:	4561      	cmp	r1, ip
 8005b50:	dd10      	ble.n	8005b74 <D64_GENERIC+0x1dc>
 8005b52:	8d57      	ldrh	r7, [r2, #42]	; 0x2a
 8005b54:	2f01      	cmp	r7, #1
 8005b56:	f47f af3a 	bne.w	80059ce <D64_GENERIC+0x36>
 8005b5a:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8005b5c:	f8d9 6000 	ldr.w	r6, [r9]
 8005b60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005b64:	06b8      	lsls	r0, r7, #26
 8005b66:	f109 0908 	add.w	r9, r9, #8
 8005b6a:	f57f af58 	bpl.w	8005a1e <D64_GENERIC+0x86>
 8005b6e:	ba76      	rev16	r6, r6
 8005b70:	ba49      	rev16	r1, r1
 8005b72:	e754      	b.n	8005a1e <D64_GENERIC+0x86>
 8005b74:	9901      	ldr	r1, [sp, #4]
 8005b76:	61d3      	str	r3, [r2, #28]
 8005b78:	9b04      	ldr	r3, [sp, #16]
 8005b7a:	6091      	str	r1, [r2, #8]
 8005b7c:	6113      	str	r3, [r2, #16]
 8005b7e:	9902      	ldr	r1, [sp, #8]
 8005b80:	9b05      	ldr	r3, [sp, #20]
 8005b82:	60d1      	str	r1, [r2, #12]
 8005b84:	2000      	movs	r0, #0
 8005b86:	6153      	str	r3, [r2, #20]
 8005b88:	b009      	add	sp, #36	; 0x24
 8005b8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b8e:	bf00      	nop
 8005b90:	001c0015 	.word	0x001c0015
 8005b94:	000f000a 	.word	0x000f000a
 8005b98:	00060003 	.word	0x00060003
 8005b9c:	0024002a 	.word	0x0024002a
 8005ba0:	002e0030 	.word	0x002e0030
 8005ba4:	00030006 	.word	0x00030006
 8005ba8:	000a000f 	.word	0x000a000f
 8005bac:	0015001c 	.word	0x0015001c
 8005bb0:	20000000 	.word	0x20000000

08005bb4 <D80_GENERIC>:
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	b08b      	sub	sp, #44	; 0x2c
 8005bba:	6914      	ldr	r4, [r2, #16]
 8005bbc:	9405      	str	r4, [sp, #20]
 8005bbe:	6954      	ldr	r4, [r2, #20]
 8005bc0:	9406      	str	r4, [sp, #24]
 8005bc2:	6894      	ldr	r4, [r2, #8]
 8005bc4:	9401      	str	r4, [sp, #4]
 8005bc6:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005bc8:	68d4      	ldr	r4, [r2, #12]
 8005bca:	9402      	str	r4, [sp, #8]
 8005bcc:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8005bce:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8005bd2:	9407      	str	r4, [sp, #28]
 8005bd4:	9108      	str	r1, [sp, #32]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8111 	beq.w	8005dfe <D80_GENERIC+0x24a>
 8005bdc:	6a13      	ldr	r3, [r2, #32]
 8005bde:	9309      	str	r3, [sp, #36]	; 0x24
 8005be0:	2300      	movs	r3, #0
 8005be2:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8005e4c <D80_GENERIC+0x298>
 8005be6:	f8cd b00c 	str.w	fp, [sp, #12]
 8005bea:	4604      	mov	r4, r0
 8005bec:	9200      	str	r2, [sp, #0]
 8005bee:	9304      	str	r3, [sp, #16]
 8005bf0:	e0ee      	b.n	8005dd0 <D80_GENERIC+0x21c>
 8005bf2:	fa5f f888 	uxtb.w	r8, r8
 8005bf6:	fa0f f688 	sxth.w	r6, r8
 8005bfa:	0077      	lsls	r7, r6, #1
 8005bfc:	19b9      	adds	r1, r7, r6
 8005bfe:	f1c8 0500 	rsb	r5, r8, #0
 8005c02:	1860      	adds	r0, r4, r1
 8005c04:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8005c08:	1943      	adds	r3, r0, r5
 8005c0a:	5d40      	ldrb	r0, [r0, r5]
 8005c0c:	f814 b001 	ldrb.w	fp, [r4, r1]
 8005c10:	f814 8008 	ldrb.w	r8, [r4, r8]
 8005c14:	f894 a000 	ldrb.w	sl, [r4]
 8005c18:	eb03 0c06 	add.w	ip, r3, r6
 8005c1c:	eb0c 0e05 	add.w	lr, ip, r5
 8005c20:	0400      	lsls	r0, r0, #16
 8005c22:	f81c 1005 	ldrb.w	r1, [ip, r5]
 8005c26:	5d9b      	ldrb	r3, [r3, r6]
 8005c28:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8005c2c:	eb00 600b 	add.w	r0, r0, fp, lsl #24
 8005c30:	eb0e 0b45 	add.w	fp, lr, r5, lsl #1
 8005c34:	eb0b 0406 	add.w	r4, fp, r6
 8005c38:	0409      	lsls	r1, r1, #16
 8005c3a:	eb01 6303 	add.w	r3, r1, r3, lsl #24
 8005c3e:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8005c42:	5d61      	ldrb	r1, [r4, r5]
 8005c44:	f81b 6006 	ldrb.w	r6, [fp, r6]
 8005c48:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8005c4c:	442c      	add	r4, r5
 8005c4e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8005c52:	4450      	add	r0, sl
 8005c54:	443c      	add	r4, r7
 8005c56:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 8005c5a:	4473      	add	r3, lr
 8005c5c:	b2c6      	uxtb	r6, r0
 8005c5e:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8005c62:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005c66:	9a03      	ldr	r2, [sp, #12]
 8005c68:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005c6c:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8005c70:	0e00      	lsrs	r0, r0, #24
 8005c72:	443a      	add	r2, r7
 8005c74:	f859 e026 	ldr.w	lr, [r9, r6, lsl #2]
 8005c78:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8005c7c:	b2de      	uxtb	r6, r3
 8005c7e:	eb05 2092 	add.w	r0, r5, r2, lsr #10
 8005c82:	f3c3 2507 	ubfx	r5, r3, #8, #8
 8005c86:	eb0e 2a90 	add.w	sl, lr, r0, lsr #10
 8005c8a:	f859 8026 	ldr.w	r8, [r9, r6, lsl #2]
 8005c8e:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8005c92:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8005c96:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8005c9a:	0e1b      	lsrs	r3, r3, #24
 8005c9c:	eb08 2897 	add.w	r8, r8, r7, lsr #10
 8005ca0:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005ca4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005ca8:	fa5f fc81 	uxtb.w	ip, r1
 8005cac:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8005cb0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8005cb4:	eb06 2e95 	add.w	lr, r6, r5, lsr #10
 8005cb8:	f859 602c 	ldr.w	r6, [r9, ip, lsl #2]
 8005cbc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005cc0:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8005cc4:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8005cc8:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 8005ccc:	f3c2 0b09 	ubfx	fp, r2, #0, #10
 8005cd0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8005cd4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005cd8:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8005cdc:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005ce0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005ce4:	ea40 4b0b 	orr.w	fp, r0, fp, lsl #16
 8005ce8:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8005cec:	f3c1 0009 	ubfx	r0, r1, #0, #10
 8005cf0:	0a8b      	lsrs	r3, r1, #10
 8005cf2:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8005cf6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8005cfa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005cfe:	9303      	str	r3, [sp, #12]
 8005d00:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8005d04:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8005d08:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8005d0c:	4b43      	ldr	r3, [pc, #268]	; (8005e1c <D80_GENERIC+0x268>)
 8005d0e:	9a02      	ldr	r2, [sp, #8]
 8005d10:	fb2b 2303 	smlad	r3, fp, r3, r2
 8005d14:	4a42      	ldr	r2, [pc, #264]	; (8005e20 <D80_GENERIC+0x26c>)
 8005d16:	fb2a 3302 	smlad	r3, sl, r2, r3
 8005d1a:	4a42      	ldr	r2, [pc, #264]	; (8005e24 <D80_GENERIC+0x270>)
 8005d1c:	fb28 3302 	smlad	r3, r8, r2, r3
 8005d20:	4a41      	ldr	r2, [pc, #260]	; (8005e28 <D80_GENERIC+0x274>)
 8005d22:	fb2e 3302 	smlad	r3, lr, r2, r3
 8005d26:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8005d2a:	fb26 3301 	smlad	r3, r6, r1, r3
 8005d2e:	4a3f      	ldr	r2, [pc, #252]	; (8005e2c <D80_GENERIC+0x278>)
 8005d30:	9901      	ldr	r1, [sp, #4]
 8005d32:	fb2b 1002 	smlad	r0, fp, r2, r1
 8005d36:	4a3e      	ldr	r2, [pc, #248]	; (8005e30 <D80_GENERIC+0x27c>)
 8005d38:	fb2a 0002 	smlad	r0, sl, r2, r0
 8005d3c:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8005d40:	fb28 0101 	smlad	r1, r8, r1, r0
 8005d44:	4a3b      	ldr	r2, [pc, #236]	; (8005e34 <D80_GENERIC+0x280>)
 8005d46:	fb2e 1102 	smlad	r1, lr, r2, r1
 8005d4a:	4a3b      	ldr	r2, [pc, #236]	; (8005e38 <D80_GENERIC+0x284>)
 8005d4c:	fb26 1202 	smlad	r2, r6, r2, r1
 8005d50:	2001      	movs	r0, #1
 8005d52:	9202      	str	r2, [sp, #8]
 8005d54:	fb2b fb00 	smuad	fp, fp, r0
 8005d58:	4a38      	ldr	r2, [pc, #224]	; (8005e3c <D80_GENERIC+0x288>)
 8005d5a:	fb2a ba02 	smlad	sl, sl, r2, fp
 8005d5e:	4d38      	ldr	r5, [pc, #224]	; (8005e40 <D80_GENERIC+0x28c>)
 8005d60:	fb28 a805 	smlad	r8, r8, r5, sl
 8005d64:	4d37      	ldr	r5, [pc, #220]	; (8005e44 <D80_GENERIC+0x290>)
 8005d66:	fb2e 8e05 	smlad	lr, lr, r5, r8
 8005d6a:	4d37      	ldr	r5, [pc, #220]	; (8005e48 <D80_GENERIC+0x294>)
 8005d6c:	fb26 e205 	smlad	r2, r6, r5, lr
 8005d70:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d72:	9201      	str	r2, [sp, #4]
 8005d74:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 8005d78:	b191      	cbz	r1, 8005da0 <D80_GENERIC+0x1ec>
 8005d7a:	9a05      	ldr	r2, [sp, #20]
 8005d7c:	441a      	add	r2, r3
 8005d7e:	4610      	mov	r0, r2
 8005d80:	9a06      	ldr	r2, [sp, #24]
 8005d82:	9306      	str	r3, [sp, #24]
 8005d84:	1a80      	subs	r0, r0, r2
 8005d86:	17c7      	asrs	r7, r0, #31
 8005d88:	460a      	mov	r2, r1
 8005d8a:	fba0 0101 	umull	r0, r1, r0, r1
 8005d8e:	fb02 1107 	mla	r1, r2, r7, r1
 8005d92:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8005d96:	f141 0100 	adc.w	r1, r1, #0
 8005d9a:	004a      	lsls	r2, r1, #1
 8005d9c:	9205      	str	r2, [sp, #20]
 8005d9e:	4613      	mov	r3, r2
 8005da0:	9e00      	ldr	r6, [sp, #0]
 8005da2:	9f04      	ldr	r7, [sp, #16]
 8005da4:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 8005da6:	9a07      	ldr	r2, [sp, #28]
 8005da8:	025b      	lsls	r3, r3, #9
 8005daa:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005dae:	2100      	movs	r1, #0
 8005db0:	fbc2 0103 	smlal	r0, r1, r2, r3
 8005db4:	fb07 f505 	mul.w	r5, r7, r5
 8005db8:	9a08      	ldr	r2, [sp, #32]
 8005dba:	108b      	asrs	r3, r1, #2
 8005dbc:	f303 030f 	ssat	r3, #16, r3
 8005dc0:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
 8005dc4:	463a      	mov	r2, r7
 8005dc6:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 8005dc8:	3201      	adds	r2, #1
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	9204      	str	r2, [sp, #16]
 8005dce:	dd13      	ble.n	8005df8 <D80_GENERIC+0x244>
 8005dd0:	9b00      	ldr	r3, [sp, #0]
 8005dd2:	f8b3 802a 	ldrh.w	r8, [r3, #42]	; 0x2a
 8005dd6:	f1b8 0f01 	cmp.w	r8, #1
 8005dda:	f47f af0a 	bne.w	8005bf2 <D80_GENERIC+0x3e>
 8005dde:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8005de0:	68a1      	ldr	r1, [r4, #8]
 8005de2:	06aa      	lsls	r2, r5, #26
 8005de4:	e894 0009 	ldmia.w	r4, {r0, r3}
 8005de8:	f104 040a 	add.w	r4, r4, #10
 8005dec:	f57f af36 	bpl.w	8005c5c <D80_GENERIC+0xa8>
 8005df0:	ba40      	rev16	r0, r0
 8005df2:	ba5b      	rev16	r3, r3
 8005df4:	ba49      	rev16	r1, r1
 8005df6:	e731      	b.n	8005c5c <D80_GENERIC+0xa8>
 8005df8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8005dfc:	4632      	mov	r2, r6
 8005dfe:	9b01      	ldr	r3, [sp, #4]
 8005e00:	6093      	str	r3, [r2, #8]
 8005e02:	9b02      	ldr	r3, [sp, #8]
 8005e04:	60d3      	str	r3, [r2, #12]
 8005e06:	9b05      	ldr	r3, [sp, #20]
 8005e08:	6113      	str	r3, [r2, #16]
 8005e0a:	9b06      	ldr	r3, [sp, #24]
 8005e0c:	f8c2 b01c 	str.w	fp, [r2, #28]
 8005e10:	2000      	movs	r0, #0
 8005e12:	6153      	str	r3, [r2, #20]
 8005e14:	b00b      	add	sp, #44	; 0x2c
 8005e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e1a:	bf00      	nop
 8005e1c:	002d0024 	.word	0x002d0024
 8005e20:	001c0015 	.word	0x001c0015
 8005e24:	000f000a 	.word	0x000f000a
 8005e28:	00060003 	.word	0x00060003
 8005e2c:	0037003f 	.word	0x0037003f
 8005e30:	00450049 	.word	0x00450049
 8005e34:	00490045 	.word	0x00490045
 8005e38:	003f0037 	.word	0x003f0037
 8005e3c:	00030006 	.word	0x00030006
 8005e40:	000a000f 	.word	0x000a000f
 8005e44:	0015001c 	.word	0x0015001c
 8005e48:	0024002d 	.word	0x0024002d
 8005e4c:	20000000 	.word	0x20000000

08005e50 <D128_GENERIC>:
 8005e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e54:	b091      	sub	sp, #68	; 0x44
 8005e56:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8005e58:	9004      	str	r0, [sp, #16]
 8005e5a:	4610      	mov	r0, r2
 8005e5c:	9200      	str	r2, [sp, #0]
 8005e5e:	6912      	ldr	r2, [r2, #16]
 8005e60:	920b      	str	r2, [sp, #44]	; 0x2c
 8005e62:	4602      	mov	r2, r0
 8005e64:	6940      	ldr	r0, [r0, #20]
 8005e66:	900c      	str	r0, [sp, #48]	; 0x30
 8005e68:	4610      	mov	r0, r2
 8005e6a:	4614      	mov	r4, r2
 8005e6c:	69d2      	ldr	r2, [r2, #28]
 8005e6e:	9202      	str	r2, [sp, #8]
 8005e70:	6882      	ldr	r2, [r0, #8]
 8005e72:	9201      	str	r2, [sp, #4]
 8005e74:	68c0      	ldr	r0, [r0, #12]
 8005e76:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005e78:	9003      	str	r0, [sp, #12]
 8005e7a:	920d      	str	r2, [sp, #52]	; 0x34
 8005e7c:	910e      	str	r1, [sp, #56]	; 0x38
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	f000 819b 	beq.w	80061ba <D128_GENERIC+0x36a>
 8005e84:	6a23      	ldr	r3, [r4, #32]
 8005e86:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e88:	2300      	movs	r3, #0
 8005e8a:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8006230 <D128_GENERIC+0x3e0>
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	e179      	b.n	8006186 <D128_GENERIC+0x336>
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	9d04      	ldr	r5, [sp, #16]
 8005e96:	b210      	sxth	r0, r2
 8005e98:	eb00 0a40 	add.w	sl, r0, r0, lsl #1
 8005e9c:	4251      	negs	r1, r2
 8005e9e:	eb05 040a 	add.w	r4, r5, sl
 8005ea2:	0083      	lsls	r3, r0, #2
 8005ea4:	eb04 0801 	add.w	r8, r4, r1
 8005ea8:	eb03 0c00 	add.w	ip, r3, r0
 8005eac:	eb08 070c 	add.w	r7, r8, ip
 8005eb0:	9308      	str	r3, [sp, #32]
 8005eb2:	187b      	adds	r3, r7, r1
 8005eb4:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 8005eb8:	eb03 0e41 	add.w	lr, r3, r1, lsl #1
 8005ebc:	eb0e 0600 	add.w	r6, lr, r0
 8005ec0:	9306      	str	r3, [sp, #24]
 8005ec2:	1873      	adds	r3, r6, r1
 8005ec4:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8005ec8:	9304      	str	r3, [sp, #16]
 8005eca:	f818 a00c 	ldrb.w	sl, [r8, ip]
 8005ece:	9b06      	ldr	r3, [sp, #24]
 8005ed0:	f815 c002 	ldrb.w	ip, [r5, r2]
 8005ed4:	782d      	ldrb	r5, [r5, #0]
 8005ed6:	5c7a      	ldrb	r2, [r7, r1]
 8005ed8:	9507      	str	r5, [sp, #28]
 8005eda:	9d04      	ldr	r5, [sp, #16]
 8005edc:	f81e 8000 	ldrb.w	r8, [lr, r0]
 8005ee0:	f817 e011 	ldrb.w	lr, [r7, r1, lsl #1]
 8005ee4:	f813 7011 	ldrb.w	r7, [r3, r1, lsl #1]
 8005ee8:	5c64      	ldrb	r4, [r4, r1]
 8005eea:	5c73      	ldrb	r3, [r6, r1]
 8005eec:	9706      	str	r7, [sp, #24]
 8005eee:	0412      	lsls	r2, r2, #16
 8005ef0:	f816 7011 	ldrb.w	r7, [r6, r1, lsl #1]
 8005ef4:	eb05 0641 	add.w	r6, r5, r1, lsl #1
 8005ef8:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8005efc:	eb06 0a00 	add.w	sl, r6, r0
 8005f00:	0424      	lsls	r4, r4, #16
 8005f02:	eb04 640b 	add.w	r4, r4, fp, lsl #24
 8005f06:	f81a b001 	ldrb.w	fp, [sl, r1]
 8005f0a:	5c36      	ldrb	r6, [r6, r0]
 8005f0c:	f815 0011 	ldrb.w	r0, [r5, r1, lsl #1]
 8005f10:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8005f14:	eb0b 6606 	add.w	r6, fp, r6, lsl #24
 8005f18:	f81a b011 	ldrb.w	fp, [sl, r1, lsl #1]
 8005f1c:	eb0a 0501 	add.w	r5, sl, r1
 8005f20:	041b      	lsls	r3, r3, #16
 8005f22:	eb06 2b0b 	add.w	fp, r6, fp, lsl #8
 8005f26:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8005f2a:	9e08      	ldr	r6, [sp, #32]
 8005f2c:	f815 a011 	ldrb.w	sl, [r5, r1, lsl #1]
 8005f30:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8005f34:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 8005f38:	9f06      	ldr	r7, [sp, #24]
 8005f3a:	9d07      	ldr	r5, [sp, #28]
 8005f3c:	eb04 240c 	add.w	r4, r4, ip, lsl #8
 8005f40:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8005f44:	4431      	add	r1, r6
 8005f46:	442c      	add	r4, r5
 8005f48:	443a      	add	r2, r7
 8005f4a:	9104      	str	r1, [sp, #16]
 8005f4c:	44d3      	add	fp, sl
 8005f4e:	4418      	add	r0, r3
 8005f50:	b2e3      	uxtb	r3, r4
 8005f52:	f3c4 2107 	ubfx	r1, r4, #8, #8
 8005f56:	9e02      	ldr	r6, [sp, #8]
 8005f58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005f5c:	f859 5021 	ldr.w	r5, [r9, r1, lsl #2]
 8005f60:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8005f64:	0e24      	lsrs	r4, r4, #24
 8005f66:	441e      	add	r6, r3
 8005f68:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 8005f6c:	4633      	mov	r3, r6
 8005f6e:	b2d4      	uxtb	r4, r2
 8005f70:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8005f74:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 8005f78:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8005f7c:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8005f80:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8005f84:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8005f88:	0e12      	lsrs	r2, r2, #24
 8005f8a:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8005f8e:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005f92:	9602      	str	r6, [sp, #8]
 8005f94:	eb0e 2897 	add.w	r8, lr, r7, lsr #10
 8005f98:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8005f9c:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8005fa0:	9706      	str	r7, [sp, #24]
 8005fa2:	b2c2      	uxtb	r2, r0
 8005fa4:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8005fa8:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 8005fac:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8005fb0:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8005fb4:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8005fb8:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8005fbc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8005fc0:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8005fc4:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8005fc8:	0e00      	lsrs	r0, r0, #24
 8005fca:	fa5f f68b 	uxtb.w	r6, fp
 8005fce:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8005fd2:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8005fd6:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8005fda:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8005fde:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8005fe2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005fe6:	9308      	str	r3, [sp, #32]
 8005fe8:	eb06 2390 	add.w	r3, r6, r0, lsr #10
 8005fec:	461e      	mov	r6, r3
 8005fee:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8005ff2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005ff6:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005ffa:	9509      	str	r5, [sp, #36]	; 0x24
 8005ffc:	9607      	str	r6, [sp, #28]
 8005ffe:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006002:	f3cb 4507 	ubfx	r5, fp, #16, #8
 8006006:	9e02      	ldr	r6, [sp, #8]
 8006008:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 800600c:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
 8006010:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006014:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8006018:	9602      	str	r6, [sp, #8]
 800601a:	9e06      	ldr	r6, [sp, #24]
 800601c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006020:	eb0a 2b95 	add.w	fp, sl, r5, lsr #10
 8006024:	f3c6 0a09 	ubfx	sl, r6, #0, #10
 8006028:	f3cc 0609 	ubfx	r6, ip, #0, #10
 800602c:	9606      	str	r6, [sp, #24]
 800602e:	f3c2 0609 	ubfx	r6, r2, #0, #10
 8006032:	9a07      	ldr	r2, [sp, #28]
 8006034:	960a      	str	r6, [sp, #40]	; 0x28
 8006036:	f3c2 0609 	ubfx	r6, r2, #0, #10
 800603a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800603c:	4694      	mov	ip, r2
 800603e:	9a08      	ldr	r2, [sp, #32]
 8006040:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8006044:	9a02      	ldr	r2, [sp, #8]
 8006046:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 800604a:	9a06      	ldr	r2, [sp, #24]
 800604c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006050:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006056:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800605a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800605e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8006062:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006066:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800606a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800606e:	f3cb 0e09 	ubfx	lr, fp, #0, #10
 8006072:	ea4f 269b 	mov.w	r6, fp, lsr #10
 8006076:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800607a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800607e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006082:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006086:	9602      	str	r6, [sp, #8]
 8006088:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 800608c:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 8006090:	4e52      	ldr	r6, [pc, #328]	; (80061dc <D128_GENERIC+0x38c>)
 8006092:	9f03      	ldr	r7, [sp, #12]
 8006094:	fb2c 7606 	smlad	r6, ip, r6, r7
 8006098:	4f51      	ldr	r7, [pc, #324]	; (80061e0 <D128_GENERIC+0x390>)
 800609a:	fb2a 6607 	smlad	r6, sl, r7, r6
 800609e:	4f51      	ldr	r7, [pc, #324]	; (80061e4 <D128_GENERIC+0x394>)
 80060a0:	fb21 6607 	smlad	r6, r1, r7, r6
 80060a4:	4f50      	ldr	r7, [pc, #320]	; (80061e8 <D128_GENERIC+0x398>)
 80060a6:	fb24 6607 	smlad	r6, r4, r7, r6
 80060aa:	4f50      	ldr	r7, [pc, #320]	; (80061ec <D128_GENERIC+0x39c>)
 80060ac:	fb22 6607 	smlad	r6, r2, r7, r6
 80060b0:	4f4f      	ldr	r7, [pc, #316]	; (80061f0 <D128_GENERIC+0x3a0>)
 80060b2:	fb20 6607 	smlad	r6, r0, r7, r6
 80060b6:	4f4f      	ldr	r7, [pc, #316]	; (80061f4 <D128_GENERIC+0x3a4>)
 80060b8:	fb23 6607 	smlad	r6, r3, r7, r6
 80060bc:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80060c0:	fb25 6807 	smlad	r8, r5, r7, r6
 80060c4:	4f4c      	ldr	r7, [pc, #304]	; (80061f8 <D128_GENERIC+0x3a8>)
 80060c6:	9e01      	ldr	r6, [sp, #4]
 80060c8:	fb2c 6e07 	smlad	lr, ip, r7, r6
 80060cc:	4e4b      	ldr	r6, [pc, #300]	; (80061fc <D128_GENERIC+0x3ac>)
 80060ce:	fb2a ee06 	smlad	lr, sl, r6, lr
 80060d2:	4f4b      	ldr	r7, [pc, #300]	; (8006200 <D128_GENERIC+0x3b0>)
 80060d4:	fb21 ee07 	smlad	lr, r1, r7, lr
 80060d8:	4f4a      	ldr	r7, [pc, #296]	; (8006204 <D128_GENERIC+0x3b4>)
 80060da:	fb24 ee07 	smlad	lr, r4, r7, lr
 80060de:	4f4a      	ldr	r7, [pc, #296]	; (8006208 <D128_GENERIC+0x3b8>)
 80060e0:	fb22 ee07 	smlad	lr, r2, r7, lr
 80060e4:	4f49      	ldr	r7, [pc, #292]	; (800620c <D128_GENERIC+0x3bc>)
 80060e6:	fb20 ee07 	smlad	lr, r0, r7, lr
 80060ea:	4f49      	ldr	r7, [pc, #292]	; (8006210 <D128_GENERIC+0x3c0>)
 80060ec:	fb23 e707 	smlad	r7, r3, r7, lr
 80060f0:	f8df e140 	ldr.w	lr, [pc, #320]	; 8006234 <D128_GENERIC+0x3e4>
 80060f4:	fb25 760e 	smlad	r6, r5, lr, r7
 80060f8:	f04f 0b01 	mov.w	fp, #1
 80060fc:	9603      	str	r6, [sp, #12]
 80060fe:	fb2c fb0b 	smuad	fp, ip, fp
 8006102:	4f44      	ldr	r7, [pc, #272]	; (8006214 <D128_GENERIC+0x3c4>)
 8006104:	fb2a ba07 	smlad	sl, sl, r7, fp
 8006108:	4f43      	ldr	r7, [pc, #268]	; (8006218 <D128_GENERIC+0x3c8>)
 800610a:	fb21 aa07 	smlad	sl, r1, r7, sl
 800610e:	4f43      	ldr	r7, [pc, #268]	; (800621c <D128_GENERIC+0x3cc>)
 8006110:	fb24 aa07 	smlad	sl, r4, r7, sl
 8006114:	4f42      	ldr	r7, [pc, #264]	; (8006220 <D128_GENERIC+0x3d0>)
 8006116:	fb22 aa07 	smlad	sl, r2, r7, sl
 800611a:	4f42      	ldr	r7, [pc, #264]	; (8006224 <D128_GENERIC+0x3d4>)
 800611c:	fb20 a707 	smlad	r7, r0, r7, sl
 8006120:	4841      	ldr	r0, [pc, #260]	; (8006228 <D128_GENERIC+0x3d8>)
 8006122:	fb23 7700 	smlad	r7, r3, r0, r7
 8006126:	4b41      	ldr	r3, [pc, #260]	; (800622c <D128_GENERIC+0x3dc>)
 8006128:	fb25 7303 	smlad	r3, r5, r3, r7
 800612c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800612e:	9301      	str	r3, [sp, #4]
 8006130:	f5a8 1680 	sub.w	r6, r8, #1048576	; 0x100000
 8006134:	b185      	cbz	r5, 8006158 <D128_GENERIC+0x308>
 8006136:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006138:	990c      	ldr	r1, [sp, #48]	; 0x30
 800613a:	960c      	str	r6, [sp, #48]	; 0x30
 800613c:	4432      	add	r2, r6
 800613e:	1a52      	subs	r2, r2, r1
 8006140:	17d1      	asrs	r1, r2, #31
 8006142:	fba2 2305 	umull	r2, r3, r2, r5
 8006146:	fb05 3301 	mla	r3, r5, r1, r3
 800614a:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 800614e:	f143 0300 	adc.w	r3, r3, #0
 8006152:	005b      	lsls	r3, r3, #1
 8006154:	930b      	str	r3, [sp, #44]	; 0x2c
 8006156:	461e      	mov	r6, r3
 8006158:	9800      	ldr	r0, [sp, #0]
 800615a:	9c05      	ldr	r4, [sp, #20]
 800615c:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 800615e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006160:	01f6      	lsls	r6, r6, #7
 8006162:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006166:	2300      	movs	r3, #0
 8006168:	fbc5 2306 	smlal	r2, r3, r5, r6
 800616c:	fb04 f101 	mul.w	r1, r4, r1
 8006170:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006172:	109b      	asrs	r3, r3, #2
 8006174:	f303 030f 	ssat	r3, #16, r3
 8006178:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 800617c:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 800617e:	1c62      	adds	r2, r4, #1
 8006180:	4293      	cmp	r3, r2
 8006182:	9205      	str	r2, [sp, #20]
 8006184:	dd19      	ble.n	80061ba <D128_GENERIC+0x36a>
 8006186:	9b00      	ldr	r3, [sp, #0]
 8006188:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800618a:	2a01      	cmp	r2, #1
 800618c:	f47f ae81 	bne.w	8005e92 <D128_GENERIC+0x42>
 8006190:	9804      	ldr	r0, [sp, #16]
 8006192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006194:	6804      	ldr	r4, [r0, #0]
 8006196:	6842      	ldr	r2, [r0, #4]
 8006198:	4601      	mov	r1, r0
 800619a:	069b      	lsls	r3, r3, #26
 800619c:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80061a0:	6880      	ldr	r0, [r0, #8]
 80061a2:	f101 0110 	add.w	r1, r1, #16
 80061a6:	d506      	bpl.n	80061b6 <D128_GENERIC+0x366>
 80061a8:	ba64      	rev16	r4, r4
 80061aa:	ba52      	rev16	r2, r2
 80061ac:	ba40      	rev16	r0, r0
 80061ae:	fa9b fb9b 	rev16.w	fp, fp
 80061b2:	9104      	str	r1, [sp, #16]
 80061b4:	e6cc      	b.n	8005f50 <D128_GENERIC+0x100>
 80061b6:	9104      	str	r1, [sp, #16]
 80061b8:	e6ca      	b.n	8005f50 <D128_GENERIC+0x100>
 80061ba:	9a00      	ldr	r2, [sp, #0]
 80061bc:	9901      	ldr	r1, [sp, #4]
 80061be:	6091      	str	r1, [r2, #8]
 80061c0:	9903      	ldr	r1, [sp, #12]
 80061c2:	60d1      	str	r1, [r2, #12]
 80061c4:	9b02      	ldr	r3, [sp, #8]
 80061c6:	61d3      	str	r3, [r2, #28]
 80061c8:	4611      	mov	r1, r2
 80061ca:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061cc:	610a      	str	r2, [r1, #16]
 80061ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80061d0:	614a      	str	r2, [r1, #20]
 80061d2:	2000      	movs	r0, #0
 80061d4:	b011      	add	sp, #68	; 0x44
 80061d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061da:	bf00      	nop
 80061dc:	00780069 	.word	0x00780069
 80061e0:	005b004e 	.word	0x005b004e
 80061e4:	00420037 	.word	0x00420037
 80061e8:	002d0024 	.word	0x002d0024
 80061ec:	001c0015 	.word	0x001c0015
 80061f0:	000f000a 	.word	0x000f000a
 80061f4:	00060003 	.word	0x00060003
 80061f8:	00880096 	.word	0x00880096
 80061fc:	00a200ac 	.word	0x00a200ac
 8006200:	00b400ba 	.word	0x00b400ba
 8006204:	00be00c0 	.word	0x00be00c0
 8006208:	00c000be 	.word	0x00c000be
 800620c:	00ba00b4 	.word	0x00ba00b4
 8006210:	00ac00a2 	.word	0x00ac00a2
 8006214:	00030006 	.word	0x00030006
 8006218:	000a000f 	.word	0x000a000f
 800621c:	0015001c 	.word	0x0015001c
 8006220:	0024002d 	.word	0x0024002d
 8006224:	00370042 	.word	0x00370042
 8006228:	004e005b 	.word	0x004e005b
 800622c:	00690078 	.word	0x00690078
 8006230:	20000000 	.word	0x20000000
 8006234:	00960088 	.word	0x00960088

08006238 <D16_1CH_HTONS_VOL_HP>:
 8006238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800623c:	4692      	mov	sl, r2
 800623e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006240:	f8da 5010 	ldr.w	r5, [sl, #16]
 8006244:	f8da 4014 	ldr.w	r4, [sl, #20]
 8006248:	f8da 301c 	ldr.w	r3, [sl, #28]
 800624c:	f8da 6008 	ldr.w	r6, [sl, #8]
 8006250:	f8da c030 	ldr.w	ip, [sl, #48]	; 0x30
 8006254:	f8da 7020 	ldr.w	r7, [sl, #32]
 8006258:	b083      	sub	sp, #12
 800625a:	2a00      	cmp	r2, #0
 800625c:	d04e      	beq.n	80062fc <D16_1CH_HTONS_VOL_HP+0xc4>
 800625e:	3902      	subs	r1, #2
 8006260:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 8006308 <D16_1CH_HTONS_VOL_HP+0xd0>
 8006264:	9101      	str	r1, [sp, #4]
 8006266:	eb00 0b42 	add.w	fp, r0, r2, lsl #1
 800626a:	f850 2b02 	ldr.w	r2, [r0], #2
 800626e:	ba52      	rev16	r2, r2
 8006270:	fa5f f982 	uxtb.w	r9, r2
 8006274:	f3c2 2807 	ubfx	r8, r2, #8, #8
 8006278:	f85e 2029 	ldr.w	r2, [lr, r9, lsl #2]
 800627c:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8006280:	491f      	ldr	r1, [pc, #124]	; (8006300 <D16_1CH_HTONS_VOL_HP+0xc8>)
 8006282:	441a      	add	r2, r3
 8006284:	eb08 2392 	add.w	r3, r8, r2, lsr #10
 8006288:	f3c3 0809 	ubfx	r8, r3, #0, #10
 800628c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006290:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8006294:	0a9b      	lsrs	r3, r3, #10
 8006296:	fb22 6801 	smlad	r8, r2, r1, r6
 800629a:	491a      	ldr	r1, [pc, #104]	; (8006304 <D16_1CH_HTONS_VOL_HP+0xcc>)
 800629c:	fb22 f601 	smuad	r6, r2, r1
 80062a0:	f5a8 6200 	sub.w	r2, r8, #2048	; 0x800
 80062a4:	4415      	add	r5, r2
 80062a6:	1b2c      	subs	r4, r5, r4
 80062a8:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80062ac:	fba4 4507 	umull	r4, r5, r4, r7
 80062b0:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80062b4:	fb07 5509 	mla	r5, r7, r9, r5
 80062b8:	f145 0500 	adc.w	r5, r5, #0
 80062bc:	046c      	lsls	r4, r5, #17
 80062be:	9901      	ldr	r1, [sp, #4]
 80062c0:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80062c4:	f04f 0900 	mov.w	r9, #0
 80062c8:	fbc4 890c 	smlal	r8, r9, r4, ip
 80062cc:	ea4f 08a9 	mov.w	r8, r9, asr #2
 80062d0:	f308 080f 	ssat	r8, #16, r8
 80062d4:	f821 8f02 	strh.w	r8, [r1, #2]!
 80062d8:	4558      	cmp	r0, fp
 80062da:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80062de:	4614      	mov	r4, r2
 80062e0:	9101      	str	r1, [sp, #4]
 80062e2:	d1c2      	bne.n	800626a <D16_1CH_HTONS_VOL_HP+0x32>
 80062e4:	2000      	movs	r0, #0
 80062e6:	f8ca 6008 	str.w	r6, [sl, #8]
 80062ea:	f8ca 301c 	str.w	r3, [sl, #28]
 80062ee:	f8ca 5010 	str.w	r5, [sl, #16]
 80062f2:	f8ca 2014 	str.w	r2, [sl, #20]
 80062f6:	b003      	add	sp, #12
 80062f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062fc:	4622      	mov	r2, r4
 80062fe:	e7f1      	b.n	80062e4 <D16_1CH_HTONS_VOL_HP+0xac>
 8006300:	00030001 	.word	0x00030001
 8006304:	00010003 	.word	0x00010003
 8006308:	20000000 	.word	0x20000000

0800630c <D24_1CH_HTONS_VOL_HP>:
 800630c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006310:	b087      	sub	sp, #28
 8006312:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006314:	9303      	str	r3, [sp, #12]
 8006316:	4617      	mov	r7, r2
 8006318:	9205      	str	r2, [sp, #20]
 800631a:	6915      	ldr	r5, [r2, #16]
 800631c:	6954      	ldr	r4, [r2, #20]
 800631e:	69d6      	ldr	r6, [r2, #28]
 8006320:	6893      	ldr	r3, [r2, #8]
 8006322:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8006326:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006328:	9204      	str	r2, [sp, #16]
 800632a:	9a03      	ldr	r2, [sp, #12]
 800632c:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8006330:	2a00      	cmp	r2, #0
 8006332:	d07c      	beq.n	800642e <D24_1CH_HTONS_VOL_HP+0x122>
 8006334:	f1a1 0b02 	sub.w	fp, r1, #2
 8006338:	2700      	movs	r7, #0
 800633a:	46a8      	mov	r8, r5
 800633c:	f8cd b008 	str.w	fp, [sp, #8]
 8006340:	4655      	mov	r5, sl
 8006342:	46e3      	mov	fp, ip
 8006344:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 800643c <D24_1CH_HTONS_VOL_HP+0x130>
 8006348:	46ba      	mov	sl, r7
 800634a:	469c      	mov	ip, r3
 800634c:	e055      	b.n	80063fa <D24_1CH_HTONS_VOL_HP+0xee>
 800634e:	7802      	ldrb	r2, [r0, #0]
 8006350:	78c3      	ldrb	r3, [r0, #3]
 8006352:	7841      	ldrb	r1, [r0, #1]
 8006354:	0212      	lsls	r2, r2, #8
 8006356:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800635a:	440b      	add	r3, r1
 800635c:	3002      	adds	r0, #2
 800635e:	b2d9      	uxtb	r1, r3
 8006360:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006364:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 8006368:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800636c:	0c1b      	lsrs	r3, r3, #16
 800636e:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8006372:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8006376:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800637a:	f3c7 0309 	ubfx	r3, r7, #0, #10
 800637e:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006382:	eb01 2692 	add.w	r6, r1, r2, lsr #10
 8006386:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800638a:	4a2a      	ldr	r2, [pc, #168]	; (8006434 <D24_1CH_HTONS_VOL_HP+0x128>)
 800638c:	fb23 b102 	smlad	r1, r3, r2, fp
 8006390:	4a29      	ldr	r2, [pc, #164]	; (8006438 <D24_1CH_HTONS_VOL_HP+0x12c>)
 8006392:	fb23 cb02 	smlad	fp, r3, r2, ip
 8006396:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 800639a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 800639e:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80063a2:	2201      	movs	r2, #1
 80063a4:	fb23 f702 	smuad	r7, r3, r2
 80063a8:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80063ac:	eb01 0208 	add.w	r2, r1, r8
 80063b0:	1b12      	subs	r2, r2, r4
 80063b2:	17d4      	asrs	r4, r2, #31
 80063b4:	fba2 2305 	umull	r2, r3, r2, r5
 80063b8:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80063bc:	fb05 3304 	mla	r3, r5, r4, r3
 80063c0:	f143 0300 	adc.w	r3, r3, #0
 80063c4:	9c04      	ldr	r4, [sp, #16]
 80063c6:	03da      	lsls	r2, r3, #15
 80063c8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80063cc:	f04f 0900 	mov.w	r9, #0
 80063d0:	fbc4 8902 	smlal	r8, r9, r4, r2
 80063d4:	e9cd 8900 	strd	r8, r9, [sp]
 80063d8:	9a02      	ldr	r2, [sp, #8]
 80063da:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80063de:	9b01      	ldr	r3, [sp, #4]
 80063e0:	109b      	asrs	r3, r3, #2
 80063e2:	f303 030f 	ssat	r3, #16, r3
 80063e6:	f822 3f02 	strh.w	r3, [r2, #2]!
 80063ea:	9b03      	ldr	r3, [sp, #12]
 80063ec:	9202      	str	r2, [sp, #8]
 80063ee:	f10a 0a01 	add.w	sl, sl, #1
 80063f2:	459a      	cmp	sl, r3
 80063f4:	44bc      	add	ip, r7
 80063f6:	d00c      	beq.n	8006412 <D24_1CH_HTONS_VOL_HP+0x106>
 80063f8:	460c      	mov	r4, r1
 80063fa:	f01a 0f01 	tst.w	sl, #1
 80063fe:	d0a6      	beq.n	800634e <D24_1CH_HTONS_VOL_HP+0x42>
 8006400:	78c2      	ldrb	r2, [r0, #3]
 8006402:	7883      	ldrb	r3, [r0, #2]
 8006404:	f810 1b04 	ldrb.w	r1, [r0], #4
 8006408:	0212      	lsls	r2, r2, #8
 800640a:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800640e:	440b      	add	r3, r1
 8006410:	e7a5      	b.n	800635e <D24_1CH_HTONS_VOL_HP+0x52>
 8006412:	9805      	ldr	r0, [sp, #20]
 8006414:	4663      	mov	r3, ip
 8006416:	4645      	mov	r5, r8
 8006418:	46dc      	mov	ip, fp
 800641a:	6083      	str	r3, [r0, #8]
 800641c:	f8c0 c00c 	str.w	ip, [r0, #12]
 8006420:	61c6      	str	r6, [r0, #28]
 8006422:	6105      	str	r5, [r0, #16]
 8006424:	6141      	str	r1, [r0, #20]
 8006426:	2000      	movs	r0, #0
 8006428:	b007      	add	sp, #28
 800642a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642e:	4621      	mov	r1, r4
 8006430:	4638      	mov	r0, r7
 8006432:	e7f2      	b.n	800641a <D24_1CH_HTONS_VOL_HP+0x10e>
 8006434:	00030001 	.word	0x00030001
 8006438:	00060007 	.word	0x00060007
 800643c:	20000000 	.word	0x20000000

08006440 <D32_1CH_HTONS_VOL_HP>:
 8006440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006444:	4691      	mov	r9, r2
 8006446:	b085      	sub	sp, #20
 8006448:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800644a:	f8d9 6010 	ldr.w	r6, [r9, #16]
 800644e:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8006452:	f8d9 401c 	ldr.w	r4, [r9, #28]
 8006456:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800645a:	f8d9 500c 	ldr.w	r5, [r9, #12]
 800645e:	f8d9 8020 	ldr.w	r8, [r9, #32]
 8006462:	4682      	mov	sl, r0
 8006464:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 8006468:	9002      	str	r0, [sp, #8]
 800646a:	2a00      	cmp	r2, #0
 800646c:	d073      	beq.n	8006556 <D32_1CH_HTONS_VOL_HP+0x116>
 800646e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8006472:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 800656c <D32_1CH_HTONS_VOL_HP+0x12c>
 8006476:	f8cd 900c 	str.w	r9, [sp, #12]
 800647a:	468c      	mov	ip, r1
 800647c:	f8cd a004 	str.w	sl, [sp, #4]
 8006480:	4691      	mov	r9, r2
 8006482:	9a01      	ldr	r2, [sp, #4]
 8006484:	f852 1b04 	ldr.w	r1, [r2], #4
 8006488:	9201      	str	r2, [sp, #4]
 800648a:	ba49      	rev16	r1, r1
 800648c:	b2c8      	uxtb	r0, r1
 800648e:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8006492:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 8006496:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 800649a:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 800649e:	0e09      	lsrs	r1, r1, #24
 80064a0:	eb00 2094 	add.w	r0, r0, r4, lsr #10
 80064a4:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 80064a8:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80064ac:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80064b0:	eb04 2b92 	add.w	fp, r4, r2, lsr #10
 80064b4:	eb01 249b 	add.w	r4, r1, fp, lsr #10
 80064b8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80064bc:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80064c0:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80064c4:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80064c8:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80064cc:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80064d0:	4a22      	ldr	r2, [pc, #136]	; (800655c <D32_1CH_HTONS_VOL_HP+0x11c>)
 80064d2:	fb20 5202 	smlad	r2, r0, r2, r5
 80064d6:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80064da:	fb2b 2101 	smlad	r1, fp, r1, r2
 80064de:	4a20      	ldr	r2, [pc, #128]	; (8006560 <D32_1CH_HTONS_VOL_HP+0x120>)
 80064e0:	fb20 3502 	smlad	r5, r0, r2, r3
 80064e4:	4b1f      	ldr	r3, [pc, #124]	; (8006564 <D32_1CH_HTONS_VOL_HP+0x124>)
 80064e6:	fb2b 5503 	smlad	r5, fp, r3, r5
 80064ea:	2301      	movs	r3, #1
 80064ec:	fb20 f003 	smuad	r0, r0, r3
 80064f0:	4b1d      	ldr	r3, [pc, #116]	; (8006568 <D32_1CH_HTONS_VOL_HP+0x128>)
 80064f2:	fb2b 0303 	smlad	r3, fp, r3, r0
 80064f6:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 80064fa:	1990      	adds	r0, r2, r6
 80064fc:	1bc0      	subs	r0, r0, r7
 80064fe:	17c7      	asrs	r7, r0, #31
 8006500:	fba0 0108 	umull	r0, r1, r0, r8
 8006504:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006508:	fb08 1107 	mla	r1, r8, r7, r1
 800650c:	f141 0100 	adc.w	r1, r1, #0
 8006510:	9f02      	ldr	r7, [sp, #8]
 8006512:	0388      	lsls	r0, r1, #14
 8006514:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 8006518:	f04f 0b00 	mov.w	fp, #0
 800651c:	fbc0 ab07 	smlal	sl, fp, r0, r7
 8006520:	465f      	mov	r7, fp
 8006522:	10b8      	asrs	r0, r7, #2
 8006524:	f300 000f 	ssat	r0, #16, r0
 8006528:	f82c 0b02 	strh.w	r0, [ip], #2
 800652c:	45cc      	cmp	ip, r9
 800652e:	ea4f 0641 	mov.w	r6, r1, lsl #1
 8006532:	4617      	mov	r7, r2
 8006534:	d1a5      	bne.n	8006482 <D32_1CH_HTONS_VOL_HP+0x42>
 8006536:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800653a:	f8c9 3008 	str.w	r3, [r9, #8]
 800653e:	2000      	movs	r0, #0
 8006540:	f8c9 500c 	str.w	r5, [r9, #12]
 8006544:	f8c9 401c 	str.w	r4, [r9, #28]
 8006548:	f8c9 6010 	str.w	r6, [r9, #16]
 800654c:	f8c9 2014 	str.w	r2, [r9, #20]
 8006550:	b005      	add	sp, #20
 8006552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006556:	463a      	mov	r2, r7
 8006558:	e7ef      	b.n	800653a <D32_1CH_HTONS_VOL_HP+0xfa>
 800655a:	bf00      	nop
 800655c:	00060003 	.word	0x00060003
 8006560:	000a000c 	.word	0x000a000c
 8006564:	000c000a 	.word	0x000c000a
 8006568:	00030006 	.word	0x00030006
 800656c:	20000000 	.word	0x20000000

08006570 <D48_1CH_HTONS_VOL_HP>:
 8006570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006574:	4613      	mov	r3, r2
 8006576:	b085      	sub	sp, #20
 8006578:	461d      	mov	r5, r3
 800657a:	461c      	mov	r4, r3
 800657c:	9203      	str	r2, [sp, #12]
 800657e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8006580:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006582:	6a2d      	ldr	r5, [r5, #32]
 8006584:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8006588:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 800658c:	68e4      	ldr	r4, [r4, #12]
 800658e:	9600      	str	r6, [sp, #0]
 8006590:	4680      	mov	r8, r0
 8006592:	9501      	str	r5, [sp, #4]
 8006594:	6918      	ldr	r0, [r3, #16]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	2a00      	cmp	r2, #0
 800659a:	f000 808a 	beq.w	80066b2 <D48_1CH_HTONS_VOL_HP+0x142>
 800659e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80065a2:	4d45      	ldr	r5, [pc, #276]	; (80066b8 <D48_1CH_HTONS_VOL_HP+0x148>)
 80065a4:	9202      	str	r2, [sp, #8]
 80065a6:	468c      	mov	ip, r1
 80065a8:	e898 0044 	ldmia.w	r8, {r2, r6}
 80065ac:	f108 0806 	add.w	r8, r8, #6
 80065b0:	ba52      	rev16	r2, r2
 80065b2:	ba76      	rev16	r6, r6
 80065b4:	b2d7      	uxtb	r7, r2
 80065b6:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80065ba:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80065be:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80065c2:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80065c6:	0e12      	lsrs	r2, r2, #24
 80065c8:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80065cc:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80065d0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80065d4:	fa5f fb86 	uxtb.w	fp, r6
 80065d8:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80065dc:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80065e0:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80065e4:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80065e8:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 80065ec:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80065f0:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80065f4:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80065f8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80065fc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006600:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8006604:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8006608:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800660c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006610:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8006614:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8006618:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 800661c:	4a27      	ldr	r2, [pc, #156]	; (80066bc <D48_1CH_HTONS_VOL_HP+0x14c>)
 800661e:	fb2a 4202 	smlad	r2, sl, r2, r4
 8006622:	4927      	ldr	r1, [pc, #156]	; (80066c0 <D48_1CH_HTONS_VOL_HP+0x150>)
 8006624:	fb27 2201 	smlad	r2, r7, r1, r2
 8006628:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800662c:	fb26 2201 	smlad	r2, r6, r1, r2
 8006630:	4924      	ldr	r1, [pc, #144]	; (80066c4 <D48_1CH_HTONS_VOL_HP+0x154>)
 8006632:	fb2a 3401 	smlad	r4, sl, r1, r3
 8006636:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 800663a:	fb27 4403 	smlad	r4, r7, r3, r4
 800663e:	4b22      	ldr	r3, [pc, #136]	; (80066c8 <D48_1CH_HTONS_VOL_HP+0x158>)
 8006640:	fb26 4403 	smlad	r4, r6, r3, r4
 8006644:	2101      	movs	r1, #1
 8006646:	fb2a fa01 	smuad	sl, sl, r1
 800664a:	4b20      	ldr	r3, [pc, #128]	; (80066cc <D48_1CH_HTONS_VOL_HP+0x15c>)
 800664c:	fb27 a703 	smlad	r7, r7, r3, sl
 8006650:	4b1f      	ldr	r3, [pc, #124]	; (80066d0 <D48_1CH_HTONS_VOL_HP+0x160>)
 8006652:	fb26 7303 	smlad	r3, r6, r3, r7
 8006656:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 800665a:	9e01      	ldr	r6, [sp, #4]
 800665c:	9f00      	ldr	r7, [sp, #0]
 800665e:	4410      	add	r0, r2
 8006660:	ebc9 0000 	rsb	r0, r9, r0
 8006664:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8006668:	fba0 0106 	umull	r0, r1, r0, r6
 800666c:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8006670:	fb06 110a 	mla	r1, r6, sl, r1
 8006674:	f141 0100 	adc.w	r1, r1, #0
 8006678:	0308      	lsls	r0, r1, #12
 800667a:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 800667e:	f04f 0a00 	mov.w	sl, #0
 8006682:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8006686:	4657      	mov	r7, sl
 8006688:	10b8      	asrs	r0, r7, #2
 800668a:	f300 000f 	ssat	r0, #16, r0
 800668e:	f82c 0b02 	strh.w	r0, [ip], #2
 8006692:	0048      	lsls	r0, r1, #1
 8006694:	9902      	ldr	r1, [sp, #8]
 8006696:	458c      	cmp	ip, r1
 8006698:	4691      	mov	r9, r2
 800669a:	d185      	bne.n	80065a8 <D48_1CH_HTONS_VOL_HP+0x38>
 800669c:	9d03      	ldr	r5, [sp, #12]
 800669e:	6128      	str	r0, [r5, #16]
 80066a0:	2000      	movs	r0, #0
 80066a2:	60ab      	str	r3, [r5, #8]
 80066a4:	60ec      	str	r4, [r5, #12]
 80066a6:	f8c5 e01c 	str.w	lr, [r5, #28]
 80066aa:	616a      	str	r2, [r5, #20]
 80066ac:	b005      	add	sp, #20
 80066ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066b2:	464a      	mov	r2, r9
 80066b4:	e7f2      	b.n	800669c <D48_1CH_HTONS_VOL_HP+0x12c>
 80066b6:	bf00      	nop
 80066b8:	20000000 	.word	0x20000000
 80066bc:	000f000a 	.word	0x000f000a
 80066c0:	00060003 	.word	0x00060003
 80066c4:	00150019 	.word	0x00150019
 80066c8:	00190015 	.word	0x00190015
 80066cc:	00030006 	.word	0x00030006
 80066d0:	000a000f 	.word	0x000a000f

080066d4 <D64_1CH_HTONS_VOL_HP>:
 80066d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d8:	b087      	sub	sp, #28
 80066da:	4684      	mov	ip, r0
 80066dc:	4610      	mov	r0, r2
 80066de:	9205      	str	r2, [sp, #20]
 80066e0:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 80066e2:	6912      	ldr	r2, [r2, #16]
 80066e4:	9200      	str	r2, [sp, #0]
 80066e6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80066e8:	9202      	str	r2, [sp, #8]
 80066ea:	6a02      	ldr	r2, [r0, #32]
 80066ec:	f8d0 8014 	ldr.w	r8, [r0, #20]
 80066f0:	69c4      	ldr	r4, [r0, #28]
 80066f2:	6887      	ldr	r7, [r0, #8]
 80066f4:	68c5      	ldr	r5, [r0, #12]
 80066f6:	9203      	str	r2, [sp, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 80aa 	beq.w	8006852 <D64_1CH_HTONS_VOL_HP+0x17e>
 80066fe:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006702:	4e55      	ldr	r6, [pc, #340]	; (8006858 <D64_1CH_HTONS_VOL_HP+0x184>)
 8006704:	9304      	str	r3, [sp, #16]
 8006706:	9101      	str	r1, [sp, #4]
 8006708:	f85c 2b08 	ldr.w	r2, [ip], #8
 800670c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8006710:	ba52      	rev16	r2, r2
 8006712:	fa93 f993 	rev16.w	r9, r3
 8006716:	b2d0      	uxtb	r0, r2
 8006718:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800671c:	f856 b020 	ldr.w	fp, [r6, r0, lsl #2]
 8006720:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8006724:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006728:	0e12      	lsrs	r2, r2, #24
 800672a:	44a3      	add	fp, r4
 800672c:	f856 4020 	ldr.w	r4, [r6, r0, lsl #2]
 8006730:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8006734:	fa5f f289 	uxtb.w	r2, r9
 8006738:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 800673c:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8006740:	eb04 2a9e 	add.w	sl, r4, lr, lsr #10
 8006744:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8006748:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 800674c:	f3c9 4407 	ubfx	r4, r9, #16, #8
 8006750:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8006754:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8006758:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 800675c:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8006760:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8006764:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8006768:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800676c:	eb09 2994 	add.w	r9, r9, r4, lsr #10
 8006770:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006774:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8006778:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800677c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006780:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006784:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8006788:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800678c:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8006790:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006794:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8006798:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 800679c:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 80067a0:	ea4f 2499 	mov.w	r4, r9, lsr #10
 80067a4:	4b2d      	ldr	r3, [pc, #180]	; (800685c <D64_1CH_HTONS_VOL_HP+0x188>)
 80067a6:	fb2b 5503 	smlad	r5, fp, r3, r5
 80067aa:	4b2d      	ldr	r3, [pc, #180]	; (8006860 <D64_1CH_HTONS_VOL_HP+0x18c>)
 80067ac:	fb2a 5503 	smlad	r5, sl, r3, r5
 80067b0:	4b2c      	ldr	r3, [pc, #176]	; (8006864 <D64_1CH_HTONS_VOL_HP+0x190>)
 80067b2:	fb22 5503 	smlad	r5, r2, r3, r5
 80067b6:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 80067ba:	fb2e 5900 	smlad	r9, lr, r0, r5
 80067be:	4b2a      	ldr	r3, [pc, #168]	; (8006868 <D64_1CH_HTONS_VOL_HP+0x194>)
 80067c0:	fb2b 7503 	smlad	r5, fp, r3, r7
 80067c4:	fb2e 5513 	smladx	r5, lr, r3, r5
 80067c8:	4b28      	ldr	r3, [pc, #160]	; (800686c <D64_1CH_HTONS_VOL_HP+0x198>)
 80067ca:	fb2a 5503 	smlad	r5, sl, r3, r5
 80067ce:	fb22 5513 	smladx	r5, r2, r3, r5
 80067d2:	2001      	movs	r0, #1
 80067d4:	fb2b fb00 	smuad	fp, fp, r0
 80067d8:	4b25      	ldr	r3, [pc, #148]	; (8006870 <D64_1CH_HTONS_VOL_HP+0x19c>)
 80067da:	fb2a ba03 	smlad	sl, sl, r3, fp
 80067de:	4b25      	ldr	r3, [pc, #148]	; (8006874 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80067e0:	fb22 a203 	smlad	r2, r2, r3, sl
 80067e4:	4b24      	ldr	r3, [pc, #144]	; (8006878 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80067e6:	fb2e 2703 	smlad	r7, lr, r3, r2
 80067ea:	9b00      	ldr	r3, [sp, #0]
 80067ec:	9903      	ldr	r1, [sp, #12]
 80067ee:	f5a9 3000 	sub.w	r0, r9, #131072	; 0x20000
 80067f2:	4403      	add	r3, r0
 80067f4:	ebc8 0203 	rsb	r2, r8, r3
 80067f8:	ea4f 7be2 	mov.w	fp, r2, asr #31
 80067fc:	fba2 2301 	umull	r2, r3, r2, r1
 8006800:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006804:	fb01 330b 	mla	r3, r1, fp, r3
 8006808:	f143 0300 	adc.w	r3, r3, #0
 800680c:	9902      	ldr	r1, [sp, #8]
 800680e:	02da      	lsls	r2, r3, #11
 8006810:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8006814:	f04f 0900 	mov.w	r9, #0
 8006818:	fbc1 8902 	smlal	r8, r9, r1, r2
 800681c:	9901      	ldr	r1, [sp, #4]
 800681e:	005b      	lsls	r3, r3, #1
 8006820:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	f302 020f 	ssat	r2, #16, r2
 800682a:	9b04      	ldr	r3, [sp, #16]
 800682c:	f821 2b02 	strh.w	r2, [r1], #2
 8006830:	4299      	cmp	r1, r3
 8006832:	9101      	str	r1, [sp, #4]
 8006834:	4680      	mov	r8, r0
 8006836:	f47f af67 	bne.w	8006708 <D64_1CH_HTONS_VOL_HP+0x34>
 800683a:	9a05      	ldr	r2, [sp, #20]
 800683c:	4613      	mov	r3, r2
 800683e:	6097      	str	r7, [r2, #8]
 8006840:	60d5      	str	r5, [r2, #12]
 8006842:	61d4      	str	r4, [r2, #28]
 8006844:	9a00      	ldr	r2, [sp, #0]
 8006846:	6158      	str	r0, [r3, #20]
 8006848:	2000      	movs	r0, #0
 800684a:	611a      	str	r2, [r3, #16]
 800684c:	b007      	add	sp, #28
 800684e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006852:	4640      	mov	r0, r8
 8006854:	e7f1      	b.n	800683a <D64_1CH_HTONS_VOL_HP+0x166>
 8006856:	bf00      	nop
 8006858:	20000000 	.word	0x20000000
 800685c:	001c0015 	.word	0x001c0015
 8006860:	000f000a 	.word	0x000f000a
 8006864:	00060003 	.word	0x00060003
 8006868:	0024002a 	.word	0x0024002a
 800686c:	002e0030 	.word	0x002e0030
 8006870:	00030006 	.word	0x00030006
 8006874:	000a000f 	.word	0x000a000f
 8006878:	0015001c 	.word	0x0015001c

0800687c <D80_1CH_HTONS_VOL_HP>:
 800687c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006880:	4613      	mov	r3, r2
 8006882:	b089      	sub	sp, #36	; 0x24
 8006884:	4686      	mov	lr, r0
 8006886:	6918      	ldr	r0, [r3, #16]
 8006888:	9001      	str	r0, [sp, #4]
 800688a:	4618      	mov	r0, r3
 800688c:	695b      	ldr	r3, [r3, #20]
 800688e:	68c4      	ldr	r4, [r0, #12]
 8006890:	9400      	str	r4, [sp, #0]
 8006892:	4604      	mov	r4, r0
 8006894:	9207      	str	r2, [sp, #28]
 8006896:	9302      	str	r3, [sp, #8]
 8006898:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800689c:	69c3      	ldr	r3, [r0, #28]
 800689e:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 80068a0:	6b00      	ldr	r0, [r0, #48]	; 0x30
 80068a2:	9004      	str	r0, [sp, #16]
 80068a4:	6a20      	ldr	r0, [r4, #32]
 80068a6:	9005      	str	r0, [sp, #20]
 80068a8:	2a00      	cmp	r2, #0
 80068aa:	f000 80ce 	beq.w	8006a4a <D80_1CH_HTONS_VOL_HP+0x1ce>
 80068ae:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80068b2:	4867      	ldr	r0, [pc, #412]	; (8006a50 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80068b4:	9206      	str	r2, [sp, #24]
 80068b6:	9103      	str	r1, [sp, #12]
 80068b8:	f8de 5000 	ldr.w	r5, [lr]
 80068bc:	f8de 4004 	ldr.w	r4, [lr, #4]
 80068c0:	f8de 2008 	ldr.w	r2, [lr, #8]
 80068c4:	f10e 0e0a 	add.w	lr, lr, #10
 80068c8:	ba6d      	rev16	r5, r5
 80068ca:	ba64      	rev16	r4, r4
 80068cc:	fa92 fb92 	rev16.w	fp, r2
 80068d0:	b2ee      	uxtb	r6, r5
 80068d2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 80068d6:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 80068da:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 80068de:	9900      	ldr	r1, [sp, #0]
 80068e0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80068e4:	eb03 0a07 	add.w	sl, r3, r7
 80068e8:	0e2d      	lsrs	r5, r5, #24
 80068ea:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 80068ee:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 80068f2:	eb02 229a 	add.w	r2, r2, sl, lsr #10
 80068f6:	eb03 2992 	add.w	r9, r3, r2, lsr #10
 80068fa:	b2e5      	uxtb	r5, r4
 80068fc:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8006900:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8006904:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8006908:	f3c4 4307 	ubfx	r3, r4, #16, #8
 800690c:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8006910:	0e24      	lsrs	r4, r4, #24
 8006912:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8006916:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 800691a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 800691e:	fa5f f38b 	uxtb.w	r3, fp
 8006922:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8006926:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 800692a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800692e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8006932:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8006936:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 800693a:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 800693e:	eb0b 2b93 	add.w	fp, fp, r3, lsr #10
 8006942:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006946:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800694a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800694e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006952:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006956:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800695a:	ea42 4a0a 	orr.w	sl, r2, sl, lsl #16
 800695e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006962:	f3cb 0209 	ubfx	r2, fp, #0, #10
 8006966:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800696a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800696e:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8006972:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8006976:	ea42 4603 	orr.w	r6, r2, r3, lsl #16
 800697a:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800697e:	ea4f 239b 	mov.w	r3, fp, lsr #10
 8006982:	4a34      	ldr	r2, [pc, #208]	; (8006a54 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8006984:	fb2a 1202 	smlad	r2, sl, r2, r1
 8006988:	4933      	ldr	r1, [pc, #204]	; (8006a58 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800698a:	fb29 2201 	smlad	r2, r9, r1, r2
 800698e:	4933      	ldr	r1, [pc, #204]	; (8006a5c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8006990:	fb28 2201 	smlad	r2, r8, r1, r2
 8006994:	4932      	ldr	r1, [pc, #200]	; (8006a60 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8006996:	fb24 2201 	smlad	r2, r4, r1, r2
 800699a:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 800699e:	fb26 2205 	smlad	r2, r6, r5, r2
 80069a2:	4930      	ldr	r1, [pc, #192]	; (8006a64 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80069a4:	fb2a cc01 	smlad	ip, sl, r1, ip
 80069a8:	492f      	ldr	r1, [pc, #188]	; (8006a68 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80069aa:	fb29 cc01 	smlad	ip, r9, r1, ip
 80069ae:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 80069b2:	fb28 c505 	smlad	r5, r8, r5, ip
 80069b6:	492d      	ldr	r1, [pc, #180]	; (8006a6c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80069b8:	fb24 5501 	smlad	r5, r4, r1, r5
 80069bc:	492c      	ldr	r1, [pc, #176]	; (8006a70 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80069be:	fb26 5101 	smlad	r1, r6, r1, r5
 80069c2:	2501      	movs	r5, #1
 80069c4:	9100      	str	r1, [sp, #0]
 80069c6:	fb2a fa05 	smuad	sl, sl, r5
 80069ca:	492a      	ldr	r1, [pc, #168]	; (8006a74 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80069cc:	fb29 a901 	smlad	r9, r9, r1, sl
 80069d0:	4d29      	ldr	r5, [pc, #164]	; (8006a78 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80069d2:	fb28 9805 	smlad	r8, r8, r5, r9
 80069d6:	4d29      	ldr	r5, [pc, #164]	; (8006a7c <D80_1CH_HTONS_VOL_HP+0x200>)
 80069d8:	fb24 8405 	smlad	r4, r4, r5, r8
 80069dc:	4d28      	ldr	r5, [pc, #160]	; (8006a80 <D80_1CH_HTONS_VOL_HP+0x204>)
 80069de:	fb26 4c05 	smlad	ip, r6, r5, r4
 80069e2:	9901      	ldr	r1, [sp, #4]
 80069e4:	f5a2 327a 	sub.w	r2, r2, #256000	; 0x3e800
 80069e8:	4411      	add	r1, r2
 80069ea:	460c      	mov	r4, r1
 80069ec:	9902      	ldr	r1, [sp, #8]
 80069ee:	9202      	str	r2, [sp, #8]
 80069f0:	1a64      	subs	r4, r4, r1
 80069f2:	9905      	ldr	r1, [sp, #20]
 80069f4:	17e7      	asrs	r7, r4, #31
 80069f6:	fba4 4501 	umull	r4, r5, r4, r1
 80069fa:	fb01 5507 	mla	r5, r1, r7, r5
 80069fe:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8006a02:	f145 0500 	adc.w	r5, r5, #0
 8006a06:	9904      	ldr	r1, [sp, #16]
 8006a08:	02ac      	lsls	r4, r5, #10
 8006a0a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006a0e:	2700      	movs	r7, #0
 8006a10:	fbc1 6704 	smlal	r6, r7, r1, r4
 8006a14:	9903      	ldr	r1, [sp, #12]
 8006a16:	10bc      	asrs	r4, r7, #2
 8006a18:	f304 040f 	ssat	r4, #16, r4
 8006a1c:	f821 4b02 	strh.w	r4, [r1], #2
 8006a20:	460e      	mov	r6, r1
 8006a22:	9103      	str	r1, [sp, #12]
 8006a24:	0069      	lsls	r1, r5, #1
 8006a26:	9101      	str	r1, [sp, #4]
 8006a28:	9906      	ldr	r1, [sp, #24]
 8006a2a:	428e      	cmp	r6, r1
 8006a2c:	f47f af44 	bne.w	80068b8 <D80_1CH_HTONS_VOL_HP+0x3c>
 8006a30:	9807      	ldr	r0, [sp, #28]
 8006a32:	9c00      	ldr	r4, [sp, #0]
 8006a34:	9901      	ldr	r1, [sp, #4]
 8006a36:	f8c0 c008 	str.w	ip, [r0, #8]
 8006a3a:	60c4      	str	r4, [r0, #12]
 8006a3c:	61c3      	str	r3, [r0, #28]
 8006a3e:	6101      	str	r1, [r0, #16]
 8006a40:	6142      	str	r2, [r0, #20]
 8006a42:	2000      	movs	r0, #0
 8006a44:	b009      	add	sp, #36	; 0x24
 8006a46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a4a:	9a02      	ldr	r2, [sp, #8]
 8006a4c:	e7f0      	b.n	8006a30 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8006a4e:	bf00      	nop
 8006a50:	20000000 	.word	0x20000000
 8006a54:	002d0024 	.word	0x002d0024
 8006a58:	001c0015 	.word	0x001c0015
 8006a5c:	000f000a 	.word	0x000f000a
 8006a60:	00060003 	.word	0x00060003
 8006a64:	0037003f 	.word	0x0037003f
 8006a68:	00450049 	.word	0x00450049
 8006a6c:	00490045 	.word	0x00490045
 8006a70:	003f0037 	.word	0x003f0037
 8006a74:	00030006 	.word	0x00030006
 8006a78:	000a000f 	.word	0x000a000f
 8006a7c:	0015001c 	.word	0x0015001c
 8006a80:	0024002d 	.word	0x0024002d

08006a84 <D128_1CH_HTONS_VOL_HP>:
 8006a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a88:	b091      	sub	sp, #68	; 0x44
 8006a8a:	4614      	mov	r4, r2
 8006a8c:	920f      	str	r2, [sp, #60]	; 0x3c
 8006a8e:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8006a90:	6912      	ldr	r2, [r2, #16]
 8006a92:	9202      	str	r2, [sp, #8]
 8006a94:	4622      	mov	r2, r4
 8006a96:	4615      	mov	r5, r2
 8006a98:	69d6      	ldr	r6, [r2, #28]
 8006a9a:	6892      	ldr	r2, [r2, #8]
 8006a9c:	6964      	ldr	r4, [r4, #20]
 8006a9e:	9203      	str	r2, [sp, #12]
 8006aa0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8006aa2:	9405      	str	r4, [sp, #20]
 8006aa4:	920c      	str	r2, [sp, #48]	; 0x30
 8006aa6:	68ec      	ldr	r4, [r5, #12]
 8006aa8:	6a2a      	ldr	r2, [r5, #32]
 8006aaa:	9401      	str	r4, [sp, #4]
 8006aac:	920d      	str	r2, [sp, #52]	; 0x34
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 8148 	beq.w	8006d44 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8006ab4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8006ab8:	930e      	str	r3, [sp, #56]	; 0x38
 8006aba:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8006d80 <D128_1CH_HTONS_VOL_HP+0x2fc>
 8006abe:	9106      	str	r1, [sp, #24]
 8006ac0:	f100 0310 	add.w	r3, r0, #16
 8006ac4:	469b      	mov	fp, r3
 8006ac6:	9604      	str	r6, [sp, #16]
 8006ac8:	f1ab 0110 	sub.w	r1, fp, #16
 8006acc:	c90e      	ldmia	r1, {r1, r2, r3}
 8006ace:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8006ad2:	ba49      	rev16	r1, r1
 8006ad4:	ba52      	rev16	r2, r2
 8006ad6:	ba5b      	rev16	r3, r3
 8006ad8:	fa90 fa90 	rev16.w	sl, r0
 8006adc:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8006ae0:	b2cc      	uxtb	r4, r1
 8006ae2:	9e04      	ldr	r6, [sp, #16]
 8006ae4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8006ae8:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8006aec:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8006af0:	0e09      	lsrs	r1, r1, #24
 8006af2:	4426      	add	r6, r4
 8006af4:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8006af8:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8006afc:	b2d0      	uxtb	r0, r2
 8006afe:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8006b02:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8006b06:	f858 e020 	ldr.w	lr, [r8, r0, lsl #2]
 8006b0a:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8006b0e:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8006b12:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8006b16:	0e12      	lsrs	r2, r2, #24
 8006b18:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8006b1c:	9400      	str	r4, [sp, #0]
 8006b1e:	eb0e 2997 	add.w	r9, lr, r7, lsr #10
 8006b22:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8006b26:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8006b2a:	9704      	str	r7, [sp, #16]
 8006b2c:	b2da      	uxtb	r2, r3
 8006b2e:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8006b32:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8006b36:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8006b3a:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8006b3e:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8006b42:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8006b46:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8006b4a:	0e1b      	lsrs	r3, r3, #24
 8006b4c:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8006b50:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8006b54:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8006b58:	fa5f f38a 	uxtb.w	r3, sl
 8006b5c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006b60:	9609      	str	r6, [sp, #36]	; 0x24
 8006b62:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8006b66:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8006b6a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006b6e:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8006b72:	950a      	str	r5, [sp, #40]	; 0x28
 8006b74:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8006b78:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8006b7c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8006b80:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8006b84:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8006b88:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8006b8c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8006b90:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8006b94:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8006b98:	9307      	str	r3, [sp, #28]
 8006b9a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8006b9e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8006ba2:	920b      	str	r2, [sp, #44]	; 0x2c
 8006ba4:	9b00      	ldr	r3, [sp, #0]
 8006ba6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006ba8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8006bac:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8006bb0:	f8cd a020 	str.w	sl, [sp, #32]
 8006bb4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006bb8:	9b04      	ldr	r3, [sp, #16]
 8006bba:	f8cd 9010 	str.w	r9, [sp, #16]
 8006bbe:	4691      	mov	r9, r2
 8006bc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc2:	f8cd a000 	str.w	sl, [sp]
 8006bc6:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8006bca:	9a00      	ldr	r2, [sp, #0]
 8006bcc:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8006bd0:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8006bd4:	9b07      	ldr	r3, [sp, #28]
 8006bd6:	9a04      	ldr	r2, [sp, #16]
 8006bd8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8006bdc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006be0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006be2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8006be6:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8006bea:	9200      	str	r2, [sp, #0]
 8006bec:	9a08      	ldr	r2, [sp, #32]
 8006bee:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8006bf2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8006bf6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8006bfa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8006bfe:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8006c02:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8006c06:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8006c0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0e:	0a92      	lsrs	r2, r2, #10
 8006c10:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8006c14:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8006c18:	9204      	str	r2, [sp, #16]
 8006c1a:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8006c1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8006c22:	4f49      	ldr	r7, [pc, #292]	; (8006d48 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8006c24:	9a01      	ldr	r2, [sp, #4]
 8006c26:	fb29 2707 	smlad	r7, r9, r7, r2
 8006c2a:	4a48      	ldr	r2, [pc, #288]	; (8006d4c <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8006c2c:	fb2a 7702 	smlad	r7, sl, r2, r7
 8006c30:	4a47      	ldr	r2, [pc, #284]	; (8006d50 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8006c32:	fb21 7702 	smlad	r7, r1, r2, r7
 8006c36:	4a47      	ldr	r2, [pc, #284]	; (8006d54 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8006c38:	fb24 7702 	smlad	r7, r4, r2, r7
 8006c3c:	4a46      	ldr	r2, [pc, #280]	; (8006d58 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8006c3e:	9e00      	ldr	r6, [sp, #0]
 8006c40:	fb26 7702 	smlad	r7, r6, r2, r7
 8006c44:	4a45      	ldr	r2, [pc, #276]	; (8006d5c <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8006c46:	fb20 7702 	smlad	r7, r0, r2, r7
 8006c4a:	4a45      	ldr	r2, [pc, #276]	; (8006d60 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8006c4c:	fb23 7702 	smlad	r7, r3, r2, r7
 8006c50:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8006c54:	fb25 770e 	smlad	r7, r5, lr, r7
 8006c58:	4a42      	ldr	r2, [pc, #264]	; (8006d64 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8006c5a:	9707      	str	r7, [sp, #28]
 8006c5c:	9f03      	ldr	r7, [sp, #12]
 8006c5e:	fb29 7e02 	smlad	lr, r9, r2, r7
 8006c62:	4a41      	ldr	r2, [pc, #260]	; (8006d68 <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8006c64:	fb2a ee02 	smlad	lr, sl, r2, lr
 8006c68:	f8df c118 	ldr.w	ip, [pc, #280]	; 8006d84 <D128_1CH_HTONS_VOL_HP+0x300>
 8006c6c:	fb21 ee0c 	smlad	lr, r1, ip, lr
 8006c70:	f8df c114 	ldr.w	ip, [pc, #276]	; 8006d88 <D128_1CH_HTONS_VOL_HP+0x304>
 8006c74:	fb24 ee0c 	smlad	lr, r4, ip, lr
 8006c78:	f8df c110 	ldr.w	ip, [pc, #272]	; 8006d8c <D128_1CH_HTONS_VOL_HP+0x308>
 8006c7c:	fb26 ee0c 	smlad	lr, r6, ip, lr
 8006c80:	f8df c10c 	ldr.w	ip, [pc, #268]	; 8006d90 <D128_1CH_HTONS_VOL_HP+0x30c>
 8006c84:	fb20 ec0c 	smlad	ip, r0, ip, lr
 8006c88:	f8df e108 	ldr.w	lr, [pc, #264]	; 8006d94 <D128_1CH_HTONS_VOL_HP+0x310>
 8006c8c:	fb23 ce0e 	smlad	lr, r3, lr, ip
 8006c90:	f8df c104 	ldr.w	ip, [pc, #260]	; 8006d98 <D128_1CH_HTONS_VOL_HP+0x314>
 8006c94:	fb25 e20c 	smlad	r2, r5, ip, lr
 8006c98:	f04f 0e01 	mov.w	lr, #1
 8006c9c:	9201      	str	r2, [sp, #4]
 8006c9e:	fb29 fe0e 	smuad	lr, r9, lr
 8006ca2:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8006d9c <D128_1CH_HTONS_VOL_HP+0x318>
 8006ca6:	fb2a ea09 	smlad	sl, sl, r9, lr
 8006caa:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 8006da0 <D128_1CH_HTONS_VOL_HP+0x31c>
 8006cae:	fb21 a909 	smlad	r9, r1, r9, sl
 8006cb2:	492e      	ldr	r1, [pc, #184]	; (8006d6c <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8006cb4:	fb24 9901 	smlad	r9, r4, r1, r9
 8006cb8:	492d      	ldr	r1, [pc, #180]	; (8006d70 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 8006cba:	fb26 9901 	smlad	r9, r6, r1, r9
 8006cbe:	492d      	ldr	r1, [pc, #180]	; (8006d74 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 8006cc0:	fb20 9901 	smlad	r9, r0, r1, r9
 8006cc4:	492c      	ldr	r1, [pc, #176]	; (8006d78 <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8006cc6:	fb23 9901 	smlad	r9, r3, r1, r9
 8006cca:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8006ccc:	fb25 9303 	smlad	r3, r5, r3, r9
 8006cd0:	9303      	str	r3, [sp, #12]
 8006cd2:	9b07      	ldr	r3, [sp, #28]
 8006cd4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 8006cd6:	f5a3 1780 	sub.w	r7, r3, #1048576	; 0x100000
 8006cda:	9b02      	ldr	r3, [sp, #8]
 8006cdc:	443b      	add	r3, r7
 8006cde:	461a      	mov	r2, r3
 8006ce0:	9b05      	ldr	r3, [sp, #20]
 8006ce2:	9705      	str	r7, [sp, #20]
 8006ce4:	1ad2      	subs	r2, r2, r3
 8006ce6:	17d1      	asrs	r1, r2, #31
 8006ce8:	fba2 2304 	umull	r2, r3, r2, r4
 8006cec:	fb04 3301 	mla	r3, r4, r1, r3
 8006cf0:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8006cf4:	f143 0300 	adc.w	r3, r3, #0
 8006cf8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8006cfa:	021a      	lsls	r2, r3, #8
 8006cfc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006d00:	2100      	movs	r1, #0
 8006d02:	fbc2 0104 	smlal	r0, r1, r2, r4
 8006d06:	108a      	asrs	r2, r1, #2
 8006d08:	9906      	ldr	r1, [sp, #24]
 8006d0a:	f302 020f 	ssat	r2, #16, r2
 8006d0e:	005b      	lsls	r3, r3, #1
 8006d10:	f821 2b02 	strh.w	r2, [r1], #2
 8006d14:	9302      	str	r3, [sp, #8]
 8006d16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006d18:	9106      	str	r1, [sp, #24]
 8006d1a:	4299      	cmp	r1, r3
 8006d1c:	f10b 0b10 	add.w	fp, fp, #16
 8006d20:	f47f aed2 	bne.w	8006ac8 <D128_1CH_HTONS_VOL_HP+0x44>
 8006d24:	9e04      	ldr	r6, [sp, #16]
 8006d26:	463c      	mov	r4, r7
 8006d28:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d2a:	9903      	ldr	r1, [sp, #12]
 8006d2c:	6091      	str	r1, [r2, #8]
 8006d2e:	9901      	ldr	r1, [sp, #4]
 8006d30:	60d1      	str	r1, [r2, #12]
 8006d32:	4613      	mov	r3, r2
 8006d34:	61d6      	str	r6, [r2, #28]
 8006d36:	9a02      	ldr	r2, [sp, #8]
 8006d38:	611a      	str	r2, [r3, #16]
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	615c      	str	r4, [r3, #20]
 8006d3e:	b011      	add	sp, #68	; 0x44
 8006d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d44:	9c05      	ldr	r4, [sp, #20]
 8006d46:	e7ef      	b.n	8006d28 <D128_1CH_HTONS_VOL_HP+0x2a4>
 8006d48:	00780069 	.word	0x00780069
 8006d4c:	005b004e 	.word	0x005b004e
 8006d50:	00420037 	.word	0x00420037
 8006d54:	002d0024 	.word	0x002d0024
 8006d58:	001c0015 	.word	0x001c0015
 8006d5c:	000f000a 	.word	0x000f000a
 8006d60:	00060003 	.word	0x00060003
 8006d64:	00880096 	.word	0x00880096
 8006d68:	00a200ac 	.word	0x00a200ac
 8006d6c:	0015001c 	.word	0x0015001c
 8006d70:	0024002d 	.word	0x0024002d
 8006d74:	00370042 	.word	0x00370042
 8006d78:	004e005b 	.word	0x004e005b
 8006d7c:	00690078 	.word	0x00690078
 8006d80:	20000000 	.word	0x20000000
 8006d84:	00b400ba 	.word	0x00b400ba
 8006d88:	00be00c0 	.word	0x00be00c0
 8006d8c:	00c000be 	.word	0x00c000be
 8006d90:	00ba00b4 	.word	0x00ba00b4
 8006d94:	00ac00a2 	.word	0x00ac00a2
 8006d98:	00960088 	.word	0x00960088
 8006d9c:	00030006 	.word	0x00030006
 8006da0:	000a000f 	.word	0x000a000f

08006da4 <PDM_Filter_Init>:
 8006da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da6:	2240      	movs	r2, #64	; 0x40
 8006da8:	4604      	mov	r4, r0
 8006daa:	2100      	movs	r1, #0
 8006dac:	300c      	adds	r0, #12
 8006dae:	f000 f9d3 	bl	8007158 <memset>
 8006db2:	4a40      	ldr	r2, [pc, #256]	; (8006eb4 <PDM_Filter_Init+0x110>)
 8006db4:	4940      	ldr	r1, [pc, #256]	; (8006eb8 <PDM_Filter_Init+0x114>)
 8006db6:	6813      	ldr	r3, [r2, #0]
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8006dc0:	428b      	cmp	r3, r1
 8006dc2:	d00f      	beq.n	8006de4 <PDM_Filter_Init+0x40>
 8006dc4:	4b3d      	ldr	r3, [pc, #244]	; (8006ebc <PDM_Filter_Init+0x118>)
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	601a      	str	r2, [r3, #0]
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	2a00      	cmp	r2, #0
 8006dce:	d1fc      	bne.n	8006dca <PDM_Filter_Init+0x26>
 8006dd0:	4b3b      	ldr	r3, [pc, #236]	; (8006ec0 <PDM_Filter_Init+0x11c>)
 8006dd2:	493c      	ldr	r1, [pc, #240]	; (8006ec4 <PDM_Filter_Init+0x120>)
 8006dd4:	6019      	str	r1, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4937      	ldr	r1, [pc, #220]	; (8006eb8 <PDM_Filter_Init+0x114>)
 8006dda:	428b      	cmp	r3, r1
 8006ddc:	d001      	beq.n	8006de2 <PDM_Filter_Init+0x3e>
 8006dde:	6462      	str	r2, [r4, #68]	; 0x44
 8006de0:	e7fe      	b.n	8006de0 <PDM_Filter_Init+0x3c>
 8006de2:	6463      	str	r3, [r4, #68]	; 0x44
 8006de4:	8822      	ldrh	r2, [r4, #0]
 8006de6:	8963      	ldrh	r3, [r4, #10]
 8006de8:	8921      	ldrh	r1, [r4, #8]
 8006dea:	86a3      	strh	r3, [r4, #52]	; 0x34
 8006dec:	2a01      	cmp	r2, #1
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	61a3      	str	r3, [r4, #24]
 8006df4:	6123      	str	r3, [r4, #16]
 8006df6:	6163      	str	r3, [r4, #20]
 8006df8:	60e3      	str	r3, [r4, #12]
 8006dfa:	6263      	str	r3, [r4, #36]	; 0x24
 8006dfc:	61e3      	str	r3, [r4, #28]
 8006dfe:	6223      	str	r3, [r4, #32]
 8006e00:	6423      	str	r3, [r4, #64]	; 0x40
 8006e02:	86e1      	strh	r1, [r4, #54]	; 0x36
 8006e04:	d91d      	bls.n	8006e42 <PDM_Filter_Init+0x9e>
 8006e06:	2203      	movs	r2, #3
 8006e08:	2002      	movs	r0, #2
 8006e0a:	8861      	ldrh	r1, [r4, #2]
 8006e0c:	2901      	cmp	r1, #1
 8006e0e:	d914      	bls.n	8006e3a <PDM_Filter_Init+0x96>
 8006e10:	4610      	mov	r0, r2
 8006e12:	2140      	movs	r1, #64	; 0x40
 8006e14:	2200      	movs	r2, #0
 8006e16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e18:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8006e1c:	bf04      	itt	eq
 8006e1e:	6421      	streq	r1, [r4, #64]	; 0x40
 8006e20:	460a      	moveq	r2, r1
 8006e22:	6861      	ldr	r1, [r4, #4]
 8006e24:	b119      	cbz	r1, 8006e2e <PDM_Filter_Init+0x8a>
 8006e26:	f042 0210 	orr.w	r2, r2, #16
 8006e2a:	6422      	str	r2, [r4, #64]	; 0x40
 8006e2c:	62e1      	str	r1, [r4, #44]	; 0x2c
 8006e2e:	2100      	movs	r1, #0
 8006e30:	8721      	strh	r1, [r4, #56]	; 0x38
 8006e32:	b908      	cbnz	r0, 8006e38 <PDM_Filter_Init+0x94>
 8006e34:	3280      	adds	r2, #128	; 0x80
 8006e36:	6422      	str	r2, [r4, #64]	; 0x40
 8006e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e3a:	d00a      	beq.n	8006e52 <PDM_Filter_Init+0xae>
 8006e3c:	2140      	movs	r1, #64	; 0x40
 8006e3e:	2200      	movs	r2, #0
 8006e40:	e7e9      	b.n	8006e16 <PDM_Filter_Init+0x72>
 8006e42:	4921      	ldr	r1, [pc, #132]	; (8006ec8 <PDM_Filter_Init+0x124>)
 8006e44:	d01f      	beq.n	8006e86 <PDM_Filter_Init+0xe2>
 8006e46:	780a      	ldrb	r2, [r1, #0]
 8006e48:	2a01      	cmp	r2, #1
 8006e4a:	d006      	beq.n	8006e5a <PDM_Filter_Init+0xb6>
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	2201      	movs	r2, #1
 8006e50:	e7db      	b.n	8006e0a <PDM_Filter_Init+0x66>
 8006e52:	2220      	movs	r2, #32
 8006e54:	6422      	str	r2, [r4, #64]	; 0x40
 8006e56:	2160      	movs	r1, #96	; 0x60
 8006e58:	e7dd      	b.n	8006e16 <PDM_Filter_Init+0x72>
 8006e5a:	4b1c      	ldr	r3, [pc, #112]	; (8006ecc <PDM_Filter_Init+0x128>)
 8006e5c:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 8006e60:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8006e64:	4e1a      	ldr	r6, [pc, #104]	; (8006ed0 <PDM_Filter_Init+0x12c>)
 8006e66:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <PDM_Filter_Init+0x130>)
 8006e68:	0528      	lsls	r0, r5, #20
 8006e6a:	4006      	ands	r6, r0
 8006e6c:	f3c5 5009 	ubfx	r0, r5, #20, #10
 8006e70:	4430      	add	r0, r6
 8006e72:	402a      	ands	r2, r5
 8006e74:	4402      	add	r2, r0
 8006e76:	429f      	cmp	r7, r3
 8006e78:	601a      	str	r2, [r3, #0]
 8006e7a:	d1f1      	bne.n	8006e60 <PDM_Filter_Init+0xbc>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	700b      	strb	r3, [r1, #0]
 8006e80:	4618      	mov	r0, r3
 8006e82:	2201      	movs	r2, #1
 8006e84:	e7c1      	b.n	8006e0a <PDM_Filter_Init+0x66>
 8006e86:	7808      	ldrb	r0, [r1, #0]
 8006e88:	b990      	cbnz	r0, 8006eb0 <PDM_Filter_Init+0x10c>
 8006e8a:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <PDM_Filter_Init+0x128>)
 8006e8c:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 8006e90:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8006e94:	4e0e      	ldr	r6, [pc, #56]	; (8006ed0 <PDM_Filter_Init+0x12c>)
 8006e96:	4a0f      	ldr	r2, [pc, #60]	; (8006ed4 <PDM_Filter_Init+0x130>)
 8006e98:	0528      	lsls	r0, r5, #20
 8006e9a:	4006      	ands	r6, r0
 8006e9c:	f3c5 5009 	ubfx	r0, r5, #20, #10
 8006ea0:	4430      	add	r0, r6
 8006ea2:	402a      	ands	r2, r5
 8006ea4:	4402      	add	r2, r0
 8006ea6:	429f      	cmp	r7, r3
 8006ea8:	601a      	str	r2, [r3, #0]
 8006eaa:	d1f1      	bne.n	8006e90 <PDM_Filter_Init+0xec>
 8006eac:	2201      	movs	r2, #1
 8006eae:	700a      	strb	r2, [r1, #0]
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	e7aa      	b.n	8006e0a <PDM_Filter_Init+0x66>
 8006eb4:	e0002000 	.word	0xe0002000
 8006eb8:	b5e8b5cd 	.word	0xb5e8b5cd
 8006ebc:	40023008 	.word	0x40023008
 8006ec0:	40023000 	.word	0x40023000
 8006ec4:	f407a5c2 	.word	0xf407a5c2
 8006ec8:	200004a8 	.word	0x200004a8
 8006ecc:	1ffffffc 	.word	0x1ffffffc
 8006ed0:	3ff00000 	.word	0x3ff00000
 8006ed4:	000ffc00 	.word	0x000ffc00

08006ed8 <PDM_Filter_setConfig>:
 8006ed8:	4b6a      	ldr	r3, [pc, #424]	; (8007084 <PDM_Filter_setConfig+0x1ac>)
 8006eda:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006edc:	429a      	cmp	r2, r3
 8006ede:	d001      	beq.n	8006ee4 <PDM_Filter_setConfig+0xc>
 8006ee0:	2004      	movs	r0, #4
 8006ee2:	4770      	bx	lr
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	880a      	ldrh	r2, [r1, #0]
 8006ee8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8006eea:	4605      	mov	r5, r0
 8006eec:	460e      	mov	r6, r1
 8006eee:	1e51      	subs	r1, r2, #1
 8006ef0:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8006ef4:	2906      	cmp	r1, #6
 8006ef6:	ed2d 8b04 	vpush	{d8-d9}
 8006efa:	6428      	str	r0, [r5, #64]	; 0x40
 8006efc:	d91b      	bls.n	8006f36 <PDM_Filter_setConfig+0x5e>
 8006efe:	2408      	movs	r4, #8
 8006f00:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 8006f04:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8006f08:	4299      	cmp	r1, r3
 8006f0a:	f000 8086 	beq.w	800701a <PDM_Filter_setConfig+0x142>
 8006f0e:	f113 0f0c 	cmn.w	r3, #12
 8006f12:	da2a      	bge.n	8006f6a <PDM_Filter_setConfig+0x92>
 8006f14:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 8006f18:	3440      	adds	r4, #64	; 0x40
 8006f1a:	80b3      	strh	r3, [r6, #4]
 8006f1c:	862a      	strh	r2, [r5, #48]	; 0x30
 8006f1e:	8873      	ldrh	r3, [r6, #2]
 8006f20:	866b      	strh	r3, [r5, #50]	; 0x32
 8006f22:	2c00      	cmp	r4, #0
 8006f24:	d15b      	bne.n	8006fde <PDM_Filter_setConfig+0x106>
 8006f26:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006f28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f2c:	642b      	str	r3, [r5, #64]	; 0x40
 8006f2e:	2000      	movs	r0, #0
 8006f30:	ecbd 8b04 	vpop	{d8-d9}
 8006f34:	bd70      	pop	{r4, r5, r6, pc}
 8006f36:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8006f38:	4291      	cmp	r1, r2
 8006f3a:	d073      	beq.n	8007024 <PDM_Filter_setConfig+0x14c>
 8006f3c:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8006f40:	f023 0301 	bic.w	r3, r3, #1
 8006f44:	4313      	orrs	r3, r2
 8006f46:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006f4a:	642b      	str	r3, [r5, #64]	; 0x40
 8006f4c:	2970      	cmp	r1, #112	; 0x70
 8006f4e:	f003 030f 	and.w	r3, r3, #15
 8006f52:	f103 33ff 	add.w	r3, r3, #4294967295
 8006f56:	d06d      	beq.n	8007034 <PDM_Filter_setConfig+0x15c>
 8006f58:	2b06      	cmp	r3, #6
 8006f5a:	f200 8090 	bhi.w	800707e <PDM_Filter_setConfig+0x1a6>
 8006f5e:	e8df f003 	tbb	[pc, r3]
 8006f62:	5659      	.short	0x5659
 8006f64:	444a5053 	.word	0x444a5053
 8006f68:	4d          	.byte	0x4d
 8006f69:	00          	.byte	0x00
 8006f6a:	2b33      	cmp	r3, #51	; 0x33
 8006f6c:	dc39      	bgt.n	8006fe2 <PDM_Filter_setConfig+0x10a>
 8006f6e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006f70:	f002 020f 	and.w	r2, r2, #15
 8006f74:	3a01      	subs	r2, #1
 8006f76:	2a06      	cmp	r2, #6
 8006f78:	d879      	bhi.n	800706e <PDM_Filter_setConfig+0x196>
 8006f7a:	4943      	ldr	r1, [pc, #268]	; (8007088 <PDM_Filter_setConfig+0x1b0>)
 8006f7c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8006f80:	ed92 9a00 	vldr	s18, [r2]
 8006f84:	ed92 8a07 	vldr	s16, [r2, #28]
 8006f88:	ee07 3a90 	vmov	s15, r3
 8006f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f90:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8006f94:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8006f98:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8006f9c:	f000 fb1e 	bl	80075dc <powf>
 8006fa0:	eddf 0a3a 	vldr	s1, [pc, #232]	; 800708c <PDM_Filter_setConfig+0x1b4>
 8006fa4:	eef0 8a40 	vmov.f32	s17, s0
 8006fa8:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8006fac:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8006fb0:	f000 fb14 	bl	80075dc <powf>
 8006fb4:	ee28 8a28 	vmul.f32	s16, s16, s17
 8006fb8:	ee68 7a00 	vmul.f32	s15, s16, s0
 8006fbc:	ee17 0a90 	vmov	r0, s15
 8006fc0:	f7f9 fac6 	bl	8000550 <__aeabi_f2d>
 8006fc4:	ec41 0b10 	vmov	d0, r0, r1
 8006fc8:	f000 fac2 	bl	8007550 <round>
 8006fcc:	ec51 0b10 	vmov	r0, r1, d0
 8006fd0:	f7f9 fdd4 	bl	8000b7c <__aeabi_d2uiz>
 8006fd4:	88b3      	ldrh	r3, [r6, #4]
 8006fd6:	8832      	ldrh	r2, [r6, #0]
 8006fd8:	63e8      	str	r0, [r5, #60]	; 0x3c
 8006fda:	872b      	strh	r3, [r5, #56]	; 0x38
 8006fdc:	e79e      	b.n	8006f1c <PDM_Filter_setConfig+0x44>
 8006fde:	4620      	mov	r0, r4
 8006fe0:	e7a6      	b.n	8006f30 <PDM_Filter_setConfig+0x58>
 8006fe2:	2333      	movs	r3, #51	; 0x33
 8006fe4:	3440      	adds	r4, #64	; 0x40
 8006fe6:	80b3      	strh	r3, [r6, #4]
 8006fe8:	e798      	b.n	8006f1c <PDM_Filter_setConfig+0x44>
 8006fea:	4b29      	ldr	r3, [pc, #164]	; (8007090 <PDM_Filter_setConfig+0x1b8>)
 8006fec:	64ab      	str	r3, [r5, #72]	; 0x48
 8006fee:	2400      	movs	r4, #0
 8006ff0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8006ff4:	e78b      	b.n	8006f0e <PDM_Filter_setConfig+0x36>
 8006ff6:	4b27      	ldr	r3, [pc, #156]	; (8007094 <PDM_Filter_setConfig+0x1bc>)
 8006ff8:	64ab      	str	r3, [r5, #72]	; 0x48
 8006ffa:	e7f8      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8006ffc:	4b26      	ldr	r3, [pc, #152]	; (8007098 <PDM_Filter_setConfig+0x1c0>)
 8006ffe:	64ab      	str	r3, [r5, #72]	; 0x48
 8007000:	e7f5      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007002:	4b26      	ldr	r3, [pc, #152]	; (800709c <PDM_Filter_setConfig+0x1c4>)
 8007004:	64ab      	str	r3, [r5, #72]	; 0x48
 8007006:	e7f2      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007008:	4b25      	ldr	r3, [pc, #148]	; (80070a0 <PDM_Filter_setConfig+0x1c8>)
 800700a:	64ab      	str	r3, [r5, #72]	; 0x48
 800700c:	e7ef      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 800700e:	4b25      	ldr	r3, [pc, #148]	; (80070a4 <PDM_Filter_setConfig+0x1cc>)
 8007010:	64ab      	str	r3, [r5, #72]	; 0x48
 8007012:	e7ec      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007014:	4b24      	ldr	r3, [pc, #144]	; (80070a8 <PDM_Filter_setConfig+0x1d0>)
 8007016:	64ab      	str	r3, [r5, #72]	; 0x48
 8007018:	e7e9      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 800701a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800701c:	4291      	cmp	r1, r2
 800701e:	f47f af76 	bne.w	8006f0e <PDM_Filter_setConfig+0x36>
 8007022:	e77c      	b.n	8006f1e <PDM_Filter_setConfig+0x46>
 8007024:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 8007028:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800702c:	4299      	cmp	r1, r3
 800702e:	d023      	beq.n	8007078 <PDM_Filter_setConfig+0x1a0>
 8007030:	2400      	movs	r4, #0
 8007032:	e76c      	b.n	8006f0e <PDM_Filter_setConfig+0x36>
 8007034:	2b06      	cmp	r3, #6
 8007036:	d822      	bhi.n	800707e <PDM_Filter_setConfig+0x1a6>
 8007038:	e8df f003 	tbb	[pc, r3]
 800703c:	0d101316 	.word	0x0d101316
 8007040:	070a      	.short	0x070a
 8007042:	04          	.byte	0x04
 8007043:	00          	.byte	0x00
 8007044:	4b19      	ldr	r3, [pc, #100]	; (80070ac <PDM_Filter_setConfig+0x1d4>)
 8007046:	64ab      	str	r3, [r5, #72]	; 0x48
 8007048:	e7d1      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 800704a:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <PDM_Filter_setConfig+0x1d8>)
 800704c:	64ab      	str	r3, [r5, #72]	; 0x48
 800704e:	e7ce      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007050:	4b18      	ldr	r3, [pc, #96]	; (80070b4 <PDM_Filter_setConfig+0x1dc>)
 8007052:	64ab      	str	r3, [r5, #72]	; 0x48
 8007054:	e7cb      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007056:	4b18      	ldr	r3, [pc, #96]	; (80070b8 <PDM_Filter_setConfig+0x1e0>)
 8007058:	64ab      	str	r3, [r5, #72]	; 0x48
 800705a:	e7c8      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <PDM_Filter_setConfig+0x1e4>)
 800705e:	64ab      	str	r3, [r5, #72]	; 0x48
 8007060:	e7c5      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007062:	4b17      	ldr	r3, [pc, #92]	; (80070c0 <PDM_Filter_setConfig+0x1e8>)
 8007064:	64ab      	str	r3, [r5, #72]	; 0x48
 8007066:	e7c2      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 8007068:	4b16      	ldr	r3, [pc, #88]	; (80070c4 <PDM_Filter_setConfig+0x1ec>)
 800706a:	64ab      	str	r3, [r5, #72]	; 0x48
 800706c:	e7bf      	b.n	8006fee <PDM_Filter_setConfig+0x116>
 800706e:	ed9f 8a16 	vldr	s16, [pc, #88]	; 80070c8 <PDM_Filter_setConfig+0x1f0>
 8007072:	eeb0 9a48 	vmov.f32	s18, s16
 8007076:	e787      	b.n	8006f88 <PDM_Filter_setConfig+0xb0>
 8007078:	8873      	ldrh	r3, [r6, #2]
 800707a:	866b      	strh	r3, [r5, #50]	; 0x32
 800707c:	e753      	b.n	8006f26 <PDM_Filter_setConfig+0x4e>
 800707e:	2400      	movs	r4, #0
 8007080:	e73e      	b.n	8006f00 <PDM_Filter_setConfig+0x28>
 8007082:	bf00      	nop
 8007084:	b5e8b5cd 	.word	0xb5e8b5cd
 8007088:	080091a8 	.word	0x080091a8
 800708c:	42000000 	.word	0x42000000
 8007090:	080054a9 	.word	0x080054a9
 8007094:	08005399 	.word	0x08005399
 8007098:	08005631 	.word	0x08005631
 800709c:	08005e51 	.word	0x08005e51
 80070a0:	08005bb5 	.word	0x08005bb5
 80070a4:	08005999 	.word	0x08005999
 80070a8:	080057b5 	.word	0x080057b5
 80070ac:	08006441 	.word	0x08006441
 80070b0:	0800630d 	.word	0x0800630d
 80070b4:	08006239 	.word	0x08006239
 80070b8:	08006a85 	.word	0x08006a85
 80070bc:	0800687d 	.word	0x0800687d
 80070c0:	080066d5 	.word	0x080066d5
 80070c4:	08006571 	.word	0x08006571
 80070c8:	00000000 	.word	0x00000000

080070cc <PDM_Filter>:
 80070cc:	b410      	push	{r4}
 80070ce:	4b0c      	ldr	r3, [pc, #48]	; (8007100 <PDM_Filter+0x34>)
 80070d0:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80070d2:	429c      	cmp	r4, r3
 80070d4:	d003      	beq.n	80070de <PDM_Filter+0x12>
 80070d6:	2004      	movs	r0, #4
 80070d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80070e0:	05dc      	lsls	r4, r3, #23
 80070e2:	d407      	bmi.n	80070f4 <PDM_Filter+0x28>
 80070e4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070e8:	bf14      	ite	ne
 80070ea:	2020      	movne	r0, #32
 80070ec:	2030      	moveq	r0, #48	; 0x30
 80070ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	6c93      	ldr	r3, [r2, #72]	; 0x48
 80070f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070fa:	320c      	adds	r2, #12
 80070fc:	4718      	bx	r3
 80070fe:	bf00      	nop
 8007100:	b5e8b5cd 	.word	0xb5e8b5cd

08007104 <__errno>:
 8007104:	4b01      	ldr	r3, [pc, #4]	; (800710c <__errno+0x8>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	20000424 	.word	0x20000424

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4e0d      	ldr	r6, [pc, #52]	; (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	; (800714c <__libc_init_array+0x3c>)
 8007116:	1ba4      	subs	r4, r4, r6
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2500      	movs	r5, #0
 800711c:	42a5      	cmp	r5, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4e0b      	ldr	r6, [pc, #44]	; (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	; (8007154 <__libc_init_array+0x44>)
 8007124:	f002 f834 	bl	8009190 <_init>
 8007128:	1ba4      	subs	r4, r4, r6
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2500      	movs	r5, #0
 800712e:	42a5      	cmp	r5, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007138:	4798      	blx	r3
 800713a:	3501      	adds	r5, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007142:	4798      	blx	r3
 8007144:	3501      	adds	r5, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	0801c8c0 	.word	0x0801c8c0
 800714c:	0801c8c0 	.word	0x0801c8c0
 8007150:	0801c8c0 	.word	0x0801c8c0
 8007154:	0801c8c4 	.word	0x0801c8c4

08007158 <memset>:
 8007158:	4402      	add	r2, r0
 800715a:	4603      	mov	r3, r0
 800715c:	4293      	cmp	r3, r2
 800715e:	d100      	bne.n	8007162 <memset+0xa>
 8007160:	4770      	bx	lr
 8007162:	f803 1b01 	strb.w	r1, [r3], #1
 8007166:	e7f9      	b.n	800715c <memset+0x4>

08007168 <atan>:
 8007168:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	ec55 4b10 	vmov	r4, r5, d0
 8007170:	4bc7      	ldr	r3, [pc, #796]	; (8007490 <atan+0x328>)
 8007172:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007176:	429e      	cmp	r6, r3
 8007178:	46ab      	mov	fp, r5
 800717a:	dd18      	ble.n	80071ae <atan+0x46>
 800717c:	4ac5      	ldr	r2, [pc, #788]	; (8007494 <atan+0x32c>)
 800717e:	4296      	cmp	r6, r2
 8007180:	dc01      	bgt.n	8007186 <atan+0x1e>
 8007182:	d109      	bne.n	8007198 <atan+0x30>
 8007184:	b144      	cbz	r4, 8007198 <atan+0x30>
 8007186:	4622      	mov	r2, r4
 8007188:	462b      	mov	r3, r5
 800718a:	4620      	mov	r0, r4
 800718c:	4629      	mov	r1, r5
 800718e:	f7f9 f881 	bl	8000294 <__adddf3>
 8007192:	4604      	mov	r4, r0
 8007194:	460d      	mov	r5, r1
 8007196:	e006      	b.n	80071a6 <atan+0x3e>
 8007198:	f1bb 0f00 	cmp.w	fp, #0
 800719c:	f300 813a 	bgt.w	8007414 <atan+0x2ac>
 80071a0:	a59f      	add	r5, pc, #636	; (adr r5, 8007420 <atan+0x2b8>)
 80071a2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80071a6:	ec45 4b10 	vmov	d0, r4, r5
 80071aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ae:	4bba      	ldr	r3, [pc, #744]	; (8007498 <atan+0x330>)
 80071b0:	429e      	cmp	r6, r3
 80071b2:	dc14      	bgt.n	80071de <atan+0x76>
 80071b4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80071b8:	429e      	cmp	r6, r3
 80071ba:	dc0d      	bgt.n	80071d8 <atan+0x70>
 80071bc:	a39a      	add	r3, pc, #616	; (adr r3, 8007428 <atan+0x2c0>)
 80071be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c2:	ee10 0a10 	vmov	r0, s0
 80071c6:	4629      	mov	r1, r5
 80071c8:	f7f9 f864 	bl	8000294 <__adddf3>
 80071cc:	2200      	movs	r2, #0
 80071ce:	4bb3      	ldr	r3, [pc, #716]	; (800749c <atan+0x334>)
 80071d0:	f7f9 fca2 	bl	8000b18 <__aeabi_dcmpgt>
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1e6      	bne.n	80071a6 <atan+0x3e>
 80071d8:	f04f 3aff 	mov.w	sl, #4294967295
 80071dc:	e02b      	b.n	8007236 <atan+0xce>
 80071de:	f000 f9af 	bl	8007540 <fabs>
 80071e2:	4baf      	ldr	r3, [pc, #700]	; (80074a0 <atan+0x338>)
 80071e4:	429e      	cmp	r6, r3
 80071e6:	ec55 4b10 	vmov	r4, r5, d0
 80071ea:	f300 80bf 	bgt.w	800736c <atan+0x204>
 80071ee:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80071f2:	429e      	cmp	r6, r3
 80071f4:	f300 80a0 	bgt.w	8007338 <atan+0x1d0>
 80071f8:	ee10 2a10 	vmov	r2, s0
 80071fc:	ee10 0a10 	vmov	r0, s0
 8007200:	462b      	mov	r3, r5
 8007202:	4629      	mov	r1, r5
 8007204:	f7f9 f846 	bl	8000294 <__adddf3>
 8007208:	2200      	movs	r2, #0
 800720a:	4ba4      	ldr	r3, [pc, #656]	; (800749c <atan+0x334>)
 800720c:	f7f9 f840 	bl	8000290 <__aeabi_dsub>
 8007210:	2200      	movs	r2, #0
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800721a:	4620      	mov	r0, r4
 800721c:	4629      	mov	r1, r5
 800721e:	f7f9 f839 	bl	8000294 <__adddf3>
 8007222:	4602      	mov	r2, r0
 8007224:	460b      	mov	r3, r1
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	f7f9 fb0f 	bl	800084c <__aeabi_ddiv>
 800722e:	f04f 0a00 	mov.w	sl, #0
 8007232:	4604      	mov	r4, r0
 8007234:	460d      	mov	r5, r1
 8007236:	4622      	mov	r2, r4
 8007238:	462b      	mov	r3, r5
 800723a:	4620      	mov	r0, r4
 800723c:	4629      	mov	r1, r5
 800723e:	f7f9 f9db 	bl	80005f8 <__aeabi_dmul>
 8007242:	4602      	mov	r2, r0
 8007244:	460b      	mov	r3, r1
 8007246:	4680      	mov	r8, r0
 8007248:	4689      	mov	r9, r1
 800724a:	f7f9 f9d5 	bl	80005f8 <__aeabi_dmul>
 800724e:	a378      	add	r3, pc, #480	; (adr r3, 8007430 <atan+0x2c8>)
 8007250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007254:	4606      	mov	r6, r0
 8007256:	460f      	mov	r7, r1
 8007258:	f7f9 f9ce 	bl	80005f8 <__aeabi_dmul>
 800725c:	a376      	add	r3, pc, #472	; (adr r3, 8007438 <atan+0x2d0>)
 800725e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007262:	f7f9 f817 	bl	8000294 <__adddf3>
 8007266:	4632      	mov	r2, r6
 8007268:	463b      	mov	r3, r7
 800726a:	f7f9 f9c5 	bl	80005f8 <__aeabi_dmul>
 800726e:	a374      	add	r3, pc, #464	; (adr r3, 8007440 <atan+0x2d8>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 f80e 	bl	8000294 <__adddf3>
 8007278:	4632      	mov	r2, r6
 800727a:	463b      	mov	r3, r7
 800727c:	f7f9 f9bc 	bl	80005f8 <__aeabi_dmul>
 8007280:	a371      	add	r3, pc, #452	; (adr r3, 8007448 <atan+0x2e0>)
 8007282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007286:	f7f9 f805 	bl	8000294 <__adddf3>
 800728a:	4632      	mov	r2, r6
 800728c:	463b      	mov	r3, r7
 800728e:	f7f9 f9b3 	bl	80005f8 <__aeabi_dmul>
 8007292:	a36f      	add	r3, pc, #444	; (adr r3, 8007450 <atan+0x2e8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f8 fffc 	bl	8000294 <__adddf3>
 800729c:	4632      	mov	r2, r6
 800729e:	463b      	mov	r3, r7
 80072a0:	f7f9 f9aa 	bl	80005f8 <__aeabi_dmul>
 80072a4:	a36c      	add	r3, pc, #432	; (adr r3, 8007458 <atan+0x2f0>)
 80072a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072aa:	f7f8 fff3 	bl	8000294 <__adddf3>
 80072ae:	4642      	mov	r2, r8
 80072b0:	464b      	mov	r3, r9
 80072b2:	f7f9 f9a1 	bl	80005f8 <__aeabi_dmul>
 80072b6:	a36a      	add	r3, pc, #424	; (adr r3, 8007460 <atan+0x2f8>)
 80072b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072bc:	4680      	mov	r8, r0
 80072be:	4689      	mov	r9, r1
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f9 f998 	bl	80005f8 <__aeabi_dmul>
 80072c8:	a367      	add	r3, pc, #412	; (adr r3, 8007468 <atan+0x300>)
 80072ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072ce:	f7f8 ffdf 	bl	8000290 <__aeabi_dsub>
 80072d2:	4632      	mov	r2, r6
 80072d4:	463b      	mov	r3, r7
 80072d6:	f7f9 f98f 	bl	80005f8 <__aeabi_dmul>
 80072da:	a365      	add	r3, pc, #404	; (adr r3, 8007470 <atan+0x308>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	f7f8 ffd6 	bl	8000290 <__aeabi_dsub>
 80072e4:	4632      	mov	r2, r6
 80072e6:	463b      	mov	r3, r7
 80072e8:	f7f9 f986 	bl	80005f8 <__aeabi_dmul>
 80072ec:	a362      	add	r3, pc, #392	; (adr r3, 8007478 <atan+0x310>)
 80072ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f2:	f7f8 ffcd 	bl	8000290 <__aeabi_dsub>
 80072f6:	4632      	mov	r2, r6
 80072f8:	463b      	mov	r3, r7
 80072fa:	f7f9 f97d 	bl	80005f8 <__aeabi_dmul>
 80072fe:	a360      	add	r3, pc, #384	; (adr r3, 8007480 <atan+0x318>)
 8007300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007304:	f7f8 ffc4 	bl	8000290 <__aeabi_dsub>
 8007308:	4632      	mov	r2, r6
 800730a:	463b      	mov	r3, r7
 800730c:	f7f9 f974 	bl	80005f8 <__aeabi_dmul>
 8007310:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	d155      	bne.n	80073c6 <atan+0x25e>
 800731a:	4640      	mov	r0, r8
 800731c:	4649      	mov	r1, r9
 800731e:	f7f8 ffb9 	bl	8000294 <__adddf3>
 8007322:	4622      	mov	r2, r4
 8007324:	462b      	mov	r3, r5
 8007326:	f7f9 f967 	bl	80005f8 <__aeabi_dmul>
 800732a:	4602      	mov	r2, r0
 800732c:	460b      	mov	r3, r1
 800732e:	4620      	mov	r0, r4
 8007330:	4629      	mov	r1, r5
 8007332:	f7f8 ffad 	bl	8000290 <__aeabi_dsub>
 8007336:	e72c      	b.n	8007192 <atan+0x2a>
 8007338:	ee10 0a10 	vmov	r0, s0
 800733c:	2200      	movs	r2, #0
 800733e:	4b57      	ldr	r3, [pc, #348]	; (800749c <atan+0x334>)
 8007340:	4629      	mov	r1, r5
 8007342:	f7f8 ffa5 	bl	8000290 <__aeabi_dsub>
 8007346:	2200      	movs	r2, #0
 8007348:	4606      	mov	r6, r0
 800734a:	460f      	mov	r7, r1
 800734c:	4b53      	ldr	r3, [pc, #332]	; (800749c <atan+0x334>)
 800734e:	4620      	mov	r0, r4
 8007350:	4629      	mov	r1, r5
 8007352:	f7f8 ff9f 	bl	8000294 <__adddf3>
 8007356:	4602      	mov	r2, r0
 8007358:	460b      	mov	r3, r1
 800735a:	4630      	mov	r0, r6
 800735c:	4639      	mov	r1, r7
 800735e:	f7f9 fa75 	bl	800084c <__aeabi_ddiv>
 8007362:	f04f 0a01 	mov.w	sl, #1
 8007366:	4604      	mov	r4, r0
 8007368:	460d      	mov	r5, r1
 800736a:	e764      	b.n	8007236 <atan+0xce>
 800736c:	4b4d      	ldr	r3, [pc, #308]	; (80074a4 <atan+0x33c>)
 800736e:	429e      	cmp	r6, r3
 8007370:	dc1d      	bgt.n	80073ae <atan+0x246>
 8007372:	ee10 0a10 	vmov	r0, s0
 8007376:	2200      	movs	r2, #0
 8007378:	4b4b      	ldr	r3, [pc, #300]	; (80074a8 <atan+0x340>)
 800737a:	4629      	mov	r1, r5
 800737c:	f7f8 ff88 	bl	8000290 <__aeabi_dsub>
 8007380:	2200      	movs	r2, #0
 8007382:	4606      	mov	r6, r0
 8007384:	460f      	mov	r7, r1
 8007386:	4b48      	ldr	r3, [pc, #288]	; (80074a8 <atan+0x340>)
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f9 f934 	bl	80005f8 <__aeabi_dmul>
 8007390:	2200      	movs	r2, #0
 8007392:	4b42      	ldr	r3, [pc, #264]	; (800749c <atan+0x334>)
 8007394:	f7f8 ff7e 	bl	8000294 <__adddf3>
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	4630      	mov	r0, r6
 800739e:	4639      	mov	r1, r7
 80073a0:	f7f9 fa54 	bl	800084c <__aeabi_ddiv>
 80073a4:	f04f 0a02 	mov.w	sl, #2
 80073a8:	4604      	mov	r4, r0
 80073aa:	460d      	mov	r5, r1
 80073ac:	e743      	b.n	8007236 <atan+0xce>
 80073ae:	462b      	mov	r3, r5
 80073b0:	ee10 2a10 	vmov	r2, s0
 80073b4:	2000      	movs	r0, #0
 80073b6:	493d      	ldr	r1, [pc, #244]	; (80074ac <atan+0x344>)
 80073b8:	f7f9 fa48 	bl	800084c <__aeabi_ddiv>
 80073bc:	f04f 0a03 	mov.w	sl, #3
 80073c0:	4604      	mov	r4, r0
 80073c2:	460d      	mov	r5, r1
 80073c4:	e737      	b.n	8007236 <atan+0xce>
 80073c6:	4640      	mov	r0, r8
 80073c8:	4649      	mov	r1, r9
 80073ca:	f7f8 ff63 	bl	8000294 <__adddf3>
 80073ce:	4622      	mov	r2, r4
 80073d0:	462b      	mov	r3, r5
 80073d2:	f7f9 f911 	bl	80005f8 <__aeabi_dmul>
 80073d6:	4e36      	ldr	r6, [pc, #216]	; (80074b0 <atan+0x348>)
 80073d8:	4b36      	ldr	r3, [pc, #216]	; (80074b4 <atan+0x34c>)
 80073da:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80073de:	4456      	add	r6, sl
 80073e0:	449a      	add	sl, r3
 80073e2:	e9da 2300 	ldrd	r2, r3, [sl]
 80073e6:	f7f8 ff53 	bl	8000290 <__aeabi_dsub>
 80073ea:	4622      	mov	r2, r4
 80073ec:	462b      	mov	r3, r5
 80073ee:	f7f8 ff4f 	bl	8000290 <__aeabi_dsub>
 80073f2:	4602      	mov	r2, r0
 80073f4:	460b      	mov	r3, r1
 80073f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80073fa:	f7f8 ff49 	bl	8000290 <__aeabi_dsub>
 80073fe:	f1bb 0f00 	cmp.w	fp, #0
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	f6bf aece 	bge.w	80071a6 <atan+0x3e>
 800740a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800740e:	4604      	mov	r4, r0
 8007410:	461d      	mov	r5, r3
 8007412:	e6c8      	b.n	80071a6 <atan+0x3e>
 8007414:	a51c      	add	r5, pc, #112	; (adr r5, 8007488 <atan+0x320>)
 8007416:	e9d5 4500 	ldrd	r4, r5, [r5]
 800741a:	e6c4      	b.n	80071a6 <atan+0x3e>
 800741c:	f3af 8000 	nop.w
 8007420:	54442d18 	.word	0x54442d18
 8007424:	bff921fb 	.word	0xbff921fb
 8007428:	8800759c 	.word	0x8800759c
 800742c:	7e37e43c 	.word	0x7e37e43c
 8007430:	e322da11 	.word	0xe322da11
 8007434:	3f90ad3a 	.word	0x3f90ad3a
 8007438:	24760deb 	.word	0x24760deb
 800743c:	3fa97b4b 	.word	0x3fa97b4b
 8007440:	a0d03d51 	.word	0xa0d03d51
 8007444:	3fb10d66 	.word	0x3fb10d66
 8007448:	c54c206e 	.word	0xc54c206e
 800744c:	3fb745cd 	.word	0x3fb745cd
 8007450:	920083ff 	.word	0x920083ff
 8007454:	3fc24924 	.word	0x3fc24924
 8007458:	5555550d 	.word	0x5555550d
 800745c:	3fd55555 	.word	0x3fd55555
 8007460:	2c6a6c2f 	.word	0x2c6a6c2f
 8007464:	bfa2b444 	.word	0xbfa2b444
 8007468:	52defd9a 	.word	0x52defd9a
 800746c:	3fadde2d 	.word	0x3fadde2d
 8007470:	af749a6d 	.word	0xaf749a6d
 8007474:	3fb3b0f2 	.word	0x3fb3b0f2
 8007478:	fe231671 	.word	0xfe231671
 800747c:	3fbc71c6 	.word	0x3fbc71c6
 8007480:	9998ebc4 	.word	0x9998ebc4
 8007484:	3fc99999 	.word	0x3fc99999
 8007488:	54442d18 	.word	0x54442d18
 800748c:	3ff921fb 	.word	0x3ff921fb
 8007490:	440fffff 	.word	0x440fffff
 8007494:	7ff00000 	.word	0x7ff00000
 8007498:	3fdbffff 	.word	0x3fdbffff
 800749c:	3ff00000 	.word	0x3ff00000
 80074a0:	3ff2ffff 	.word	0x3ff2ffff
 80074a4:	40037fff 	.word	0x40037fff
 80074a8:	3ff80000 	.word	0x3ff80000
 80074ac:	bff00000 	.word	0xbff00000
 80074b0:	0801c668 	.word	0x0801c668
 80074b4:	0801c688 	.word	0x0801c688

080074b8 <cos>:
 80074b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80074ba:	ec51 0b10 	vmov	r0, r1, d0
 80074be:	4a1e      	ldr	r2, [pc, #120]	; (8007538 <cos+0x80>)
 80074c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80074c4:	4293      	cmp	r3, r2
 80074c6:	dc06      	bgt.n	80074d6 <cos+0x1e>
 80074c8:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8007530 <cos+0x78>
 80074cc:	f000 ff50 	bl	8008370 <__kernel_cos>
 80074d0:	ec51 0b10 	vmov	r0, r1, d0
 80074d4:	e007      	b.n	80074e6 <cos+0x2e>
 80074d6:	4a19      	ldr	r2, [pc, #100]	; (800753c <cos+0x84>)
 80074d8:	4293      	cmp	r3, r2
 80074da:	dd09      	ble.n	80074f0 <cos+0x38>
 80074dc:	ee10 2a10 	vmov	r2, s0
 80074e0:	460b      	mov	r3, r1
 80074e2:	f7f8 fed5 	bl	8000290 <__aeabi_dsub>
 80074e6:	ec41 0b10 	vmov	d0, r0, r1
 80074ea:	b005      	add	sp, #20
 80074ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80074f0:	4668      	mov	r0, sp
 80074f2:	f000 fa41 	bl	8007978 <__ieee754_rem_pio2>
 80074f6:	f000 0003 	and.w	r0, r0, #3
 80074fa:	2801      	cmp	r0, #1
 80074fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8007500:	ed9d 0b00 	vldr	d0, [sp]
 8007504:	d007      	beq.n	8007516 <cos+0x5e>
 8007506:	2802      	cmp	r0, #2
 8007508:	d00e      	beq.n	8007528 <cos+0x70>
 800750a:	2800      	cmp	r0, #0
 800750c:	d0de      	beq.n	80074cc <cos+0x14>
 800750e:	2001      	movs	r0, #1
 8007510:	f001 fb66 	bl	8008be0 <__kernel_sin>
 8007514:	e7dc      	b.n	80074d0 <cos+0x18>
 8007516:	f001 fb63 	bl	8008be0 <__kernel_sin>
 800751a:	ec53 2b10 	vmov	r2, r3, d0
 800751e:	ee10 0a10 	vmov	r0, s0
 8007522:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8007526:	e7de      	b.n	80074e6 <cos+0x2e>
 8007528:	f000 ff22 	bl	8008370 <__kernel_cos>
 800752c:	e7f5      	b.n	800751a <cos+0x62>
 800752e:	bf00      	nop
	...
 8007538:	3fe921fb 	.word	0x3fe921fb
 800753c:	7fefffff 	.word	0x7fefffff

08007540 <fabs>:
 8007540:	ec53 2b10 	vmov	r2, r3, d0
 8007544:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007548:	ec43 2b10 	vmov	d0, r2, r3
 800754c:	4770      	bx	lr
	...

08007550 <round>:
 8007550:	ec51 0b10 	vmov	r0, r1, d0
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800755a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800755e:	2c13      	cmp	r4, #19
 8007560:	460b      	mov	r3, r1
 8007562:	460f      	mov	r7, r1
 8007564:	dc17      	bgt.n	8007596 <round+0x46>
 8007566:	2c00      	cmp	r4, #0
 8007568:	da09      	bge.n	800757e <round+0x2e>
 800756a:	3401      	adds	r4, #1
 800756c:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8007570:	d103      	bne.n	800757a <round+0x2a>
 8007572:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8007576:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800757a:	2100      	movs	r1, #0
 800757c:	e028      	b.n	80075d0 <round+0x80>
 800757e:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <round+0x88>)
 8007580:	4122      	asrs	r2, r4
 8007582:	4211      	tst	r1, r2
 8007584:	d100      	bne.n	8007588 <round+0x38>
 8007586:	b180      	cbz	r0, 80075aa <round+0x5a>
 8007588:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800758c:	4123      	asrs	r3, r4
 800758e:	443b      	add	r3, r7
 8007590:	ea23 0302 	bic.w	r3, r3, r2
 8007594:	e7f1      	b.n	800757a <round+0x2a>
 8007596:	2c33      	cmp	r4, #51	; 0x33
 8007598:	dd0a      	ble.n	80075b0 <round+0x60>
 800759a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800759e:	d104      	bne.n	80075aa <round+0x5a>
 80075a0:	ee10 2a10 	vmov	r2, s0
 80075a4:	460b      	mov	r3, r1
 80075a6:	f7f8 fe75 	bl	8000294 <__adddf3>
 80075aa:	ec41 0b10 	vmov	d0, r0, r1
 80075ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075b0:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 80075b4:	f04f 35ff 	mov.w	r5, #4294967295
 80075b8:	40d5      	lsrs	r5, r2
 80075ba:	4228      	tst	r0, r5
 80075bc:	d0f5      	beq.n	80075aa <round+0x5a>
 80075be:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80075c2:	2201      	movs	r2, #1
 80075c4:	40a2      	lsls	r2, r4
 80075c6:	1812      	adds	r2, r2, r0
 80075c8:	bf28      	it	cs
 80075ca:	3301      	addcs	r3, #1
 80075cc:	ea22 0105 	bic.w	r1, r2, r5
 80075d0:	4608      	mov	r0, r1
 80075d2:	4619      	mov	r1, r3
 80075d4:	e7e9      	b.n	80075aa <round+0x5a>
 80075d6:	bf00      	nop
 80075d8:	000fffff 	.word	0x000fffff

080075dc <powf>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	ed2d 8b04 	vpush	{d8-d9}
 80075e2:	4cb5      	ldr	r4, [pc, #724]	; (80078b8 <powf+0x2dc>)
 80075e4:	b08a      	sub	sp, #40	; 0x28
 80075e6:	eef0 8a40 	vmov.f32	s17, s0
 80075ea:	eeb0 8a60 	vmov.f32	s16, s1
 80075ee:	f000 fbb5 	bl	8007d5c <__ieee754_powf>
 80075f2:	f994 5000 	ldrsb.w	r5, [r4]
 80075f6:	1c6b      	adds	r3, r5, #1
 80075f8:	eeb0 9a40 	vmov.f32	s18, s0
 80075fc:	4626      	mov	r6, r4
 80075fe:	d05d      	beq.n	80076bc <powf+0xe0>
 8007600:	eeb4 8a48 	vcmp.f32	s16, s16
 8007604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007608:	d658      	bvs.n	80076bc <powf+0xe0>
 800760a:	eef4 8a68 	vcmp.f32	s17, s17
 800760e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007612:	d721      	bvc.n	8007658 <powf+0x7c>
 8007614:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761c:	d14e      	bne.n	80076bc <powf+0xe0>
 800761e:	2301      	movs	r3, #1
 8007620:	9300      	str	r3, [sp, #0]
 8007622:	4ba6      	ldr	r3, [pc, #664]	; (80078bc <powf+0x2e0>)
 8007624:	9301      	str	r3, [sp, #4]
 8007626:	ee18 0a90 	vmov	r0, s17
 800762a:	2300      	movs	r3, #0
 800762c:	9308      	str	r3, [sp, #32]
 800762e:	f7f8 ff8f 	bl	8000550 <__aeabi_f2d>
 8007632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007636:	ee18 0a10 	vmov	r0, s16
 800763a:	f7f8 ff89 	bl	8000550 <__aeabi_f2d>
 800763e:	4ba0      	ldr	r3, [pc, #640]	; (80078c0 <powf+0x2e4>)
 8007640:	2200      	movs	r2, #0
 8007642:	2d02      	cmp	r5, #2
 8007644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007648:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800764c:	d030      	beq.n	80076b0 <powf+0xd4>
 800764e:	4668      	mov	r0, sp
 8007650:	f001 fc06 	bl	8008e60 <matherr>
 8007654:	bb30      	cbnz	r0, 80076a4 <powf+0xc8>
 8007656:	e062      	b.n	800771e <powf+0x142>
 8007658:	eef5 8a40 	vcmp.f32	s17, #0.0
 800765c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007660:	d162      	bne.n	8007728 <powf+0x14c>
 8007662:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8007666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800766a:	d12d      	bne.n	80076c8 <powf+0xec>
 800766c:	2301      	movs	r3, #1
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4b92      	ldr	r3, [pc, #584]	; (80078bc <powf+0x2e0>)
 8007672:	9301      	str	r3, [sp, #4]
 8007674:	ee18 0a90 	vmov	r0, s17
 8007678:	2300      	movs	r3, #0
 800767a:	9308      	str	r3, [sp, #32]
 800767c:	f7f8 ff68 	bl	8000550 <__aeabi_f2d>
 8007680:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007684:	ee18 0a10 	vmov	r0, s16
 8007688:	f7f8 ff62 	bl	8000550 <__aeabi_f2d>
 800768c:	2200      	movs	r2, #0
 800768e:	2300      	movs	r3, #0
 8007690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007694:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007698:	2d00      	cmp	r5, #0
 800769a:	d0d8      	beq.n	800764e <powf+0x72>
 800769c:	4b88      	ldr	r3, [pc, #544]	; (80078c0 <powf+0x2e4>)
 800769e:	2200      	movs	r2, #0
 80076a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80076a4:	9b08      	ldr	r3, [sp, #32]
 80076a6:	b11b      	cbz	r3, 80076b0 <powf+0xd4>
 80076a8:	f7ff fd2c 	bl	8007104 <__errno>
 80076ac:	9b08      	ldr	r3, [sp, #32]
 80076ae:	6003      	str	r3, [r0, #0]
 80076b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80076b4:	f7f9 fa82 	bl	8000bbc <__aeabi_d2f>
 80076b8:	ee09 0a10 	vmov	s18, r0
 80076bc:	eeb0 0a49 	vmov.f32	s0, s18
 80076c0:	b00a      	add	sp, #40	; 0x28
 80076c2:	ecbd 8b04 	vpop	{d8-d9}
 80076c6:	bd70      	pop	{r4, r5, r6, pc}
 80076c8:	eeb0 0a48 	vmov.f32	s0, s16
 80076cc:	f001 fcd5 	bl	800907a <finitef>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d0f3      	beq.n	80076bc <powf+0xe0>
 80076d4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80076d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076dc:	d5ee      	bpl.n	80076bc <powf+0xe0>
 80076de:	2301      	movs	r3, #1
 80076e0:	9300      	str	r3, [sp, #0]
 80076e2:	4b76      	ldr	r3, [pc, #472]	; (80078bc <powf+0x2e0>)
 80076e4:	9301      	str	r3, [sp, #4]
 80076e6:	ee18 0a90 	vmov	r0, s17
 80076ea:	2300      	movs	r3, #0
 80076ec:	9308      	str	r3, [sp, #32]
 80076ee:	f7f8 ff2f 	bl	8000550 <__aeabi_f2d>
 80076f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80076f6:	ee18 0a10 	vmov	r0, s16
 80076fa:	f7f8 ff29 	bl	8000550 <__aeabi_f2d>
 80076fe:	f994 3000 	ldrsb.w	r3, [r4]
 8007702:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007706:	b923      	cbnz	r3, 8007712 <powf+0x136>
 8007708:	2200      	movs	r2, #0
 800770a:	2300      	movs	r3, #0
 800770c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007710:	e79d      	b.n	800764e <powf+0x72>
 8007712:	496c      	ldr	r1, [pc, #432]	; (80078c4 <powf+0x2e8>)
 8007714:	2000      	movs	r0, #0
 8007716:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800771a:	2b02      	cmp	r3, #2
 800771c:	d197      	bne.n	800764e <powf+0x72>
 800771e:	f7ff fcf1 	bl	8007104 <__errno>
 8007722:	2321      	movs	r3, #33	; 0x21
 8007724:	6003      	str	r3, [r0, #0]
 8007726:	e7bd      	b.n	80076a4 <powf+0xc8>
 8007728:	f001 fca7 	bl	800907a <finitef>
 800772c:	4605      	mov	r5, r0
 800772e:	2800      	cmp	r0, #0
 8007730:	f040 8091 	bne.w	8007856 <powf+0x27a>
 8007734:	eeb0 0a68 	vmov.f32	s0, s17
 8007738:	f001 fc9f 	bl	800907a <finitef>
 800773c:	2800      	cmp	r0, #0
 800773e:	f000 808a 	beq.w	8007856 <powf+0x27a>
 8007742:	eeb0 0a48 	vmov.f32	s0, s16
 8007746:	f001 fc98 	bl	800907a <finitef>
 800774a:	2800      	cmp	r0, #0
 800774c:	f000 8083 	beq.w	8007856 <powf+0x27a>
 8007750:	eeb4 9a49 	vcmp.f32	s18, s18
 8007754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007758:	f994 4000 	ldrsb.w	r4, [r4]
 800775c:	4b57      	ldr	r3, [pc, #348]	; (80078bc <powf+0x2e0>)
 800775e:	d71b      	bvc.n	8007798 <powf+0x1bc>
 8007760:	2201      	movs	r2, #1
 8007762:	ee18 0a90 	vmov	r0, s17
 8007766:	e88d 000c 	stmia.w	sp, {r2, r3}
 800776a:	9508      	str	r5, [sp, #32]
 800776c:	f7f8 fef0 	bl	8000550 <__aeabi_f2d>
 8007770:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007774:	ee18 0a10 	vmov	r0, s16
 8007778:	f7f8 feea 	bl	8000550 <__aeabi_f2d>
 800777c:	2200      	movs	r2, #0
 800777e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007782:	2300      	movs	r3, #0
 8007784:	2c00      	cmp	r4, #0
 8007786:	d0c1      	beq.n	800770c <powf+0x130>
 8007788:	4610      	mov	r0, r2
 800778a:	4619      	mov	r1, r3
 800778c:	f7f9 f85e 	bl	800084c <__aeabi_ddiv>
 8007790:	2c02      	cmp	r4, #2
 8007792:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007796:	e7c1      	b.n	800771c <powf+0x140>
 8007798:	2203      	movs	r2, #3
 800779a:	ee18 0a90 	vmov	r0, s17
 800779e:	e88d 000c 	stmia.w	sp, {r2, r3}
 80077a2:	9508      	str	r5, [sp, #32]
 80077a4:	f7f8 fed4 	bl	8000550 <__aeabi_f2d>
 80077a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ac:	ee18 0a10 	vmov	r0, s16
 80077b0:	f7f8 fece 	bl	8000550 <__aeabi_f2d>
 80077b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80077b8:	bb5c      	cbnz	r4, 8007812 <powf+0x236>
 80077ba:	4b43      	ldr	r3, [pc, #268]	; (80078c8 <powf+0x2ec>)
 80077bc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80077c0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80077c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80077cc:	d56c      	bpl.n	80078a8 <powf+0x2cc>
 80077ce:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80077d2:	ee68 7a27 	vmul.f32	s15, s16, s15
 80077d6:	ee17 0a90 	vmov	r0, s15
 80077da:	f7f8 feb9 	bl	8000550 <__aeabi_f2d>
 80077de:	4604      	mov	r4, r0
 80077e0:	460d      	mov	r5, r1
 80077e2:	ec45 4b10 	vmov	d0, r4, r5
 80077e6:	f001 fb3d 	bl	8008e64 <rint>
 80077ea:	4620      	mov	r0, r4
 80077ec:	ec53 2b10 	vmov	r2, r3, d0
 80077f0:	4629      	mov	r1, r5
 80077f2:	f7f9 f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80077f6:	b920      	cbnz	r0, 8007802 <powf+0x226>
 80077f8:	4b34      	ldr	r3, [pc, #208]	; (80078cc <powf+0x2f0>)
 80077fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80077fe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007802:	f996 3000 	ldrsb.w	r3, [r6]
 8007806:	2b02      	cmp	r3, #2
 8007808:	d14e      	bne.n	80078a8 <powf+0x2cc>
 800780a:	f7ff fc7b 	bl	8007104 <__errno>
 800780e:	2322      	movs	r3, #34	; 0x22
 8007810:	e788      	b.n	8007724 <powf+0x148>
 8007812:	4b2f      	ldr	r3, [pc, #188]	; (80078d0 <powf+0x2f4>)
 8007814:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8007818:	2200      	movs	r2, #0
 800781a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800781e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007822:	d5ee      	bpl.n	8007802 <powf+0x226>
 8007824:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007828:	ee68 7a27 	vmul.f32	s15, s16, s15
 800782c:	ee17 0a90 	vmov	r0, s15
 8007830:	f7f8 fe8e 	bl	8000550 <__aeabi_f2d>
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	ec45 4b10 	vmov	d0, r4, r5
 800783c:	f001 fb12 	bl	8008e64 <rint>
 8007840:	4620      	mov	r0, r4
 8007842:	ec53 2b10 	vmov	r2, r3, d0
 8007846:	4629      	mov	r1, r5
 8007848:	f7f9 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800784c:	2800      	cmp	r0, #0
 800784e:	d1d8      	bne.n	8007802 <powf+0x226>
 8007850:	2200      	movs	r2, #0
 8007852:	4b1c      	ldr	r3, [pc, #112]	; (80078c4 <powf+0x2e8>)
 8007854:	e7d3      	b.n	80077fe <powf+0x222>
 8007856:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800785a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800785e:	f47f af2d 	bne.w	80076bc <powf+0xe0>
 8007862:	eeb0 0a68 	vmov.f32	s0, s17
 8007866:	f001 fc08 	bl	800907a <finitef>
 800786a:	2800      	cmp	r0, #0
 800786c:	f43f af26 	beq.w	80076bc <powf+0xe0>
 8007870:	eeb0 0a48 	vmov.f32	s0, s16
 8007874:	f001 fc01 	bl	800907a <finitef>
 8007878:	2800      	cmp	r0, #0
 800787a:	f43f af1f 	beq.w	80076bc <powf+0xe0>
 800787e:	2304      	movs	r3, #4
 8007880:	9300      	str	r3, [sp, #0]
 8007882:	4b0e      	ldr	r3, [pc, #56]	; (80078bc <powf+0x2e0>)
 8007884:	9301      	str	r3, [sp, #4]
 8007886:	ee18 0a90 	vmov	r0, s17
 800788a:	2300      	movs	r3, #0
 800788c:	9308      	str	r3, [sp, #32]
 800788e:	f7f8 fe5f 	bl	8000550 <__aeabi_f2d>
 8007892:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007896:	ee18 0a10 	vmov	r0, s16
 800789a:	f7f8 fe59 	bl	8000550 <__aeabi_f2d>
 800789e:	2200      	movs	r2, #0
 80078a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80078a4:	2300      	movs	r3, #0
 80078a6:	e7aa      	b.n	80077fe <powf+0x222>
 80078a8:	4668      	mov	r0, sp
 80078aa:	f001 fad9 	bl	8008e60 <matherr>
 80078ae:	2800      	cmp	r0, #0
 80078b0:	f47f aef8 	bne.w	80076a4 <powf+0xc8>
 80078b4:	e7a9      	b.n	800780a <powf+0x22e>
 80078b6:	bf00      	nop
 80078b8:	20000488 	.word	0x20000488
 80078bc:	0801c6a8 	.word	0x0801c6a8
 80078c0:	3ff00000 	.word	0x3ff00000
 80078c4:	fff00000 	.word	0xfff00000
 80078c8:	47efffff 	.word	0x47efffff
 80078cc:	c7efffff 	.word	0xc7efffff
 80078d0:	7ff00000 	.word	0x7ff00000

080078d4 <sqrtf>:
 80078d4:	b510      	push	{r4, lr}
 80078d6:	ed2d 8b02 	vpush	{d8}
 80078da:	b08a      	sub	sp, #40	; 0x28
 80078dc:	eeb0 8a40 	vmov.f32	s16, s0
 80078e0:	f000 fcfe 	bl	80082e0 <__ieee754_sqrtf>
 80078e4:	4b21      	ldr	r3, [pc, #132]	; (800796c <sqrtf+0x98>)
 80078e6:	f993 4000 	ldrsb.w	r4, [r3]
 80078ea:	1c63      	adds	r3, r4, #1
 80078ec:	d02c      	beq.n	8007948 <sqrtf+0x74>
 80078ee:	eeb4 8a48 	vcmp.f32	s16, s16
 80078f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80078f6:	d627      	bvs.n	8007948 <sqrtf+0x74>
 80078f8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80078fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007900:	d522      	bpl.n	8007948 <sqrtf+0x74>
 8007902:	2301      	movs	r3, #1
 8007904:	9300      	str	r3, [sp, #0]
 8007906:	4b1a      	ldr	r3, [pc, #104]	; (8007970 <sqrtf+0x9c>)
 8007908:	9301      	str	r3, [sp, #4]
 800790a:	ee18 0a10 	vmov	r0, s16
 800790e:	2300      	movs	r3, #0
 8007910:	9308      	str	r3, [sp, #32]
 8007912:	f7f8 fe1d 	bl	8000550 <__aeabi_f2d>
 8007916:	2200      	movs	r2, #0
 8007918:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800791c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007920:	2300      	movs	r3, #0
 8007922:	b9ac      	cbnz	r4, 8007950 <sqrtf+0x7c>
 8007924:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007928:	4668      	mov	r0, sp
 800792a:	f001 fa99 	bl	8008e60 <matherr>
 800792e:	b1b8      	cbz	r0, 8007960 <sqrtf+0x8c>
 8007930:	9b08      	ldr	r3, [sp, #32]
 8007932:	b11b      	cbz	r3, 800793c <sqrtf+0x68>
 8007934:	f7ff fbe6 	bl	8007104 <__errno>
 8007938:	9b08      	ldr	r3, [sp, #32]
 800793a:	6003      	str	r3, [r0, #0]
 800793c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007940:	f7f9 f93c 	bl	8000bbc <__aeabi_d2f>
 8007944:	ee00 0a10 	vmov	s0, r0
 8007948:	b00a      	add	sp, #40	; 0x28
 800794a:	ecbd 8b02 	vpop	{d8}
 800794e:	bd10      	pop	{r4, pc}
 8007950:	4610      	mov	r0, r2
 8007952:	4619      	mov	r1, r3
 8007954:	f7f8 ff7a 	bl	800084c <__aeabi_ddiv>
 8007958:	2c02      	cmp	r4, #2
 800795a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800795e:	d1e3      	bne.n	8007928 <sqrtf+0x54>
 8007960:	f7ff fbd0 	bl	8007104 <__errno>
 8007964:	2321      	movs	r3, #33	; 0x21
 8007966:	6003      	str	r3, [r0, #0]
 8007968:	e7e2      	b.n	8007930 <sqrtf+0x5c>
 800796a:	bf00      	nop
 800796c:	20000488 	.word	0x20000488
 8007970:	0801c6ad 	.word	0x0801c6ad
 8007974:	00000000 	.word	0x00000000

08007978 <__ieee754_rem_pio2>:
 8007978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800797c:	ec57 6b10 	vmov	r6, r7, d0
 8007980:	4bc3      	ldr	r3, [pc, #780]	; (8007c90 <__ieee754_rem_pio2+0x318>)
 8007982:	b08d      	sub	sp, #52	; 0x34
 8007984:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8007988:	4598      	cmp	r8, r3
 800798a:	4604      	mov	r4, r0
 800798c:	9704      	str	r7, [sp, #16]
 800798e:	dc07      	bgt.n	80079a0 <__ieee754_rem_pio2+0x28>
 8007990:	2200      	movs	r2, #0
 8007992:	2300      	movs	r3, #0
 8007994:	ed84 0b00 	vstr	d0, [r4]
 8007998:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800799c:	2500      	movs	r5, #0
 800799e:	e027      	b.n	80079f0 <__ieee754_rem_pio2+0x78>
 80079a0:	4bbc      	ldr	r3, [pc, #752]	; (8007c94 <__ieee754_rem_pio2+0x31c>)
 80079a2:	4598      	cmp	r8, r3
 80079a4:	dc75      	bgt.n	8007a92 <__ieee754_rem_pio2+0x11a>
 80079a6:	9b04      	ldr	r3, [sp, #16]
 80079a8:	4dbb      	ldr	r5, [pc, #748]	; (8007c98 <__ieee754_rem_pio2+0x320>)
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	ee10 0a10 	vmov	r0, s0
 80079b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8007c58 <__ieee754_rem_pio2+0x2e0>)
 80079b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b6:	4639      	mov	r1, r7
 80079b8:	dd36      	ble.n	8007a28 <__ieee754_rem_pio2+0xb0>
 80079ba:	f7f8 fc69 	bl	8000290 <__aeabi_dsub>
 80079be:	45a8      	cmp	r8, r5
 80079c0:	4606      	mov	r6, r0
 80079c2:	460f      	mov	r7, r1
 80079c4:	d018      	beq.n	80079f8 <__ieee754_rem_pio2+0x80>
 80079c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8007c60 <__ieee754_rem_pio2+0x2e8>)
 80079c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079cc:	f7f8 fc60 	bl	8000290 <__aeabi_dsub>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	e9c4 2300 	strd	r2, r3, [r4]
 80079d8:	4630      	mov	r0, r6
 80079da:	4639      	mov	r1, r7
 80079dc:	f7f8 fc58 	bl	8000290 <__aeabi_dsub>
 80079e0:	a39f      	add	r3, pc, #636	; (adr r3, 8007c60 <__ieee754_rem_pio2+0x2e8>)
 80079e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e6:	f7f8 fc53 	bl	8000290 <__aeabi_dsub>
 80079ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80079ee:	2501      	movs	r5, #1
 80079f0:	4628      	mov	r0, r5
 80079f2:	b00d      	add	sp, #52	; 0x34
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	a39b      	add	r3, pc, #620	; (adr r3, 8007c68 <__ieee754_rem_pio2+0x2f0>)
 80079fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079fe:	f7f8 fc47 	bl	8000290 <__aeabi_dsub>
 8007a02:	a39b      	add	r3, pc, #620	; (adr r3, 8007c70 <__ieee754_rem_pio2+0x2f8>)
 8007a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a08:	4606      	mov	r6, r0
 8007a0a:	460f      	mov	r7, r1
 8007a0c:	f7f8 fc40 	bl	8000290 <__aeabi_dsub>
 8007a10:	4602      	mov	r2, r0
 8007a12:	460b      	mov	r3, r1
 8007a14:	e9c4 2300 	strd	r2, r3, [r4]
 8007a18:	4630      	mov	r0, r6
 8007a1a:	4639      	mov	r1, r7
 8007a1c:	f7f8 fc38 	bl	8000290 <__aeabi_dsub>
 8007a20:	a393      	add	r3, pc, #588	; (adr r3, 8007c70 <__ieee754_rem_pio2+0x2f8>)
 8007a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a26:	e7de      	b.n	80079e6 <__ieee754_rem_pio2+0x6e>
 8007a28:	f7f8 fc34 	bl	8000294 <__adddf3>
 8007a2c:	45a8      	cmp	r8, r5
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460f      	mov	r7, r1
 8007a32:	d016      	beq.n	8007a62 <__ieee754_rem_pio2+0xea>
 8007a34:	a38a      	add	r3, pc, #552	; (adr r3, 8007c60 <__ieee754_rem_pio2+0x2e8>)
 8007a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a3a:	f7f8 fc2b 	bl	8000294 <__adddf3>
 8007a3e:	4602      	mov	r2, r0
 8007a40:	460b      	mov	r3, r1
 8007a42:	e9c4 2300 	strd	r2, r3, [r4]
 8007a46:	4630      	mov	r0, r6
 8007a48:	4639      	mov	r1, r7
 8007a4a:	f7f8 fc21 	bl	8000290 <__aeabi_dsub>
 8007a4e:	a384      	add	r3, pc, #528	; (adr r3, 8007c60 <__ieee754_rem_pio2+0x2e8>)
 8007a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a54:	f7f8 fc1e 	bl	8000294 <__adddf3>
 8007a58:	f04f 35ff 	mov.w	r5, #4294967295
 8007a5c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007a60:	e7c6      	b.n	80079f0 <__ieee754_rem_pio2+0x78>
 8007a62:	a381      	add	r3, pc, #516	; (adr r3, 8007c68 <__ieee754_rem_pio2+0x2f0>)
 8007a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a68:	f7f8 fc14 	bl	8000294 <__adddf3>
 8007a6c:	a380      	add	r3, pc, #512	; (adr r3, 8007c70 <__ieee754_rem_pio2+0x2f8>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	4606      	mov	r6, r0
 8007a74:	460f      	mov	r7, r1
 8007a76:	f7f8 fc0d 	bl	8000294 <__adddf3>
 8007a7a:	4602      	mov	r2, r0
 8007a7c:	460b      	mov	r3, r1
 8007a7e:	e9c4 2300 	strd	r2, r3, [r4]
 8007a82:	4630      	mov	r0, r6
 8007a84:	4639      	mov	r1, r7
 8007a86:	f7f8 fc03 	bl	8000290 <__aeabi_dsub>
 8007a8a:	a379      	add	r3, pc, #484	; (adr r3, 8007c70 <__ieee754_rem_pio2+0x2f8>)
 8007a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a90:	e7e0      	b.n	8007a54 <__ieee754_rem_pio2+0xdc>
 8007a92:	4b82      	ldr	r3, [pc, #520]	; (8007c9c <__ieee754_rem_pio2+0x324>)
 8007a94:	4598      	cmp	r8, r3
 8007a96:	f300 80d0 	bgt.w	8007c3a <__ieee754_rem_pio2+0x2c2>
 8007a9a:	f7ff fd51 	bl	8007540 <fabs>
 8007a9e:	ec57 6b10 	vmov	r6, r7, d0
 8007aa2:	ee10 0a10 	vmov	r0, s0
 8007aa6:	a374      	add	r3, pc, #464	; (adr r3, 8007c78 <__ieee754_rem_pio2+0x300>)
 8007aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aac:	4639      	mov	r1, r7
 8007aae:	f7f8 fda3 	bl	80005f8 <__aeabi_dmul>
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	4b7a      	ldr	r3, [pc, #488]	; (8007ca0 <__ieee754_rem_pio2+0x328>)
 8007ab6:	f7f8 fbed 	bl	8000294 <__adddf3>
 8007aba:	f7f9 f837 	bl	8000b2c <__aeabi_d2iz>
 8007abe:	4605      	mov	r5, r0
 8007ac0:	f7f8 fd34 	bl	800052c <__aeabi_i2d>
 8007ac4:	a364      	add	r3, pc, #400	; (adr r3, 8007c58 <__ieee754_rem_pio2+0x2e0>)
 8007ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ace:	f7f8 fd93 	bl	80005f8 <__aeabi_dmul>
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	4639      	mov	r1, r7
 8007ada:	f7f8 fbd9 	bl	8000290 <__aeabi_dsub>
 8007ade:	a360      	add	r3, pc, #384	; (adr r3, 8007c60 <__ieee754_rem_pio2+0x2e8>)
 8007ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae4:	4682      	mov	sl, r0
 8007ae6:	468b      	mov	fp, r1
 8007ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007aec:	f7f8 fd84 	bl	80005f8 <__aeabi_dmul>
 8007af0:	2d1f      	cmp	r5, #31
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	dc2a      	bgt.n	8007b4e <__ieee754_rem_pio2+0x1d6>
 8007af8:	1e6a      	subs	r2, r5, #1
 8007afa:	4b6a      	ldr	r3, [pc, #424]	; (8007ca4 <__ieee754_rem_pio2+0x32c>)
 8007afc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b00:	4598      	cmp	r8, r3
 8007b02:	d024      	beq.n	8007b4e <__ieee754_rem_pio2+0x1d6>
 8007b04:	4632      	mov	r2, r6
 8007b06:	463b      	mov	r3, r7
 8007b08:	4650      	mov	r0, sl
 8007b0a:	4659      	mov	r1, fp
 8007b0c:	f7f8 fbc0 	bl	8000290 <__aeabi_dsub>
 8007b10:	e9c4 0100 	strd	r0, r1, [r4]
 8007b14:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007b18:	4650      	mov	r0, sl
 8007b1a:	4642      	mov	r2, r8
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	4659      	mov	r1, fp
 8007b20:	f7f8 fbb6 	bl	8000290 <__aeabi_dsub>
 8007b24:	463b      	mov	r3, r7
 8007b26:	4632      	mov	r2, r6
 8007b28:	f7f8 fbb2 	bl	8000290 <__aeabi_dsub>
 8007b2c:	9b04      	ldr	r3, [sp, #16]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b34:	f6bf af5c 	bge.w	80079f0 <__ieee754_rem_pio2+0x78>
 8007b38:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007b3c:	6063      	str	r3, [r4, #4]
 8007b3e:	f8c4 8000 	str.w	r8, [r4]
 8007b42:	60a0      	str	r0, [r4, #8]
 8007b44:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b48:	60e3      	str	r3, [r4, #12]
 8007b4a:	426d      	negs	r5, r5
 8007b4c:	e750      	b.n	80079f0 <__ieee754_rem_pio2+0x78>
 8007b4e:	4632      	mov	r2, r6
 8007b50:	463b      	mov	r3, r7
 8007b52:	4650      	mov	r0, sl
 8007b54:	4659      	mov	r1, fp
 8007b56:	f7f8 fb9b 	bl	8000290 <__aeabi_dsub>
 8007b5a:	ea4f 5228 	mov.w	r2, r8, asr #20
 8007b5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b10      	cmp	r3, #16
 8007b66:	e9c4 0100 	strd	r0, r1, [r4]
 8007b6a:	9205      	str	r2, [sp, #20]
 8007b6c:	ddd2      	ble.n	8007b14 <__ieee754_rem_pio2+0x19c>
 8007b6e:	a33e      	add	r3, pc, #248	; (adr r3, 8007c68 <__ieee754_rem_pio2+0x2f0>)
 8007b70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b78:	f7f8 fd3e 	bl	80005f8 <__aeabi_dmul>
 8007b7c:	4606      	mov	r6, r0
 8007b7e:	460f      	mov	r7, r1
 8007b80:	4602      	mov	r2, r0
 8007b82:	460b      	mov	r3, r1
 8007b84:	4650      	mov	r0, sl
 8007b86:	4659      	mov	r1, fp
 8007b88:	f7f8 fb82 	bl	8000290 <__aeabi_dsub>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	460b      	mov	r3, r1
 8007b90:	4680      	mov	r8, r0
 8007b92:	4689      	mov	r9, r1
 8007b94:	4650      	mov	r0, sl
 8007b96:	4659      	mov	r1, fp
 8007b98:	f7f8 fb7a 	bl	8000290 <__aeabi_dsub>
 8007b9c:	4632      	mov	r2, r6
 8007b9e:	463b      	mov	r3, r7
 8007ba0:	f7f8 fb76 	bl	8000290 <__aeabi_dsub>
 8007ba4:	a332      	add	r3, pc, #200	; (adr r3, 8007c70 <__ieee754_rem_pio2+0x2f8>)
 8007ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007baa:	4606      	mov	r6, r0
 8007bac:	460f      	mov	r7, r1
 8007bae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007bb2:	f7f8 fd21 	bl	80005f8 <__aeabi_dmul>
 8007bb6:	4632      	mov	r2, r6
 8007bb8:	463b      	mov	r3, r7
 8007bba:	f7f8 fb69 	bl	8000290 <__aeabi_dsub>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	460b      	mov	r3, r1
 8007bc2:	4606      	mov	r6, r0
 8007bc4:	460f      	mov	r7, r1
 8007bc6:	4640      	mov	r0, r8
 8007bc8:	4649      	mov	r1, r9
 8007bca:	f7f8 fb61 	bl	8000290 <__aeabi_dsub>
 8007bce:	9a05      	ldr	r2, [sp, #20]
 8007bd0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b31      	cmp	r3, #49	; 0x31
 8007bd8:	e9c4 0100 	strd	r0, r1, [r4]
 8007bdc:	dd2a      	ble.n	8007c34 <__ieee754_rem_pio2+0x2bc>
 8007bde:	a328      	add	r3, pc, #160	; (adr r3, 8007c80 <__ieee754_rem_pio2+0x308>)
 8007be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007be8:	f7f8 fd06 	bl	80005f8 <__aeabi_dmul>
 8007bec:	4606      	mov	r6, r0
 8007bee:	460f      	mov	r7, r1
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	460b      	mov	r3, r1
 8007bf4:	4640      	mov	r0, r8
 8007bf6:	4649      	mov	r1, r9
 8007bf8:	f7f8 fb4a 	bl	8000290 <__aeabi_dsub>
 8007bfc:	4602      	mov	r2, r0
 8007bfe:	460b      	mov	r3, r1
 8007c00:	4682      	mov	sl, r0
 8007c02:	468b      	mov	fp, r1
 8007c04:	4640      	mov	r0, r8
 8007c06:	4649      	mov	r1, r9
 8007c08:	f7f8 fb42 	bl	8000290 <__aeabi_dsub>
 8007c0c:	4632      	mov	r2, r6
 8007c0e:	463b      	mov	r3, r7
 8007c10:	f7f8 fb3e 	bl	8000290 <__aeabi_dsub>
 8007c14:	a31c      	add	r3, pc, #112	; (adr r3, 8007c88 <__ieee754_rem_pio2+0x310>)
 8007c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c1a:	4606      	mov	r6, r0
 8007c1c:	460f      	mov	r7, r1
 8007c1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c22:	f7f8 fce9 	bl	80005f8 <__aeabi_dmul>
 8007c26:	4632      	mov	r2, r6
 8007c28:	463b      	mov	r3, r7
 8007c2a:	f7f8 fb31 	bl	8000290 <__aeabi_dsub>
 8007c2e:	4606      	mov	r6, r0
 8007c30:	460f      	mov	r7, r1
 8007c32:	e767      	b.n	8007b04 <__ieee754_rem_pio2+0x18c>
 8007c34:	46c2      	mov	sl, r8
 8007c36:	46cb      	mov	fp, r9
 8007c38:	e76c      	b.n	8007b14 <__ieee754_rem_pio2+0x19c>
 8007c3a:	4b1b      	ldr	r3, [pc, #108]	; (8007ca8 <__ieee754_rem_pio2+0x330>)
 8007c3c:	4598      	cmp	r8, r3
 8007c3e:	dd35      	ble.n	8007cac <__ieee754_rem_pio2+0x334>
 8007c40:	ee10 2a10 	vmov	r2, s0
 8007c44:	463b      	mov	r3, r7
 8007c46:	4630      	mov	r0, r6
 8007c48:	4639      	mov	r1, r7
 8007c4a:	f7f8 fb21 	bl	8000290 <__aeabi_dsub>
 8007c4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007c52:	e9c4 0100 	strd	r0, r1, [r4]
 8007c56:	e6a1      	b.n	800799c <__ieee754_rem_pio2+0x24>
 8007c58:	54400000 	.word	0x54400000
 8007c5c:	3ff921fb 	.word	0x3ff921fb
 8007c60:	1a626331 	.word	0x1a626331
 8007c64:	3dd0b461 	.word	0x3dd0b461
 8007c68:	1a600000 	.word	0x1a600000
 8007c6c:	3dd0b461 	.word	0x3dd0b461
 8007c70:	2e037073 	.word	0x2e037073
 8007c74:	3ba3198a 	.word	0x3ba3198a
 8007c78:	6dc9c883 	.word	0x6dc9c883
 8007c7c:	3fe45f30 	.word	0x3fe45f30
 8007c80:	2e000000 	.word	0x2e000000
 8007c84:	3ba3198a 	.word	0x3ba3198a
 8007c88:	252049c1 	.word	0x252049c1
 8007c8c:	397b839a 	.word	0x397b839a
 8007c90:	3fe921fb 	.word	0x3fe921fb
 8007c94:	4002d97b 	.word	0x4002d97b
 8007c98:	3ff921fb 	.word	0x3ff921fb
 8007c9c:	413921fb 	.word	0x413921fb
 8007ca0:	3fe00000 	.word	0x3fe00000
 8007ca4:	0801c6b4 	.word	0x0801c6b4
 8007ca8:	7fefffff 	.word	0x7fefffff
 8007cac:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007cb0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8007cb4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007cb8:	4630      	mov	r0, r6
 8007cba:	460f      	mov	r7, r1
 8007cbc:	f7f8 ff36 	bl	8000b2c <__aeabi_d2iz>
 8007cc0:	f7f8 fc34 	bl	800052c <__aeabi_i2d>
 8007cc4:	4602      	mov	r2, r0
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	4630      	mov	r0, r6
 8007cca:	4639      	mov	r1, r7
 8007ccc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007cd0:	f7f8 fade 	bl	8000290 <__aeabi_dsub>
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	4b1f      	ldr	r3, [pc, #124]	; (8007d54 <__ieee754_rem_pio2+0x3dc>)
 8007cd8:	f7f8 fc8e 	bl	80005f8 <__aeabi_dmul>
 8007cdc:	460f      	mov	r7, r1
 8007cde:	4606      	mov	r6, r0
 8007ce0:	f7f8 ff24 	bl	8000b2c <__aeabi_d2iz>
 8007ce4:	f7f8 fc22 	bl	800052c <__aeabi_i2d>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	460b      	mov	r3, r1
 8007cec:	4630      	mov	r0, r6
 8007cee:	4639      	mov	r1, r7
 8007cf0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007cf4:	f7f8 facc 	bl	8000290 <__aeabi_dsub>
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	4b16      	ldr	r3, [pc, #88]	; (8007d54 <__ieee754_rem_pio2+0x3dc>)
 8007cfc:	f7f8 fc7c 	bl	80005f8 <__aeabi_dmul>
 8007d00:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007d04:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8007d08:	f04f 0803 	mov.w	r8, #3
 8007d0c:	2600      	movs	r6, #0
 8007d0e:	2700      	movs	r7, #0
 8007d10:	4632      	mov	r2, r6
 8007d12:	463b      	mov	r3, r7
 8007d14:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8007d18:	f108 3aff 	add.w	sl, r8, #4294967295
 8007d1c:	f7f8 fed4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d20:	b9b0      	cbnz	r0, 8007d50 <__ieee754_rem_pio2+0x3d8>
 8007d22:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <__ieee754_rem_pio2+0x3e0>)
 8007d24:	9301      	str	r3, [sp, #4]
 8007d26:	2302      	movs	r3, #2
 8007d28:	9300      	str	r3, [sp, #0]
 8007d2a:	462a      	mov	r2, r5
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	4621      	mov	r1, r4
 8007d30:	a806      	add	r0, sp, #24
 8007d32:	f000 fc05 	bl	8008540 <__kernel_rem_pio2>
 8007d36:	9b04      	ldr	r3, [sp, #16]
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	4605      	mov	r5, r0
 8007d3c:	f6bf ae58 	bge.w	80079f0 <__ieee754_rem_pio2+0x78>
 8007d40:	6863      	ldr	r3, [r4, #4]
 8007d42:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d46:	6063      	str	r3, [r4, #4]
 8007d48:	68e3      	ldr	r3, [r4, #12]
 8007d4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007d4e:	e6fb      	b.n	8007b48 <__ieee754_rem_pio2+0x1d0>
 8007d50:	46d0      	mov	r8, sl
 8007d52:	e7dd      	b.n	8007d10 <__ieee754_rem_pio2+0x398>
 8007d54:	41700000 	.word	0x41700000
 8007d58:	0801c734 	.word	0x0801c734

08007d5c <__ieee754_powf>:
 8007d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d60:	ee10 5a90 	vmov	r5, s1
 8007d64:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8007d68:	ed2d 8b02 	vpush	{d8}
 8007d6c:	eeb0 8a40 	vmov.f32	s16, s0
 8007d70:	eef0 8a60 	vmov.f32	s17, s1
 8007d74:	f000 8295 	beq.w	80082a2 <__ieee754_powf+0x546>
 8007d78:	ee10 8a10 	vmov	r8, s0
 8007d7c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8007d80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8007d84:	dc06      	bgt.n	8007d94 <__ieee754_powf+0x38>
 8007d86:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007d8a:	dd0a      	ble.n	8007da2 <__ieee754_powf+0x46>
 8007d8c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007d90:	f000 8287 	beq.w	80082a2 <__ieee754_powf+0x546>
 8007d94:	ecbd 8b02 	vpop	{d8}
 8007d98:	48d9      	ldr	r0, [pc, #868]	; (8008100 <__ieee754_powf+0x3a4>)
 8007d9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9e:	f001 b977 	b.w	8009090 <nanf>
 8007da2:	f1b8 0f00 	cmp.w	r8, #0
 8007da6:	da1d      	bge.n	8007de4 <__ieee754_powf+0x88>
 8007da8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8007dac:	da2c      	bge.n	8007e08 <__ieee754_powf+0xac>
 8007dae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007db2:	db30      	blt.n	8007e16 <__ieee754_powf+0xba>
 8007db4:	15fb      	asrs	r3, r7, #23
 8007db6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8007dba:	fa47 f603 	asr.w	r6, r7, r3
 8007dbe:	fa06 f303 	lsl.w	r3, r6, r3
 8007dc2:	429f      	cmp	r7, r3
 8007dc4:	d127      	bne.n	8007e16 <__ieee754_powf+0xba>
 8007dc6:	f006 0601 	and.w	r6, r6, #1
 8007dca:	f1c6 0602 	rsb	r6, r6, #2
 8007dce:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8007dd2:	d122      	bne.n	8007e1a <__ieee754_powf+0xbe>
 8007dd4:	2d00      	cmp	r5, #0
 8007dd6:	f280 826a 	bge.w	80082ae <__ieee754_powf+0x552>
 8007dda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007dde:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8007de2:	e00d      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007de4:	2600      	movs	r6, #0
 8007de6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8007dea:	d1f0      	bne.n	8007dce <__ieee754_powf+0x72>
 8007dec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8007df0:	f000 8257 	beq.w	80082a2 <__ieee754_powf+0x546>
 8007df4:	dd0a      	ble.n	8007e0c <__ieee754_powf+0xb0>
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	f280 8256 	bge.w	80082a8 <__ieee754_powf+0x54c>
 8007dfc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8008104 <__ieee754_powf+0x3a8>
 8007e00:	ecbd 8b02 	vpop	{d8}
 8007e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e08:	2602      	movs	r6, #2
 8007e0a:	e7ec      	b.n	8007de6 <__ieee754_powf+0x8a>
 8007e0c:	2d00      	cmp	r5, #0
 8007e0e:	daf5      	bge.n	8007dfc <__ieee754_powf+0xa0>
 8007e10:	eeb1 0a68 	vneg.f32	s0, s17
 8007e14:	e7f4      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007e16:	2600      	movs	r6, #0
 8007e18:	e7d9      	b.n	8007dce <__ieee754_powf+0x72>
 8007e1a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8007e1e:	d102      	bne.n	8007e26 <__ieee754_powf+0xca>
 8007e20:	ee28 0a08 	vmul.f32	s0, s16, s16
 8007e24:	e7ec      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007e26:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8007e2a:	eeb0 0a48 	vmov.f32	s0, s16
 8007e2e:	d108      	bne.n	8007e42 <__ieee754_powf+0xe6>
 8007e30:	f1b8 0f00 	cmp.w	r8, #0
 8007e34:	db05      	blt.n	8007e42 <__ieee754_powf+0xe6>
 8007e36:	ecbd 8b02 	vpop	{d8}
 8007e3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007e3e:	f000 ba4f 	b.w	80082e0 <__ieee754_sqrtf>
 8007e42:	f001 f913 	bl	800906c <fabsf>
 8007e46:	b124      	cbz	r4, 8007e52 <__ieee754_powf+0xf6>
 8007e48:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8007e4c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8007e50:	d117      	bne.n	8007e82 <__ieee754_powf+0x126>
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	bfbc      	itt	lt
 8007e56:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8007e5a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8007e5e:	f1b8 0f00 	cmp.w	r8, #0
 8007e62:	dacd      	bge.n	8007e00 <__ieee754_powf+0xa4>
 8007e64:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8007e68:	ea54 0306 	orrs.w	r3, r4, r6
 8007e6c:	d104      	bne.n	8007e78 <__ieee754_powf+0x11c>
 8007e6e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8007e72:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8007e76:	e7c3      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007e78:	2e01      	cmp	r6, #1
 8007e7a:	d1c1      	bne.n	8007e00 <__ieee754_powf+0xa4>
 8007e7c:	eeb1 0a40 	vneg.f32	s0, s0
 8007e80:	e7be      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007e82:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8007e86:	3801      	subs	r0, #1
 8007e88:	ea56 0300 	orrs.w	r3, r6, r0
 8007e8c:	d104      	bne.n	8007e98 <__ieee754_powf+0x13c>
 8007e8e:	ee38 8a48 	vsub.f32	s16, s16, s16
 8007e92:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8007e96:	e7b3      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007e98:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8007e9c:	dd6d      	ble.n	8007f7a <__ieee754_powf+0x21e>
 8007e9e:	4b9a      	ldr	r3, [pc, #616]	; (8008108 <__ieee754_powf+0x3ac>)
 8007ea0:	429c      	cmp	r4, r3
 8007ea2:	dc06      	bgt.n	8007eb2 <__ieee754_powf+0x156>
 8007ea4:	2d00      	cmp	r5, #0
 8007ea6:	daa9      	bge.n	8007dfc <__ieee754_powf+0xa0>
 8007ea8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800810c <__ieee754_powf+0x3b0>
 8007eac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8007eb0:	e7a6      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007eb2:	4b97      	ldr	r3, [pc, #604]	; (8008110 <__ieee754_powf+0x3b4>)
 8007eb4:	429c      	cmp	r4, r3
 8007eb6:	dd02      	ble.n	8007ebe <__ieee754_powf+0x162>
 8007eb8:	2d00      	cmp	r5, #0
 8007eba:	dcf5      	bgt.n	8007ea8 <__ieee754_powf+0x14c>
 8007ebc:	e79e      	b.n	8007dfc <__ieee754_powf+0xa0>
 8007ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007ec2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007ec6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8008114 <__ieee754_powf+0x3b8>
 8007eca:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8008118 <__ieee754_powf+0x3bc>
 8007ece:	eef1 6a40 	vneg.f32	s13, s0
 8007ed2:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8007ed6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eda:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8007ede:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007ee2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007ee6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007eea:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800811c <__ieee754_powf+0x3c0>
 8007eee:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8007ef2:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8008120 <__ieee754_powf+0x3c4>
 8007ef6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8007efa:	eeb0 7a67 	vmov.f32	s14, s15
 8007efe:	eea0 7a06 	vfma.f32	s14, s0, s12
 8007f02:	ee17 3a10 	vmov	r3, s14
 8007f06:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8007f0a:	f023 030f 	bic.w	r3, r3, #15
 8007f0e:	ee07 3a10 	vmov	s14, r3
 8007f12:	eea6 7a86 	vfma.f32	s14, s13, s12
 8007f16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007f1a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8007f1e:	f025 050f 	bic.w	r5, r5, #15
 8007f22:	ee07 5a10 	vmov	s14, r5
 8007f26:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8007f2a:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8007f2e:	ee07 3a10 	vmov	s14, r3
 8007f32:	ee06 5a90 	vmov	s13, r5
 8007f36:	eee7 7a28 	vfma.f32	s15, s14, s17
 8007f3a:	3e01      	subs	r6, #1
 8007f3c:	ea56 0200 	orrs.w	r2, r6, r0
 8007f40:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007f44:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8007f48:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007f4c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007f50:	ee16 4a90 	vmov	r4, s13
 8007f54:	bf08      	it	eq
 8007f56:	eeb0 8a40 	vmoveq.f32	s16, s0
 8007f5a:	2c00      	cmp	r4, #0
 8007f5c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007f60:	f340 8186 	ble.w	8008270 <__ieee754_powf+0x514>
 8007f64:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8007f68:	f340 80fc 	ble.w	8008164 <__ieee754_powf+0x408>
 8007f6c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800810c <__ieee754_powf+0x3b0>
 8007f70:	ee28 0a27 	vmul.f32	s0, s16, s15
 8007f74:	ee20 0a27 	vmul.f32	s0, s0, s15
 8007f78:	e742      	b.n	8007e00 <__ieee754_powf+0xa4>
 8007f7a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8007f7e:	bfbf      	itttt	lt
 8007f80:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 8008124 <__ieee754_powf+0x3c8>
 8007f84:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8007f88:	f06f 0217 	mvnlt.w	r2, #23
 8007f8c:	ee17 4a90 	vmovlt	r4, s15
 8007f90:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8007f94:	bfa8      	it	ge
 8007f96:	2200      	movge	r2, #0
 8007f98:	3b7f      	subs	r3, #127	; 0x7f
 8007f9a:	4413      	add	r3, r2
 8007f9c:	4a62      	ldr	r2, [pc, #392]	; (8008128 <__ieee754_powf+0x3cc>)
 8007f9e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007fa2:	4294      	cmp	r4, r2
 8007fa4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8007fa8:	dd06      	ble.n	8007fb8 <__ieee754_powf+0x25c>
 8007faa:	4a60      	ldr	r2, [pc, #384]	; (800812c <__ieee754_powf+0x3d0>)
 8007fac:	4294      	cmp	r4, r2
 8007fae:	f340 80a5 	ble.w	80080fc <__ieee754_powf+0x3a0>
 8007fb2:	3301      	adds	r3, #1
 8007fb4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8007fb8:	2400      	movs	r4, #0
 8007fba:	4a5d      	ldr	r2, [pc, #372]	; (8008130 <__ieee754_powf+0x3d4>)
 8007fbc:	00a7      	lsls	r7, r4, #2
 8007fbe:	443a      	add	r2, r7
 8007fc0:	ee07 1a90 	vmov	s15, r1
 8007fc4:	ed92 7a00 	vldr	s14, [r2]
 8007fc8:	4a5a      	ldr	r2, [pc, #360]	; (8008134 <__ieee754_powf+0x3d8>)
 8007fca:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007fce:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8007fd2:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8007fd6:	1049      	asrs	r1, r1, #1
 8007fd8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8007fdc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8007fe0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8007fe4:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8007fe8:	ee06 1a90 	vmov	s13, r1
 8007fec:	ee66 4a05 	vmul.f32	s9, s12, s10
 8007ff0:	ee14 ea90 	vmov	lr, s9
 8007ff4:	ea02 0e0e 	and.w	lr, r2, lr
 8007ff8:	ee05 ea90 	vmov	s11, lr
 8007ffc:	eeb1 4a65 	vneg.f32	s8, s11
 8008000:	eea4 6a26 	vfma.f32	s12, s8, s13
 8008004:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008008:	ee35 7aa4 	vadd.f32	s14, s11, s9
 800800c:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8008010:	eddf 7a49 	vldr	s15, [pc, #292]	; 8008138 <__ieee754_powf+0x3dc>
 8008014:	eea4 6a26 	vfma.f32	s12, s8, s13
 8008018:	ee66 6a05 	vmul.f32	s13, s12, s10
 800801c:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8008020:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800813c <__ieee754_powf+0x3e0>
 8008024:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008028:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8008140 <__ieee754_powf+0x3e4>
 800802c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8008030:	eddf 7a38 	vldr	s15, [pc, #224]	; 8008114 <__ieee754_powf+0x3b8>
 8008034:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008038:	ed9f 5a42 	vldr	s10, [pc, #264]	; 8008144 <__ieee754_powf+0x3e8>
 800803c:	eea6 5a27 	vfma.f32	s10, s12, s15
 8008040:	eddf 7a41 	vldr	s15, [pc, #260]	; 8008148 <__ieee754_powf+0x3ec>
 8008044:	eee6 7a05 	vfma.f32	s15, s12, s10
 8008048:	ee66 3a06 	vmul.f32	s7, s12, s12
 800804c:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8008050:	ee27 7a26 	vmul.f32	s14, s14, s13
 8008054:	eeb0 6a45 	vmov.f32	s12, s10
 8008058:	eea3 7aa7 	vfma.f32	s14, s7, s15
 800805c:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8008060:	ee36 6a07 	vadd.f32	s12, s12, s14
 8008064:	ee16 1a10 	vmov	r1, s12
 8008068:	4011      	ands	r1, r2
 800806a:	ee06 1a10 	vmov	s12, r1
 800806e:	ee76 7a45 	vsub.f32	s15, s12, s10
 8008072:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800814c <__ieee754_powf+0x3f0>
 8008076:	eee4 7a25 	vfma.f32	s15, s8, s11
 800807a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800807e:	ee67 7aa4 	vmul.f32	s15, s15, s9
 8008082:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008086:	eeb0 7a67 	vmov.f32	s14, s15
 800808a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800808e:	ee17 1a10 	vmov	r1, s14
 8008092:	4011      	ands	r1, r2
 8008094:	ee07 1a10 	vmov	s14, r1
 8008098:	eea4 7a06 	vfma.f32	s14, s8, s12
 800809c:	ee05 1a90 	vmov	s11, r1
 80080a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80080a4:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008150 <__ieee754_powf+0x3f4>
 80080a8:	492a      	ldr	r1, [pc, #168]	; (8008154 <__ieee754_powf+0x3f8>)
 80080aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80080ae:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8008158 <__ieee754_powf+0x3fc>
 80080b2:	eee5 7a87 	vfma.f32	s15, s11, s14
 80080b6:	4439      	add	r1, r7
 80080b8:	ed91 7a00 	vldr	s14, [r1]
 80080bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80080c0:	ee07 3a90 	vmov	s15, r3
 80080c4:	eeb0 6a47 	vmov.f32	s12, s14
 80080c8:	4b24      	ldr	r3, [pc, #144]	; (800815c <__ieee754_powf+0x400>)
 80080ca:	eea5 6a85 	vfma.f32	s12, s11, s10
 80080ce:	443b      	add	r3, r7
 80080d0:	edd3 4a00 	vldr	s9, [r3]
 80080d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80080d8:	ee36 6a24 	vadd.f32	s12, s12, s9
 80080dc:	ee76 7a26 	vadd.f32	s15, s12, s13
 80080e0:	ee17 3a90 	vmov	r3, s15
 80080e4:	4013      	ands	r3, r2
 80080e6:	ee07 3a90 	vmov	s15, r3
 80080ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80080ee:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80080f2:	eee5 7ac5 	vfms.f32	s15, s11, s10
 80080f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80080fa:	e70e      	b.n	8007f1a <__ieee754_powf+0x1be>
 80080fc:	2401      	movs	r4, #1
 80080fe:	e75c      	b.n	8007fba <__ieee754_powf+0x25e>
 8008100:	0801c6b2 	.word	0x0801c6b2
 8008104:	00000000 	.word	0x00000000
 8008108:	3f7ffff7 	.word	0x3f7ffff7
 800810c:	7149f2ca 	.word	0x7149f2ca
 8008110:	3f800007 	.word	0x3f800007
 8008114:	3eaaaaab 	.word	0x3eaaaaab
 8008118:	3fb8aa00 	.word	0x3fb8aa00
 800811c:	3fb8aa3b 	.word	0x3fb8aa3b
 8008120:	36eca570 	.word	0x36eca570
 8008124:	4b800000 	.word	0x4b800000
 8008128:	001cc471 	.word	0x001cc471
 800812c:	005db3d6 	.word	0x005db3d6
 8008130:	0801c83c 	.word	0x0801c83c
 8008134:	fffff000 	.word	0xfffff000
 8008138:	3e6c3255 	.word	0x3e6c3255
 800813c:	3e53f142 	.word	0x3e53f142
 8008140:	3e8ba305 	.word	0x3e8ba305
 8008144:	3edb6db7 	.word	0x3edb6db7
 8008148:	3f19999a 	.word	0x3f19999a
 800814c:	3f763800 	.word	0x3f763800
 8008150:	3f76384f 	.word	0x3f76384f
 8008154:	0801c84c 	.word	0x0801c84c
 8008158:	369dc3a0 	.word	0x369dc3a0
 800815c:	0801c844 	.word	0x0801c844
 8008160:	3338aa3c 	.word	0x3338aa3c
 8008164:	f040 8094 	bne.w	8008290 <__ieee754_powf+0x534>
 8008168:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8008160 <__ieee754_powf+0x404>
 800816c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008170:	ee37 6a86 	vadd.f32	s12, s15, s12
 8008174:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8008178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800817c:	f73f aef6 	bgt.w	8007f6c <__ieee754_powf+0x210>
 8008180:	15db      	asrs	r3, r3, #23
 8008182:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 8008186:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800818a:	4103      	asrs	r3, r0
 800818c:	4423      	add	r3, r4
 800818e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008192:	4948      	ldr	r1, [pc, #288]	; (80082b4 <__ieee754_powf+0x558>)
 8008194:	3a7f      	subs	r2, #127	; 0x7f
 8008196:	4111      	asrs	r1, r2
 8008198:	ea23 0101 	bic.w	r1, r3, r1
 800819c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80081a0:	ee06 1a90 	vmov	s13, r1
 80081a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80081a8:	f1c2 0217 	rsb	r2, r2, #23
 80081ac:	4110      	asrs	r0, r2
 80081ae:	2c00      	cmp	r4, #0
 80081b0:	ee37 7a66 	vsub.f32	s14, s14, s13
 80081b4:	bfb8      	it	lt
 80081b6:	4240      	neglt	r0, r0
 80081b8:	ee77 6a27 	vadd.f32	s13, s14, s15
 80081bc:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80082b8 <__ieee754_powf+0x55c>
 80081c0:	ee16 3a90 	vmov	r3, s13
 80081c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80081c8:	f023 030f 	bic.w	r3, r3, #15
 80081cc:	ee06 3a90 	vmov	s13, r3
 80081d0:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80081d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081d8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80082bc <__ieee754_powf+0x560>
 80081dc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80081e0:	eea7 7a86 	vfma.f32	s14, s15, s12
 80081e4:	eef0 7a47 	vmov.f32	s15, s14
 80081e8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80082c0 <__ieee754_powf+0x564>
 80081ec:	eeb0 0a67 	vmov.f32	s0, s15
 80081f0:	eea6 0a87 	vfma.f32	s0, s13, s14
 80081f4:	eeb0 6a40 	vmov.f32	s12, s0
 80081f8:	eea6 6ac7 	vfms.f32	s12, s13, s14
 80081fc:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008200:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008204:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80082c4 <__ieee754_powf+0x568>
 8008208:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80082c8 <__ieee754_powf+0x56c>
 800820c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008210:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80082cc <__ieee754_powf+0x570>
 8008214:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008218:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80082d0 <__ieee754_powf+0x574>
 800821c:	eea7 6a26 	vfma.f32	s12, s14, s13
 8008220:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80082d4 <__ieee754_powf+0x578>
 8008224:	eee7 6a06 	vfma.f32	s13, s14, s12
 8008228:	eeb0 6a40 	vmov.f32	s12, s0
 800822c:	eea7 6a66 	vfms.f32	s12, s14, s13
 8008230:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8008234:	eeb0 7a46 	vmov.f32	s14, s12
 8008238:	ee77 6a66 	vsub.f32	s13, s14, s13
 800823c:	ee20 6a06 	vmul.f32	s12, s0, s12
 8008240:	eee0 7a27 	vfma.f32	s15, s0, s15
 8008244:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8008248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800824c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008250:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8008254:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008258:	ee10 3a10 	vmov	r3, s0
 800825c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8008260:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008264:	da1a      	bge.n	800829c <__ieee754_powf+0x540>
 8008266:	f000 ff19 	bl	800909c <scalbnf>
 800826a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800826e:	e5c7      	b.n	8007e00 <__ieee754_powf+0xa4>
 8008270:	4a19      	ldr	r2, [pc, #100]	; (80082d8 <__ieee754_powf+0x57c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	dd02      	ble.n	800827c <__ieee754_powf+0x520>
 8008276:	eddf 7a19 	vldr	s15, [pc, #100]	; 80082dc <__ieee754_powf+0x580>
 800827a:	e679      	b.n	8007f70 <__ieee754_powf+0x214>
 800827c:	d108      	bne.n	8008290 <__ieee754_powf+0x534>
 800827e:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8008282:	eef4 7ae6 	vcmpe.f32	s15, s13
 8008286:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800828a:	f63f af79 	bhi.w	8008180 <__ieee754_powf+0x424>
 800828e:	e7f2      	b.n	8008276 <__ieee754_powf+0x51a>
 8008290:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8008294:	f73f af74 	bgt.w	8008180 <__ieee754_powf+0x424>
 8008298:	2000      	movs	r0, #0
 800829a:	e78d      	b.n	80081b8 <__ieee754_powf+0x45c>
 800829c:	ee00 3a10 	vmov	s0, r3
 80082a0:	e7e3      	b.n	800826a <__ieee754_powf+0x50e>
 80082a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80082a6:	e5ab      	b.n	8007e00 <__ieee754_powf+0xa4>
 80082a8:	eeb0 0a68 	vmov.f32	s0, s17
 80082ac:	e5a8      	b.n	8007e00 <__ieee754_powf+0xa4>
 80082ae:	eeb0 0a48 	vmov.f32	s0, s16
 80082b2:	e5a5      	b.n	8007e00 <__ieee754_powf+0xa4>
 80082b4:	007fffff 	.word	0x007fffff
 80082b8:	3f317218 	.word	0x3f317218
 80082bc:	35bfbe8c 	.word	0x35bfbe8c
 80082c0:	3f317200 	.word	0x3f317200
 80082c4:	3331bb4c 	.word	0x3331bb4c
 80082c8:	b5ddea0e 	.word	0xb5ddea0e
 80082cc:	388ab355 	.word	0x388ab355
 80082d0:	bb360b61 	.word	0xbb360b61
 80082d4:	3e2aaaab 	.word	0x3e2aaaab
 80082d8:	43160000 	.word	0x43160000
 80082dc:	0da24260 	.word	0x0da24260

080082e0 <__ieee754_sqrtf>:
 80082e0:	ee10 2a10 	vmov	r2, s0
 80082e4:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80082e8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80082ec:	b570      	push	{r4, r5, r6, lr}
 80082ee:	d302      	bcc.n	80082f6 <__ieee754_sqrtf+0x16>
 80082f0:	eea0 0a00 	vfma.f32	s0, s0, s0
 80082f4:	bd70      	pop	{r4, r5, r6, pc}
 80082f6:	b3b1      	cbz	r1, 8008366 <__ieee754_sqrtf+0x86>
 80082f8:	2a00      	cmp	r2, #0
 80082fa:	da04      	bge.n	8008306 <__ieee754_sqrtf+0x26>
 80082fc:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008300:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8008304:	bd70      	pop	{r4, r5, r6, pc}
 8008306:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800830a:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800830e:	d204      	bcs.n	800831a <__ieee754_sqrtf+0x3a>
 8008310:	2100      	movs	r1, #0
 8008312:	0210      	lsls	r0, r2, #8
 8008314:	d528      	bpl.n	8008368 <__ieee754_sqrtf+0x88>
 8008316:	3901      	subs	r1, #1
 8008318:	1a5b      	subs	r3, r3, r1
 800831a:	3b7f      	subs	r3, #127	; 0x7f
 800831c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8008320:	07d9      	lsls	r1, r3, #31
 8008322:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8008326:	bf48      	it	mi
 8008328:	0052      	lslmi	r2, r2, #1
 800832a:	1059      	asrs	r1, r3, #1
 800832c:	2300      	movs	r3, #0
 800832e:	0052      	lsls	r2, r2, #1
 8008330:	2419      	movs	r4, #25
 8008332:	461e      	mov	r6, r3
 8008334:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8008338:	1835      	adds	r5, r6, r0
 800833a:	4295      	cmp	r5, r2
 800833c:	bfde      	ittt	le
 800833e:	182e      	addle	r6, r5, r0
 8008340:	1b52      	suble	r2, r2, r5
 8008342:	181b      	addle	r3, r3, r0
 8008344:	3c01      	subs	r4, #1
 8008346:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800834a:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800834e:	d1f3      	bne.n	8008338 <__ieee754_sqrtf+0x58>
 8008350:	b112      	cbz	r2, 8008358 <__ieee754_sqrtf+0x78>
 8008352:	3301      	adds	r3, #1
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	105b      	asrs	r3, r3, #1
 800835a:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800835e:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 8008362:	ee00 3a10 	vmov	s0, r3
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	0052      	lsls	r2, r2, #1
 800836a:	3101      	adds	r1, #1
 800836c:	e7d1      	b.n	8008312 <__ieee754_sqrtf+0x32>
	...

08008370 <__kernel_cos>:
 8008370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008374:	ec59 8b10 	vmov	r8, r9, d0
 8008378:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800837c:	b085      	sub	sp, #20
 800837e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8008382:	ed8d 1b00 	vstr	d1, [sp]
 8008386:	da07      	bge.n	8008398 <__kernel_cos+0x28>
 8008388:	ee10 0a10 	vmov	r0, s0
 800838c:	4649      	mov	r1, r9
 800838e:	f7f8 fbcd 	bl	8000b2c <__aeabi_d2iz>
 8008392:	2800      	cmp	r0, #0
 8008394:	f000 80aa 	beq.w	80084ec <__kernel_cos+0x17c>
 8008398:	4642      	mov	r2, r8
 800839a:	464b      	mov	r3, r9
 800839c:	4640      	mov	r0, r8
 800839e:	4649      	mov	r1, r9
 80083a0:	f7f8 f92a 	bl	80005f8 <__aeabi_dmul>
 80083a4:	a359      	add	r3, pc, #356	; (adr r3, 800850c <__kernel_cos+0x19c>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	4604      	mov	r4, r0
 80083ac:	460d      	mov	r5, r1
 80083ae:	f7f8 f923 	bl	80005f8 <__aeabi_dmul>
 80083b2:	a358      	add	r3, pc, #352	; (adr r3, 8008514 <__kernel_cos+0x1a4>)
 80083b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083b8:	f7f7 ff6c 	bl	8000294 <__adddf3>
 80083bc:	4622      	mov	r2, r4
 80083be:	462b      	mov	r3, r5
 80083c0:	f7f8 f91a 	bl	80005f8 <__aeabi_dmul>
 80083c4:	a355      	add	r3, pc, #340	; (adr r3, 800851c <__kernel_cos+0x1ac>)
 80083c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ca:	f7f7 ff61 	bl	8000290 <__aeabi_dsub>
 80083ce:	4622      	mov	r2, r4
 80083d0:	462b      	mov	r3, r5
 80083d2:	f7f8 f911 	bl	80005f8 <__aeabi_dmul>
 80083d6:	a353      	add	r3, pc, #332	; (adr r3, 8008524 <__kernel_cos+0x1b4>)
 80083d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083dc:	f7f7 ff5a 	bl	8000294 <__adddf3>
 80083e0:	4622      	mov	r2, r4
 80083e2:	462b      	mov	r3, r5
 80083e4:	f7f8 f908 	bl	80005f8 <__aeabi_dmul>
 80083e8:	a350      	add	r3, pc, #320	; (adr r3, 800852c <__kernel_cos+0x1bc>)
 80083ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083ee:	f7f7 ff4f 	bl	8000290 <__aeabi_dsub>
 80083f2:	4622      	mov	r2, r4
 80083f4:	462b      	mov	r3, r5
 80083f6:	f7f8 f8ff 	bl	80005f8 <__aeabi_dmul>
 80083fa:	a34e      	add	r3, pc, #312	; (adr r3, 8008534 <__kernel_cos+0x1c4>)
 80083fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008400:	f7f7 ff48 	bl	8000294 <__adddf3>
 8008404:	462b      	mov	r3, r5
 8008406:	4622      	mov	r2, r4
 8008408:	f7f8 f8f6 	bl	80005f8 <__aeabi_dmul>
 800840c:	4b3a      	ldr	r3, [pc, #232]	; (80084f8 <__kernel_cos+0x188>)
 800840e:	429f      	cmp	r7, r3
 8008410:	4682      	mov	sl, r0
 8008412:	468b      	mov	fp, r1
 8008414:	dc2c      	bgt.n	8008470 <__kernel_cos+0x100>
 8008416:	2200      	movs	r2, #0
 8008418:	4b38      	ldr	r3, [pc, #224]	; (80084fc <__kernel_cos+0x18c>)
 800841a:	4620      	mov	r0, r4
 800841c:	4629      	mov	r1, r5
 800841e:	f7f8 f8eb 	bl	80005f8 <__aeabi_dmul>
 8008422:	4652      	mov	r2, sl
 8008424:	4606      	mov	r6, r0
 8008426:	460f      	mov	r7, r1
 8008428:	465b      	mov	r3, fp
 800842a:	4620      	mov	r0, r4
 800842c:	4629      	mov	r1, r5
 800842e:	f7f8 f8e3 	bl	80005f8 <__aeabi_dmul>
 8008432:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008436:	4604      	mov	r4, r0
 8008438:	460d      	mov	r5, r1
 800843a:	4640      	mov	r0, r8
 800843c:	4649      	mov	r1, r9
 800843e:	f7f8 f8db 	bl	80005f8 <__aeabi_dmul>
 8008442:	4602      	mov	r2, r0
 8008444:	460b      	mov	r3, r1
 8008446:	4620      	mov	r0, r4
 8008448:	4629      	mov	r1, r5
 800844a:	f7f7 ff21 	bl	8000290 <__aeabi_dsub>
 800844e:	4602      	mov	r2, r0
 8008450:	460b      	mov	r3, r1
 8008452:	4630      	mov	r0, r6
 8008454:	4639      	mov	r1, r7
 8008456:	f7f7 ff1b 	bl	8000290 <__aeabi_dsub>
 800845a:	460b      	mov	r3, r1
 800845c:	4928      	ldr	r1, [pc, #160]	; (8008500 <__kernel_cos+0x190>)
 800845e:	4602      	mov	r2, r0
 8008460:	2000      	movs	r0, #0
 8008462:	f7f7 ff15 	bl	8000290 <__aeabi_dsub>
 8008466:	ec41 0b10 	vmov	d0, r0, r1
 800846a:	b005      	add	sp, #20
 800846c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008470:	4b24      	ldr	r3, [pc, #144]	; (8008504 <__kernel_cos+0x194>)
 8008472:	4923      	ldr	r1, [pc, #140]	; (8008500 <__kernel_cos+0x190>)
 8008474:	429f      	cmp	r7, r3
 8008476:	bfd7      	itett	le
 8008478:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800847c:	4f22      	ldrgt	r7, [pc, #136]	; (8008508 <__kernel_cos+0x198>)
 800847e:	2200      	movle	r2, #0
 8008480:	4616      	movle	r6, r2
 8008482:	bfd4      	ite	le
 8008484:	461f      	movle	r7, r3
 8008486:	2600      	movgt	r6, #0
 8008488:	4632      	mov	r2, r6
 800848a:	463b      	mov	r3, r7
 800848c:	2000      	movs	r0, #0
 800848e:	f7f7 feff 	bl	8000290 <__aeabi_dsub>
 8008492:	2200      	movs	r2, #0
 8008494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008498:	4b18      	ldr	r3, [pc, #96]	; (80084fc <__kernel_cos+0x18c>)
 800849a:	4620      	mov	r0, r4
 800849c:	4629      	mov	r1, r5
 800849e:	f7f8 f8ab 	bl	80005f8 <__aeabi_dmul>
 80084a2:	4632      	mov	r2, r6
 80084a4:	463b      	mov	r3, r7
 80084a6:	f7f7 fef3 	bl	8000290 <__aeabi_dsub>
 80084aa:	4652      	mov	r2, sl
 80084ac:	4606      	mov	r6, r0
 80084ae:	460f      	mov	r7, r1
 80084b0:	465b      	mov	r3, fp
 80084b2:	4620      	mov	r0, r4
 80084b4:	4629      	mov	r1, r5
 80084b6:	f7f8 f89f 	bl	80005f8 <__aeabi_dmul>
 80084ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084be:	4604      	mov	r4, r0
 80084c0:	460d      	mov	r5, r1
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	f7f8 f897 	bl	80005f8 <__aeabi_dmul>
 80084ca:	4602      	mov	r2, r0
 80084cc:	460b      	mov	r3, r1
 80084ce:	4620      	mov	r0, r4
 80084d0:	4629      	mov	r1, r5
 80084d2:	f7f7 fedd 	bl	8000290 <__aeabi_dsub>
 80084d6:	4602      	mov	r2, r0
 80084d8:	460b      	mov	r3, r1
 80084da:	4630      	mov	r0, r6
 80084dc:	4639      	mov	r1, r7
 80084de:	f7f7 fed7 	bl	8000290 <__aeabi_dsub>
 80084e2:	4602      	mov	r2, r0
 80084e4:	460b      	mov	r3, r1
 80084e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80084ea:	e7ba      	b.n	8008462 <__kernel_cos+0xf2>
 80084ec:	2000      	movs	r0, #0
 80084ee:	4904      	ldr	r1, [pc, #16]	; (8008500 <__kernel_cos+0x190>)
 80084f0:	e7b9      	b.n	8008466 <__kernel_cos+0xf6>
 80084f2:	bf00      	nop
 80084f4:	f3af 8000 	nop.w
 80084f8:	3fd33332 	.word	0x3fd33332
 80084fc:	3fe00000 	.word	0x3fe00000
 8008500:	3ff00000 	.word	0x3ff00000
 8008504:	3fe90000 	.word	0x3fe90000
 8008508:	3fd20000 	.word	0x3fd20000
 800850c:	be8838d4 	.word	0xbe8838d4
 8008510:	bda8fae9 	.word	0xbda8fae9
 8008514:	bdb4b1c4 	.word	0xbdb4b1c4
 8008518:	3e21ee9e 	.word	0x3e21ee9e
 800851c:	809c52ad 	.word	0x809c52ad
 8008520:	3e927e4f 	.word	0x3e927e4f
 8008524:	19cb1590 	.word	0x19cb1590
 8008528:	3efa01a0 	.word	0x3efa01a0
 800852c:	16c15177 	.word	0x16c15177
 8008530:	3f56c16c 	.word	0x3f56c16c
 8008534:	5555554c 	.word	0x5555554c
 8008538:	3fa55555 	.word	0x3fa55555
 800853c:	00000000 	.word	0x00000000

08008540 <__kernel_rem_pio2>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	ed2d 8b02 	vpush	{d8}
 8008548:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800854c:	1ed4      	subs	r4, r2, #3
 800854e:	9306      	str	r3, [sp, #24]
 8008550:	9102      	str	r1, [sp, #8]
 8008552:	4bc3      	ldr	r3, [pc, #780]	; (8008860 <__kernel_rem_pio2+0x320>)
 8008554:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8008556:	9009      	str	r0, [sp, #36]	; 0x24
 8008558:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800855c:	9300      	str	r3, [sp, #0]
 800855e:	9b06      	ldr	r3, [sp, #24]
 8008560:	3b01      	subs	r3, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	2318      	movs	r3, #24
 8008566:	fb94 f4f3 	sdiv	r4, r4, r3
 800856a:	f06f 0317 	mvn.w	r3, #23
 800856e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8008572:	fb04 3303 	mla	r3, r4, r3, r3
 8008576:	eb03 0a02 	add.w	sl, r3, r2
 800857a:	9b00      	ldr	r3, [sp, #0]
 800857c:	9a04      	ldr	r2, [sp, #16]
 800857e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8008850 <__kernel_rem_pio2+0x310>
 8008582:	eb03 0802 	add.w	r8, r3, r2
 8008586:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8008588:	1aa7      	subs	r7, r4, r2
 800858a:	ae20      	add	r6, sp, #128	; 0x80
 800858c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8008590:	2500      	movs	r5, #0
 8008592:	4545      	cmp	r5, r8
 8008594:	dd13      	ble.n	80085be <__kernel_rem_pio2+0x7e>
 8008596:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8008850 <__kernel_rem_pio2+0x310>
 800859a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800859e:	2600      	movs	r6, #0
 80085a0:	9b00      	ldr	r3, [sp, #0]
 80085a2:	429e      	cmp	r6, r3
 80085a4:	dc32      	bgt.n	800860c <__kernel_rem_pio2+0xcc>
 80085a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085a8:	9303      	str	r3, [sp, #12]
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	199d      	adds	r5, r3, r6
 80085ae:	ab20      	add	r3, sp, #128	; 0x80
 80085b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80085b4:	9308      	str	r3, [sp, #32]
 80085b6:	ec59 8b18 	vmov	r8, r9, d8
 80085ba:	2700      	movs	r7, #0
 80085bc:	e01f      	b.n	80085fe <__kernel_rem_pio2+0xbe>
 80085be:	42ef      	cmn	r7, r5
 80085c0:	d407      	bmi.n	80085d2 <__kernel_rem_pio2+0x92>
 80085c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80085c6:	f7f7 ffb1 	bl	800052c <__aeabi_i2d>
 80085ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80085ce:	3501      	adds	r5, #1
 80085d0:	e7df      	b.n	8008592 <__kernel_rem_pio2+0x52>
 80085d2:	ec51 0b18 	vmov	r0, r1, d8
 80085d6:	e7f8      	b.n	80085ca <__kernel_rem_pio2+0x8a>
 80085d8:	9908      	ldr	r1, [sp, #32]
 80085da:	9d03      	ldr	r5, [sp, #12]
 80085dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80085e0:	9108      	str	r1, [sp, #32]
 80085e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80085e6:	9503      	str	r5, [sp, #12]
 80085e8:	f7f8 f806 	bl	80005f8 <__aeabi_dmul>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4640      	mov	r0, r8
 80085f2:	4649      	mov	r1, r9
 80085f4:	f7f7 fe4e 	bl	8000294 <__adddf3>
 80085f8:	3701      	adds	r7, #1
 80085fa:	4680      	mov	r8, r0
 80085fc:	4689      	mov	r9, r1
 80085fe:	9b04      	ldr	r3, [sp, #16]
 8008600:	429f      	cmp	r7, r3
 8008602:	dde9      	ble.n	80085d8 <__kernel_rem_pio2+0x98>
 8008604:	e8eb 8902 	strd	r8, r9, [fp], #8
 8008608:	3601      	adds	r6, #1
 800860a:	e7c9      	b.n	80085a0 <__kernel_rem_pio2+0x60>
 800860c:	9b00      	ldr	r3, [sp, #0]
 800860e:	9f00      	ldr	r7, [sp, #0]
 8008610:	aa0c      	add	r2, sp, #48	; 0x30
 8008612:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008616:	930b      	str	r3, [sp, #44]	; 0x2c
 8008618:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800861a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800861e:	930a      	str	r3, [sp, #40]	; 0x28
 8008620:	ab98      	add	r3, sp, #608	; 0x260
 8008622:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8008626:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800862a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800862e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8008632:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008636:	9308      	str	r3, [sp, #32]
 8008638:	9a08      	ldr	r2, [sp, #32]
 800863a:	ab98      	add	r3, sp, #608	; 0x260
 800863c:	4413      	add	r3, r2
 800863e:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8008642:	2600      	movs	r6, #0
 8008644:	1bbb      	subs	r3, r7, r6
 8008646:	2b00      	cmp	r3, #0
 8008648:	dc77      	bgt.n	800873a <__kernel_rem_pio2+0x1fa>
 800864a:	ec49 8b10 	vmov	d0, r8, r9
 800864e:	4650      	mov	r0, sl
 8008650:	f000 fc92 	bl	8008f78 <scalbn>
 8008654:	ec55 4b10 	vmov	r4, r5, d0
 8008658:	2200      	movs	r2, #0
 800865a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800865e:	ee10 0a10 	vmov	r0, s0
 8008662:	4629      	mov	r1, r5
 8008664:	f7f7 ffc8 	bl	80005f8 <__aeabi_dmul>
 8008668:	ec41 0b10 	vmov	d0, r0, r1
 800866c:	f000 fb74 	bl	8008d58 <floor>
 8008670:	2200      	movs	r2, #0
 8008672:	ec51 0b10 	vmov	r0, r1, d0
 8008676:	4b7b      	ldr	r3, [pc, #492]	; (8008864 <__kernel_rem_pio2+0x324>)
 8008678:	f7f7 ffbe 	bl	80005f8 <__aeabi_dmul>
 800867c:	4602      	mov	r2, r0
 800867e:	460b      	mov	r3, r1
 8008680:	4620      	mov	r0, r4
 8008682:	4629      	mov	r1, r5
 8008684:	f7f7 fe04 	bl	8000290 <__aeabi_dsub>
 8008688:	460d      	mov	r5, r1
 800868a:	4604      	mov	r4, r0
 800868c:	f7f8 fa4e 	bl	8000b2c <__aeabi_d2iz>
 8008690:	9003      	str	r0, [sp, #12]
 8008692:	f7f7 ff4b 	bl	800052c <__aeabi_i2d>
 8008696:	4602      	mov	r2, r0
 8008698:	460b      	mov	r3, r1
 800869a:	4620      	mov	r0, r4
 800869c:	4629      	mov	r1, r5
 800869e:	f7f7 fdf7 	bl	8000290 <__aeabi_dsub>
 80086a2:	f1ba 0f00 	cmp.w	sl, #0
 80086a6:	4680      	mov	r8, r0
 80086a8:	4689      	mov	r9, r1
 80086aa:	dd6b      	ble.n	8008784 <__kernel_rem_pio2+0x244>
 80086ac:	1e7a      	subs	r2, r7, #1
 80086ae:	ab0c      	add	r3, sp, #48	; 0x30
 80086b0:	f1ca 0118 	rsb	r1, sl, #24
 80086b4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80086b8:	9c03      	ldr	r4, [sp, #12]
 80086ba:	fa40 f301 	asr.w	r3, r0, r1
 80086be:	441c      	add	r4, r3
 80086c0:	408b      	lsls	r3, r1
 80086c2:	1ac0      	subs	r0, r0, r3
 80086c4:	ab0c      	add	r3, sp, #48	; 0x30
 80086c6:	9403      	str	r4, [sp, #12]
 80086c8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80086cc:	f1ca 0317 	rsb	r3, sl, #23
 80086d0:	fa40 fb03 	asr.w	fp, r0, r3
 80086d4:	f1bb 0f00 	cmp.w	fp, #0
 80086d8:	dd62      	ble.n	80087a0 <__kernel_rem_pio2+0x260>
 80086da:	9b03      	ldr	r3, [sp, #12]
 80086dc:	2200      	movs	r2, #0
 80086de:	3301      	adds	r3, #1
 80086e0:	9303      	str	r3, [sp, #12]
 80086e2:	4614      	mov	r4, r2
 80086e4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80086e8:	4297      	cmp	r7, r2
 80086ea:	f300 8089 	bgt.w	8008800 <__kernel_rem_pio2+0x2c0>
 80086ee:	f1ba 0f00 	cmp.w	sl, #0
 80086f2:	dd07      	ble.n	8008704 <__kernel_rem_pio2+0x1c4>
 80086f4:	f1ba 0f01 	cmp.w	sl, #1
 80086f8:	f000 8096 	beq.w	8008828 <__kernel_rem_pio2+0x2e8>
 80086fc:	f1ba 0f02 	cmp.w	sl, #2
 8008700:	f000 809c 	beq.w	800883c <__kernel_rem_pio2+0x2fc>
 8008704:	f1bb 0f02 	cmp.w	fp, #2
 8008708:	d14a      	bne.n	80087a0 <__kernel_rem_pio2+0x260>
 800870a:	4642      	mov	r2, r8
 800870c:	464b      	mov	r3, r9
 800870e:	2000      	movs	r0, #0
 8008710:	4955      	ldr	r1, [pc, #340]	; (8008868 <__kernel_rem_pio2+0x328>)
 8008712:	f7f7 fdbd 	bl	8000290 <__aeabi_dsub>
 8008716:	4680      	mov	r8, r0
 8008718:	4689      	mov	r9, r1
 800871a:	2c00      	cmp	r4, #0
 800871c:	d040      	beq.n	80087a0 <__kernel_rem_pio2+0x260>
 800871e:	4650      	mov	r0, sl
 8008720:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8008858 <__kernel_rem_pio2+0x318>
 8008724:	f000 fc28 	bl	8008f78 <scalbn>
 8008728:	4640      	mov	r0, r8
 800872a:	4649      	mov	r1, r9
 800872c:	ec53 2b10 	vmov	r2, r3, d0
 8008730:	f7f7 fdae 	bl	8000290 <__aeabi_dsub>
 8008734:	4680      	mov	r8, r0
 8008736:	4689      	mov	r9, r1
 8008738:	e032      	b.n	80087a0 <__kernel_rem_pio2+0x260>
 800873a:	2200      	movs	r2, #0
 800873c:	4b4b      	ldr	r3, [pc, #300]	; (800886c <__kernel_rem_pio2+0x32c>)
 800873e:	4640      	mov	r0, r8
 8008740:	4649      	mov	r1, r9
 8008742:	f7f7 ff59 	bl	80005f8 <__aeabi_dmul>
 8008746:	f7f8 f9f1 	bl	8000b2c <__aeabi_d2iz>
 800874a:	f7f7 feef 	bl	800052c <__aeabi_i2d>
 800874e:	2200      	movs	r2, #0
 8008750:	4b47      	ldr	r3, [pc, #284]	; (8008870 <__kernel_rem_pio2+0x330>)
 8008752:	4604      	mov	r4, r0
 8008754:	460d      	mov	r5, r1
 8008756:	f7f7 ff4f 	bl	80005f8 <__aeabi_dmul>
 800875a:	4602      	mov	r2, r0
 800875c:	460b      	mov	r3, r1
 800875e:	4640      	mov	r0, r8
 8008760:	4649      	mov	r1, r9
 8008762:	f7f7 fd95 	bl	8000290 <__aeabi_dsub>
 8008766:	f7f8 f9e1 	bl	8000b2c <__aeabi_d2iz>
 800876a:	ab0c      	add	r3, sp, #48	; 0x30
 800876c:	4629      	mov	r1, r5
 800876e:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8008772:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8008776:	4620      	mov	r0, r4
 8008778:	f7f7 fd8c 	bl	8000294 <__adddf3>
 800877c:	3601      	adds	r6, #1
 800877e:	4680      	mov	r8, r0
 8008780:	4689      	mov	r9, r1
 8008782:	e75f      	b.n	8008644 <__kernel_rem_pio2+0x104>
 8008784:	d106      	bne.n	8008794 <__kernel_rem_pio2+0x254>
 8008786:	1e7b      	subs	r3, r7, #1
 8008788:	aa0c      	add	r2, sp, #48	; 0x30
 800878a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800878e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8008792:	e79f      	b.n	80086d4 <__kernel_rem_pio2+0x194>
 8008794:	2200      	movs	r2, #0
 8008796:	4b37      	ldr	r3, [pc, #220]	; (8008874 <__kernel_rem_pio2+0x334>)
 8008798:	f7f8 f9b4 	bl	8000b04 <__aeabi_dcmpge>
 800879c:	bb68      	cbnz	r0, 80087fa <__kernel_rem_pio2+0x2ba>
 800879e:	4683      	mov	fp, r0
 80087a0:	2200      	movs	r2, #0
 80087a2:	2300      	movs	r3, #0
 80087a4:	4640      	mov	r0, r8
 80087a6:	4649      	mov	r1, r9
 80087a8:	f7f8 f98e 	bl	8000ac8 <__aeabi_dcmpeq>
 80087ac:	2800      	cmp	r0, #0
 80087ae:	f000 80c1 	beq.w	8008934 <__kernel_rem_pio2+0x3f4>
 80087b2:	1e7c      	subs	r4, r7, #1
 80087b4:	4623      	mov	r3, r4
 80087b6:	2200      	movs	r2, #0
 80087b8:	9900      	ldr	r1, [sp, #0]
 80087ba:	428b      	cmp	r3, r1
 80087bc:	da5c      	bge.n	8008878 <__kernel_rem_pio2+0x338>
 80087be:	2a00      	cmp	r2, #0
 80087c0:	f040 808b 	bne.w	80088da <__kernel_rem_pio2+0x39a>
 80087c4:	2401      	movs	r4, #1
 80087c6:	f06f 0203 	mvn.w	r2, #3
 80087ca:	fb02 f304 	mul.w	r3, r2, r4
 80087ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80087d0:	58cb      	ldr	r3, [r1, r3]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d056      	beq.n	8008884 <__kernel_rem_pio2+0x344>
 80087d6:	9b08      	ldr	r3, [sp, #32]
 80087d8:	aa98      	add	r2, sp, #608	; 0x260
 80087da:	4413      	add	r3, r2
 80087dc:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80087e0:	9b06      	ldr	r3, [sp, #24]
 80087e2:	19dd      	adds	r5, r3, r7
 80087e4:	ab20      	add	r3, sp, #128	; 0x80
 80087e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80087ea:	19e3      	adds	r3, r4, r7
 80087ec:	1c7e      	adds	r6, r7, #1
 80087ee:	9303      	str	r3, [sp, #12]
 80087f0:	9b03      	ldr	r3, [sp, #12]
 80087f2:	429e      	cmp	r6, r3
 80087f4:	dd48      	ble.n	8008888 <__kernel_rem_pio2+0x348>
 80087f6:	461f      	mov	r7, r3
 80087f8:	e712      	b.n	8008620 <__kernel_rem_pio2+0xe0>
 80087fa:	f04f 0b02 	mov.w	fp, #2
 80087fe:	e76c      	b.n	80086da <__kernel_rem_pio2+0x19a>
 8008800:	ab0c      	add	r3, sp, #48	; 0x30
 8008802:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008806:	b94c      	cbnz	r4, 800881c <__kernel_rem_pio2+0x2dc>
 8008808:	b12b      	cbz	r3, 8008816 <__kernel_rem_pio2+0x2d6>
 800880a:	a80c      	add	r0, sp, #48	; 0x30
 800880c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8008810:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008814:	2301      	movs	r3, #1
 8008816:	3201      	adds	r2, #1
 8008818:	461c      	mov	r4, r3
 800881a:	e765      	b.n	80086e8 <__kernel_rem_pio2+0x1a8>
 800881c:	a80c      	add	r0, sp, #48	; 0x30
 800881e:	1acb      	subs	r3, r1, r3
 8008820:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8008824:	4623      	mov	r3, r4
 8008826:	e7f6      	b.n	8008816 <__kernel_rem_pio2+0x2d6>
 8008828:	1e7a      	subs	r2, r7, #1
 800882a:	ab0c      	add	r3, sp, #48	; 0x30
 800882c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008830:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8008834:	a90c      	add	r1, sp, #48	; 0x30
 8008836:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800883a:	e763      	b.n	8008704 <__kernel_rem_pio2+0x1c4>
 800883c:	1e7a      	subs	r2, r7, #1
 800883e:	ab0c      	add	r3, sp, #48	; 0x30
 8008840:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008844:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8008848:	e7f4      	b.n	8008834 <__kernel_rem_pio2+0x2f4>
 800884a:	bf00      	nop
 800884c:	f3af 8000 	nop.w
	...
 800885c:	3ff00000 	.word	0x3ff00000
 8008860:	0801c898 	.word	0x0801c898
 8008864:	40200000 	.word	0x40200000
 8008868:	3ff00000 	.word	0x3ff00000
 800886c:	3e700000 	.word	0x3e700000
 8008870:	41700000 	.word	0x41700000
 8008874:	3fe00000 	.word	0x3fe00000
 8008878:	a90c      	add	r1, sp, #48	; 0x30
 800887a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800887e:	3b01      	subs	r3, #1
 8008880:	430a      	orrs	r2, r1
 8008882:	e799      	b.n	80087b8 <__kernel_rem_pio2+0x278>
 8008884:	3401      	adds	r4, #1
 8008886:	e7a0      	b.n	80087ca <__kernel_rem_pio2+0x28a>
 8008888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800888a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800888e:	f7f7 fe4d 	bl	800052c <__aeabi_i2d>
 8008892:	e8e5 0102 	strd	r0, r1, [r5], #8
 8008896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008898:	9508      	str	r5, [sp, #32]
 800889a:	461c      	mov	r4, r3
 800889c:	2700      	movs	r7, #0
 800889e:	f04f 0800 	mov.w	r8, #0
 80088a2:	f04f 0900 	mov.w	r9, #0
 80088a6:	9b04      	ldr	r3, [sp, #16]
 80088a8:	429f      	cmp	r7, r3
 80088aa:	dd03      	ble.n	80088b4 <__kernel_rem_pio2+0x374>
 80088ac:	e8eb 8902 	strd	r8, r9, [fp], #8
 80088b0:	3601      	adds	r6, #1
 80088b2:	e79d      	b.n	80087f0 <__kernel_rem_pio2+0x2b0>
 80088b4:	9908      	ldr	r1, [sp, #32]
 80088b6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80088ba:	9108      	str	r1, [sp, #32]
 80088bc:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80088c0:	f7f7 fe9a 	bl	80005f8 <__aeabi_dmul>
 80088c4:	4602      	mov	r2, r0
 80088c6:	460b      	mov	r3, r1
 80088c8:	4640      	mov	r0, r8
 80088ca:	4649      	mov	r1, r9
 80088cc:	f7f7 fce2 	bl	8000294 <__adddf3>
 80088d0:	3701      	adds	r7, #1
 80088d2:	4680      	mov	r8, r0
 80088d4:	4689      	mov	r9, r1
 80088d6:	e7e6      	b.n	80088a6 <__kernel_rem_pio2+0x366>
 80088d8:	3c01      	subs	r4, #1
 80088da:	ab0c      	add	r3, sp, #48	; 0x30
 80088dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80088e0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d0f7      	beq.n	80088d8 <__kernel_rem_pio2+0x398>
 80088e8:	4650      	mov	r0, sl
 80088ea:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8008bc0 <__kernel_rem_pio2+0x680>
 80088ee:	f000 fb43 	bl	8008f78 <scalbn>
 80088f2:	00e5      	lsls	r5, r4, #3
 80088f4:	ab98      	add	r3, sp, #608	; 0x260
 80088f6:	eb03 0905 	add.w	r9, r3, r5
 80088fa:	ec57 6b10 	vmov	r6, r7, d0
 80088fe:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8008902:	46a0      	mov	r8, r4
 8008904:	f1b8 0f00 	cmp.w	r8, #0
 8008908:	da4d      	bge.n	80089a6 <__kernel_rem_pio2+0x466>
 800890a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8008bc8 <__kernel_rem_pio2+0x688>
 800890e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8008912:	2300      	movs	r3, #0
 8008914:	9304      	str	r3, [sp, #16]
 8008916:	4657      	mov	r7, sl
 8008918:	9b04      	ldr	r3, [sp, #16]
 800891a:	ebb4 0903 	subs.w	r9, r4, r3
 800891e:	d476      	bmi.n	8008a0e <__kernel_rem_pio2+0x4ce>
 8008920:	4bab      	ldr	r3, [pc, #684]	; (8008bd0 <__kernel_rem_pio2+0x690>)
 8008922:	461e      	mov	r6, r3
 8008924:	ab70      	add	r3, sp, #448	; 0x1c0
 8008926:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800892a:	ed8d 8b06 	vstr	d8, [sp, #24]
 800892e:	f04f 0800 	mov.w	r8, #0
 8008932:	e05e      	b.n	80089f2 <__kernel_rem_pio2+0x4b2>
 8008934:	f1ca 0000 	rsb	r0, sl, #0
 8008938:	ec49 8b10 	vmov	d0, r8, r9
 800893c:	f000 fb1c 	bl	8008f78 <scalbn>
 8008940:	ec55 4b10 	vmov	r4, r5, d0
 8008944:	2200      	movs	r2, #0
 8008946:	4ba3      	ldr	r3, [pc, #652]	; (8008bd4 <__kernel_rem_pio2+0x694>)
 8008948:	ee10 0a10 	vmov	r0, s0
 800894c:	4629      	mov	r1, r5
 800894e:	f7f8 f8d9 	bl	8000b04 <__aeabi_dcmpge>
 8008952:	b1f8      	cbz	r0, 8008994 <__kernel_rem_pio2+0x454>
 8008954:	2200      	movs	r2, #0
 8008956:	4ba0      	ldr	r3, [pc, #640]	; (8008bd8 <__kernel_rem_pio2+0x698>)
 8008958:	4620      	mov	r0, r4
 800895a:	4629      	mov	r1, r5
 800895c:	f7f7 fe4c 	bl	80005f8 <__aeabi_dmul>
 8008960:	f7f8 f8e4 	bl	8000b2c <__aeabi_d2iz>
 8008964:	4606      	mov	r6, r0
 8008966:	f7f7 fde1 	bl	800052c <__aeabi_i2d>
 800896a:	2200      	movs	r2, #0
 800896c:	4b99      	ldr	r3, [pc, #612]	; (8008bd4 <__kernel_rem_pio2+0x694>)
 800896e:	f7f7 fe43 	bl	80005f8 <__aeabi_dmul>
 8008972:	460b      	mov	r3, r1
 8008974:	4602      	mov	r2, r0
 8008976:	4629      	mov	r1, r5
 8008978:	4620      	mov	r0, r4
 800897a:	f7f7 fc89 	bl	8000290 <__aeabi_dsub>
 800897e:	f7f8 f8d5 	bl	8000b2c <__aeabi_d2iz>
 8008982:	1c7c      	adds	r4, r7, #1
 8008984:	ab0c      	add	r3, sp, #48	; 0x30
 8008986:	f10a 0a18 	add.w	sl, sl, #24
 800898a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800898e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8008992:	e7a9      	b.n	80088e8 <__kernel_rem_pio2+0x3a8>
 8008994:	4620      	mov	r0, r4
 8008996:	4629      	mov	r1, r5
 8008998:	f7f8 f8c8 	bl	8000b2c <__aeabi_d2iz>
 800899c:	ab0c      	add	r3, sp, #48	; 0x30
 800899e:	463c      	mov	r4, r7
 80089a0:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80089a4:	e7a0      	b.n	80088e8 <__kernel_rem_pio2+0x3a8>
 80089a6:	ab0c      	add	r3, sp, #48	; 0x30
 80089a8:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80089ac:	f7f7 fdbe 	bl	800052c <__aeabi_i2d>
 80089b0:	4632      	mov	r2, r6
 80089b2:	463b      	mov	r3, r7
 80089b4:	f7f7 fe20 	bl	80005f8 <__aeabi_dmul>
 80089b8:	2200      	movs	r2, #0
 80089ba:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80089be:	4b86      	ldr	r3, [pc, #536]	; (8008bd8 <__kernel_rem_pio2+0x698>)
 80089c0:	4630      	mov	r0, r6
 80089c2:	4639      	mov	r1, r7
 80089c4:	f7f7 fe18 	bl	80005f8 <__aeabi_dmul>
 80089c8:	f108 38ff 	add.w	r8, r8, #4294967295
 80089cc:	4606      	mov	r6, r0
 80089ce:	460f      	mov	r7, r1
 80089d0:	e798      	b.n	8008904 <__kernel_rem_pio2+0x3c4>
 80089d2:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80089d6:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80089da:	f7f7 fe0d 	bl	80005f8 <__aeabi_dmul>
 80089de:	4602      	mov	r2, r0
 80089e0:	460b      	mov	r3, r1
 80089e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e6:	f7f7 fc55 	bl	8000294 <__adddf3>
 80089ea:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80089ee:	f108 0801 	add.w	r8, r8, #1
 80089f2:	9b00      	ldr	r3, [sp, #0]
 80089f4:	4598      	cmp	r8, r3
 80089f6:	dc02      	bgt.n	80089fe <__kernel_rem_pio2+0x4be>
 80089f8:	9b04      	ldr	r3, [sp, #16]
 80089fa:	4598      	cmp	r8, r3
 80089fc:	dde9      	ble.n	80089d2 <__kernel_rem_pio2+0x492>
 80089fe:	9b04      	ldr	r3, [sp, #16]
 8008a00:	ed9d 7b06 	vldr	d7, [sp, #24]
 8008a04:	3301      	adds	r3, #1
 8008a06:	ecaa 7b02 	vstmia	sl!, {d7}
 8008a0a:	9304      	str	r3, [sp, #16]
 8008a0c:	e784      	b.n	8008918 <__kernel_rem_pio2+0x3d8>
 8008a0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8008a10:	2b03      	cmp	r3, #3
 8008a12:	d85d      	bhi.n	8008ad0 <__kernel_rem_pio2+0x590>
 8008a14:	e8df f003 	tbb	[pc, r3]
 8008a18:	0226264b 	.word	0x0226264b
 8008a1c:	ab98      	add	r3, sp, #608	; 0x260
 8008a1e:	441d      	add	r5, r3
 8008a20:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8008a24:	462e      	mov	r6, r5
 8008a26:	46a2      	mov	sl, r4
 8008a28:	f1ba 0f00 	cmp.w	sl, #0
 8008a2c:	dc6e      	bgt.n	8008b0c <__kernel_rem_pio2+0x5cc>
 8008a2e:	462e      	mov	r6, r5
 8008a30:	46a2      	mov	sl, r4
 8008a32:	f1ba 0f01 	cmp.w	sl, #1
 8008a36:	f300 808a 	bgt.w	8008b4e <__kernel_rem_pio2+0x60e>
 8008a3a:	2000      	movs	r0, #0
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	2c01      	cmp	r4, #1
 8008a40:	f300 80a6 	bgt.w	8008b90 <__kernel_rem_pio2+0x650>
 8008a44:	f1bb 0f00 	cmp.w	fp, #0
 8008a48:	f040 80a8 	bne.w	8008b9c <__kernel_rem_pio2+0x65c>
 8008a4c:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8008a50:	9c02      	ldr	r4, [sp, #8]
 8008a52:	e9c4 2300 	strd	r2, r3, [r4]
 8008a56:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8008a5a:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8008a5e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008a62:	e035      	b.n	8008ad0 <__kernel_rem_pio2+0x590>
 8008a64:	3508      	adds	r5, #8
 8008a66:	ab48      	add	r3, sp, #288	; 0x120
 8008a68:	441d      	add	r5, r3
 8008a6a:	4626      	mov	r6, r4
 8008a6c:	2000      	movs	r0, #0
 8008a6e:	2100      	movs	r1, #0
 8008a70:	2e00      	cmp	r6, #0
 8008a72:	da3c      	bge.n	8008aee <__kernel_rem_pio2+0x5ae>
 8008a74:	f1bb 0f00 	cmp.w	fp, #0
 8008a78:	d03f      	beq.n	8008afa <__kernel_rem_pio2+0x5ba>
 8008a7a:	4602      	mov	r2, r0
 8008a7c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a80:	9d02      	ldr	r5, [sp, #8]
 8008a82:	e9c5 2300 	strd	r2, r3, [r5]
 8008a86:	4602      	mov	r2, r0
 8008a88:	460b      	mov	r3, r1
 8008a8a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8008a8e:	f7f7 fbff 	bl	8000290 <__aeabi_dsub>
 8008a92:	ae4a      	add	r6, sp, #296	; 0x128
 8008a94:	2501      	movs	r5, #1
 8008a96:	42ac      	cmp	r4, r5
 8008a98:	da32      	bge.n	8008b00 <__kernel_rem_pio2+0x5c0>
 8008a9a:	f1bb 0f00 	cmp.w	fp, #0
 8008a9e:	d002      	beq.n	8008aa6 <__kernel_rem_pio2+0x566>
 8008aa0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aa4:	4619      	mov	r1, r3
 8008aa6:	9b02      	ldr	r3, [sp, #8]
 8008aa8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8008aac:	e010      	b.n	8008ad0 <__kernel_rem_pio2+0x590>
 8008aae:	ab98      	add	r3, sp, #608	; 0x260
 8008ab0:	441d      	add	r5, r3
 8008ab2:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8008ab6:	2000      	movs	r0, #0
 8008ab8:	2100      	movs	r1, #0
 8008aba:	2c00      	cmp	r4, #0
 8008abc:	da11      	bge.n	8008ae2 <__kernel_rem_pio2+0x5a2>
 8008abe:	f1bb 0f00 	cmp.w	fp, #0
 8008ac2:	d002      	beq.n	8008aca <__kernel_rem_pio2+0x58a>
 8008ac4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008ac8:	4619      	mov	r1, r3
 8008aca:	9b02      	ldr	r3, [sp, #8]
 8008acc:	e9c3 0100 	strd	r0, r1, [r3]
 8008ad0:	9b03      	ldr	r3, [sp, #12]
 8008ad2:	f003 0007 	and.w	r0, r3, #7
 8008ad6:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8008ada:	ecbd 8b02 	vpop	{d8}
 8008ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae2:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008ae6:	f7f7 fbd5 	bl	8000294 <__adddf3>
 8008aea:	3c01      	subs	r4, #1
 8008aec:	e7e5      	b.n	8008aba <__kernel_rem_pio2+0x57a>
 8008aee:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008af2:	f7f7 fbcf 	bl	8000294 <__adddf3>
 8008af6:	3e01      	subs	r6, #1
 8008af8:	e7ba      	b.n	8008a70 <__kernel_rem_pio2+0x530>
 8008afa:	4602      	mov	r2, r0
 8008afc:	460b      	mov	r3, r1
 8008afe:	e7bf      	b.n	8008a80 <__kernel_rem_pio2+0x540>
 8008b00:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8008b04:	f7f7 fbc6 	bl	8000294 <__adddf3>
 8008b08:	3501      	adds	r5, #1
 8008b0a:	e7c4      	b.n	8008a96 <__kernel_rem_pio2+0x556>
 8008b0c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8008b10:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8008b14:	ec53 2b17 	vmov	r2, r3, d7
 8008b18:	4640      	mov	r0, r8
 8008b1a:	4649      	mov	r1, r9
 8008b1c:	ed8d 7b00 	vstr	d7, [sp]
 8008b20:	f7f7 fbb8 	bl	8000294 <__adddf3>
 8008b24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b28:	4602      	mov	r2, r0
 8008b2a:	460b      	mov	r3, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fbae 	bl	8000290 <__aeabi_dsub>
 8008b34:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b38:	f7f7 fbac 	bl	8000294 <__adddf3>
 8008b3c:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b40:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8008b44:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b48:	ed06 7b02 	vstr	d7, [r6, #-8]
 8008b4c:	e76c      	b.n	8008a28 <__kernel_rem_pio2+0x4e8>
 8008b4e:	ed16 7b02 	vldr	d7, [r6, #-8]
 8008b52:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8008b56:	ec53 2b17 	vmov	r2, r3, d7
 8008b5a:	4640      	mov	r0, r8
 8008b5c:	4649      	mov	r1, r9
 8008b5e:	ed8d 7b00 	vstr	d7, [sp]
 8008b62:	f7f7 fb97 	bl	8000294 <__adddf3>
 8008b66:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	460b      	mov	r3, r1
 8008b6e:	4640      	mov	r0, r8
 8008b70:	4649      	mov	r1, r9
 8008b72:	f7f7 fb8d 	bl	8000290 <__aeabi_dsub>
 8008b76:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b7a:	f7f7 fb8b 	bl	8000294 <__adddf3>
 8008b7e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8008b82:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8008b86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b8a:	ed06 7b02 	vstr	d7, [r6, #-8]
 8008b8e:	e750      	b.n	8008a32 <__kernel_rem_pio2+0x4f2>
 8008b90:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8008b94:	f7f7 fb7e 	bl	8000294 <__adddf3>
 8008b98:	3c01      	subs	r4, #1
 8008b9a:	e750      	b.n	8008a3e <__kernel_rem_pio2+0x4fe>
 8008b9c:	9a02      	ldr	r2, [sp, #8]
 8008b9e:	683b      	ldr	r3, [r7, #0]
 8008ba0:	6013      	str	r3, [r2, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	6110      	str	r0, [r2, #16]
 8008ba6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008baa:	6053      	str	r3, [r2, #4]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	6093      	str	r3, [r2, #8]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008bb6:	60d3      	str	r3, [r2, #12]
 8008bb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008bbc:	6153      	str	r3, [r2, #20]
 8008bbe:	e787      	b.n	8008ad0 <__kernel_rem_pio2+0x590>
 8008bc0:	00000000 	.word	0x00000000
 8008bc4:	3ff00000 	.word	0x3ff00000
	...
 8008bd0:	0801c858 	.word	0x0801c858
 8008bd4:	41700000 	.word	0x41700000
 8008bd8:	3e700000 	.word	0x3e700000
 8008bdc:	00000000 	.word	0x00000000

08008be0 <__kernel_sin>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	ec55 4b10 	vmov	r4, r5, d0
 8008be8:	b085      	sub	sp, #20
 8008bea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008bee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8008bf2:	ed8d 1b00 	vstr	d1, [sp]
 8008bf6:	9002      	str	r0, [sp, #8]
 8008bf8:	da06      	bge.n	8008c08 <__kernel_sin+0x28>
 8008bfa:	ee10 0a10 	vmov	r0, s0
 8008bfe:	4629      	mov	r1, r5
 8008c00:	f7f7 ff94 	bl	8000b2c <__aeabi_d2iz>
 8008c04:	2800      	cmp	r0, #0
 8008c06:	d051      	beq.n	8008cac <__kernel_sin+0xcc>
 8008c08:	4622      	mov	r2, r4
 8008c0a:	462b      	mov	r3, r5
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	4629      	mov	r1, r5
 8008c10:	f7f7 fcf2 	bl	80005f8 <__aeabi_dmul>
 8008c14:	4682      	mov	sl, r0
 8008c16:	468b      	mov	fp, r1
 8008c18:	4602      	mov	r2, r0
 8008c1a:	460b      	mov	r3, r1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fcea 	bl	80005f8 <__aeabi_dmul>
 8008c24:	a341      	add	r3, pc, #260	; (adr r3, 8008d2c <__kernel_sin+0x14c>)
 8008c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c2a:	4680      	mov	r8, r0
 8008c2c:	4689      	mov	r9, r1
 8008c2e:	4650      	mov	r0, sl
 8008c30:	4659      	mov	r1, fp
 8008c32:	f7f7 fce1 	bl	80005f8 <__aeabi_dmul>
 8008c36:	a33f      	add	r3, pc, #252	; (adr r3, 8008d34 <__kernel_sin+0x154>)
 8008c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3c:	f7f7 fb28 	bl	8000290 <__aeabi_dsub>
 8008c40:	4652      	mov	r2, sl
 8008c42:	465b      	mov	r3, fp
 8008c44:	f7f7 fcd8 	bl	80005f8 <__aeabi_dmul>
 8008c48:	a33c      	add	r3, pc, #240	; (adr r3, 8008d3c <__kernel_sin+0x15c>)
 8008c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4e:	f7f7 fb21 	bl	8000294 <__adddf3>
 8008c52:	4652      	mov	r2, sl
 8008c54:	465b      	mov	r3, fp
 8008c56:	f7f7 fccf 	bl	80005f8 <__aeabi_dmul>
 8008c5a:	a33a      	add	r3, pc, #232	; (adr r3, 8008d44 <__kernel_sin+0x164>)
 8008c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c60:	f7f7 fb16 	bl	8000290 <__aeabi_dsub>
 8008c64:	4652      	mov	r2, sl
 8008c66:	465b      	mov	r3, fp
 8008c68:	f7f7 fcc6 	bl	80005f8 <__aeabi_dmul>
 8008c6c:	a337      	add	r3, pc, #220	; (adr r3, 8008d4c <__kernel_sin+0x16c>)
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f7f7 fb0f 	bl	8000294 <__adddf3>
 8008c76:	9b02      	ldr	r3, [sp, #8]
 8008c78:	4606      	mov	r6, r0
 8008c7a:	460f      	mov	r7, r1
 8008c7c:	b9db      	cbnz	r3, 8008cb6 <__kernel_sin+0xd6>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	460b      	mov	r3, r1
 8008c82:	4650      	mov	r0, sl
 8008c84:	4659      	mov	r1, fp
 8008c86:	f7f7 fcb7 	bl	80005f8 <__aeabi_dmul>
 8008c8a:	a325      	add	r3, pc, #148	; (adr r3, 8008d20 <__kernel_sin+0x140>)
 8008c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c90:	f7f7 fafe 	bl	8000290 <__aeabi_dsub>
 8008c94:	4642      	mov	r2, r8
 8008c96:	464b      	mov	r3, r9
 8008c98:	f7f7 fcae 	bl	80005f8 <__aeabi_dmul>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	460b      	mov	r3, r1
 8008ca0:	4620      	mov	r0, r4
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	f7f7 faf6 	bl	8000294 <__adddf3>
 8008ca8:	4604      	mov	r4, r0
 8008caa:	460d      	mov	r5, r1
 8008cac:	ec45 4b10 	vmov	d0, r4, r5
 8008cb0:	b005      	add	sp, #20
 8008cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	4b1b      	ldr	r3, [pc, #108]	; (8008d28 <__kernel_sin+0x148>)
 8008cba:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008cbe:	f7f7 fc9b 	bl	80005f8 <__aeabi_dmul>
 8008cc2:	4632      	mov	r2, r6
 8008cc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cc8:	463b      	mov	r3, r7
 8008cca:	4640      	mov	r0, r8
 8008ccc:	4649      	mov	r1, r9
 8008cce:	f7f7 fc93 	bl	80005f8 <__aeabi_dmul>
 8008cd2:	4602      	mov	r2, r0
 8008cd4:	460b      	mov	r3, r1
 8008cd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cda:	f7f7 fad9 	bl	8000290 <__aeabi_dsub>
 8008cde:	4652      	mov	r2, sl
 8008ce0:	465b      	mov	r3, fp
 8008ce2:	f7f7 fc89 	bl	80005f8 <__aeabi_dmul>
 8008ce6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cea:	f7f7 fad1 	bl	8000290 <__aeabi_dsub>
 8008cee:	a30c      	add	r3, pc, #48	; (adr r3, 8008d20 <__kernel_sin+0x140>)
 8008cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	4640      	mov	r0, r8
 8008cfa:	4649      	mov	r1, r9
 8008cfc:	f7f7 fc7c 	bl	80005f8 <__aeabi_dmul>
 8008d00:	4602      	mov	r2, r0
 8008d02:	460b      	mov	r3, r1
 8008d04:	4630      	mov	r0, r6
 8008d06:	4639      	mov	r1, r7
 8008d08:	f7f7 fac4 	bl	8000294 <__adddf3>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4620      	mov	r0, r4
 8008d12:	4629      	mov	r1, r5
 8008d14:	f7f7 fabc 	bl	8000290 <__aeabi_dsub>
 8008d18:	e7c6      	b.n	8008ca8 <__kernel_sin+0xc8>
 8008d1a:	bf00      	nop
 8008d1c:	f3af 8000 	nop.w
 8008d20:	55555549 	.word	0x55555549
 8008d24:	3fc55555 	.word	0x3fc55555
 8008d28:	3fe00000 	.word	0x3fe00000
 8008d2c:	5acfd57c 	.word	0x5acfd57c
 8008d30:	3de5d93a 	.word	0x3de5d93a
 8008d34:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d38:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d3c:	57b1fe7d 	.word	0x57b1fe7d
 8008d40:	3ec71de3 	.word	0x3ec71de3
 8008d44:	19c161d5 	.word	0x19c161d5
 8008d48:	3f2a01a0 	.word	0x3f2a01a0
 8008d4c:	1110f8a6 	.word	0x1110f8a6
 8008d50:	3f811111 	.word	0x3f811111
 8008d54:	00000000 	.word	0x00000000

08008d58 <floor>:
 8008d58:	ec51 0b10 	vmov	r0, r1, d0
 8008d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8008d64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8008d68:	2e13      	cmp	r6, #19
 8008d6a:	ee10 8a10 	vmov	r8, s0
 8008d6e:	460c      	mov	r4, r1
 8008d70:	ee10 5a10 	vmov	r5, s0
 8008d74:	dc35      	bgt.n	8008de2 <floor+0x8a>
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	da17      	bge.n	8008daa <floor+0x52>
 8008d7a:	a335      	add	r3, pc, #212	; (adr r3, 8008e50 <floor+0xf8>)
 8008d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d80:	f7f7 fa88 	bl	8000294 <__adddf3>
 8008d84:	2200      	movs	r2, #0
 8008d86:	2300      	movs	r3, #0
 8008d88:	f7f7 fec6 	bl	8000b18 <__aeabi_dcmpgt>
 8008d8c:	b150      	cbz	r0, 8008da4 <floor+0x4c>
 8008d8e:	2c00      	cmp	r4, #0
 8008d90:	da5a      	bge.n	8008e48 <floor+0xf0>
 8008d92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8008d96:	ea53 0308 	orrs.w	r3, r3, r8
 8008d9a:	4b2f      	ldr	r3, [pc, #188]	; (8008e58 <floor+0x100>)
 8008d9c:	f04f 0500 	mov.w	r5, #0
 8008da0:	bf18      	it	ne
 8008da2:	461c      	movne	r4, r3
 8008da4:	4621      	mov	r1, r4
 8008da6:	4628      	mov	r0, r5
 8008da8:	e025      	b.n	8008df6 <floor+0x9e>
 8008daa:	4f2c      	ldr	r7, [pc, #176]	; (8008e5c <floor+0x104>)
 8008dac:	4137      	asrs	r7, r6
 8008dae:	ea01 0307 	and.w	r3, r1, r7
 8008db2:	4303      	orrs	r3, r0
 8008db4:	d01f      	beq.n	8008df6 <floor+0x9e>
 8008db6:	a326      	add	r3, pc, #152	; (adr r3, 8008e50 <floor+0xf8>)
 8008db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dbc:	f7f7 fa6a 	bl	8000294 <__adddf3>
 8008dc0:	2200      	movs	r2, #0
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	f7f7 fea8 	bl	8000b18 <__aeabi_dcmpgt>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d0eb      	beq.n	8008da4 <floor+0x4c>
 8008dcc:	2c00      	cmp	r4, #0
 8008dce:	bfbe      	ittt	lt
 8008dd0:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8008dd4:	fa43 f606 	asrlt.w	r6, r3, r6
 8008dd8:	19a4      	addlt	r4, r4, r6
 8008dda:	ea24 0407 	bic.w	r4, r4, r7
 8008dde:	2500      	movs	r5, #0
 8008de0:	e7e0      	b.n	8008da4 <floor+0x4c>
 8008de2:	2e33      	cmp	r6, #51	; 0x33
 8008de4:	dd0b      	ble.n	8008dfe <floor+0xa6>
 8008de6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008dea:	d104      	bne.n	8008df6 <floor+0x9e>
 8008dec:	ee10 2a10 	vmov	r2, s0
 8008df0:	460b      	mov	r3, r1
 8008df2:	f7f7 fa4f 	bl	8000294 <__adddf3>
 8008df6:	ec41 0b10 	vmov	d0, r0, r1
 8008dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dfe:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8008e02:	f04f 33ff 	mov.w	r3, #4294967295
 8008e06:	fa23 f707 	lsr.w	r7, r3, r7
 8008e0a:	4238      	tst	r0, r7
 8008e0c:	d0f3      	beq.n	8008df6 <floor+0x9e>
 8008e0e:	a310      	add	r3, pc, #64	; (adr r3, 8008e50 <floor+0xf8>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fa3e 	bl	8000294 <__adddf3>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	f7f7 fe7c 	bl	8000b18 <__aeabi_dcmpgt>
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d0bf      	beq.n	8008da4 <floor+0x4c>
 8008e24:	2c00      	cmp	r4, #0
 8008e26:	da02      	bge.n	8008e2e <floor+0xd6>
 8008e28:	2e14      	cmp	r6, #20
 8008e2a:	d103      	bne.n	8008e34 <floor+0xdc>
 8008e2c:	3401      	adds	r4, #1
 8008e2e:	ea25 0507 	bic.w	r5, r5, r7
 8008e32:	e7b7      	b.n	8008da4 <floor+0x4c>
 8008e34:	2301      	movs	r3, #1
 8008e36:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8008e3a:	fa03 f606 	lsl.w	r6, r3, r6
 8008e3e:	4435      	add	r5, r6
 8008e40:	45a8      	cmp	r8, r5
 8008e42:	bf88      	it	hi
 8008e44:	18e4      	addhi	r4, r4, r3
 8008e46:	e7f2      	b.n	8008e2e <floor+0xd6>
 8008e48:	2500      	movs	r5, #0
 8008e4a:	462c      	mov	r4, r5
 8008e4c:	e7aa      	b.n	8008da4 <floor+0x4c>
 8008e4e:	bf00      	nop
 8008e50:	8800759c 	.word	0x8800759c
 8008e54:	7e37e43c 	.word	0x7e37e43c
 8008e58:	bff00000 	.word	0xbff00000
 8008e5c:	000fffff 	.word	0x000fffff

08008e60 <matherr>:
 8008e60:	2000      	movs	r0, #0
 8008e62:	4770      	bx	lr

08008e64 <rint>:
 8008e64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e66:	ec51 0b10 	vmov	r0, r1, d0
 8008e6a:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8008e6e:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8008e72:	2e13      	cmp	r6, #19
 8008e74:	ee10 7a10 	vmov	r7, s0
 8008e78:	460b      	mov	r3, r1
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8008e80:	dc58      	bgt.n	8008f34 <rint+0xd0>
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	da2b      	bge.n	8008ede <rint+0x7a>
 8008e86:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8008e8a:	4302      	orrs	r2, r0
 8008e8c:	d023      	beq.n	8008ed6 <rint+0x72>
 8008e8e:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8008e92:	4302      	orrs	r2, r0
 8008e94:	4251      	negs	r1, r2
 8008e96:	4311      	orrs	r1, r2
 8008e98:	0b09      	lsrs	r1, r1, #12
 8008e9a:	0c5b      	lsrs	r3, r3, #17
 8008e9c:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8008ea0:	045b      	lsls	r3, r3, #17
 8008ea2:	ea41 0703 	orr.w	r7, r1, r3
 8008ea6:	4b31      	ldr	r3, [pc, #196]	; (8008f6c <rint+0x108>)
 8008ea8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8008eac:	4639      	mov	r1, r7
 8008eae:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008eb2:	ee10 0a10 	vmov	r0, s0
 8008eb6:	4632      	mov	r2, r6
 8008eb8:	463b      	mov	r3, r7
 8008eba:	f7f7 f9eb 	bl	8000294 <__adddf3>
 8008ebe:	e9cd 0100 	strd	r0, r1, [sp]
 8008ec2:	463b      	mov	r3, r7
 8008ec4:	4632      	mov	r2, r6
 8008ec6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008eca:	f7f7 f9e1 	bl	8000290 <__aeabi_dsub>
 8008ece:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008ed2:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8008ed6:	ec41 0b10 	vmov	d0, r0, r1
 8008eda:	b003      	add	sp, #12
 8008edc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ede:	4c24      	ldr	r4, [pc, #144]	; (8008f70 <rint+0x10c>)
 8008ee0:	4134      	asrs	r4, r6
 8008ee2:	ea01 0704 	and.w	r7, r1, r4
 8008ee6:	4307      	orrs	r7, r0
 8008ee8:	d0f5      	beq.n	8008ed6 <rint+0x72>
 8008eea:	0861      	lsrs	r1, r4, #1
 8008eec:	ea03 0001 	and.w	r0, r3, r1
 8008ef0:	4302      	orrs	r2, r0
 8008ef2:	d00b      	beq.n	8008f0c <rint+0xa8>
 8008ef4:	ea23 0101 	bic.w	r1, r3, r1
 8008ef8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008efc:	2e13      	cmp	r6, #19
 8008efe:	fa43 f306 	asr.w	r3, r3, r6
 8008f02:	bf0c      	ite	eq
 8008f04:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8008f08:	2200      	movne	r2, #0
 8008f0a:	430b      	orrs	r3, r1
 8008f0c:	4619      	mov	r1, r3
 8008f0e:	4b17      	ldr	r3, [pc, #92]	; (8008f6c <rint+0x108>)
 8008f10:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8008f14:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f18:	4610      	mov	r0, r2
 8008f1a:	462b      	mov	r3, r5
 8008f1c:	4622      	mov	r2, r4
 8008f1e:	f7f7 f9b9 	bl	8000294 <__adddf3>
 8008f22:	e9cd 0100 	strd	r0, r1, [sp]
 8008f26:	4622      	mov	r2, r4
 8008f28:	462b      	mov	r3, r5
 8008f2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008f2e:	f7f7 f9af 	bl	8000290 <__aeabi_dsub>
 8008f32:	e7d0      	b.n	8008ed6 <rint+0x72>
 8008f34:	2e33      	cmp	r6, #51	; 0x33
 8008f36:	dd08      	ble.n	8008f4a <rint+0xe6>
 8008f38:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8008f3c:	d1cb      	bne.n	8008ed6 <rint+0x72>
 8008f3e:	ee10 2a10 	vmov	r2, s0
 8008f42:	460b      	mov	r3, r1
 8008f44:	f7f7 f9a6 	bl	8000294 <__adddf3>
 8008f48:	e7c5      	b.n	8008ed6 <rint+0x72>
 8008f4a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8008f4e:	f04f 34ff 	mov.w	r4, #4294967295
 8008f52:	40f4      	lsrs	r4, r6
 8008f54:	4220      	tst	r0, r4
 8008f56:	d0be      	beq.n	8008ed6 <rint+0x72>
 8008f58:	0861      	lsrs	r1, r4, #1
 8008f5a:	420f      	tst	r7, r1
 8008f5c:	bf1f      	itttt	ne
 8008f5e:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8008f62:	ea27 0101 	bicne.w	r1, r7, r1
 8008f66:	4132      	asrne	r2, r6
 8008f68:	430a      	orrne	r2, r1
 8008f6a:	e7cf      	b.n	8008f0c <rint+0xa8>
 8008f6c:	0801c8a8 	.word	0x0801c8a8
 8008f70:	000fffff 	.word	0x000fffff
 8008f74:	00000000 	.word	0x00000000

08008f78 <scalbn>:
 8008f78:	b570      	push	{r4, r5, r6, lr}
 8008f7a:	ec55 4b10 	vmov	r4, r5, d0
 8008f7e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8008f82:	4606      	mov	r6, r0
 8008f84:	462b      	mov	r3, r5
 8008f86:	b9b2      	cbnz	r2, 8008fb6 <scalbn+0x3e>
 8008f88:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8008f8c:	4323      	orrs	r3, r4
 8008f8e:	d03c      	beq.n	800900a <scalbn+0x92>
 8008f90:	2200      	movs	r2, #0
 8008f92:	4b33      	ldr	r3, [pc, #204]	; (8009060 <scalbn+0xe8>)
 8008f94:	4629      	mov	r1, r5
 8008f96:	ee10 0a10 	vmov	r0, s0
 8008f9a:	f7f7 fb2d 	bl	80005f8 <__aeabi_dmul>
 8008f9e:	4a31      	ldr	r2, [pc, #196]	; (8009064 <scalbn+0xec>)
 8008fa0:	4296      	cmp	r6, r2
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	da13      	bge.n	8008fd2 <scalbn+0x5a>
 8008faa:	a329      	add	r3, pc, #164	; (adr r3, 8009050 <scalbn+0xd8>)
 8008fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb0:	f7f7 fb22 	bl	80005f8 <__aeabi_dmul>
 8008fb4:	e00a      	b.n	8008fcc <scalbn+0x54>
 8008fb6:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8008fba:	428a      	cmp	r2, r1
 8008fbc:	d10c      	bne.n	8008fd8 <scalbn+0x60>
 8008fbe:	ee10 2a10 	vmov	r2, s0
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	f7f7 f964 	bl	8000294 <__adddf3>
 8008fcc:	4604      	mov	r4, r0
 8008fce:	460d      	mov	r5, r1
 8008fd0:	e01b      	b.n	800900a <scalbn+0x92>
 8008fd2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8008fd6:	3a36      	subs	r2, #54	; 0x36
 8008fd8:	4432      	add	r2, r6
 8008fda:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8008fde:	428a      	cmp	r2, r1
 8008fe0:	dd0b      	ble.n	8008ffa <scalbn+0x82>
 8008fe2:	ec45 4b11 	vmov	d1, r4, r5
 8008fe6:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8009058 <scalbn+0xe0>
 8008fea:	f000 f8b7 	bl	800915c <copysign>
 8008fee:	a31a      	add	r3, pc, #104	; (adr r3, 8009058 <scalbn+0xe0>)
 8008ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ff4:	ec51 0b10 	vmov	r0, r1, d0
 8008ff8:	e7da      	b.n	8008fb0 <scalbn+0x38>
 8008ffa:	2a00      	cmp	r2, #0
 8008ffc:	dd08      	ble.n	8009010 <scalbn+0x98>
 8008ffe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009002:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009006:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800900a:	ec45 4b10 	vmov	d0, r4, r5
 800900e:	bd70      	pop	{r4, r5, r6, pc}
 8009010:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009014:	da0d      	bge.n	8009032 <scalbn+0xba>
 8009016:	f24c 3350 	movw	r3, #50000	; 0xc350
 800901a:	429e      	cmp	r6, r3
 800901c:	ec45 4b11 	vmov	d1, r4, r5
 8009020:	dce1      	bgt.n	8008fe6 <scalbn+0x6e>
 8009022:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8009050 <scalbn+0xd8>
 8009026:	f000 f899 	bl	800915c <copysign>
 800902a:	a309      	add	r3, pc, #36	; (adr r3, 8009050 <scalbn+0xd8>)
 800902c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009030:	e7e0      	b.n	8008ff4 <scalbn+0x7c>
 8009032:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009036:	3236      	adds	r2, #54	; 0x36
 8009038:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800903c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009040:	4620      	mov	r0, r4
 8009042:	4629      	mov	r1, r5
 8009044:	2200      	movs	r2, #0
 8009046:	4b08      	ldr	r3, [pc, #32]	; (8009068 <scalbn+0xf0>)
 8009048:	e7b2      	b.n	8008fb0 <scalbn+0x38>
 800904a:	bf00      	nop
 800904c:	f3af 8000 	nop.w
 8009050:	c2f8f359 	.word	0xc2f8f359
 8009054:	01a56e1f 	.word	0x01a56e1f
 8009058:	8800759c 	.word	0x8800759c
 800905c:	7e37e43c 	.word	0x7e37e43c
 8009060:	43500000 	.word	0x43500000
 8009064:	ffff3cb0 	.word	0xffff3cb0
 8009068:	3c900000 	.word	0x3c900000

0800906c <fabsf>:
 800906c:	ee10 3a10 	vmov	r3, s0
 8009070:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009074:	ee00 3a10 	vmov	s0, r3
 8009078:	4770      	bx	lr

0800907a <finitef>:
 800907a:	ee10 3a10 	vmov	r3, s0
 800907e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8009082:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009086:	bfac      	ite	ge
 8009088:	2000      	movge	r0, #0
 800908a:	2001      	movlt	r0, #1
 800908c:	4770      	bx	lr
	...

08009090 <nanf>:
 8009090:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009098 <nanf+0x8>
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	7fc00000 	.word	0x7fc00000

0800909c <scalbnf>:
 800909c:	b508      	push	{r3, lr}
 800909e:	ee10 2a10 	vmov	r2, s0
 80090a2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80090a6:	ed2d 8b02 	vpush	{d8}
 80090aa:	eef0 0a40 	vmov.f32	s1, s0
 80090ae:	d004      	beq.n	80090ba <scalbnf+0x1e>
 80090b0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80090b4:	d306      	bcc.n	80090c4 <scalbnf+0x28>
 80090b6:	ee70 0a00 	vadd.f32	s1, s0, s0
 80090ba:	ecbd 8b02 	vpop	{d8}
 80090be:	eeb0 0a60 	vmov.f32	s0, s1
 80090c2:	bd08      	pop	{r3, pc}
 80090c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80090c8:	d21c      	bcs.n	8009104 <scalbnf+0x68>
 80090ca:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <scalbnf+0xac>)
 80090cc:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800914c <scalbnf+0xb0>
 80090d0:	4298      	cmp	r0, r3
 80090d2:	ee60 0a27 	vmul.f32	s1, s0, s15
 80090d6:	db10      	blt.n	80090fa <scalbnf+0x5e>
 80090d8:	ee10 2a90 	vmov	r2, s1
 80090dc:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80090e0:	3b19      	subs	r3, #25
 80090e2:	4403      	add	r3, r0
 80090e4:	2bfe      	cmp	r3, #254	; 0xfe
 80090e6:	dd0f      	ble.n	8009108 <scalbnf+0x6c>
 80090e8:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8009150 <scalbnf+0xb4>
 80090ec:	eeb0 0a48 	vmov.f32	s0, s16
 80090f0:	f000 f841 	bl	8009176 <copysignf>
 80090f4:	ee60 0a08 	vmul.f32	s1, s0, s16
 80090f8:	e7df      	b.n	80090ba <scalbnf+0x1e>
 80090fa:	eddf 7a16 	vldr	s15, [pc, #88]	; 8009154 <scalbnf+0xb8>
 80090fe:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8009102:	e7da      	b.n	80090ba <scalbnf+0x1e>
 8009104:	0ddb      	lsrs	r3, r3, #23
 8009106:	e7ec      	b.n	80090e2 <scalbnf+0x46>
 8009108:	2b00      	cmp	r3, #0
 800910a:	dd06      	ble.n	800911a <scalbnf+0x7e>
 800910c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009110:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009114:	ee00 3a90 	vmov	s1, r3
 8009118:	e7cf      	b.n	80090ba <scalbnf+0x1e>
 800911a:	f113 0f16 	cmn.w	r3, #22
 800911e:	da06      	bge.n	800912e <scalbnf+0x92>
 8009120:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009124:	4298      	cmp	r0, r3
 8009126:	dcdf      	bgt.n	80090e8 <scalbnf+0x4c>
 8009128:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 8009154 <scalbnf+0xb8>
 800912c:	e7de      	b.n	80090ec <scalbnf+0x50>
 800912e:	3319      	adds	r3, #25
 8009130:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8009134:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8009138:	eddf 7a07 	vldr	s15, [pc, #28]	; 8009158 <scalbnf+0xbc>
 800913c:	ee07 3a10 	vmov	s14, r3
 8009140:	ee67 0a27 	vmul.f32	s1, s14, s15
 8009144:	e7b9      	b.n	80090ba <scalbnf+0x1e>
 8009146:	bf00      	nop
 8009148:	ffff3cb0 	.word	0xffff3cb0
 800914c:	4c000000 	.word	0x4c000000
 8009150:	7149f2ca 	.word	0x7149f2ca
 8009154:	0da24260 	.word	0x0da24260
 8009158:	33000000 	.word	0x33000000

0800915c <copysign>:
 800915c:	ec53 2b10 	vmov	r2, r3, d0
 8009160:	ee11 0a90 	vmov	r0, s3
 8009164:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009168:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800916c:	ea41 0300 	orr.w	r3, r1, r0
 8009170:	ec43 2b10 	vmov	d0, r2, r3
 8009174:	4770      	bx	lr

08009176 <copysignf>:
 8009176:	ee10 3a10 	vmov	r3, s0
 800917a:	ee10 2a90 	vmov	r2, s1
 800917e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009182:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8009186:	4313      	orrs	r3, r2
 8009188:	ee00 3a10 	vmov	s0, r3
 800918c:	4770      	bx	lr
	...

08009190 <_init>:
 8009190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009192:	bf00      	nop
 8009194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009196:	bc08      	pop	{r3}
 8009198:	469e      	mov	lr, r3
 800919a:	4770      	bx	lr

0800919c <_fini>:
 800919c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800919e:	bf00      	nop
 80091a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091a2:	bc08      	pop	{r3}
 80091a4:	469e      	mov	lr, r3
 80091a6:	4770      	bx	lr
