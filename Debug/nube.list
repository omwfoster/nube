
nube.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007044  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000137b8  080071d0  080071d0  000171d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a988  0801a988  0002a988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a990  0801a990  0002a990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a994  0801a994  0002a994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000048c  20000000  0801a998  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0003048c  2**0
                  CONTENTS
  8 .bss          00001fc4  2000048c  2000048c  0003048c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20002450  20002450  0003048c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0003048c  2**0
                  CONTENTS, READONLY
 11 .debug_info   000225b9  00000000  00000000  000304bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00004258  00000000  00000000  00052a75  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00007fb3  00000000  00000000  00056ccd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0005ec80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001090  00000000  00000000  0005f848  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000083e0  00000000  00000000  000608d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000053b8  00000000  00000000  00068cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      000000ea  00000000  00000000  0006e070  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000285c  00000000  00000000  0006e15c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000048c 	.word	0x2000048c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071b4 	.word	0x080071b4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000490 	.word	0x20000490
 80001c4:	080071b4 	.word	0x080071b4

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2f>:
 8000afc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b00:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b04:	bf24      	itt	cs
 8000b06:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0e:	d90d      	bls.n	8000b2c <__aeabi_d2f+0x30>
 8000b10:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b14:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b18:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b1c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b20:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b24:	bf08      	it	eq
 8000b26:	f020 0001 	biceq.w	r0, r0, #1
 8000b2a:	4770      	bx	lr
 8000b2c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b30:	d121      	bne.n	8000b76 <__aeabi_d2f+0x7a>
 8000b32:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b36:	bfbc      	itt	lt
 8000b38:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b3c:	4770      	bxlt	lr
 8000b3e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b42:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b46:	f1c2 0218 	rsb	r2, r2, #24
 8000b4a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b52:	fa20 f002 	lsr.w	r0, r0, r2
 8000b56:	bf18      	it	ne
 8000b58:	f040 0001 	orrne.w	r0, r0, #1
 8000b5c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b60:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b64:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b68:	ea40 000c 	orr.w	r0, r0, ip
 8000b6c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b70:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b74:	e7cc      	b.n	8000b10 <__aeabi_d2f+0x14>
 8000b76:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7a:	d107      	bne.n	8000b8c <__aeabi_d2f+0x90>
 8000b7c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b80:	bf1e      	ittt	ne
 8000b82:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b86:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8a:	4770      	bxne	lr
 8000b8c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b97a 	b.w	8000ea8 <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	468c      	mov	ip, r1
 8000bd2:	460d      	mov	r5, r1
 8000bd4:	4604      	mov	r4, r0
 8000bd6:	9e08      	ldr	r6, [sp, #32]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d151      	bne.n	8000c80 <__udivmoddi4+0xb4>
 8000bdc:	428a      	cmp	r2, r1
 8000bde:	4617      	mov	r7, r2
 8000be0:	d96d      	bls.n	8000cbe <__udivmoddi4+0xf2>
 8000be2:	fab2 fe82 	clz	lr, r2
 8000be6:	f1be 0f00 	cmp.w	lr, #0
 8000bea:	d00b      	beq.n	8000c04 <__udivmoddi4+0x38>
 8000bec:	f1ce 0c20 	rsb	ip, lr, #32
 8000bf0:	fa01 f50e 	lsl.w	r5, r1, lr
 8000bf4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000bf8:	fa02 f70e 	lsl.w	r7, r2, lr
 8000bfc:	ea4c 0c05 	orr.w	ip, ip, r5
 8000c00:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c04:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000c08:	0c25      	lsrs	r5, r4, #16
 8000c0a:	fbbc f8fa 	udiv	r8, ip, sl
 8000c0e:	fa1f f987 	uxth.w	r9, r7
 8000c12:	fb0a cc18 	mls	ip, sl, r8, ip
 8000c16:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000c1a:	fb08 f309 	mul.w	r3, r8, r9
 8000c1e:	42ab      	cmp	r3, r5
 8000c20:	d90a      	bls.n	8000c38 <__udivmoddi4+0x6c>
 8000c22:	19ed      	adds	r5, r5, r7
 8000c24:	f108 32ff 	add.w	r2, r8, #4294967295
 8000c28:	f080 8123 	bcs.w	8000e72 <__udivmoddi4+0x2a6>
 8000c2c:	42ab      	cmp	r3, r5
 8000c2e:	f240 8120 	bls.w	8000e72 <__udivmoddi4+0x2a6>
 8000c32:	f1a8 0802 	sub.w	r8, r8, #2
 8000c36:	443d      	add	r5, r7
 8000c38:	1aed      	subs	r5, r5, r3
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000c40:	fb0a 5510 	mls	r5, sl, r0, r5
 8000c44:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c48:	fb00 f909 	mul.w	r9, r0, r9
 8000c4c:	45a1      	cmp	r9, r4
 8000c4e:	d909      	bls.n	8000c64 <__udivmoddi4+0x98>
 8000c50:	19e4      	adds	r4, r4, r7
 8000c52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c56:	f080 810a 	bcs.w	8000e6e <__udivmoddi4+0x2a2>
 8000c5a:	45a1      	cmp	r9, r4
 8000c5c:	f240 8107 	bls.w	8000e6e <__udivmoddi4+0x2a2>
 8000c60:	3802      	subs	r0, #2
 8000c62:	443c      	add	r4, r7
 8000c64:	eba4 0409 	sub.w	r4, r4, r9
 8000c68:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	2e00      	cmp	r6, #0
 8000c70:	d061      	beq.n	8000d36 <__udivmoddi4+0x16a>
 8000c72:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c76:	2300      	movs	r3, #0
 8000c78:	6034      	str	r4, [r6, #0]
 8000c7a:	6073      	str	r3, [r6, #4]
 8000c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c80:	428b      	cmp	r3, r1
 8000c82:	d907      	bls.n	8000c94 <__udivmoddi4+0xc8>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d054      	beq.n	8000d32 <__udivmoddi4+0x166>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e886 0021 	stmia.w	r6, {r0, r5}
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	f040 808e 	bne.w	8000dba <__udivmoddi4+0x1ee>
 8000c9e:	42ab      	cmp	r3, r5
 8000ca0:	d302      	bcc.n	8000ca8 <__udivmoddi4+0xdc>
 8000ca2:	4282      	cmp	r2, r0
 8000ca4:	f200 80fa 	bhi.w	8000e9c <__udivmoddi4+0x2d0>
 8000ca8:	1a84      	subs	r4, r0, r2
 8000caa:	eb65 0503 	sbc.w	r5, r5, r3
 8000cae:	2001      	movs	r0, #1
 8000cb0:	46ac      	mov	ip, r5
 8000cb2:	2e00      	cmp	r6, #0
 8000cb4:	d03f      	beq.n	8000d36 <__udivmoddi4+0x16a>
 8000cb6:	e886 1010 	stmia.w	r6, {r4, ip}
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	b912      	cbnz	r2, 8000cc6 <__udivmoddi4+0xfa>
 8000cc0:	2701      	movs	r7, #1
 8000cc2:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc6:	fab7 fe87 	clz	lr, r7
 8000cca:	f1be 0f00 	cmp.w	lr, #0
 8000cce:	d134      	bne.n	8000d3a <__udivmoddi4+0x16e>
 8000cd0:	1beb      	subs	r3, r5, r7
 8000cd2:	0c3a      	lsrs	r2, r7, #16
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	2101      	movs	r1, #1
 8000cda:	fbb3 f8f2 	udiv	r8, r3, r2
 8000cde:	0c25      	lsrs	r5, r4, #16
 8000ce0:	fb02 3318 	mls	r3, r2, r8, r3
 8000ce4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ce8:	fb0c f308 	mul.w	r3, ip, r8
 8000cec:	42ab      	cmp	r3, r5
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x134>
 8000cf0:	19ed      	adds	r5, r5, r7
 8000cf2:	f108 30ff 	add.w	r0, r8, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x132>
 8000cf8:	42ab      	cmp	r3, r5
 8000cfa:	f200 80d1 	bhi.w	8000ea0 <__udivmoddi4+0x2d4>
 8000cfe:	4680      	mov	r8, r0
 8000d00:	1aed      	subs	r5, r5, r3
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb5 f0f2 	udiv	r0, r5, r2
 8000d08:	fb02 5510 	mls	r5, r2, r0, r5
 8000d0c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000d10:	fb0c fc00 	mul.w	ip, ip, r0
 8000d14:	45a4      	cmp	ip, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x15c>
 8000d18:	19e4      	adds	r4, r4, r7
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x15a>
 8000d20:	45a4      	cmp	ip, r4
 8000d22:	f200 80b8 	bhi.w	8000e96 <__udivmoddi4+0x2ca>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 040c 	sub.w	r4, r4, ip
 8000d2c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d30:	e79d      	b.n	8000c6e <__udivmoddi4+0xa2>
 8000d32:	4631      	mov	r1, r6
 8000d34:	4630      	mov	r0, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	f1ce 0420 	rsb	r4, lr, #32
 8000d3e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000d42:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d46:	fa20 f804 	lsr.w	r8, r0, r4
 8000d4a:	0c3a      	lsrs	r2, r7, #16
 8000d4c:	fa25 f404 	lsr.w	r4, r5, r4
 8000d50:	ea48 0803 	orr.w	r8, r8, r3
 8000d54:	fbb4 f1f2 	udiv	r1, r4, r2
 8000d58:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000d5c:	fb02 4411 	mls	r4, r2, r1, r4
 8000d60:	fa1f fc87 	uxth.w	ip, r7
 8000d64:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000d68:	fb01 f30c 	mul.w	r3, r1, ip
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d72:	d909      	bls.n	8000d88 <__udivmoddi4+0x1bc>
 8000d74:	19ed      	adds	r5, r5, r7
 8000d76:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d7a:	f080 808a 	bcs.w	8000e92 <__udivmoddi4+0x2c6>
 8000d7e:	42ab      	cmp	r3, r5
 8000d80:	f240 8087 	bls.w	8000e92 <__udivmoddi4+0x2c6>
 8000d84:	3902      	subs	r1, #2
 8000d86:	443d      	add	r5, r7
 8000d88:	1aeb      	subs	r3, r5, r3
 8000d8a:	fa1f f588 	uxth.w	r5, r8
 8000d8e:	fbb3 f0f2 	udiv	r0, r3, r2
 8000d92:	fb02 3310 	mls	r3, r2, r0, r3
 8000d96:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000d9a:	fb00 f30c 	mul.w	r3, r0, ip
 8000d9e:	42ab      	cmp	r3, r5
 8000da0:	d907      	bls.n	8000db2 <__udivmoddi4+0x1e6>
 8000da2:	19ed      	adds	r5, r5, r7
 8000da4:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da8:	d26f      	bcs.n	8000e8a <__udivmoddi4+0x2be>
 8000daa:	42ab      	cmp	r3, r5
 8000dac:	d96d      	bls.n	8000e8a <__udivmoddi4+0x2be>
 8000dae:	3802      	subs	r0, #2
 8000db0:	443d      	add	r5, r7
 8000db2:	1aeb      	subs	r3, r5, r3
 8000db4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db8:	e78f      	b.n	8000cda <__udivmoddi4+0x10e>
 8000dba:	f1c1 0720 	rsb	r7, r1, #32
 8000dbe:	fa22 f807 	lsr.w	r8, r2, r7
 8000dc2:	408b      	lsls	r3, r1
 8000dc4:	fa05 f401 	lsl.w	r4, r5, r1
 8000dc8:	ea48 0303 	orr.w	r3, r8, r3
 8000dcc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000dd0:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd4:	40fd      	lsrs	r5, r7
 8000dd6:	ea4e 0e04 	orr.w	lr, lr, r4
 8000dda:	fbb5 f9fc 	udiv	r9, r5, ip
 8000dde:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000de2:	fb0c 5519 	mls	r5, ip, r9, r5
 8000de6:	fa1f f883 	uxth.w	r8, r3
 8000dea:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000dee:	fb09 f408 	mul.w	r4, r9, r8
 8000df2:	42ac      	cmp	r4, r5
 8000df4:	fa02 f201 	lsl.w	r2, r2, r1
 8000df8:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x244>
 8000dfe:	18ed      	adds	r5, r5, r3
 8000e00:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e04:	d243      	bcs.n	8000e8e <__udivmoddi4+0x2c2>
 8000e06:	42ac      	cmp	r4, r5
 8000e08:	d941      	bls.n	8000e8e <__udivmoddi4+0x2c2>
 8000e0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000e0e:	441d      	add	r5, r3
 8000e10:	1b2d      	subs	r5, r5, r4
 8000e12:	fa1f fe8e 	uxth.w	lr, lr
 8000e16:	fbb5 f0fc 	udiv	r0, r5, ip
 8000e1a:	fb0c 5510 	mls	r5, ip, r0, r5
 8000e1e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000e22:	fb00 f808 	mul.w	r8, r0, r8
 8000e26:	45a0      	cmp	r8, r4
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26e>
 8000e2a:	18e4      	adds	r4, r4, r3
 8000e2c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000e30:	d229      	bcs.n	8000e86 <__udivmoddi4+0x2ba>
 8000e32:	45a0      	cmp	r8, r4
 8000e34:	d927      	bls.n	8000e86 <__udivmoddi4+0x2ba>
 8000e36:	3802      	subs	r0, #2
 8000e38:	441c      	add	r4, r3
 8000e3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e3e:	eba4 0408 	sub.w	r4, r4, r8
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454c      	cmp	r4, r9
 8000e48:	46c6      	mov	lr, r8
 8000e4a:	464d      	mov	r5, r9
 8000e4c:	d315      	bcc.n	8000e7a <__udivmoddi4+0x2ae>
 8000e4e:	d012      	beq.n	8000e76 <__udivmoddi4+0x2aa>
 8000e50:	b156      	cbz	r6, 8000e68 <__udivmoddi4+0x29c>
 8000e52:	ebba 030e 	subs.w	r3, sl, lr
 8000e56:	eb64 0405 	sbc.w	r4, r4, r5
 8000e5a:	fa04 f707 	lsl.w	r7, r4, r7
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	431f      	orrs	r7, r3
 8000e62:	40cc      	lsrs	r4, r1
 8000e64:	6037      	str	r7, [r6, #0]
 8000e66:	6074      	str	r4, [r6, #4]
 8000e68:	2100      	movs	r1, #0
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	e6f8      	b.n	8000c64 <__udivmoddi4+0x98>
 8000e72:	4690      	mov	r8, r2
 8000e74:	e6e0      	b.n	8000c38 <__udivmoddi4+0x6c>
 8000e76:	45c2      	cmp	sl, r8
 8000e78:	d2ea      	bcs.n	8000e50 <__udivmoddi4+0x284>
 8000e7a:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e7e:	eb69 0503 	sbc.w	r5, r9, r3
 8000e82:	3801      	subs	r0, #1
 8000e84:	e7e4      	b.n	8000e50 <__udivmoddi4+0x284>
 8000e86:	4628      	mov	r0, r5
 8000e88:	e7d7      	b.n	8000e3a <__udivmoddi4+0x26e>
 8000e8a:	4640      	mov	r0, r8
 8000e8c:	e791      	b.n	8000db2 <__udivmoddi4+0x1e6>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e7be      	b.n	8000e10 <__udivmoddi4+0x244>
 8000e92:	4601      	mov	r1, r0
 8000e94:	e778      	b.n	8000d88 <__udivmoddi4+0x1bc>
 8000e96:	3802      	subs	r0, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	e745      	b.n	8000d28 <__udivmoddi4+0x15c>
 8000e9c:	4608      	mov	r0, r1
 8000e9e:	e708      	b.n	8000cb2 <__udivmoddi4+0xe6>
 8000ea0:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	e72b      	b.n	8000d00 <__udivmoddi4+0x134>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eac:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_InitTick+0x3c>)
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_InitTick+0x40>)
{
 8000eb2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eb4:	7818      	ldrb	r0, [r3, #0]
 8000eb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eba:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ebe:	6810      	ldr	r0, [r2, #0]
 8000ec0:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec4:	f000 f894 	bl	8000ff0 <HAL_SYSTICK_Config>
 8000ec8:	4604      	mov	r4, r0
 8000eca:	b958      	cbnz	r0, 8000ee4 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ecc:	2d0f      	cmp	r5, #15
 8000ece:	d809      	bhi.n	8000ee4 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	4629      	mov	r1, r5
 8000ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed8:	f000 f84a 	bl	8000f70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <HAL_InitTick+0x44>)
 8000ede:	4620      	mov	r0, r4
 8000ee0:	601d      	str	r5, [r3, #0]
 8000ee2:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ee4:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000ee6:	bd38      	pop	{r3, r4, r5, pc}
 8000ee8:	20000418 	.word	0x20000418
 8000eec:	20000400 	.word	0x20000400
 8000ef0:	20000404 	.word	0x20000404

08000ef4 <HAL_Init>:
{
 8000ef4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef6:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <HAL_Init+0x30>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000efe:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f06:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000f0e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f10:	2003      	movs	r0, #3
 8000f12:	f000 f81b 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f16:	2000      	movs	r0, #0
 8000f18:	f7ff ffc8 	bl	8000eac <HAL_InitTick>
  HAL_MspInit();
 8000f1c:	f002 f8b8 	bl	8003090 <HAL_MspInit>
}
 8000f20:	2000      	movs	r0, #0
 8000f22:	bd08      	pop	{r3, pc}
 8000f24:	40023c00 	.word	0x40023c00

08000f28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f28:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <HAL_IncTick+0x10>)
 8000f2a:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_IncTick+0x14>)
 8000f2c:	6811      	ldr	r1, [r2, #0]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	440b      	add	r3, r1
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000a18 	.word	0x20000a18
 8000f3c:	20000400 	.word	0x20000400

08000f40 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f40:	4b01      	ldr	r3, [pc, #4]	; (8000f48 <HAL_GetTick+0x8>)
 8000f42:	6818      	ldr	r0, [r3, #0]
}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	20000a18 	.word	0x20000a18

08000f4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4a07      	ldr	r2, [pc, #28]	; (8000f6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f54:	041b      	lsls	r3, r3, #16
 8000f56:	0c1b      	lsrs	r3, r3, #16
 8000f58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000f5c:	0200      	lsls	r0, r0, #8
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000f66:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000f68:	60d3      	str	r3, [r2, #12]
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f70:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f72:	b530      	push	{r4, r5, lr}
 8000f74:	68dc      	ldr	r4, [r3, #12]
 8000f76:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f7a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f7e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f80:	2b04      	cmp	r3, #4
 8000f82:	bf28      	it	cs
 8000f84:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f88:	f04f 0501 	mov.w	r5, #1
 8000f8c:	fa05 f303 	lsl.w	r3, r5, r3
 8000f90:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f94:	bf8c      	ite	hi
 8000f96:	3c03      	subhi	r4, #3
 8000f98:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f9a:	4019      	ands	r1, r3
 8000f9c:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f9e:	fa05 f404 	lsl.w	r4, r5, r4
 8000fa2:	3c01      	subs	r4, #1
 8000fa4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000fa6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	ea42 0201 	orr.w	r2, r2, r1
 8000fac:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb0:	bfaf      	iteee	ge
 8000fb2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	f000 000f 	andlt.w	r0, r0, #15
 8000fba:	4b06      	ldrlt	r3, [pc, #24]	; (8000fd4 <HAL_NVIC_SetPriority+0x64>)
 8000fbc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbe:	bfa5      	ittet	ge
 8000fc0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fc4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fcc:	bd30      	pop	{r4, r5, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00
 8000fd4:	e000ed14 	.word	0xe000ed14

08000fd8 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fd8:	0942      	lsrs	r2, r0, #5
 8000fda:	2301      	movs	r3, #1
 8000fdc:	f000 001f 	and.w	r0, r0, #31
 8000fe0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fe4:	4b01      	ldr	r3, [pc, #4]	; (8000fec <HAL_NVIC_EnableIRQ+0x14>)
 8000fe6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ff6:	d20a      	bcs.n	800100e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	4a07      	ldr	r2, [pc, #28]	; (8001018 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffc:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	21f0      	movs	r1, #240	; 0xf0
 8001000:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001004:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001006:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001008:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	e000e010 	.word	0xe000e010
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800101c:	4b04      	ldr	r3, [pc, #16]	; (8001030 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800101e:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001020:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001022:	bf0c      	ite	eq
 8001024:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001028:	f022 0204 	bicne.w	r2, r2, #4
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4770      	bx	lr
 8001030:	e000e010 	.word	0xe000e010

08001034 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001034:	4770      	bx	lr

08001036 <HAL_SYSTICK_IRQHandler>:
{
 8001036:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001038:	f7ff fffc 	bl	8001034 <HAL_SYSTICK_Callback>
 800103c:	bd08      	pop	{r3, pc}
	...

08001040 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001040:	6803      	ldr	r3, [r0, #0]
 8001042:	b2da      	uxtb	r2, r3
 8001044:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001048:	f023 0303 	bic.w	r3, r3, #3
 800104c:	2118      	movs	r1, #24
 800104e:	3a10      	subs	r2, #16
 8001050:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001054:	4904      	ldr	r1, [pc, #16]	; (8001068 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8001056:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001058:	bf88      	it	hi
 800105a:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800105c:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800105e:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001060:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8001062:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	08007208 	.word	0x08007208

0800106c <HAL_DMA_Init>:
{
 800106c:	b570      	push	{r4, r5, r6, lr}
 800106e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001070:	f7ff ff66 	bl	8000f40 <HAL_GetTick>
 8001074:	4605      	mov	r5, r0
  if(hdma == NULL)
 8001076:	2c00      	cmp	r4, #0
 8001078:	d071      	beq.n	800115e <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 800107a:	2300      	movs	r3, #0
 800107c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8001080:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8001082:	2302      	movs	r3, #2
 8001084:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8001088:	6813      	ldr	r3, [r2, #0]
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001090:	6821      	ldr	r1, [r4, #0]
 8001092:	680b      	ldr	r3, [r1, #0]
 8001094:	07d8      	lsls	r0, r3, #31
 8001096:	d43c      	bmi.n	8001112 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8001098:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800109a:	4d32      	ldr	r5, [pc, #200]	; (8001164 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109c:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800109e:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80010a0:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010a2:	68a3      	ldr	r3, [r4, #8]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	68e2      	ldr	r2, [r4, #12]
 80010a8:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80010aa:	6922      	ldr	r2, [r4, #16]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	6962      	ldr	r2, [r4, #20]
 80010b0:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80010b2:	69e2      	ldr	r2, [r4, #28]
 80010b4:	4303      	orrs	r3, r0
 80010b6:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 80010b8:	6a22      	ldr	r2, [r4, #32]
 80010ba:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010be:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80010c0:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010c4:	bf01      	itttt	eq
 80010c6:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 80010c8:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 80010ca:	4335      	orreq	r5, r6
 80010cc:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 80010ce:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 80010d0:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010d2:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010d4:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 80010d8:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010dc:	d10b      	bne.n	80010f6 <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 80010de:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010e0:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 80010e2:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010e4:	b13d      	cbz	r5, 80010f6 <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80010e6:	b9f8      	cbnz	r0, 8001128 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 80010e8:	2a01      	cmp	r2, #1
 80010ea:	d02d      	beq.n	8001148 <HAL_DMA_Init+0xdc>
 80010ec:	d301      	bcc.n	80010f2 <HAL_DMA_Init+0x86>
 80010ee:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80010f0:	d101      	bne.n	80010f6 <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80010f2:	01ea      	lsls	r2, r5, #7
 80010f4:	d42b      	bmi.n	800114e <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 80010f6:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010f8:	4620      	mov	r0, r4
 80010fa:	f7ff ffa1 	bl	8001040 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010fe:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8001100:	233f      	movs	r3, #63	; 0x3f
 8001102:	4093      	lsls	r3, r2
 8001104:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001106:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8001108:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800110a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800110c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8001110:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001112:	f7ff ff15 	bl	8000f40 <HAL_GetTick>
 8001116:	1b40      	subs	r0, r0, r5
 8001118:	2805      	cmp	r0, #5
 800111a:	d9b9      	bls.n	8001090 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800111c:	2320      	movs	r3, #32
 800111e:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001120:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8001122:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8001126:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001128:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 800112c:	d113      	bne.n	8001156 <HAL_DMA_Init+0xea>
    switch (tmp)
 800112e:	2a03      	cmp	r2, #3
 8001130:	d8e1      	bhi.n	80010f6 <HAL_DMA_Init+0x8a>
 8001132:	a001      	add	r0, pc, #4	; (adr r0, 8001138 <HAL_DMA_Init+0xcc>)
 8001134:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8001138:	0800114f 	.word	0x0800114f
 800113c:	080010f3 	.word	0x080010f3
 8001140:	0800114f 	.word	0x0800114f
 8001144:	08001149 	.word	0x08001149
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001148:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 800114c:	d1d3      	bne.n	80010f6 <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800114e:	2340      	movs	r3, #64	; 0x40
 8001150:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8001152:	2001      	movs	r0, #1
 8001154:	e7e5      	b.n	8001122 <HAL_DMA_Init+0xb6>
    switch (tmp)
 8001156:	2a02      	cmp	r2, #2
 8001158:	d9f9      	bls.n	800114e <HAL_DMA_Init+0xe2>
 800115a:	2a03      	cmp	r2, #3
 800115c:	e7c8      	b.n	80010f0 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 800115e:	2001      	movs	r0, #1
 8001160:	bd70      	pop	{r4, r5, r6, pc}
 8001162:	bf00      	nop
 8001164:	f010803f 	.word	0xf010803f

08001168 <HAL_DMA_DeInit>:
{
 8001168:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 800116a:	4605      	mov	r5, r0
 800116c:	b1f0      	cbz	r0, 80011ac <HAL_DMA_DeInit+0x44>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800116e:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8001172:	b2e4      	uxtb	r4, r4
 8001174:	2c02      	cmp	r4, #2
 8001176:	d017      	beq.n	80011a8 <HAL_DMA_DeInit+0x40>
  __HAL_DMA_DISABLE(hdma);
 8001178:	6803      	ldr	r3, [r0, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	f022 0201 	bic.w	r2, r2, #1
 8001180:	601a      	str	r2, [r3, #0]
  hdma->Instance->CR   = 0U;
 8001182:	2400      	movs	r4, #0
  hdma->Instance->FCR  = 0x00000021U;
 8001184:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8001186:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8001188:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 800118a:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 800118c:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 800118e:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8001190:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001192:	f7ff ff55 	bl	8001040 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001196:	6dea      	ldr	r2, [r5, #92]	; 0x5c
 8001198:	233f      	movs	r3, #63	; 0x3f
 800119a:	4093      	lsls	r3, r2
 800119c:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800119e:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 80011a0:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 80011a4:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 80011a8:	4620      	mov	r0, r4
}
 80011aa:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80011ac:	2001      	movs	r0, #1
 80011ae:	bd38      	pop	{r3, r4, r5, pc}

080011b0 <HAL_DMA_Start>:
{
 80011b0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hdma);
 80011b2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80011b6:	2c01      	cmp	r4, #1
 80011b8:	d022      	beq.n	8001200 <HAL_DMA_Start+0x50>
 80011ba:	2401      	movs	r4, #1
 80011bc:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80011c0:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 80011c4:	2c01      	cmp	r4, #1
 80011c6:	f04f 0500 	mov.w	r5, #0
 80011ca:	f04f 0402 	mov.w	r4, #2
 80011ce:	d115      	bne.n	80011fc <HAL_DMA_Start+0x4c>
    hdma->State = HAL_DMA_STATE_BUSY;
 80011d0:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011d4:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011d6:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80011d8:	6825      	ldr	r5, [r4, #0]
 80011da:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80011de:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80011e0:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80011e2:	6883      	ldr	r3, [r0, #8]
 80011e4:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80011e6:	bf0b      	itete	eq
 80011e8:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80011ea:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 80011ec:	60e1      	streq	r1, [r4, #12]
    hdma->Instance->M0AR = DstAddress;
 80011ee:	60e2      	strne	r2, [r4, #12]
    __HAL_DMA_ENABLE(hdma);
 80011f0:	6823      	ldr	r3, [r4, #0]
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80011f8:	2000      	movs	r0, #0
 80011fa:	bd30      	pop	{r4, r5, pc}
    __HAL_UNLOCK(hdma);
 80011fc:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8001200:	2002      	movs	r0, #2
}
 8001202:	bd30      	pop	{r4, r5, pc}

08001204 <HAL_DMA_Start_IT>:
{
 8001204:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 8001206:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 800120a:	2c01      	cmp	r4, #1
 800120c:	d036      	beq.n	800127c <HAL_DMA_Start_IT+0x78>
 800120e:	2401      	movs	r4, #1
 8001210:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8001214:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001218:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 800121a:	2c01      	cmp	r4, #1
 800121c:	f04f 0500 	mov.w	r5, #0
 8001220:	f04f 0402 	mov.w	r4, #2
 8001224:	d128      	bne.n	8001278 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 8001226:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800122a:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800122c:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800122e:	6825      	ldr	r5, [r4, #0]
 8001230:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 8001234:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8001236:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001238:	6883      	ldr	r3, [r0, #8]
 800123a:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 800123c:	bf0e      	itee	eq
 800123e:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8001240:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8001242:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001244:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8001246:	bf08      	it	eq
 8001248:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800124a:	233f      	movs	r3, #63	; 0x3f
 800124c:	4093      	lsls	r3, r2
 800124e:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	f043 0316 	orr.w	r3, r3, #22
 8001256:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001258:	6963      	ldr	r3, [r4, #20]
 800125a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800125e:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8001260:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001262:	b11b      	cbz	r3, 800126c <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 8001264:	6823      	ldr	r3, [r4, #0]
 8001266:	f043 0308 	orr.w	r3, r3, #8
 800126a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 800126c:	6823      	ldr	r3, [r4, #0]
 800126e:	f043 0301 	orr.w	r3, r3, #1
 8001272:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001274:	2000      	movs	r0, #0
 8001276:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8001278:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 800127c:	2002      	movs	r0, #2
}
 800127e:	bd70      	pop	{r4, r5, r6, pc}

08001280 <HAL_DMA_IRQHandler>:
{
 8001280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 8001282:	2300      	movs	r3, #0
 8001284:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001286:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001288:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 800128a:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800128c:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800128e:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001290:	2208      	movs	r2, #8
 8001292:	409a      	lsls	r2, r3
 8001294:	4216      	tst	r6, r2
{
 8001296:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001298:	d00c      	beq.n	80012b4 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800129a:	6801      	ldr	r1, [r0, #0]
 800129c:	6808      	ldr	r0, [r1, #0]
 800129e:	0740      	lsls	r0, r0, #29
 80012a0:	d508      	bpl.n	80012b4 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80012a2:	6808      	ldr	r0, [r1, #0]
 80012a4:	f020 0004 	bic.w	r0, r0, #4
 80012a8:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80012aa:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80012ac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80012ae:	f042 0201 	orr.w	r2, r2, #1
 80012b2:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80012b4:	2201      	movs	r2, #1
 80012b6:	409a      	lsls	r2, r3
 80012b8:	4216      	tst	r6, r2
 80012ba:	d008      	beq.n	80012ce <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80012bc:	6821      	ldr	r1, [r4, #0]
 80012be:	6949      	ldr	r1, [r1, #20]
 80012c0:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80012c2:	bf41      	itttt	mi
 80012c4:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012c6:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80012c8:	f042 0202 	orrmi.w	r2, r2, #2
 80012cc:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ce:	2204      	movs	r2, #4
 80012d0:	409a      	lsls	r2, r3
 80012d2:	4216      	tst	r6, r2
 80012d4:	d008      	beq.n	80012e8 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012d6:	6821      	ldr	r1, [r4, #0]
 80012d8:	6809      	ldr	r1, [r1, #0]
 80012da:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012dc:	bf41      	itttt	mi
 80012de:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012e0:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80012e2:	f042 0204 	orrmi.w	r2, r2, #4
 80012e6:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012e8:	2210      	movs	r2, #16
 80012ea:	409a      	lsls	r2, r3
 80012ec:	4216      	tst	r6, r2
 80012ee:	d010      	beq.n	8001312 <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012f0:	6823      	ldr	r3, [r4, #0]
 80012f2:	6819      	ldr	r1, [r3, #0]
 80012f4:	0709      	lsls	r1, r1, #28
 80012f6:	d50c      	bpl.n	8001312 <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012f8:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	0350      	lsls	r0, r2, #13
 80012fe:	d535      	bpl.n	800136c <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	0319      	lsls	r1, r3, #12
 8001304:	d401      	bmi.n	800130a <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 8001306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001308:	e000      	b.n	800130c <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 800130a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 800130c:	b10b      	cbz	r3, 8001312 <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 800130e:	4620      	mov	r0, r4
 8001310:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001312:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8001314:	2220      	movs	r2, #32
 8001316:	408a      	lsls	r2, r1
 8001318:	4216      	tst	r6, r2
 800131a:	d038      	beq.n	800138e <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800131c:	6823      	ldr	r3, [r4, #0]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	06c6      	lsls	r6, r0, #27
 8001322:	d534      	bpl.n	800138e <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001324:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001326:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 800132a:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800132c:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800132e:	d125      	bne.n	800137c <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001330:	f022 0216 	bic.w	r2, r2, #22
 8001334:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001336:	695a      	ldr	r2, [r3, #20]
 8001338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800133c:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800133e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001340:	b90a      	cbnz	r2, 8001346 <HAL_DMA_IRQHandler+0xc6>
 8001342:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001344:	b11a      	cbz	r2, 800134e <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	f022 0208 	bic.w	r2, r2, #8
 800134c:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134e:	233f      	movs	r3, #63	; 0x3f
 8001350:	408b      	lsls	r3, r1
 8001352:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8001354:	2300      	movs	r3, #0
 8001356:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 800135a:	2301      	movs	r3, #1
 800135c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8001360:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 8001362:	b10b      	cbz	r3, 8001368 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8001364:	4620      	mov	r0, r4
 8001366:	4798      	blx	r3
}
 8001368:	b003      	add	sp, #12
 800136a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001370:	bf5e      	ittt	pl
 8001372:	681a      	ldrpl	r2, [r3, #0]
 8001374:	f022 0208 	bicpl.w	r2, r2, #8
 8001378:	601a      	strpl	r2, [r3, #0]
 800137a:	e7c4      	b.n	8001306 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800137c:	0350      	lsls	r0, r2, #13
 800137e:	d528      	bpl.n	80013d2 <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0319      	lsls	r1, r3, #12
 8001384:	d432      	bmi.n	80013ec <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8001386:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8001388:	b10b      	cbz	r3, 800138e <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 800138a:	4620      	mov	r0, r4
 800138c:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800138e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0e9      	beq.n	8001368 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001394:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001396:	07da      	lsls	r2, r3, #31
 8001398:	d519      	bpl.n	80013ce <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 800139a:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 800139c:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800139e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 80013a2:	6813      	ldr	r3, [r2, #0]
 80013a4:	f023 0301 	bic.w	r3, r3, #1
 80013a8:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013aa:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80013ae:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	3301      	adds	r3, #1
 80013b6:	429f      	cmp	r7, r3
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	d302      	bcc.n	80013c2 <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013bc:	6813      	ldr	r3, [r2, #0]
 80013be:	07db      	lsls	r3, r3, #31
 80013c0:	d4f7      	bmi.n	80013b2 <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 80013c2:	2300      	movs	r3, #0
 80013c4:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80013c8:	2301      	movs	r3, #1
 80013ca:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80013ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80013d0:	e7c7      	b.n	8001362 <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80013d8:	d108      	bne.n	80013ec <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80013da:	6819      	ldr	r1, [r3, #0]
 80013dc:	f021 0110 	bic.w	r1, r1, #16
 80013e0:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80013e2:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80013e4:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80013e8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80013ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80013ee:	e7cb      	b.n	8001388 <HAL_DMA_IRQHandler+0x108>
 80013f0:	20000418 	.word	0x20000418

080013f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013f8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fa:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 80015ac <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001400:	4a68      	ldr	r2, [pc, #416]	; (80015a4 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001402:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 80015b0 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001406:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001408:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800140a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800140e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8001410:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001414:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8001418:	45b6      	cmp	lr, r6
 800141a:	f040 80ae 	bne.w	800157a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800141e:	684c      	ldr	r4, [r1, #4]
 8001420:	f024 0710 	bic.w	r7, r4, #16
 8001424:	2f02      	cmp	r7, #2
 8001426:	d116      	bne.n	8001456 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8001428:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800142c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001430:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8001434:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001438:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800143c:	f04f 0c0f 	mov.w	ip, #15
 8001440:	fa0c fc0b 	lsl.w	ip, ip, fp
 8001444:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001448:	690d      	ldr	r5, [r1, #16]
 800144a:	fa05 f50b 	lsl.w	r5, r5, fp
 800144e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8001452:	f8ca 5020 	str.w	r5, [sl, #32]
 8001456:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800145a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 800145c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001460:	fa05 f50a 	lsl.w	r5, r5, sl
 8001464:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001466:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800146a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800146e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001472:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001474:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001478:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 800147a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800147e:	d811      	bhi.n	80014a4 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8001480:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001482:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001486:	68cf      	ldr	r7, [r1, #12]
 8001488:	fa07 fc0a 	lsl.w	ip, r7, sl
 800148c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8001490:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001492:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001494:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001498:	f3c4 1700 	ubfx	r7, r4, #4, #1
 800149c:	409f      	lsls	r7, r3
 800149e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80014a2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80014a4:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80014a6:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a8:	688f      	ldr	r7, [r1, #8]
 80014aa:	fa07 f70a 	lsl.w	r7, r7, sl
 80014ae:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 80014b0:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014b2:	00e5      	lsls	r5, r4, #3
 80014b4:	d561      	bpl.n	800157a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	f04f 0b00 	mov.w	fp, #0
 80014ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80014be:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014c2:	4d39      	ldr	r5, [pc, #228]	; (80015a8 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 80014c8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 80014cc:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 80014d0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 80014d4:	9703      	str	r7, [sp, #12]
 80014d6:	9f03      	ldr	r7, [sp, #12]
 80014d8:	f023 0703 	bic.w	r7, r3, #3
 80014dc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 80014e0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014e4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80014e8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014ec:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80014f0:	f04f 0e0f 	mov.w	lr, #15
 80014f4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014f8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014fa:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014fe:	d043      	beq.n	8001588 <HAL_GPIO_Init+0x194>
 8001500:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001504:	42a8      	cmp	r0, r5
 8001506:	d041      	beq.n	800158c <HAL_GPIO_Init+0x198>
 8001508:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800150c:	42a8      	cmp	r0, r5
 800150e:	d03f      	beq.n	8001590 <HAL_GPIO_Init+0x19c>
 8001510:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001514:	42a8      	cmp	r0, r5
 8001516:	d03d      	beq.n	8001594 <HAL_GPIO_Init+0x1a0>
 8001518:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800151c:	42a8      	cmp	r0, r5
 800151e:	d03b      	beq.n	8001598 <HAL_GPIO_Init+0x1a4>
 8001520:	4548      	cmp	r0, r9
 8001522:	d03b      	beq.n	800159c <HAL_GPIO_Init+0x1a8>
 8001524:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001528:	42a8      	cmp	r0, r5
 800152a:	d039      	beq.n	80015a0 <HAL_GPIO_Init+0x1ac>
 800152c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001530:	42a8      	cmp	r0, r5
 8001532:	bf14      	ite	ne
 8001534:	2508      	movne	r5, #8
 8001536:	2507      	moveq	r5, #7
 8001538:	fa05 f50c 	lsl.w	r5, r5, ip
 800153c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001540:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8001542:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001544:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001546:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 800154a:	bf0c      	ite	eq
 800154c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800154e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001550:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8001552:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001554:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8001558:	bf0c      	ite	eq
 800155a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800155c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 800155e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001560:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001562:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8001566:	bf0c      	ite	eq
 8001568:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 800156a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800156c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 800156e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001570:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8001572:	bf54      	ite	pl
 8001574:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8001576:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8001578:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	3301      	adds	r3, #1
 800157c:	2b10      	cmp	r3, #16
 800157e:	f47f af44 	bne.w	800140a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8001582:	b005      	add	sp, #20
 8001584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001588:	465d      	mov	r5, fp
 800158a:	e7d5      	b.n	8001538 <HAL_GPIO_Init+0x144>
 800158c:	2501      	movs	r5, #1
 800158e:	e7d3      	b.n	8001538 <HAL_GPIO_Init+0x144>
 8001590:	2502      	movs	r5, #2
 8001592:	e7d1      	b.n	8001538 <HAL_GPIO_Init+0x144>
 8001594:	2503      	movs	r5, #3
 8001596:	e7cf      	b.n	8001538 <HAL_GPIO_Init+0x144>
 8001598:	2504      	movs	r5, #4
 800159a:	e7cd      	b.n	8001538 <HAL_GPIO_Init+0x144>
 800159c:	2505      	movs	r5, #5
 800159e:	e7cb      	b.n	8001538 <HAL_GPIO_Init+0x144>
 80015a0:	2506      	movs	r5, #6
 80015a2:	e7c9      	b.n	8001538 <HAL_GPIO_Init+0x144>
 80015a4:	40013c00 	.word	0x40013c00
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40023800 	.word	0x40023800
 80015b0:	40021400 	.word	0x40021400

080015b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015b4:	b10a      	cbz	r2, 80015ba <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015b6:	6181      	str	r1, [r0, #24]
 80015b8:	4770      	bx	lr
 80015ba:	0409      	lsls	r1, r1, #16
 80015bc:	e7fb      	b.n	80015b6 <HAL_GPIO_WritePin+0x2>
	...

080015c0 <HAL_I2S_Receive_DMA>:
  * @note The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *       between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80015c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015c2:	4613      	mov	r3, r2
 80015c4:	4604      	mov	r4, r0
  uint32_t *tmp = NULL;
  uint32_t tmp1 = 0U;

  if((pData == NULL) || (Size == 0U))
 80015c6:	460a      	mov	r2, r1
 80015c8:	2900      	cmp	r1, #0
 80015ca:	d04f      	beq.n	800166c <HAL_I2S_Receive_DMA+0xac>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d04d      	beq.n	800166c <HAL_I2S_Receive_DMA+0xac>
  {
    return  HAL_ERROR;
  }

  if(hi2s->State == HAL_I2S_STATE_READY)
 80015d0:	f890 1041 	ldrb.w	r1, [r0, #65]	; 0x41
 80015d4:	2901      	cmp	r1, #1
 80015d6:	d002      	beq.n	80015de <HAL_I2S_Receive_DMA+0x1e>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80015d8:	2002      	movs	r0, #2
  }
}
 80015da:	b003      	add	sp, #12
 80015dc:	bd30      	pop	{r4, r5, pc}
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015de:	6805      	ldr	r5, [r0, #0]
    hi2s->pRxBuffPtr = pData;
 80015e0:	62c2      	str	r2, [r0, #44]	; 0x2c
    tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80015e2:	69e8      	ldr	r0, [r5, #28]
 80015e4:	f000 0007 	and.w	r0, r0, #7
    if((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 80015e8:	2803      	cmp	r0, #3
 80015ea:	d001      	beq.n	80015f0 <HAL_I2S_Receive_DMA+0x30>
 80015ec:	2805      	cmp	r0, #5
 80015ee:	d101      	bne.n	80015f4 <HAL_I2S_Receive_DMA+0x34>
      hi2s->RxXferSize  = (Size << 1U);
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	b29b      	uxth	r3, r3
      hi2s->RxXferSize  = Size;
 80015f4:	8623      	strh	r3, [r4, #48]	; 0x30
      hi2s->RxXferCount = Size;
 80015f6:	8663      	strh	r3, [r4, #50]	; 0x32
    __HAL_LOCK(hi2s);
 80015f8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d0eb      	beq.n	80015d8 <HAL_I2S_Receive_DMA+0x18>
 8001600:	2301      	movs	r3, #1
 8001602:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001606:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    hi2s->State     = HAL_I2S_STATE_BUSY_RX;
 8001608:	2304      	movs	r3, #4
 800160a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800160e:	2100      	movs	r1, #0
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001610:	4b17      	ldr	r3, [pc, #92]	; (8001670 <HAL_I2S_Receive_DMA+0xb0>)
    hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001612:	6461      	str	r1, [r4, #68]	; 0x44
    hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8001614:	6403      	str	r3, [r0, #64]	; 0x40
    hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8001616:	4b17      	ldr	r3, [pc, #92]	; (8001674 <HAL_I2S_Receive_DMA+0xb4>)
 8001618:	63c3      	str	r3, [r0, #60]	; 0x3c
    hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800161a:	4b17      	ldr	r3, [pc, #92]	; (8001678 <HAL_I2S_Receive_DMA+0xb8>)
 800161c:	64c3      	str	r3, [r0, #76]	; 0x4c
    if((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800161e:	69eb      	ldr	r3, [r5, #28]
 8001620:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001624:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001628:	d105      	bne.n	8001636 <HAL_I2S_Receive_DMA+0x76>
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800162a:	9101      	str	r1, [sp, #4]
 800162c:	68eb      	ldr	r3, [r5, #12]
 800162e:	9301      	str	r3, [sp, #4]
 8001630:	68ab      	ldr	r3, [r5, #8]
 8001632:	9301      	str	r3, [sp, #4]
 8001634:	9b01      	ldr	r3, [sp, #4]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t*)tmp, hi2s->RxXferSize);
 8001636:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8001638:	f105 010c 	add.w	r1, r5, #12
 800163c:	b29b      	uxth	r3, r3
 800163e:	f7ff fde1 	bl	8001204 <HAL_DMA_Start_IT>
    if((hi2s->Instance->I2SCFGR &SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8001642:	6823      	ldr	r3, [r4, #0]
 8001644:	69da      	ldr	r2, [r3, #28]
 8001646:	0551      	lsls	r1, r2, #21
      __HAL_I2S_ENABLE(hi2s);
 8001648:	bf5e      	ittt	pl
 800164a:	69da      	ldrpl	r2, [r3, #28]
 800164c:	f442 6280 	orrpl.w	r2, r2, #1024	; 0x400
 8001650:	61da      	strpl	r2, [r3, #28]
    if((hi2s->Instance->CR2 &SPI_CR2_RXDMAEN) != SPI_CR2_RXDMAEN)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	07d2      	lsls	r2, r2, #31
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8001656:	bf58      	it	pl
 8001658:	685a      	ldrpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 800165a:	f04f 0000 	mov.w	r0, #0
      SET_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 800165e:	bf5c      	itt	pl
 8001660:	f042 0201 	orrpl.w	r2, r2, #1
 8001664:	605a      	strpl	r2, [r3, #4]
    __HAL_UNLOCK(hi2s);
 8001666:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    return HAL_OK;
 800166a:	e7b6      	b.n	80015da <HAL_I2S_Receive_DMA+0x1a>
    return  HAL_ERROR;
 800166c:	2001      	movs	r0, #1
 800166e:	e7b4      	b.n	80015da <HAL_I2S_Receive_DMA+0x1a>
 8001670:	0800167d 	.word	0x0800167d
 8001674:	08001687 	.word	0x08001687
 8001678:	080018db 	.word	0x080018db

0800167c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800167c:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;

  HAL_I2S_RxHalfCpltCallback(hi2s);
 800167e:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8001680:	f001 fcee 	bl	8003060 <HAL_I2S_RxHalfCpltCallback>
 8001684:	bd08      	pop	{r3, pc}

08001686 <I2S_DMARxCplt>:
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	6812      	ldr	r2, [r2, #0]
 800168a:	f412 7280 	ands.w	r2, r2, #256	; 0x100
{
 800168e:	b508      	push	{r3, lr}
  I2S_HandleTypeDef* hi2s = ( I2S_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001690:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8001692:	d108      	bne.n	80016a6 <I2S_DMARxCplt+0x20>
    CLEAR_BIT(hi2s->Instance->CR2,SPI_CR2_RXDMAEN);
 8001694:	6818      	ldr	r0, [r3, #0]
 8001696:	6841      	ldr	r1, [r0, #4]
 8001698:	f021 0101 	bic.w	r1, r1, #1
 800169c:	6041      	str	r1, [r0, #4]
    hi2s->RxXferCount = 0U;
 800169e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->State       = HAL_I2S_STATE_READY;
 80016a0:	2201      	movs	r2, #1
 80016a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  HAL_I2S_RxCpltCallback(hi2s);
 80016a6:	4618      	mov	r0, r3
 80016a8:	f001 fcd6 	bl	8003058 <HAL_I2S_RxCpltCallback>
 80016ac:	bd08      	pop	{r3, pc}
	...

080016b0 <HAL_I2S_Init>:
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
  if(hi2s == NULL)
 80016b2:	4604      	mov	r4, r0
 80016b4:	2800      	cmp	r0, #0
 80016b6:	d03f      	beq.n	8001738 <HAL_I2S_Init+0x88>
  hi2s->State = HAL_I2S_STATE_BUSY;
 80016b8:	2502      	movs	r5, #2
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_I2S_Init+0x110>)
  hi2s->State = HAL_I2S_STATE_BUSY;
 80016bc:	f880 5041 	strb.w	r5, [r0, #65]	; 0x41
  hi2s->IrqHandlerISR = I2S_IRQHandler;
 80016c0:	6343      	str	r3, [r0, #52]	; 0x34
  HAL_I2S_MspInit(hi2s);
 80016c2:	f001 fd15 	bl	80030f0 <HAL_I2S_MspInit>
  CLEAR_BIT(hi2s->Instance->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	69d3      	ldr	r3, [r2, #28]
 80016ca:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80016ce:	f023 030f 	bic.w	r3, r3, #15
 80016d2:	61d3      	str	r3, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016d4:	6963      	ldr	r3, [r4, #20]
  hi2s->Instance->I2SPR = 0x0002U;
 80016d6:	6215      	str	r5, [r2, #32]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016d8:	2b02      	cmp	r3, #2
  tmpreg = hi2s->Instance->I2SCFGR;
 80016da:	69d5      	ldr	r5, [r2, #28]
  if(hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80016dc:	d035      	beq.n	800174a <HAL_I2S_Init+0x9a>
    if(hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80016de:	68e3      	ldr	r3, [r4, #12]
      packetlength = 16U;
 80016e0:	2b00      	cmp	r3, #0
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80016e2:	68a3      	ldr	r3, [r4, #8]
      packetlength = 16U;
 80016e4:	bf14      	ite	ne
 80016e6:	2620      	movne	r6, #32
 80016e8:	2610      	moveq	r6, #16
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80016ea:	2001      	movs	r0, #1
    if(hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80016ec:	2b20      	cmp	r3, #32
      packetlength = packetlength * 2U;
 80016ee:	bf98      	it	ls
 80016f0:	0076      	lslls	r6, r6, #1
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80016f2:	f000 fd37 	bl	8002164 <HAL_RCCEx_GetPeriphCLKFreq>
    if(hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80016f6:	6923      	ldr	r3, [r4, #16]
 80016f8:	6961      	ldr	r1, [r4, #20]
 80016fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016fe:	d11f      	bne.n	8001740 <HAL_I2S_Init+0x90>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001700:	68e3      	ldr	r3, [r4, #12]
 8001702:	220a      	movs	r2, #10
 8001704:	b1d3      	cbz	r3, 800173c <HAL_I2S_Init+0x8c>
        tmp = (uint32_t)(((((i2sclk / (packetlength*4)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001706:	00b3      	lsls	r3, r6, #2
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 8001708:	fbb0 f3f3 	udiv	r3, r0, r3
 800170c:	4353      	muls	r3, r2
    tmp = tmp / 10U;
 800170e:	220a      	movs	r2, #10
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001710:	fbb3 f3f1 	udiv	r3, r3, r1
 8001714:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 8001716:	fbb3 f3f2 	udiv	r3, r3, r2
    i2sdiv = (uint16_t)((tmp - i2sodd) / 2U);
 800171a:	f003 0201 	and.w	r2, r3, #1
    i2sodd = (uint32_t) (i2sodd << 8U);
 800171e:	0212      	lsls	r2, r2, #8
 8001720:	f3c3 034f 	ubfx	r3, r3, #1, #16
  if((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001724:	1e99      	subs	r1, r3, #2
 8001726:	29fd      	cmp	r1, #253	; 0xfd
 8001728:	d911      	bls.n	800174e <HAL_I2S_Init+0x9e>
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800172a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800172c:	f043 0310 	orr.w	r3, r3, #16
 8001730:	6463      	str	r3, [r4, #68]	; 0x44
    HAL_I2S_ErrorCallback(hi2s);
 8001732:	4620      	mov	r0, r4
 8001734:	f001 fc98 	bl	8003068 <HAL_I2S_ErrorCallback>
    return HAL_ERROR;
 8001738:	2001      	movs	r0, #1
}
 800173a:	bd70      	pop	{r4, r5, r6, pc}
        tmp = (uint32_t)(((((i2sclk / (packetlength*8)) * 10) / hi2s->Init.AudioFreq)) + 5);
 800173c:	00f3      	lsls	r3, r6, #3
 800173e:	e7e3      	b.n	8001708 <HAL_I2S_Init+0x58>
      tmp = (uint32_t)(((((i2sclk / packetlength) *10 ) / hi2s->Init.AudioFreq)) + 5);
 8001740:	230a      	movs	r3, #10
 8001742:	fbb0 f0f6 	udiv	r0, r0, r6
 8001746:	4343      	muls	r3, r0
 8001748:	e7e1      	b.n	800170e <HAL_I2S_Init+0x5e>
  uint32_t tmpreg = 0U, i2sdiv = 2U, i2sodd = 0U, packetlength = 16U;
 800174a:	2200      	movs	r2, #0
 800174c:	e7ea      	b.n	8001724 <HAL_I2S_Init+0x74>
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800174e:	4313      	orrs	r3, r2
 8001750:	6922      	ldr	r2, [r4, #16]
 8001752:	6820      	ldr	r0, [r4, #0]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001754:	6866      	ldr	r6, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001756:	4313      	orrs	r3, r2
 8001758:	6203      	str	r3, [r0, #32]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800175a:	68e2      	ldr	r2, [r4, #12]
 800175c:	68a3      	ldr	r3, [r4, #8]
 800175e:	4313      	orrs	r3, r2
                       (uint16_t)hi2s->Init.CPOL))));
 8001760:	69a2      	ldr	r2, [r4, #24]
                       (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8001762:	4313      	orrs	r3, r2
 8001764:	b29b      	uxth	r3, r3
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 8001766:	f446 6100 	orr.w	r1, r6, #2048	; 0x800
 800176a:	4319      	orrs	r1, r3
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800176c:	6a22      	ldr	r2, [r4, #32]
  tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(hi2s->Init.Mode | \
 800176e:	b289      	uxth	r1, r1
 8001770:	430d      	orrs	r5, r1
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001772:	2a01      	cmp	r2, #1
  WRITE_REG(hi2s->Instance->I2SCFGR, tmpreg);
 8001774:	61c5      	str	r5, [r0, #28]
  if(hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001776:	d11c      	bne.n	80017b2 <HAL_I2S_Init+0x102>
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001778:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <HAL_I2S_Init+0x114>)
 800177a:	6362      	str	r2, [r4, #52]	; 0x34
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800177c:	4912      	ldr	r1, [pc, #72]	; (80017c8 <HAL_I2S_Init+0x118>)
 800177e:	4a13      	ldr	r2, [pc, #76]	; (80017cc <HAL_I2S_Init+0x11c>)
 8001780:	4288      	cmp	r0, r1
 8001782:	bf18      	it	ne
 8001784:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      tmp = I2S_MODE_SLAVE_TX;
 8001788:	f436 7000 	bics.w	r0, r6, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR,(SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800178c:	69d1      	ldr	r1, [r2, #28]
 800178e:	f421 617b 	bic.w	r1, r1, #4016	; 0xfb0
 8001792:	f021 010f 	bic.w	r1, r1, #15
 8001796:	61d1      	str	r1, [r2, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001798:	f04f 0102 	mov.w	r1, #2
 800179c:	6211      	str	r1, [r2, #32]
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800179e:	69d1      	ldr	r1, [r2, #28]
      tmp = I2S_MODE_SLAVE_TX;
 80017a0:	bf0c      	ite	eq
 80017a2:	f44f 7080 	moveq.w	r0, #256	; 0x100
 80017a6:	2000      	movne	r0, #0
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80017a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80017ac:	4303      	orrs	r3, r0
 80017ae:	430b      	orrs	r3, r1
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR,tmpreg);
 80017b0:	61d3      	str	r3, [r2, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017b2:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80017b4:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80017b6:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80017b8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  return HAL_OK;
 80017bc:	bd70      	pop	{r4, r5, r6, pc}
 80017be:	bf00      	nop
 80017c0:	080017d1 	.word	0x080017d1
 80017c4:	0800190d 	.word	0x0800190d
 80017c8:	40003800 	.word	0x40003800
 80017cc:	40003400 	.word	0x40003400

080017d0 <I2S_IRQHandler>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80017d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80017d2:	6803      	ldr	r3, [r0, #0]
 80017d4:	689a      	ldr	r2, [r3, #8]
 80017d6:	9201      	str	r2, [sp, #4]

  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80017d8:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 80017dc:	2a04      	cmp	r2, #4
{
 80017de:	4604      	mov	r4, r0
  if(hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80017e0:	d13a      	bne.n	8001858 <I2S_IRQHandler+0x88>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80017e2:	9a01      	ldr	r2, [sp, #4]
 80017e4:	07d1      	lsls	r1, r2, #31
 80017e6:	d519      	bpl.n	800181c <I2S_IRQHandler+0x4c>
 80017e8:	685a      	ldr	r2, [r3, #4]
 80017ea:	0652      	lsls	r2, r2, #25
 80017ec:	d516      	bpl.n	800181c <I2S_IRQHandler+0x4c>
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80017ee:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 80017f0:	1c91      	adds	r1, r2, #2
 80017f2:	62c1      	str	r1, [r0, #44]	; 0x2c
 80017f4:	68d9      	ldr	r1, [r3, #12]
 80017f6:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80017f8:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 80017fa:	3a01      	subs	r2, #1
 80017fc:	b292      	uxth	r2, r2
 80017fe:	8642      	strh	r2, [r0, #50]	; 0x32
  if(hi2s->RxXferCount == 0U)
 8001800:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8001802:	b292      	uxth	r2, r2
 8001804:	b952      	cbnz	r2, 800181c <I2S_IRQHandler+0x4c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001806:	685a      	ldr	r2, [r3, #4]
 8001808:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800180c:	0412      	lsls	r2, r2, #16
 800180e:	0c12      	lsrs	r2, r2, #16
 8001810:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001812:	2301      	movs	r3, #1
 8001814:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8001818:	f001 fc1e 	bl	8003058 <HAL_I2S_RxCpltCallback>
    {
      I2S_Receive_IT(hi2s);
    }

    /* I2S Overrun error interrupt occured -------------------------------------*/
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800181c:	9b01      	ldr	r3, [sp, #4]
 800181e:	0659      	lsls	r1, r3, #25
 8001820:	d51a      	bpl.n	8001858 <I2S_IRQHandler+0x88>
 8001822:	6823      	ldr	r3, [r4, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	0692      	lsls	r2, r2, #26
 8001828:	d516      	bpl.n	8001858 <I2S_IRQHandler+0x88>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001830:	0412      	lsls	r2, r2, #16
 8001832:	0c12      	lsrs	r2, r2, #16
 8001834:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8001836:	2200      	movs	r2, #0
 8001838:	9202      	str	r2, [sp, #8]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	9202      	str	r2, [sp, #8]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	9302      	str	r3, [sp, #8]
 8001842:	9b02      	ldr	r3, [sp, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8001844:	2301      	movs	r3, #1
 8001846:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 800184a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800184c:	f043 0302 	orr.w	r3, r3, #2
 8001850:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001852:	4620      	mov	r0, r4
 8001854:	f001 fc08 	bl	8003068 <HAL_I2S_ErrorCallback>
      }
    }

    if(hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8001858:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800185c:	2b03      	cmp	r3, #3
 800185e:	d13a      	bne.n	80018d6 <I2S_IRQHandler+0x106>
    {
      /* I2S in mode Transmitter -----------------------------------------------*/
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001860:	9b01      	ldr	r3, [sp, #4]
 8001862:	079b      	lsls	r3, r3, #30
 8001864:	d51b      	bpl.n	800189e <I2S_IRQHandler+0xce>
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	6853      	ldr	r3, [r2, #4]
 800186a:	0618      	lsls	r0, r3, #24
 800186c:	d517      	bpl.n	800189e <I2S_IRQHandler+0xce>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800186e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001870:	1c99      	adds	r1, r3, #2
 8001872:	881b      	ldrh	r3, [r3, #0]
 8001874:	6261      	str	r1, [r4, #36]	; 0x24
 8001876:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8001878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800187a:	3b01      	subs	r3, #1
 800187c:	b29b      	uxth	r3, r3
 800187e:	8563      	strh	r3, [r4, #42]	; 0x2a
  if(hi2s->TxXferCount == 0U)
 8001880:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001882:	b29b      	uxth	r3, r3
 8001884:	b95b      	cbnz	r3, 800189e <I2S_IRQHandler+0xce>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001886:	6853      	ldr	r3, [r2, #4]
 8001888:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800188c:	041b      	lsls	r3, r3, #16
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	6053      	str	r3, [r2, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8001892:	2301      	movs	r3, #1
 8001894:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8001898:	4620      	mov	r0, r4
 800189a:	f001 fa9d 	bl	8002dd8 <HAL_I2S_TxCpltCallback>
      {
        I2S_Transmit_IT(hi2s);
      }

      /* I2S Underrun error interrupt occurred --------------------------------*/
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800189e:	9b01      	ldr	r3, [sp, #4]
 80018a0:	0719      	lsls	r1, r3, #28
 80018a2:	d518      	bpl.n	80018d6 <I2S_IRQHandler+0x106>
 80018a4:	6823      	ldr	r3, [r4, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	0692      	lsls	r2, r2, #26
 80018aa:	d514      	bpl.n	80018d6 <I2S_IRQHandler+0x106>
      {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80018ac:	685a      	ldr	r2, [r3, #4]
 80018ae:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80018b2:	0412      	lsls	r2, r2, #16
 80018b4:	0c12      	lsrs	r2, r2, #16
 80018b6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80018b8:	2200      	movs	r2, #0
 80018ba:	9203      	str	r2, [sp, #12]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	9303      	str	r3, [sp, #12]
 80018c0:	9b03      	ldr	r3, [sp, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80018c8:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80018ca:	f043 0304 	orr.w	r3, r3, #4
 80018ce:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80018d0:	4620      	mov	r0, r4
 80018d2:	f001 fbc9 	bl	8003068 <HAL_I2S_ErrorCallback>
    }
  }
}
 80018d6:	b004      	add	sp, #16
 80018d8:	bd10      	pop	{r4, pc}

080018da <I2S_DMAError>:
  I2S_HandleTypeDef* hi2s = (I2S_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 80018da:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80018dc:	6802      	ldr	r2, [r0, #0]
{
 80018de:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2,(SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80018e0:	6853      	ldr	r3, [r2, #4]
 80018e2:	f023 0303 	bic.w	r3, r3, #3
 80018e6:	6053      	str	r3, [r2, #4]
  hi2s->TxXferCount = 0U;
 80018e8:	2300      	movs	r3, #0
 80018ea:	8543      	strh	r3, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80018ec:	8643      	strh	r3, [r0, #50]	; 0x32
  hi2s->State= HAL_I2S_STATE_READY;
 80018ee:	2301      	movs	r3, #1
 80018f0:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_DMA);
 80018f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80018f6:	f043 0308 	orr.w	r3, r3, #8
 80018fa:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 80018fc:	f001 fbb4 	bl	8003068 <HAL_I2S_ErrorCallback>
 8001900:	bd08      	pop	{r3, pc}

08001902 <HAL_I2S_GetState>:
  return hi2s->State;
 8001902:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
}
 8001906:	4770      	bx	lr

08001908 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief Tx and Rx Transfer completed callback
  * @param hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001908:	4770      	bx	lr
	...

0800190c <HAL_I2SEx_FullDuplex_IRQHandler>:
{
 800190c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 800190e:	6803      	ldr	r3, [r0, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001910:	4992      	ldr	r1, [pc, #584]	; (8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
  __IO uint32_t i2ssr    = hi2s->Instance->SR ;
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	9200      	str	r2, [sp, #0]
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001916:	4a92      	ldr	r2, [pc, #584]	; (8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001918:	428b      	cmp	r3, r1
 800191a:	bf18      	it	ne
 800191c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
{
 8001920:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr = I2SxEXT(hi2s->Instance)->SR;
 8001922:	6891      	ldr	r1, [r2, #8]
 8001924:	9101      	str	r1, [sp, #4]
  if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX)
 8001926:	69d9      	ldr	r1, [r3, #28]
 8001928:	f401 7140 	and.w	r1, r1, #768	; 0x300
 800192c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8001930:	d004      	beq.n	800193c <HAL_I2SEx_FullDuplex_IRQHandler+0x30>
      || ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8001932:	69d9      	ldr	r1, [r3, #28]
 8001934:	f411 7f40 	tst.w	r1, #768	; 0x300
 8001938:	f040 8097 	bne.w	8001a6a <HAL_I2SEx_FullDuplex_IRQHandler+0x15e>
    if(((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800193c:	9a00      	ldr	r2, [sp, #0]
 800193e:	0792      	lsls	r2, r2, #30
 8001940:	d51d      	bpl.n	800197e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	0610      	lsls	r0, r2, #24
 8001946:	d51a      	bpl.n	800197e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
static void I2SEx_FullDuplexTx_IT(I2S_HandleTypeDef *hi2s, I2S_UseTypeDef i2sUsed)
{
  if(i2sUsed == I2S_USE_I2S)
  {
    /* Write Data on DR register */
    hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8001948:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800194a:	1c91      	adds	r1, r2, #2
 800194c:	8812      	ldrh	r2, [r2, #0]
 800194e:	6261      	str	r1, [r4, #36]	; 0x24
 8001950:	60da      	str	r2, [r3, #12]
    hi2s->TxXferCount--;
 8001952:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001954:	3a01      	subs	r2, #1
 8001956:	b292      	uxth	r2, r2
 8001958:	8562      	strh	r2, [r4, #42]	; 0x2a

    if(hi2s->TxXferCount == 0U)
 800195a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 800195c:	b292      	uxth	r2, r2
 800195e:	b972      	cbnz	r2, 800197e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001960:	685a      	ldr	r2, [r3, #4]
 8001962:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001966:	0412      	lsls	r2, r2, #16
 8001968:	0c12      	lsrs	r2, r2, #16
 800196a:	605a      	str	r2, [r3, #4]

      if(hi2s->RxXferCount == 0U)
 800196c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 800196e:	b29b      	uxth	r3, r3
 8001970:	b92b      	cbnz	r3, 800197e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 8001972:	2301      	movs	r3, #1
 8001974:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001978:	4620      	mov	r0, r4
 800197a:	f7ff ffc5 	bl	8001908 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800197e:	9b01      	ldr	r3, [sp, #4]
 8001980:	07d9      	lsls	r1, r3, #31
 8001982:	d522      	bpl.n	80019ca <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
 8001984:	4a75      	ldr	r2, [pc, #468]	; (8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001986:	6821      	ldr	r1, [r4, #0]
 8001988:	4b75      	ldr	r3, [pc, #468]	; (8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 800198a:	4291      	cmp	r1, r2
 800198c:	bf18      	it	ne
 800198e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	0652      	lsls	r2, r2, #25
 8001996:	d518      	bpl.n	80019ca <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    }
  }
  else
  {
    /* Read Data from DR register */
    (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8001998:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800199a:	1c91      	adds	r1, r2, #2
 800199c:	62e1      	str	r1, [r4, #44]	; 0x2c
 800199e:	68d9      	ldr	r1, [r3, #12]
 80019a0:	8011      	strh	r1, [r2, #0]
    hi2s->RxXferCount--;
 80019a2:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80019a4:	3a01      	subs	r2, #1
 80019a6:	b292      	uxth	r2, r2
 80019a8:	8662      	strh	r2, [r4, #50]	; 0x32

    if(hi2s->RxXferCount == 0U)
 80019aa:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80019ac:	b292      	uxth	r2, r2
 80019ae:	b962      	cbnz	r2, 80019ca <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
    {
      /* Disable I2Sext RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019b0:	685a      	ldr	r2, [r3, #4]
 80019b2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80019b6:	605a      	str	r2, [r3, #4]

      if(hi2s->TxXferCount == 0U)
 80019b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80019ba:	b29b      	uxth	r3, r3
 80019bc:	b92b      	cbnz	r3, 80019ca <HAL_I2SEx_FullDuplex_IRQHandler+0xbe>
      {
        hi2s->State = HAL_I2S_STATE_READY;
 80019be:	2301      	movs	r3, #1
 80019c0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 80019c4:	4620      	mov	r0, r4
 80019c6:	f7ff ff9f 	bl	8001908 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80019ca:	9b01      	ldr	r3, [sp, #4]
 80019cc:	0658      	lsls	r0, r3, #25
 80019ce:	d524      	bpl.n	8001a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
 80019d0:	4962      	ldr	r1, [pc, #392]	; (8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 80019d2:	6823      	ldr	r3, [r4, #0]
 80019d4:	4a62      	ldr	r2, [pc, #392]	; (8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 80019d6:	428b      	cmp	r3, r1
 80019d8:	bf18      	it	ne
 80019da:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 80019de:	6851      	ldr	r1, [r2, #4]
 80019e0:	0689      	lsls	r1, r1, #26
 80019e2:	d51a      	bpl.n	8001a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x10e>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80019e4:	6851      	ldr	r1, [r2, #4]
 80019e6:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80019ea:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80019ec:	685a      	ldr	r2, [r3, #4]
 80019ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80019f2:	0412      	lsls	r2, r2, #16
 80019f4:	0c12      	lsrs	r2, r2, #16
 80019f6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80019f8:	2200      	movs	r2, #0
 80019fa:	9202      	str	r2, [sp, #8]
 80019fc:	68da      	ldr	r2, [r3, #12]
 80019fe:	9202      	str	r2, [sp, #8]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	9302      	str	r3, [sp, #8]
 8001a04:	9b02      	ldr	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a06:	2301      	movs	r3, #1
 8001a08:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001a0c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a0e:	f043 0302 	orr.w	r3, r3, #2
 8001a12:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a14:	4620      	mov	r0, r4
 8001a16:	f001 fb27 	bl	8003068 <HAL_I2S_ErrorCallback>
    if(((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001a1a:	9b00      	ldr	r3, [sp, #0]
 8001a1c:	071b      	lsls	r3, r3, #28
 8001a1e:	d522      	bpl.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001a20:	6823      	ldr	r3, [r4, #0]
 8001a22:	685a      	ldr	r2, [r3, #4]
 8001a24:	0690      	lsls	r0, r2, #26
 8001a26:	d51e      	bpl.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a28:	685a      	ldr	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a2a:	494c      	ldr	r1, [pc, #304]	; (8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a2c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001a30:	0412      	lsls	r2, r2, #16
 8001a32:	0c12      	lsrs	r2, r2, #16
 8001a34:	605a      	str	r2, [r3, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001a36:	4a4a      	ldr	r2, [pc, #296]	; (8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001a38:	428b      	cmp	r3, r1
 8001a3a:	bf18      	it	ne
 8001a3c:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
 8001a40:	6851      	ldr	r1, [r2, #4]
 8001a42:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8001a46:	6051      	str	r1, [r2, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8001a48:	2200      	movs	r2, #0
 8001a4a:	9203      	str	r2, [sp, #12]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	9303      	str	r3, [sp, #12]
 8001a50:	9b03      	ldr	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 8001a52:	2301      	movs	r3, #1
 8001a54:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_UDR);
 8001a58:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a5a:	f043 0304 	orr.w	r3, r3, #4
 8001a5e:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001a60:	4620      	mov	r0, r4
 8001a62:	f001 fb01 	bl	8003068 <HAL_I2S_ErrorCallback>
}
 8001a66:	b004      	add	sp, #16
 8001a68:	bd10      	pop	{r4, pc}
    if(((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8001a6a:	9b01      	ldr	r3, [sp, #4]
 8001a6c:	0799      	lsls	r1, r3, #30
 8001a6e:	d51a      	bpl.n	8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
 8001a70:	6853      	ldr	r3, [r2, #4]
 8001a72:	061b      	lsls	r3, r3, #24
 8001a74:	d517      	bpl.n	8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
    I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8001a76:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001a78:	1c99      	adds	r1, r3, #2
 8001a7a:	881b      	ldrh	r3, [r3, #0]
 8001a7c:	6241      	str	r1, [r0, #36]	; 0x24
 8001a7e:	60d3      	str	r3, [r2, #12]
    hi2s->TxXferCount--;
 8001a80:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a82:	3b01      	subs	r3, #1
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2s->TxXferCount == 0U)
 8001a88:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	b95b      	cbnz	r3, 8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001a8e:	6853      	ldr	r3, [r2, #4]
 8001a90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001a94:	6053      	str	r3, [r2, #4]
      if(hi2s->RxXferCount == 0U)
 8001a96:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	b923      	cbnz	r3, 8001aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x19a>
        hi2s->State = HAL_I2S_STATE_READY;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001aa2:	f7ff ff31 	bl	8001908 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8001aa6:	9b00      	ldr	r3, [sp, #0]
 8001aa8:	07d8      	lsls	r0, r3, #31
 8001aaa:	d51e      	bpl.n	8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
 8001aac:	6822      	ldr	r2, [r4, #0]
 8001aae:	6853      	ldr	r3, [r2, #4]
 8001ab0:	0659      	lsls	r1, r3, #25
 8001ab2:	d51a      	bpl.n	8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
    (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8001ab4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001ab6:	1c99      	adds	r1, r3, #2
 8001ab8:	62e1      	str	r1, [r4, #44]	; 0x2c
 8001aba:	68d1      	ldr	r1, [r2, #12]
 8001abc:	8019      	strh	r1, [r3, #0]
    hi2s->RxXferCount--;
 8001abe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	b29b      	uxth	r3, r3
 8001ac4:	8663      	strh	r3, [r4, #50]	; 0x32
    if(hi2s->RxXferCount == 0U)
 8001ac6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8001ac8:	b29b      	uxth	r3, r3
 8001aca:	b973      	cbnz	r3, 8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001acc:	6853      	ldr	r3, [r2, #4]
 8001ace:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001ad2:	041b      	lsls	r3, r3, #16
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	6053      	str	r3, [r2, #4]
      if(hi2s->TxXferCount == 0U)
 8001ad8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	b92b      	cbnz	r3, 8001aea <HAL_I2SEx_FullDuplex_IRQHandler+0x1de>
        hi2s->State = HAL_I2S_STATE_READY;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        HAL_I2SEx_TxRxCpltCallback(hi2s);
 8001ae4:	4620      	mov	r0, r4
 8001ae6:	f7ff ff0f 	bl	8001908 <HAL_I2SEx_TxRxCpltCallback>
    if(((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001aea:	9b00      	ldr	r3, [sp, #0]
 8001aec:	065a      	lsls	r2, r3, #25
 8001aee:	d51d      	bpl.n	8001b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
 8001af0:	6822      	ldr	r2, [r4, #0]
 8001af2:	6853      	ldr	r3, [r2, #4]
 8001af4:	069b      	lsls	r3, r3, #26
 8001af6:	d519      	bpl.n	8001b2c <HAL_I2SEx_FullDuplex_IRQHandler+0x220>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001af8:	6853      	ldr	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001afa:	4918      	ldr	r1, [pc, #96]	; (8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001afc:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	0c1b      	lsrs	r3, r3, #16
 8001b04:	6053      	str	r3, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b06:	4b16      	ldr	r3, [pc, #88]	; (8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001b08:	428a      	cmp	r2, r1
 8001b0a:	bf18      	it	ne
 8001b0c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      HAL_I2S_ErrorCallback(hi2s);
 8001b10:	4620      	mov	r0, r4
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001b18:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode,HAL_I2S_ERROR_OVR);
 8001b20:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8001b28:	f001 fa9e 	bl	8003068 <HAL_I2S_ErrorCallback>
    if(((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2SEXT_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8001b2c:	9b01      	ldr	r3, [sp, #4]
 8001b2e:	0718      	lsls	r0, r3, #28
 8001b30:	d599      	bpl.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8001b32:	490a      	ldr	r1, [pc, #40]	; (8001b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x250>)
 8001b34:	6822      	ldr	r2, [r4, #0]
 8001b36:	4b0a      	ldr	r3, [pc, #40]	; (8001b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x254>)
 8001b38:	428a      	cmp	r2, r1
 8001b3a:	bf18      	it	ne
 8001b3c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 8001b40:	6859      	ldr	r1, [r3, #4]
 8001b42:	0689      	lsls	r1, r1, #26
 8001b44:	d58f      	bpl.n	8001a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001b46:	6859      	ldr	r1, [r3, #4]
 8001b48:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8001b4c:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8001b4e:	6853      	ldr	r3, [r2, #4]
 8001b50:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8001b54:	041b      	lsls	r3, r3, #16
 8001b56:	0c1b      	lsrs	r3, r3, #16
 8001b58:	6053      	str	r3, [r2, #4]
 8001b5a:	e77a      	b.n	8001a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8001b5c:	40003800 	.word	0x40003800
 8001b60:	40003400 	.word	0x40003400

08001b64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b64:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b68:	4604      	mov	r4, r0
 8001b6a:	b918      	cbnz	r0, 8001b74 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001b6c:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8001b6e:	b002      	add	sp, #8
 8001b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b74:	6803      	ldr	r3, [r0, #0]
 8001b76:	07dd      	lsls	r5, r3, #31
 8001b78:	d410      	bmi.n	8001b9c <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	0798      	lsls	r0, r3, #30
 8001b7e:	d458      	bmi.n	8001c32 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	071a      	lsls	r2, r3, #28
 8001b84:	f100 809a 	bmi.w	8001cbc <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b88:	6823      	ldr	r3, [r4, #0]
 8001b8a:	075b      	lsls	r3, r3, #29
 8001b8c:	f100 80b8 	bmi.w	8001d00 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b90:	69a2      	ldr	r2, [r4, #24]
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	f040 8119 	bne.w	8001dca <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001b98:	2000      	movs	r0, #0
 8001b9a:	e7e8      	b.n	8001b6e <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001b9c:	4ba6      	ldr	r3, [pc, #664]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001b9e:	689a      	ldr	r2, [r3, #8]
 8001ba0:	f002 020c 	and.w	r2, r2, #12
 8001ba4:	2a04      	cmp	r2, #4
 8001ba6:	d007      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001bae:	2a08      	cmp	r2, #8
 8001bb0:	d10a      	bne.n	8001bc8 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	0259      	lsls	r1, r3, #9
 8001bb6:	d507      	bpl.n	8001bc8 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	4b9f      	ldr	r3, [pc, #636]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	039a      	lsls	r2, r3, #14
 8001bbe:	d5dc      	bpl.n	8001b7a <HAL_RCC_OscConfig+0x16>
 8001bc0:	6863      	ldr	r3, [r4, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d1d9      	bne.n	8001b7a <HAL_RCC_OscConfig+0x16>
 8001bc6:	e7d1      	b.n	8001b6c <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bc8:	6863      	ldr	r3, [r4, #4]
 8001bca:	4d9b      	ldr	r5, [pc, #620]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bd0:	d111      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x92>
 8001bd2:	682b      	ldr	r3, [r5, #0]
 8001bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001bda:	f7ff f9b1 	bl	8000f40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	4d96      	ldr	r5, [pc, #600]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001be0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be2:	682b      	ldr	r3, [r5, #0]
 8001be4:	039b      	lsls	r3, r3, #14
 8001be6:	d4c8      	bmi.n	8001b7a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001be8:	f7ff f9aa 	bl	8000f40 <HAL_GetTick>
 8001bec:	1b80      	subs	r0, r0, r6
 8001bee:	2864      	cmp	r0, #100	; 0x64
 8001bf0:	d9f7      	bls.n	8001be2 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 8001bf2:	2003      	movs	r0, #3
 8001bf4:	e7bb      	b.n	8001b6e <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bf6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bfa:	d104      	bne.n	8001c06 <HAL_RCC_OscConfig+0xa2>
 8001bfc:	682b      	ldr	r3, [r5, #0]
 8001bfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c02:	602b      	str	r3, [r5, #0]
 8001c04:	e7e5      	b.n	8001bd2 <HAL_RCC_OscConfig+0x6e>
 8001c06:	682a      	ldr	r2, [r5, #0]
 8001c08:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c0c:	602a      	str	r2, [r5, #0]
 8001c0e:	682a      	ldr	r2, [r5, #0]
 8001c10:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c14:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d1df      	bne.n	8001bda <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f991 	bl	8000f40 <HAL_GetTick>
 8001c1e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c20:	682b      	ldr	r3, [r5, #0]
 8001c22:	039f      	lsls	r7, r3, #14
 8001c24:	d5a9      	bpl.n	8001b7a <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c26:	f7ff f98b 	bl	8000f40 <HAL_GetTick>
 8001c2a:	1b80      	subs	r0, r0, r6
 8001c2c:	2864      	cmp	r0, #100	; 0x64
 8001c2e:	d9f7      	bls.n	8001c20 <HAL_RCC_OscConfig+0xbc>
 8001c30:	e7df      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c32:	4b81      	ldr	r3, [pc, #516]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	f012 0f0c 	tst.w	r2, #12
 8001c3a:	d007      	beq.n	8001c4c <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001c42:	2a08      	cmp	r2, #8
 8001c44:	d111      	bne.n	8001c6a <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	025e      	lsls	r6, r3, #9
 8001c4a:	d40e      	bmi.n	8001c6a <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4c:	4b7a      	ldr	r3, [pc, #488]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	0795      	lsls	r5, r2, #30
 8001c52:	d502      	bpl.n	8001c5a <HAL_RCC_OscConfig+0xf6>
 8001c54:	68e2      	ldr	r2, [r4, #12]
 8001c56:	2a01      	cmp	r2, #1
 8001c58:	d188      	bne.n	8001b6c <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	6921      	ldr	r1, [r4, #16]
 8001c5e:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001c62:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001c66:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c68:	e78a      	b.n	8001b80 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c6a:	68e2      	ldr	r2, [r4, #12]
 8001c6c:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x2d8>)
 8001c6e:	b1b2      	cbz	r2, 8001c9e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001c70:	2201      	movs	r2, #1
 8001c72:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001c74:	f7ff f964 	bl	8000f40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	4d6f      	ldr	r5, [pc, #444]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001c7a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c7c:	682b      	ldr	r3, [r5, #0]
 8001c7e:	0798      	lsls	r0, r3, #30
 8001c80:	d507      	bpl.n	8001c92 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c82:	682b      	ldr	r3, [r5, #0]
 8001c84:	6922      	ldr	r2, [r4, #16]
 8001c86:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001c8a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001c8e:	602b      	str	r3, [r5, #0]
 8001c90:	e776      	b.n	8001b80 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c92:	f7ff f955 	bl	8000f40 <HAL_GetTick>
 8001c96:	1b80      	subs	r0, r0, r6
 8001c98:	2802      	cmp	r0, #2
 8001c9a:	d9ef      	bls.n	8001c7c <HAL_RCC_OscConfig+0x118>
 8001c9c:	e7a9      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001c9e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001ca0:	f7ff f94e 	bl	8000f40 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca4:	4d64      	ldr	r5, [pc, #400]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001ca6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca8:	682b      	ldr	r3, [r5, #0]
 8001caa:	0799      	lsls	r1, r3, #30
 8001cac:	f57f af68 	bpl.w	8001b80 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7ff f946 	bl	8000f40 <HAL_GetTick>
 8001cb4:	1b80      	subs	r0, r0, r6
 8001cb6:	2802      	cmp	r0, #2
 8001cb8:	d9f6      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x144>
 8001cba:	e79a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001cbc:	6962      	ldr	r2, [r4, #20]
 8001cbe:	4b60      	ldr	r3, [pc, #384]	; (8001e40 <HAL_RCC_OscConfig+0x2dc>)
 8001cc0:	b17a      	cbz	r2, 8001ce2 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f93b 	bl	8000f40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cca:	4d5b      	ldr	r5, [pc, #364]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ccc:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cce:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001cd0:	079f      	lsls	r7, r3, #30
 8001cd2:	f53f af59 	bmi.w	8001b88 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd6:	f7ff f933 	bl	8000f40 <HAL_GetTick>
 8001cda:	1b80      	subs	r0, r0, r6
 8001cdc:	2802      	cmp	r0, #2
 8001cde:	d9f6      	bls.n	8001cce <HAL_RCC_OscConfig+0x16a>
 8001ce0:	e787      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001ce2:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f92c 	bl	8000f40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce8:	4d53      	ldr	r5, [pc, #332]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001cea:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cec:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001cee:	0798      	lsls	r0, r3, #30
 8001cf0:	f57f af4a 	bpl.w	8001b88 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cf4:	f7ff f924 	bl	8000f40 <HAL_GetTick>
 8001cf8:	1b80      	subs	r0, r0, r6
 8001cfa:	2802      	cmp	r0, #2
 8001cfc:	d9f6      	bls.n	8001cec <HAL_RCC_OscConfig+0x188>
 8001cfe:	e778      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d00:	4b4d      	ldr	r3, [pc, #308]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001d02:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d04:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001d08:	d128      	bne.n	8001d5c <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d0a:	9201      	str	r2, [sp, #4]
 8001d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d0e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d12:	641a      	str	r2, [r3, #64]	; 0x40
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	9301      	str	r3, [sp, #4]
 8001d1c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001d1e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d20:	4d48      	ldr	r5, [pc, #288]	; (8001e44 <HAL_RCC_OscConfig+0x2e0>)
 8001d22:	682b      	ldr	r3, [r5, #0]
 8001d24:	05d9      	lsls	r1, r3, #23
 8001d26:	d51b      	bpl.n	8001d60 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d28:	68a3      	ldr	r3, [r4, #8]
 8001d2a:	4d43      	ldr	r5, [pc, #268]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d127      	bne.n	8001d80 <HAL_RCC_OscConfig+0x21c>
 8001d30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d32:	f043 0301 	orr.w	r3, r3, #1
 8001d36:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001d38:	f7ff f902 	bl	8000f40 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d3c:	4d3e      	ldr	r5, [pc, #248]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001d3e:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d40:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d44:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d46:	079b      	lsls	r3, r3, #30
 8001d48:	d539      	bpl.n	8001dbe <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001d4a:	2e00      	cmp	r6, #0
 8001d4c:	f43f af20 	beq.w	8001b90 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d50:	4a39      	ldr	r2, [pc, #228]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001d52:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001d54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	e719      	b.n	8001b90 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001d5c:	2600      	movs	r6, #0
 8001d5e:	e7df      	b.n	8001d20 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	682b      	ldr	r3, [r5, #0]
 8001d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d66:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001d68:	f7ff f8ea 	bl	8000f40 <HAL_GetTick>
 8001d6c:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d6e:	682b      	ldr	r3, [r5, #0]
 8001d70:	05da      	lsls	r2, r3, #23
 8001d72:	d4d9      	bmi.n	8001d28 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d74:	f7ff f8e4 	bl	8000f40 <HAL_GetTick>
 8001d78:	1bc0      	subs	r0, r0, r7
 8001d7a:	2802      	cmp	r0, #2
 8001d7c:	d9f7      	bls.n	8001d6e <HAL_RCC_OscConfig+0x20a>
 8001d7e:	e738      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d80:	2b05      	cmp	r3, #5
 8001d82:	d104      	bne.n	8001d8e <HAL_RCC_OscConfig+0x22a>
 8001d84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001d86:	f043 0304 	orr.w	r3, r3, #4
 8001d8a:	672b      	str	r3, [r5, #112]	; 0x70
 8001d8c:	e7d0      	b.n	8001d30 <HAL_RCC_OscConfig+0x1cc>
 8001d8e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d90:	f022 0201 	bic.w	r2, r2, #1
 8001d94:	672a      	str	r2, [r5, #112]	; 0x70
 8001d96:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001d98:	f022 0204 	bic.w	r2, r2, #4
 8001d9c:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ca      	bne.n	8001d38 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001da2:	f7ff f8cd 	bl	8000f40 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001da6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001daa:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001dac:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001dae:	0798      	lsls	r0, r3, #30
 8001db0:	d5cb      	bpl.n	8001d4a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001db2:	f7ff f8c5 	bl	8000f40 <HAL_GetTick>
 8001db6:	1bc0      	subs	r0, r0, r7
 8001db8:	4540      	cmp	r0, r8
 8001dba:	d9f7      	bls.n	8001dac <HAL_RCC_OscConfig+0x248>
 8001dbc:	e719      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dbe:	f7ff f8bf 	bl	8000f40 <HAL_GetTick>
 8001dc2:	1bc0      	subs	r0, r0, r7
 8001dc4:	4540      	cmp	r0, r8
 8001dc6:	d9bd      	bls.n	8001d44 <HAL_RCC_OscConfig+0x1e0>
 8001dc8:	e713      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dca:	4d1b      	ldr	r5, [pc, #108]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
 8001dcc:	68ab      	ldr	r3, [r5, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	2b08      	cmp	r3, #8
 8001dd4:	f43f aeca 	beq.w	8001b6c <HAL_RCC_OscConfig+0x8>
 8001dd8:	4e1b      	ldr	r6, [pc, #108]	; (8001e48 <HAL_RCC_OscConfig+0x2e4>)
 8001dda:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ddc:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001dde:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de0:	d134      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001de2:	f7ff f8ad 	bl	8000f40 <HAL_GetTick>
 8001de6:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001de8:	682b      	ldr	r3, [r5, #0]
 8001dea:	0199      	lsls	r1, r3, #6
 8001dec:	d41e      	bmi.n	8001e2c <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dee:	6a22      	ldr	r2, [r4, #32]
 8001df0:	69e3      	ldr	r3, [r4, #28]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001df6:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001dfa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001dfc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001e00:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e02:	4c0d      	ldr	r4, [pc, #52]	; (8001e38 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001e04:	0852      	lsrs	r2, r2, #1
 8001e06:	3a01      	subs	r2, #1
 8001e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001e0c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001e0e:	2301      	movs	r3, #1
 8001e10:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001e12:	f7ff f895 	bl	8000f40 <HAL_GetTick>
 8001e16:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e18:	6823      	ldr	r3, [r4, #0]
 8001e1a:	019a      	lsls	r2, r3, #6
 8001e1c:	f53f aebc 	bmi.w	8001b98 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e20:	f7ff f88e 	bl	8000f40 <HAL_GetTick>
 8001e24:	1b40      	subs	r0, r0, r5
 8001e26:	2802      	cmp	r0, #2
 8001e28:	d9f6      	bls.n	8001e18 <HAL_RCC_OscConfig+0x2b4>
 8001e2a:	e6e2      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e2c:	f7ff f888 	bl	8000f40 <HAL_GetTick>
 8001e30:	1bc0      	subs	r0, r0, r7
 8001e32:	2802      	cmp	r0, #2
 8001e34:	d9d8      	bls.n	8001de8 <HAL_RCC_OscConfig+0x284>
 8001e36:	e6dc      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	42470000 	.word	0x42470000
 8001e40:	42470e80 	.word	0x42470e80
 8001e44:	40007000 	.word	0x40007000
 8001e48:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001e4c:	f7ff f878 	bl	8000f40 <HAL_GetTick>
 8001e50:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e52:	682b      	ldr	r3, [r5, #0]
 8001e54:	019b      	lsls	r3, r3, #6
 8001e56:	f57f ae9f 	bpl.w	8001b98 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff f871 	bl	8000f40 <HAL_GetTick>
 8001e5e:	1b00      	subs	r0, r0, r4
 8001e60:	2802      	cmp	r0, #2
 8001e62:	d9f6      	bls.n	8001e52 <HAL_RCC_OscConfig+0x2ee>
 8001e64:	e6c5      	b.n	8001bf2 <HAL_RCC_OscConfig+0x8e>
 8001e66:	bf00      	nop

08001e68 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e68:	4913      	ldr	r1, [pc, #76]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001e6a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e6c:	688b      	ldr	r3, [r1, #8]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d003      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0x16>
 8001e76:	2b08      	cmp	r3, #8
 8001e78:	d003      	beq.n	8001e82 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e7a:	4810      	ldr	r0, [pc, #64]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001e7c:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001e7e:	4810      	ldr	r0, [pc, #64]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x58>)
 8001e80:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e82:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e84:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e86:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e88:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e8c:	bf14      	ite	ne
 8001e8e:	480c      	ldrne	r0, [pc, #48]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e90:	480a      	ldreq	r0, [pc, #40]	; (8001ebc <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e92:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001e96:	bf18      	it	ne
 8001e98:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e9a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e9e:	fba1 0100 	umull	r0, r1, r1, r0
 8001ea2:	f7fe fe7b 	bl	8000b9c <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ea6:	4b04      	ldr	r3, [pc, #16]	; (8001eb8 <HAL_RCC_GetSysClockFreq+0x50>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001eae:	3301      	adds	r3, #1
 8001eb0:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001eb2:	fbb0 f0f3 	udiv	r0, r0, r3
 8001eb6:	bd08      	pop	{r3, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	00f42400 	.word	0x00f42400
 8001ec0:	007a1200 	.word	0x007a1200

08001ec4 <HAL_RCC_ClockConfig>:
{
 8001ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ec8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001eca:	4604      	mov	r4, r0
 8001ecc:	b910      	cbnz	r0, 8001ed4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001ece:	2001      	movs	r0, #1
 8001ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b44      	ldr	r3, [pc, #272]	; (8001fe8 <HAL_RCC_ClockConfig+0x124>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	f002 020f 	and.w	r2, r2, #15
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d328      	bcc.n	8001f32 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ee0:	6821      	ldr	r1, [r4, #0]
 8001ee2:	078f      	lsls	r7, r1, #30
 8001ee4:	d42d      	bmi.n	8001f42 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee6:	07c8      	lsls	r0, r1, #31
 8001ee8:	d440      	bmi.n	8001f6c <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eea:	4b3f      	ldr	r3, [pc, #252]	; (8001fe8 <HAL_RCC_ClockConfig+0x124>)
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	f002 020f 	and.w	r2, r2, #15
 8001ef2:	4295      	cmp	r5, r2
 8001ef4:	d366      	bcc.n	8001fc4 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ef6:	6822      	ldr	r2, [r4, #0]
 8001ef8:	0751      	lsls	r1, r2, #29
 8001efa:	d46c      	bmi.n	8001fd6 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	0713      	lsls	r3, r2, #28
 8001efe:	d507      	bpl.n	8001f10 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f00:	4a3a      	ldr	r2, [pc, #232]	; (8001fec <HAL_RCC_ClockConfig+0x128>)
 8001f02:	6921      	ldr	r1, [r4, #16]
 8001f04:	6893      	ldr	r3, [r2, #8]
 8001f06:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001f0a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001f0e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f10:	f7ff ffaa 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_ClockConfig+0x128>)
 8001f16:	4a36      	ldr	r2, [pc, #216]	; (8001ff0 <HAL_RCC_ClockConfig+0x12c>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f1e:	5cd3      	ldrb	r3, [r2, r3]
 8001f20:	40d8      	lsrs	r0, r3
 8001f22:	4b34      	ldr	r3, [pc, #208]	; (8001ff4 <HAL_RCC_ClockConfig+0x130>)
 8001f24:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f26:	2000      	movs	r0, #0
 8001f28:	f7fe ffc0 	bl	8000eac <HAL_InitTick>
  return HAL_OK;
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	b2ca      	uxtb	r2, r1
 8001f34:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 030f 	and.w	r3, r3, #15
 8001f3c:	4299      	cmp	r1, r3
 8001f3e:	d1c6      	bne.n	8001ece <HAL_RCC_ClockConfig+0xa>
 8001f40:	e7ce      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x1c>
 8001f42:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f48:	bf1e      	ittt	ne
 8001f4a:	689a      	ldrne	r2, [r3, #8]
 8001f4c:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001f50:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f52:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	bf42      	ittt	mi
 8001f56:	689a      	ldrmi	r2, [r3, #8]
 8001f58:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001f5c:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68a0      	ldr	r0, [r4, #8]
 8001f62:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001f66:	4302      	orrs	r2, r0
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	e7bc      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f6c:	6862      	ldr	r2, [r4, #4]
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_ClockConfig+0x128>)
 8001f70:	2a01      	cmp	r2, #1
 8001f72:	d11d      	bne.n	8001fb0 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7a:	d0a8      	beq.n	8001ece <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f7c:	4e1b      	ldr	r6, [pc, #108]	; (8001fec <HAL_RCC_ClockConfig+0x128>)
 8001f7e:	68b3      	ldr	r3, [r6, #8]
 8001f80:	f023 0303 	bic.w	r3, r3, #3
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001f88:	f7fe ffda 	bl	8000f40 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f8c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001f90:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	68b3      	ldr	r3, [r6, #8]
 8001f94:	6862      	ldr	r2, [r4, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001f9e:	d0a4      	beq.n	8001eea <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fa0:	f7fe ffce 	bl	8000f40 <HAL_GetTick>
 8001fa4:	1bc0      	subs	r0, r0, r7
 8001fa6:	4540      	cmp	r0, r8
 8001fa8:	d9f3      	bls.n	8001f92 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001faa:	2003      	movs	r0, #3
}
 8001fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb0:	1e91      	subs	r1, r2, #2
 8001fb2:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb4:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fb6:	d802      	bhi.n	8001fbe <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fb8:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001fbc:	e7dd      	b.n	8001f7a <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	f013 0f02 	tst.w	r3, #2
 8001fc2:	e7da      	b.n	8001f7a <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc4:	b2ea      	uxtb	r2, r5
 8001fc6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 030f 	and.w	r3, r3, #15
 8001fce:	429d      	cmp	r5, r3
 8001fd0:	f47f af7d 	bne.w	8001ece <HAL_RCC_ClockConfig+0xa>
 8001fd4:	e78f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd6:	4905      	ldr	r1, [pc, #20]	; (8001fec <HAL_RCC_ClockConfig+0x128>)
 8001fd8:	68e0      	ldr	r0, [r4, #12]
 8001fda:	688b      	ldr	r3, [r1, #8]
 8001fdc:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001fe0:	4303      	orrs	r3, r0
 8001fe2:	608b      	str	r3, [r1, #8]
 8001fe4:	e78a      	b.n	8001efc <HAL_RCC_ClockConfig+0x38>
 8001fe6:	bf00      	nop
 8001fe8:	40023c00 	.word	0x40023c00
 8001fec:	40023800 	.word	0x40023800
 8001ff0:	0801a670 	.word	0x0801a670
 8001ff4:	20000418 	.word	0x20000418

08001ff8 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001ff8:	4b01      	ldr	r3, [pc, #4]	; (8002000 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	20000418 	.word	0x20000418

08002004 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002004:	6803      	ldr	r3, [r0, #0]
 8002006:	f013 0f05 	tst.w	r3, #5
{
 800200a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800200c:	4605      	mov	r5, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800200e:	d105      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x18>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002010:	6828      	ldr	r0, [r5, #0]
 8002012:	f010 0002 	ands.w	r0, r0, #2
 8002016:	d128      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x66>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
}
 8002018:	b003      	add	sp, #12
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 800201c:	4c41      	ldr	r4, [pc, #260]	; (8002124 <HAL_RCCEx_PeriphCLKConfig+0x120>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800201e:	4e42      	ldr	r6, [pc, #264]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    __HAL_RCC_PLLI2S_DISABLE();
 8002020:	2300      	movs	r3, #0
 8002022:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002024:	f7fe ff8c 	bl	8000f40 <HAL_GetTick>
 8002028:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800202a:	6833      	ldr	r3, [r6, #0]
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	d415      	bmi.n	800205c <HAL_RCCEx_PeriphCLKConfig+0x58>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002030:	68ab      	ldr	r3, [r5, #8]
 8002032:	686a      	ldr	r2, [r5, #4]
 8002034:	071b      	lsls	r3, r3, #28
 8002036:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800203a:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800203e:	2301      	movs	r3, #1
 8002040:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8002042:	f7fe ff7d 	bl	8000f40 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002046:	4c38      	ldr	r4, [pc, #224]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    tickstart = HAL_GetTick();
 8002048:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800204a:	6823      	ldr	r3, [r4, #0]
 800204c:	0118      	lsls	r0, r3, #4
 800204e:	d4df      	bmi.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002050:	f7fe ff76 	bl	8000f40 <HAL_GetTick>
 8002054:	1b80      	subs	r0, r0, r6
 8002056:	2802      	cmp	r0, #2
 8002058:	d9f7      	bls.n	800204a <HAL_RCCEx_PeriphCLKConfig+0x46>
 800205a:	e004      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x62>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800205c:	f7fe ff70 	bl	8000f40 <HAL_GetTick>
 8002060:	1bc0      	subs	r0, r0, r7
 8002062:	2802      	cmp	r0, #2
 8002064:	d9e1      	bls.n	800202a <HAL_RCCEx_PeriphCLKConfig+0x26>
        return HAL_TIMEOUT;
 8002066:	2003      	movs	r0, #3
 8002068:	e7d6      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x14>
    __HAL_RCC_PWR_CLK_ENABLE();
 800206a:	2300      	movs	r3, #0
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	4b2e      	ldr	r3, [pc, #184]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x124>)
    PWR->CR |= PWR_CR_DBP;
 8002070:	4c2e      	ldr	r4, [pc, #184]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x128>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8002072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002074:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002078:	641a      	str	r2, [r3, #64]	; 0x40
 800207a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6023      	str	r3, [r4, #0]
    tickstart = HAL_GetTick();
 800208c:	f7fe ff58 	bl	8000f40 <HAL_GetTick>
 8002090:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	05d9      	lsls	r1, r3, #23
 8002096:	d51b      	bpl.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002098:	4c23      	ldr	r4, [pc, #140]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 800209a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800209c:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80020a0:	d11c      	bne.n	80020dc <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020a2:	68eb      	ldr	r3, [r5, #12]
 80020a4:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80020a8:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 80020ac:	4a1e      	ldr	r2, [pc, #120]	; (8002128 <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80020ae:	d134      	bne.n	800211a <HAL_RCCEx_PeriphCLKConfig+0x116>
 80020b0:	6891      	ldr	r1, [r2, #8]
 80020b2:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 80020b6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80020ba:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 80020be:	4301      	orrs	r1, r0
 80020c0:	6091      	str	r1, [r2, #8]
 80020c2:	6f11      	ldr	r1, [r2, #112]	; 0x70
 80020c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c8:	430b      	orrs	r3, r1
 80020ca:	6713      	str	r3, [r2, #112]	; 0x70
  return HAL_OK;
 80020cc:	2000      	movs	r0, #0
 80020ce:	e7a3      	b.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x14>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7fe ff36 	bl	8000f40 <HAL_GetTick>
 80020d4:	1b80      	subs	r0, r0, r6
 80020d6:	2802      	cmp	r0, #2
 80020d8:	d9db      	bls.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x8e>
 80020da:	e7c4      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x62>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020dc:	68ea      	ldr	r2, [r5, #12]
 80020de:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d0dd      	beq.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020e6:	6f23      	ldr	r3, [r4, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80020e8:	4a11      	ldr	r2, [pc, #68]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 80020ea:	2101      	movs	r1, #1
 80020ec:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020f2:	2100      	movs	r1, #0
 80020f4:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 80020f6:	6723      	str	r3, [r4, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020f8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80020fa:	07da      	lsls	r2, r3, #31
 80020fc:	d5d1      	bpl.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
        tickstart = HAL_GetTick();
 80020fe:	f7fe ff1f 	bl	8000f40 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002102:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002106:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002108:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800210a:	079b      	lsls	r3, r3, #30
 800210c:	d4c9      	bmi.n	80020a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800210e:	f7fe ff17 	bl	8000f40 <HAL_GetTick>
 8002112:	1b80      	subs	r0, r0, r6
 8002114:	42b8      	cmp	r0, r7
 8002116:	d9f7      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x104>
 8002118:	e7a5      	b.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x62>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800211a:	6891      	ldr	r1, [r2, #8]
 800211c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8002120:	e7ce      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xbc>
 8002122:	bf00      	nop
 8002124:	42470068 	.word	0x42470068
 8002128:	40023800 	.word	0x40023800
 800212c:	40007000 	.word	0x40007000
 8002130:	42470e40 	.word	0x42470e40

08002134 <HAL_RCCEx_GetPeriphCLKConfig>:

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8002134:	4a0a      	ldr	r2, [pc, #40]	; (8002160 <HAL_RCCEx_GetPeriphCLKConfig+0x2c>)
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8002136:	2303      	movs	r3, #3
 8002138:	6003      	str	r3, [r0, #0]
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800213a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 800213e:	f3c3 1388 	ubfx	r3, r3, #6, #9
 8002142:	6043      	str	r3, [r0, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002144:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
 8002148:	f3c3 7302 	ubfx	r3, r3, #28, #3
 800214c:	6083      	str	r3, [r0, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800214e:	6893      	ldr	r3, [r2, #8]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002150:	6f12      	ldr	r2, [r2, #112]	; 0x70
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 8002152:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8002156:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800215a:	4313      	orrs	r3, r2
 800215c:	60c3      	str	r3, [r0, #12]
 800215e:	4770      	bx	lr
 8002160:	40023800 	.word	0x40023800

08002164 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8002164:	2801      	cmp	r0, #1
 8002166:	d120      	bne.n	80021aa <HAL_RCCEx_GetPeriphCLKFreq+0x46>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
 800216a:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 800216c:	f412 0200 	ands.w	r2, r2, #8388608	; 0x800000
 8002170:	d004      	beq.n	800217c <HAL_RCCEx_GetPeriphCLKFreq+0x18>
 8002172:	2a01      	cmp	r2, #1
          break;
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8002174:	480f      	ldr	r0, [pc, #60]	; (80021b4 <HAL_RCCEx_GetPeriphCLKFreq+0x50>)
 8002176:	bf18      	it	ne
 8002178:	2000      	movne	r0, #0
 800217a:	4770      	bx	lr
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800217c:	685a      	ldr	r2, [r3, #4]
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800217e:	490c      	ldr	r1, [pc, #48]	; (80021b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4c>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002180:	6858      	ldr	r0, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002182:	0253      	lsls	r3, r2, #9
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8002184:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002188:	bf4c      	ite	mi
 800218a:	4b0b      	ldrmi	r3, [pc, #44]	; (80021b8 <HAL_RCCEx_GetPeriphCLKFreq+0x54>)
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800218c:	4b0b      	ldrpl	r3, [pc, #44]	; (80021bc <HAL_RCCEx_GetPeriphCLKFreq+0x58>)
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800218e:	f000 003f 	and.w	r0, r0, #63	; 0x3f
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8002192:	fbb3 f3f0 	udiv	r3, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8002196:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800219a:	f3c2 1288 	ubfx	r2, r2, #6, #9
 800219e:	4353      	muls	r3, r2
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80021a0:	f3c0 7002 	ubfx	r0, r0, #28, #3
 80021a4:	fbb3 f0f0 	udiv	r0, r3, r0
          break;
 80021a8:	4770      	bx	lr
  uint32_t frequency = 0U;
 80021aa:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40023800 	.word	0x40023800
 80021b4:	00bb8000 	.word	0x00bb8000
 80021b8:	007a1200 	.word	0x007a1200
 80021bc:	00f42400 	.word	0x00f42400

080021c0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;  

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021c0:	6a03      	ldr	r3, [r0, #32]
 80021c2:	f023 0301 	bic.w	r3, r3, #1
 80021c6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021c8:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 80021ca:	6842      	ldr	r2, [r0, #4]
{
 80021cc:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ce:	6984      	ldr	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021d2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80021d6:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021d8:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80021da:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80021de:	4323      	orrs	r3, r4

    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 80021e0:	4c0c      	ldr	r4, [pc, #48]	; (8002214 <TIM_OC1_SetConfig+0x54>)
 80021e2:	42a0      	cmp	r0, r4
 80021e4:	d009      	beq.n	80021fa <TIM_OC1_SetConfig+0x3a>
 80021e6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80021ea:	42a0      	cmp	r0, r4
 80021ec:	d005      	beq.n	80021fa <TIM_OC1_SetConfig+0x3a>
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021ee:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80021f0:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80021f2:	6185      	str	r5, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 80021f4:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80021f6:	6203      	str	r3, [r0, #32]
} 
 80021f8:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= OC_Config->OCNPolarity;
 80021fa:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= OC_Config->OCNIdleState;
 80021fc:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC1NP;
 80021fe:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8002202:	4323      	orrs	r3, r4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002204:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002206:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800220a:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800220c:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8002210:	4322      	orrs	r2, r4
 8002212:	e7ec      	b.n	80021ee <TIM_OC1_SetConfig+0x2e>
 8002214:	40010000 	.word	0x40010000

08002218 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;   

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002218:	6a03      	ldr	r3, [r0, #32]
 800221a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800221e:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002220:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002222:	6842      	ldr	r2, [r0, #4]
{
 8002224:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002226:	69c4      	ldr	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002228:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 800222a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800222e:	4325      	orrs	r5, r4
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002230:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8002232:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002236:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800223a:	4c0e      	ldr	r4, [pc, #56]	; (8002274 <TIM_OC3_SetConfig+0x5c>)
 800223c:	42a0      	cmp	r0, r4
 800223e:	d009      	beq.n	8002254 <TIM_OC3_SetConfig+0x3c>
 8002240:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002244:	42a0      	cmp	r0, r4
 8002246:	d005      	beq.n	8002254 <TIM_OC3_SetConfig+0x3c>
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002248:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800224a:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 800224c:	61c5      	str	r5, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800224e:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002250:	6203      	str	r3, [r0, #32]
}
 8002252:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002254:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002256:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC3NP;
 8002258:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800225c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002260:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002262:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002266:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 8002268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800226c:	ea42 1204 	orr.w	r2, r2, r4, lsl #4
 8002270:	e7ea      	b.n	8002248 <TIM_OC3_SetConfig+0x30>
 8002272:	bf00      	nop
 8002274:	40010000 	.word	0x40010000

08002278 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002278:	6a03      	ldr	r3, [r0, #32]
 800227a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800227e:	6203      	str	r3, [r0, #32]
{
 8002280:	b530      	push	{r4, r5, lr}
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002282:	6a04      	ldr	r4, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 = TIMx->CR2;
 8002284:	6843      	ldr	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002286:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002288:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800228a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800228e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002292:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8002294:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002298:	ea44 3405 	orr.w	r4, r4, r5, lsl #12
   
  /*if((TIMx == TIM1) || (TIMx == TIM8))*/
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800229c:	4d09      	ldr	r5, [pc, #36]	; (80022c4 <TIM_OC4_SetConfig+0x4c>)
 800229e:	42a8      	cmp	r0, r5
 80022a0:	d009      	beq.n	80022b6 <TIM_OC4_SetConfig+0x3e>
 80022a2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80022a6:	42a8      	cmp	r0, r5
 80022a8:	d005      	beq.n	80022b6 <TIM_OC4_SetConfig+0x3e>
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022aa:	6043      	str	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
    
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80022ac:	684b      	ldr	r3, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 80022ae:	61c2      	str	r2, [r0, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80022b0:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022b2:	6204      	str	r4, [r0, #32]
}
 80022b4:	bd30      	pop	{r4, r5, pc}
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022b6:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80022b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80022bc:	ea43 1385 	orr.w	r3, r3, r5, lsl #6
 80022c0:	e7f3      	b.n	80022aa <TIM_OC4_SetConfig+0x32>
 80022c2:	bf00      	nop
 80022c4:	40010000 	.word	0x40010000

080022c8 <HAL_TIM_Base_MspInit>:
 80022c8:	4770      	bx	lr

080022ca <HAL_TIM_Base_Start>:
  __HAL_TIM_ENABLE(htim);
 80022ca:	6802      	ldr	r2, [r0, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80022cc:	2302      	movs	r3, #2
 80022ce:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE(htim);
 80022d2:	6813      	ldr	r3, [r2, #0]
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6013      	str	r3, [r2, #0]
  htim->State= HAL_TIM_STATE_READY;
 80022da:	2301      	movs	r3, #1
 80022dc:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
}
 80022e0:	2000      	movs	r0, #0
 80022e2:	4770      	bx	lr

080022e4 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80022e4:	6803      	ldr	r3, [r0, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	f042 0201 	orr.w	r2, r2, #1
 80022ec:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	f042 0201 	orr.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]
}
 80022f6:	2000      	movs	r0, #0
 80022f8:	4770      	bx	lr

080022fa <HAL_TIM_PWM_MspInit>:
 80022fa:	4770      	bx	lr

080022fc <HAL_TIM_OC_DelayElapsedCallback>:
 80022fc:	4770      	bx	lr

080022fe <HAL_TIM_IC_CaptureCallback>:
 80022fe:	4770      	bx	lr

08002300 <HAL_TIM_PWM_PulseFinishedCallback>:
 8002300:	4770      	bx	lr

08002302 <HAL_TIM_TriggerCallback>:
 8002302:	4770      	bx	lr

08002304 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002304:	6803      	ldr	r3, [r0, #0]
 8002306:	691a      	ldr	r2, [r3, #16]
 8002308:	0791      	lsls	r1, r2, #30
{
 800230a:	b510      	push	{r4, lr}
 800230c:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800230e:	d50e      	bpl.n	800232e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	0792      	lsls	r2, r2, #30
 8002314:	d50b      	bpl.n	800232e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002316:	f06f 0202 	mvn.w	r2, #2
 800231a:	611a      	str	r2, [r3, #16]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800231c:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800231e:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002320:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002322:	7602      	strb	r2, [r0, #24]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002324:	d077      	beq.n	8002416 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8002326:	f7ff ffea 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232a:	2300      	movs	r3, #0
 800232c:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	691a      	ldr	r2, [r3, #16]
 8002332:	0750      	lsls	r0, r2, #29
 8002334:	d510      	bpl.n	8002358 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8002336:	68da      	ldr	r2, [r3, #12]
 8002338:	0751      	lsls	r1, r2, #29
 800233a:	d50d      	bpl.n	8002358 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800233c:	f06f 0204 	mvn.w	r2, #4
 8002340:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002342:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002344:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002346:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800234a:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800234c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800234e:	d068      	beq.n	8002422 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8002350:	f7ff ffd5 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002354:	2300      	movs	r3, #0
 8002356:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	691a      	ldr	r2, [r3, #16]
 800235c:	0712      	lsls	r2, r2, #28
 800235e:	d50f      	bpl.n	8002380 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8002360:	68da      	ldr	r2, [r3, #12]
 8002362:	0710      	lsls	r0, r2, #28
 8002364:	d50c      	bpl.n	8002380 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002366:	f06f 0208 	mvn.w	r2, #8
 800236a:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800236c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800236e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002370:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002372:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 8002374:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002376:	d05a      	beq.n	800242e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002378:	f7ff ffc1 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800237c:	2300      	movs	r3, #0
 800237e:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002380:	6823      	ldr	r3, [r4, #0]
 8002382:	691a      	ldr	r2, [r3, #16]
 8002384:	06d2      	lsls	r2, r2, #27
 8002386:	d510      	bpl.n	80023aa <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002388:	68da      	ldr	r2, [r3, #12]
 800238a:	06d0      	lsls	r0, r2, #27
 800238c:	d50d      	bpl.n	80023aa <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800238e:	f06f 0210 	mvn.w	r2, #16
 8002392:	611a      	str	r2, [r3, #16]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002394:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002396:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002398:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800239c:	7622      	strb	r2, [r4, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800239e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80023a0:	d04b      	beq.n	800243a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80023a2:	f7ff ffac 	bl	80022fe <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023a6:	2300      	movs	r3, #0
 80023a8:	7623      	strb	r3, [r4, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80023aa:	6823      	ldr	r3, [r4, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	07d1      	lsls	r1, r2, #31
 80023b0:	d508      	bpl.n	80023c4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	07d2      	lsls	r2, r2, #31
 80023b6:	d505      	bpl.n	80023c4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023b8:	f06f 0201 	mvn.w	r2, #1
 80023bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80023be:	4620      	mov	r0, r4
 80023c0:	f001 f8a6 	bl	8003510 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023c4:	6823      	ldr	r3, [r4, #0]
 80023c6:	691a      	ldr	r2, [r3, #16]
 80023c8:	0610      	lsls	r0, r2, #24
 80023ca:	d508      	bpl.n	80023de <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80023cc:	68da      	ldr	r2, [r3, #12]
 80023ce:	0611      	lsls	r1, r2, #24
 80023d0:	d505      	bpl.n	80023de <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f986 	bl	80026ea <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023de:	6823      	ldr	r3, [r4, #0]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	0652      	lsls	r2, r2, #25
 80023e4:	d508      	bpl.n	80023f8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	0650      	lsls	r0, r2, #25
 80023ea:	d505      	bpl.n	80023f8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80023f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff ff85 	bl	8002302 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	0691      	lsls	r1, r2, #26
 80023fe:	d522      	bpl.n	8002446 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8002400:	68da      	ldr	r2, [r3, #12]
 8002402:	0692      	lsls	r2, r2, #26
 8002404:	d51f      	bpl.n	8002446 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002406:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 800240a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800240c:	611a      	str	r2, [r3, #16]
}
 800240e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8002412:	f000 b969 	b.w	80026e8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002416:	f7ff ff71 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800241a:	4620      	mov	r0, r4
 800241c:	f7ff ff70 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
 8002420:	e783      	b.n	800232a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002422:	f7ff ff6b 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002426:	4620      	mov	r0, r4
 8002428:	f7ff ff6a 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
 800242c:	e792      	b.n	8002354 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800242e:	f7ff ff65 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ff64 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
 8002438:	e7a0      	b.n	800237c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800243a:	f7ff ff5f 	bl	80022fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800243e:	4620      	mov	r0, r4
 8002440:	f7ff ff5e 	bl	8002300 <HAL_TIM_PWM_PulseFinishedCallback>
 8002444:	e7af      	b.n	80023a6 <HAL_TIM_IRQHandler+0xa2>
 8002446:	bd10      	pop	{r4, pc}

08002448 <TIM_Base_SetConfig>:
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8002448:	4a2e      	ldr	r2, [pc, #184]	; (8002504 <TIM_Base_SetConfig+0xbc>)
  tmpcr1 = TIMx->CR1;
 800244a:	6803      	ldr	r3, [r0, #0]
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 800244c:	4290      	cmp	r0, r2
 800244e:	d012      	beq.n	8002476 <TIM_Base_SetConfig+0x2e>
 8002450:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002454:	d00f      	beq.n	8002476 <TIM_Base_SetConfig+0x2e>
 8002456:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800245a:	4290      	cmp	r0, r2
 800245c:	d00b      	beq.n	8002476 <TIM_Base_SetConfig+0x2e>
 800245e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002462:	4290      	cmp	r0, r2
 8002464:	d007      	beq.n	8002476 <TIM_Base_SetConfig+0x2e>
 8002466:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800246a:	4290      	cmp	r0, r2
 800246c:	d003      	beq.n	8002476 <TIM_Base_SetConfig+0x2e>
 800246e:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8002472:	4290      	cmp	r0, r2
 8002474:	d11d      	bne.n	80024b2 <TIM_Base_SetConfig+0x6a>
    tmpcr1 |= Structure->CounterMode;
 8002476:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002478:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800247c:	4313      	orrs	r3, r2
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800247e:	4a21      	ldr	r2, [pc, #132]	; (8002504 <TIM_Base_SetConfig+0xbc>)
 8002480:	4290      	cmp	r0, r2
 8002482:	d104      	bne.n	800248e <TIM_Base_SetConfig+0x46>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002484:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800248a:	4313      	orrs	r3, r2
 800248c:	e028      	b.n	80024e0 <TIM_Base_SetConfig+0x98>
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800248e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002492:	d0f7      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 8002494:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <TIM_Base_SetConfig+0xc0>)
 8002496:	4290      	cmp	r0, r2
 8002498:	d0f4      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 800249a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800249e:	4290      	cmp	r0, r2
 80024a0:	d0f0      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024a6:	4290      	cmp	r0, r2
 80024a8:	d0ec      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024aa:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80024ae:	4290      	cmp	r0, r2
 80024b0:	d0e8      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024b2:	4a16      	ldr	r2, [pc, #88]	; (800250c <TIM_Base_SetConfig+0xc4>)
 80024b4:	4290      	cmp	r0, r2
 80024b6:	d0e5      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024b8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024bc:	4290      	cmp	r0, r2
 80024be:	d0e1      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024c0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024c4:	4290      	cmp	r0, r2
 80024c6:	d0dd      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024c8:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80024cc:	4290      	cmp	r0, r2
 80024ce:	d0d9      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024d4:	4290      	cmp	r0, r2
 80024d6:	d0d5      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
 80024d8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024dc:	4290      	cmp	r0, r2
 80024de:	d0d1      	beq.n	8002484 <TIM_Base_SetConfig+0x3c>
  TIMx->CR1 = tmpcr1;
 80024e0:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024e2:	688b      	ldr	r3, [r1, #8]
 80024e4:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80024e6:	680b      	ldr	r3, [r1, #0]
 80024e8:	6283      	str	r3, [r0, #40]	; 0x28
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <TIM_Base_SetConfig+0xbc>)
 80024ec:	4298      	cmp	r0, r3
 80024ee:	d006      	beq.n	80024fe <TIM_Base_SetConfig+0xb6>
 80024f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024f4:	4298      	cmp	r0, r3
 80024f6:	d002      	beq.n	80024fe <TIM_Base_SetConfig+0xb6>
  TIMx->EGR = TIM_EGR_UG;
 80024f8:	2301      	movs	r3, #1
 80024fa:	6143      	str	r3, [r0, #20]
}
 80024fc:	4770      	bx	lr
    TIMx->RCR = Structure->RepetitionCounter;
 80024fe:	690b      	ldr	r3, [r1, #16]
 8002500:	6303      	str	r3, [r0, #48]	; 0x30
 8002502:	e7f9      	b.n	80024f8 <TIM_Base_SetConfig+0xb0>
 8002504:	40010000 	.word	0x40010000
 8002508:	40000400 	.word	0x40000400
 800250c:	40014000 	.word	0x40014000

08002510 <HAL_TIM_Base_Init>:
{ 
 8002510:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002512:	4604      	mov	r4, r0
 8002514:	b1a0      	cbz	r0, 8002540 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002516:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800251a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800251e:	b91b      	cbnz	r3, 8002528 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002520:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002524:	f7ff fed0 	bl	80022c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8002528:	2302      	movs	r3, #2
 800252a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800252e:	6820      	ldr	r0, [r4, #0]
 8002530:	1d21      	adds	r1, r4, #4
 8002532:	f7ff ff89 	bl	8002448 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8002536:	2301      	movs	r3, #1
 8002538:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 800253c:	2000      	movs	r0, #0
 800253e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002540:	2001      	movs	r0, #1
}
 8002542:	bd10      	pop	{r4, pc}

08002544 <HAL_TIM_PWM_Init>:
{
 8002544:	b510      	push	{r4, lr}
  if(htim == NULL)
 8002546:	4604      	mov	r4, r0
 8002548:	b1a0      	cbz	r0, 8002574 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800254a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800254e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002552:	b91b      	cbnz	r3, 800255c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002554:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8002558:	f7ff fecf 	bl	80022fa <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;  
 800255c:	2302      	movs	r3, #2
 800255e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8002562:	6820      	ldr	r0, [r4, #0]
 8002564:	1d21      	adds	r1, r4, #4
 8002566:	f7ff ff6f 	bl	8002448 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800256a:	2301      	movs	r3, #1
 800256c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8002570:	2000      	movs	r0, #0
 8002572:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002574:	2001      	movs	r0, #1
}  
 8002576:	bd10      	pop	{r4, pc}

08002578 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002578:	6a03      	ldr	r3, [r0, #32]
 800257a:	f023 0310 	bic.w	r3, r3, #16
 800257e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8002580:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 = TIMx->CR2;
 8002582:	6842      	ldr	r2, [r0, #4]
{
 8002584:	b570      	push	{r4, r5, r6, lr}
  tmpccmrx = TIMx->CCMR1;
 8002586:	6984      	ldr	r4, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002588:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800258a:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800258e:	ea44 2505 	orr.w	r5, r4, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002592:	688c      	ldr	r4, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002594:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002598:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)
 800259c:	4c0d      	ldr	r4, [pc, #52]	; (80025d4 <TIM_OC2_SetConfig+0x5c>)
 800259e:	42a0      	cmp	r0, r4
 80025a0:	d009      	beq.n	80025b6 <TIM_OC2_SetConfig+0x3e>
 80025a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80025a6:	42a0      	cmp	r0, r4
 80025a8:	d005      	beq.n	80025b6 <TIM_OC2_SetConfig+0x3e>
  TIMx->CR2 = tmpcr2;
 80025aa:	6042      	str	r2, [r0, #4]
  TIMx->CCR2 = OC_Config->Pulse;
 80025ac:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 80025ae:	6185      	str	r5, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80025b0:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80025b2:	6203      	str	r3, [r0, #32]
}
 80025b4:	bd70      	pop	{r4, r5, r6, pc}
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025b6:	68cc      	ldr	r4, [r1, #12]
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025b8:	698e      	ldr	r6, [r1, #24]
    tmpccer &= ~TIM_CCER_CC2NP;
 80025ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80025be:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80025c2:	694c      	ldr	r4, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80025c4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025c8:	4334      	orrs	r4, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80025ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80025ce:	ea42 0284 	orr.w	r2, r2, r4, lsl #2
 80025d2:	e7ea      	b.n	80025aa <TIM_OC2_SetConfig+0x32>
 80025d4:	40010000 	.word	0x40010000

080025d8 <HAL_TIM_PWM_ConfigChannel>:
{
 80025d8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80025da:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80025de:	2b01      	cmp	r3, #1
{
 80025e0:	4604      	mov	r4, r0
 80025e2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80025e6:	d025      	beq.n	8002634 <HAL_TIM_PWM_ConfigChannel+0x5c>
 80025e8:	2301      	movs	r3, #1
 80025ea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
  htim->State = HAL_TIM_STATE_BUSY;
 80025ee:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
  switch (Channel)
 80025f2:	2a0c      	cmp	r2, #12
 80025f4:	d818      	bhi.n	8002628 <HAL_TIM_PWM_ConfigChannel+0x50>
 80025f6:	e8df f002 	tbb	[pc, r2]
 80025fa:	1707      	.short	0x1707
 80025fc:	171e1717 	.word	0x171e1717
 8002600:	172f1717 	.word	0x172f1717
 8002604:	1717      	.short	0x1717
 8002606:	40          	.byte	0x40
 8002607:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002608:	6820      	ldr	r0, [r4, #0]
 800260a:	f7ff fdd9 	bl	80021c0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800260e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002610:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002612:	699a      	ldr	r2, [r3, #24]
 8002614:	f042 0208 	orr.w	r2, r2, #8
 8002618:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800261a:	699a      	ldr	r2, [r3, #24]
 800261c:	f022 0204 	bic.w	r2, r2, #4
 8002620:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002622:	699a      	ldr	r2, [r3, #24]
 8002624:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002626:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8002628:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800262a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800262c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8002630:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8002634:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002636:	6820      	ldr	r0, [r4, #0]
 8002638:	f7ff ff9e 	bl	8002578 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800263c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800263e:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002640:	699a      	ldr	r2, [r3, #24]
 8002642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800264e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002650:	699a      	ldr	r2, [r3, #24]
 8002652:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002656:	e7e6      	b.n	8002626 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002658:	6820      	ldr	r0, [r4, #0]
 800265a:	f7ff fddd 	bl	8002218 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800265e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002660:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002662:	69da      	ldr	r2, [r3, #28]
 8002664:	f042 0208 	orr.w	r2, r2, #8
 8002668:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800266a:	69da      	ldr	r2, [r3, #28]
 800266c:	f022 0204 	bic.w	r2, r2, #4
 8002670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8002672:	69da      	ldr	r2, [r3, #28]
 8002674:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002676:	61da      	str	r2, [r3, #28]
    break;
 8002678:	e7d6      	b.n	8002628 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800267a:	6820      	ldr	r0, [r4, #0]
 800267c:	f7ff fdfc 	bl	8002278 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002680:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002682:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800268a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800268c:	69da      	ldr	r2, [r3, #28]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002692:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800269a:	e7ec      	b.n	8002676 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800269c <TIM_CCxChannelCmd>:
  TIMx->CCER &= ~tmp;
 800269c:	6a03      	ldr	r3, [r0, #32]
{
 800269e:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 80026a0:	2401      	movs	r4, #1
 80026a2:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80026a4:	ea23 0304 	bic.w	r3, r3, r4
 80026a8:	6203      	str	r3, [r0, #32]
  TIMx->CCER |= (uint32_t)(ChannelState << Channel);
 80026aa:	6a03      	ldr	r3, [r0, #32]
 80026ac:	408a      	lsls	r2, r1
 80026ae:	431a      	orrs	r2, r3
 80026b0:	6202      	str	r2, [r0, #32]
 80026b2:	bd10      	pop	{r4, pc}

080026b4 <HAL_TIM_PWM_Start>:
{
 80026b4:	b510      	push	{r4, lr}
 80026b6:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80026b8:	2201      	movs	r2, #1
 80026ba:	6800      	ldr	r0, [r0, #0]
 80026bc:	f7ff ffee 	bl	800269c <TIM_CCxChannelCmd>
  if(IS_TIM_ADVANCED_INSTANCE(htim->Instance) != RESET)  
 80026c0:	6823      	ldr	r3, [r4, #0]
 80026c2:	4a08      	ldr	r2, [pc, #32]	; (80026e4 <HAL_TIM_PWM_Start+0x30>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d003      	beq.n	80026d0 <HAL_TIM_PWM_Start+0x1c>
 80026c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d103      	bne.n	80026d8 <HAL_TIM_PWM_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80026d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026d6:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f042 0201 	orr.w	r2, r2, #1
 80026de:	601a      	str	r2, [r3, #0]
} 
 80026e0:	2000      	movs	r0, #0
 80026e2:	bd10      	pop	{r4, pc}
 80026e4:	40010000 	.word	0x40010000

080026e8 <HAL_TIMEx_CommutationCallback>:
 80026e8:	4770      	bx	lr

080026ea <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80026ea:	4770      	bx	lr

080026ec <arm_mult_f32>:
void arm_mult_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  float32_t * pDst,
  uint32_t blockSize)
{
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t inA1, inA2, inA3, inA4;              /* temporary input variables */
  float32_t inB1, inB2, inB3, inB4;              /* temporary input variables */
  float32_t out1, out2, out3, out4;              /* temporary output variables */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 80026ee:	089c      	lsrs	r4, r3, #2
 80026f0:	4607      	mov	r7, r0
 80026f2:	460e      	mov	r6, r1
 80026f4:	4615      	mov	r5, r2
 80026f6:	46a6      	mov	lr, r4
 80026f8:	3710      	adds	r7, #16
 80026fa:	3610      	adds	r6, #16
 80026fc:	3510      	adds	r5, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.        
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80026fe:	f1be 0f00 	cmp.w	lr, #0
 8002702:	d10a      	bne.n	800271a <arm_mult_f32+0x2e>
 8002704:	0124      	lsls	r4, r4, #4
 8002706:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.        
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8002708:	f003 0303 	and.w	r3, r3, #3
 800270c:	4420      	add	r0, r4
 800270e:	4422      	add	r2, r4
 8002710:	eb01 0383 	add.w	r3, r1, r3, lsl #2
  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 8002714:	4299      	cmp	r1, r3
 8002716:	d123      	bne.n	8002760 <arm_mult_f32+0x74>
    *pDst++ = (*pSrcA++) * (*pSrcB++);

    /* Decrement the blockSize loop counter */
    blkCnt--;
  }
}
 8002718:	bdf0      	pop	{r4, r5, r6, r7, pc}
    out1 = inA1 * inB1;
 800271a:	ed17 6a04 	vldr	s12, [r7, #-16]
 800271e:	ed16 5a04 	vldr	s10, [r6, #-16]
    out2 = inA2 * inB2;
 8002722:	ed56 7a03 	vldr	s15, [r6, #-12]
 8002726:	ed57 6a03 	vldr	s13, [r7, #-12]
    inA3 = *(pSrcA + 2);
 800272a:	ed17 7a02 	vldr	s14, [r7, #-8]
    inB3 = *(pSrcB + 2);
 800272e:	ed56 5a02 	vldr	s11, [r6, #-8]
    out1 = inA1 * inB1;
 8002732:	ee26 6a05 	vmul.f32	s12, s12, s10
    out2 = inA2 * inB2;
 8002736:	ee66 6aa7 	vmul.f32	s13, s13, s15
    inA4 = *(pSrcA + 3);
 800273a:	ed57 7a01 	vldr	s15, [r7, #-4]
    *pDst = out1;
 800273e:	ed05 6a04 	vstr	s12, [r5, #-16]
    inB4 = *(pSrcB + 3);
 8002742:	ed16 6a01 	vldr	s12, [r6, #-4]
    *(pDst + 1) = out2;
 8002746:	ed45 6a03 	vstr	s13, [r5, #-12]
    out3 = inA3 * inB3;
 800274a:	ee27 7a25 	vmul.f32	s14, s14, s11
    out4 = inA4 * inB4;
 800274e:	ee67 7a86 	vmul.f32	s15, s15, s12
    *(pDst + 2) = out3;
 8002752:	ed05 7a02 	vstr	s14, [r5, #-8]
    *(pDst + 3) = out4;
 8002756:	ed45 7a01 	vstr	s15, [r5, #-4]
    blkCnt--;
 800275a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800275e:	e7cb      	b.n	80026f8 <arm_mult_f32+0xc>
    *pDst++ = (*pSrcA++) * (*pSrcB++);
 8002760:	ecf0 7a01 	vldmia	r0!, {s15}
 8002764:	ecb1 7a01 	vldmia	r1!, {s14}
 8002768:	ee67 7a87 	vmul.f32	s15, s15, s14
 800276c:	ece2 7a01 	vstmia	r2!, {s15}
 8002770:	e7d0      	b.n	8002714 <arm_mult_f32+0x28>
	...

08002774 <arm_rfft_fast_init_f32>:
  arm_cfft_instance_f32 * Sint;
  /*  Initialise the default arm status */
  arm_status status = ARM_MATH_SUCCESS;
  /*  Initialise the FFT length */
  Sint = &(S->Sint);
  Sint->fftLen = fftLen/2;
 8002774:	084b      	lsrs	r3, r1, #1
  S->fftLenRFFT = fftLen;

  /*  Initializations of structure parameters depending on the FFT length */
  switch (Sint->fftLen)
 8002776:	2b80      	cmp	r3, #128	; 0x80
  Sint->fftLen = fftLen/2;
 8002778:	8003      	strh	r3, [r0, #0]
  S->fftLenRFFT = fftLen;
 800277a:	8201      	strh	r1, [r0, #16]
  switch (Sint->fftLen)
 800277c:	d044      	beq.n	8002808 <arm_rfft_fast_init_f32+0x94>
 800277e:	d80d      	bhi.n	800279c <arm_rfft_fast_init_f32+0x28>
 8002780:	2b20      	cmp	r3, #32
 8002782:	d051      	beq.n	8002828 <arm_rfft_fast_init_f32+0xb4>
 8002784:	2b40      	cmp	r3, #64	; 0x40
 8002786:	d047      	beq.n	8002818 <arm_rfft_fast_init_f32+0xa4>
 8002788:	2b10      	cmp	r3, #16
 800278a:	d10e      	bne.n	80027aa <arm_rfft_fast_init_f32+0x36>
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
    break;
  case 16u:
    Sint->bitRevLength = ARMBITREVINDEXTABLE__16_TABLE_LENGTH;
 800278c:	2314      	movs	r3, #20
 800278e:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8002790:	4b29      	ldr	r3, [pc, #164]	; (8002838 <arm_rfft_fast_init_f32+0xc4>)
 8002792:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8002794:	4b29      	ldr	r3, [pc, #164]	; (800283c <arm_rfft_fast_init_f32+0xc8>)
 8002796:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8002798:	4b29      	ldr	r3, [pc, #164]	; (8002840 <arm_rfft_fast_init_f32+0xcc>)
 800279a:	e017      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
  switch (Sint->fftLen)
 800279c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027a0:	d020      	beq.n	80027e4 <arm_rfft_fast_init_f32+0x70>
 80027a2:	d805      	bhi.n	80027b0 <arm_rfft_fast_init_f32+0x3c>
 80027a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027a8:	d025      	beq.n	80027f6 <arm_rfft_fast_init_f32+0x82>
    break;
  default:
    /*  Reporting argument error if fftSize is not valid value */
    status = ARM_MATH_ARGUMENT_ERROR;
 80027aa:	f04f 30ff 	mov.w	r0, #4294967295
    break;
  }

  return (status);
}
 80027ae:	4770      	bx	lr
  switch (Sint->fftLen)
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027b4:	d00d      	beq.n	80027d2 <arm_rfft_fast_init_f32+0x5e>
 80027b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ba:	d1f6      	bne.n	80027aa <arm_rfft_fast_init_f32+0x36>
    Sint->bitRevLength = ARMBITREVINDEXTABLE2048_TABLE_LENGTH;
 80027bc:	f44f 636e 	mov.w	r3, #3808	; 0xee0
 80027c0:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 80027c2:	4b20      	ldr	r3, [pc, #128]	; (8002844 <arm_rfft_fast_init_f32+0xd0>)
 80027c4:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <arm_rfft_fast_init_f32+0xd4>)
 80027c8:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 80027ca:	4b20      	ldr	r3, [pc, #128]	; (800284c <arm_rfft_fast_init_f32+0xd8>)
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 80027cc:	6143      	str	r3, [r0, #20]
  arm_status status = ARM_MATH_SUCCESS;
 80027ce:	2000      	movs	r0, #0
    break;
 80027d0:	4770      	bx	lr
    Sint->bitRevLength = ARMBITREVINDEXTABLE1024_TABLE_LENGTH;
 80027d2:	f44f 63e1 	mov.w	r3, #1800	; 0x708
 80027d6:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 80027d8:	4b1d      	ldr	r3, [pc, #116]	; (8002850 <arm_rfft_fast_init_f32+0xdc>)
 80027da:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <arm_rfft_fast_init_f32+0xe0>)
 80027de:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 80027e0:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <arm_rfft_fast_init_f32+0xe4>)
 80027e2:	e7f3      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
    Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 80027e4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 80027e8:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 80027ea:	4b1c      	ldr	r3, [pc, #112]	; (800285c <arm_rfft_fast_init_f32+0xe8>)
 80027ec:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 80027ee:	4b1c      	ldr	r3, [pc, #112]	; (8002860 <arm_rfft_fast_init_f32+0xec>)
 80027f0:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 80027f2:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <arm_rfft_fast_init_f32+0xf0>)
 80027f4:	e7ea      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
    Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 80027f6:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
 80027fa:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <arm_rfft_fast_init_f32+0xf4>)
 80027fe:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8002800:	4b1a      	ldr	r3, [pc, #104]	; (800286c <arm_rfft_fast_init_f32+0xf8>)
 8002802:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8002804:	4b1a      	ldr	r3, [pc, #104]	; (8002870 <arm_rfft_fast_init_f32+0xfc>)
 8002806:	e7e1      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
    Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8002808:	23d0      	movs	r3, #208	; 0xd0
 800280a:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 800280c:	4b19      	ldr	r3, [pc, #100]	; (8002874 <arm_rfft_fast_init_f32+0x100>)
 800280e:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <arm_rfft_fast_init_f32+0x104>)
 8002812:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8002814:	4b19      	ldr	r3, [pc, #100]	; (800287c <arm_rfft_fast_init_f32+0x108>)
 8002816:	e7d9      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
    Sint->bitRevLength = ARMBITREVINDEXTABLE__64_TABLE_LENGTH;
 8002818:	2338      	movs	r3, #56	; 0x38
 800281a:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable64;
 800281c:	4b18      	ldr	r3, [pc, #96]	; (8002880 <arm_rfft_fast_init_f32+0x10c>)
 800281e:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_64;
 8002820:	4b18      	ldr	r3, [pc, #96]	; (8002884 <arm_rfft_fast_init_f32+0x110>)
 8002822:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 8002824:	4b18      	ldr	r3, [pc, #96]	; (8002888 <arm_rfft_fast_init_f32+0x114>)
 8002826:	e7d1      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
    Sint->bitRevLength = ARMBITREVINDEXTABLE__32_TABLE_LENGTH;
 8002828:	2330      	movs	r3, #48	; 0x30
 800282a:	8183      	strh	r3, [r0, #12]
    Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 800282c:	4b17      	ldr	r3, [pc, #92]	; (800288c <arm_rfft_fast_init_f32+0x118>)
 800282e:	6083      	str	r3, [r0, #8]
		Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8002830:	4b17      	ldr	r3, [pc, #92]	; (8002890 <arm_rfft_fast_init_f32+0x11c>)
 8002832:	6043      	str	r3, [r0, #4]
		S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8002834:	4b17      	ldr	r3, [pc, #92]	; (8002894 <arm_rfft_fast_init_f32+0x120>)
 8002836:	e7c9      	b.n	80027cc <arm_rfft_fast_init_f32+0x58>
 8002838:	080081c0 	.word	0x080081c0
 800283c:	0800cb68 	.word	0x0800cb68
 8002840:	08015ce8 	.word	0x08015ce8
 8002844:	080081e8 	.word	0x080081e8
 8002848:	0800cbe8 	.word	0x0800cbe8
 800284c:	08015d68 	.word	0x08015d68
 8002850:	08007210 	.word	0x08007210
 8002854:	0800a768 	.word	0x0800a768
 8002858:	080138e8 	.word	0x080138e8
 800285c:	0800a378 	.word	0x0800a378
 8002860:	080114e8 	.word	0x080114e8
 8002864:	080126e8 	.word	0x080126e8
 8002868:	08009fa8 	.word	0x08009fa8
 800286c:	08010be8 	.word	0x08010be8
 8002870:	08019d68 	.word	0x08019d68
 8002874:	08008020 	.word	0x08008020
 8002878:	0800c768 	.word	0x0800c768
 800287c:	080158e8 	.word	0x080158e8
 8002880:	0800a6f8 	.word	0x0800a6f8
 8002884:	080124e8 	.word	0x080124e8
 8002888:	080136e8 	.word	0x080136e8
 800288c:	0800a318 	.word	0x0800a318
 8002890:	080113e8 	.word	0x080113e8
 8002894:	0801a568 	.word	0x0801a568

08002898 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002898:	b530      	push	{r4, r5, lr}
 800289a:	b099      	sub	sp, #100	; 0x64
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct;

	/**Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE()
 800289c:	4b2d      	ldr	r3, [pc, #180]	; (8002954 <SystemClock_Config+0xbc>)
 800289e:	2100      	movs	r1, #0
 80028a0:	9101      	str	r1, [sp, #4]
 80028a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80028a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40
 80028aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b0:	9301      	str	r3, [sp, #4]
 80028b2:	9b01      	ldr	r3, [sp, #4]
	;

	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028b4:	4b28      	ldr	r3, [pc, #160]	; (8002958 <SystemClock_Config+0xc0>)
 80028b6:	9102      	str	r1, [sp, #8]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c6:	9302      	str	r3, [sp, #8]
 80028c8:	9b02      	ldr	r3, [sp, #8]

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80028ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028ce:	930d      	str	r3, [sp, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80028d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028d4:	9313      	str	r3, [sp, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80028d6:	2308      	movs	r3, #8
 80028d8:	9314      	str	r3, [sp, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 336;
 80028da:	f44f 73a8 	mov.w	r3, #336	; 0x150
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028de:	2402      	movs	r4, #2
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028e0:	2501      	movs	r5, #1
	RCC_OscInitStruct.PLL.PLLN = 336;
 80028e2:	9315      	str	r3, [sp, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
	RCC_OscInitStruct.PLL.PLLQ = 7;
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028e4:	a80c      	add	r0, sp, #48	; 0x30
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80028e6:	2307      	movs	r3, #7
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80028e8:	950c      	str	r5, [sp, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80028ea:	9412      	str	r4, [sp, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028ec:	9416      	str	r4, [sp, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80028ee:	9317      	str	r3, [sp, #92]	; 0x5c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80028f0:	f7ff f938 	bl	8001b64 <HAL_RCC_OscConfig>
 80028f4:	b100      	cbz	r0, 80028f8 <SystemClock_Config+0x60>
 80028f6:	e7fe      	b.n	80028f6 <SystemClock_Config+0x5e>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80028f8:	230f      	movs	r3, #15
 80028fa:	9307      	str	r3, [sp, #28]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002900:	9009      	str	r0, [sp, #36]	; 0x24
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002902:	930a      	str	r3, [sp, #40]	; 0x28
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002904:	2105      	movs	r1, #5
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800290a:	a807      	add	r0, sp, #28
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800290c:	9408      	str	r4, [sp, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800290e:	930b      	str	r3, [sp, #44]	; 0x2c
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8002910:	f7ff fad8 	bl	8001ec4 <HAL_RCC_ClockConfig>
 8002914:	b100      	cbz	r0, 8002918 <SystemClock_Config+0x80>
 8002916:	e7fe      	b.n	8002916 <SystemClock_Config+0x7e>
		_Error_Handler(__FILE__, __LINE__);
	}

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002918:	23c0      	movs	r3, #192	; 0xc0
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 800291a:	a803      	add	r0, sp, #12
	PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800291c:	9405      	str	r4, [sp, #20]
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800291e:	9503      	str	r5, [sp, #12]
	PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002920:	9304      	str	r3, [sp, #16]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002922:	f7ff fb6f 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 8002926:	4604      	mov	r4, r0
 8002928:	b100      	cbz	r0, 800292c <SystemClock_Config+0x94>
 800292a:	e7fe      	b.n	800292a <SystemClock_Config+0x92>
		_Error_Handler(__FILE__, __LINE__);
	}

	/**Configure the Systick interrupt time
	 */
	HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / 1000);
 800292c:	f7ff fb64 	bl	8001ff8 <HAL_RCC_GetHCLKFreq>
 8002930:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002934:	fbb0 f0f3 	udiv	r0, r0, r3
 8002938:	f7fe fb5a 	bl	8000ff0 <HAL_SYSTICK_Config>

	/**Configure the Systick
	 */
	HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 800293c:	2004      	movs	r0, #4
 800293e:	f7fe fb6d 	bl	800101c <HAL_SYSTICK_CLKSourceConfig>

	/* SysTick_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8002942:	4622      	mov	r2, r4
 8002944:	4621      	mov	r1, r4
 8002946:	f04f 30ff 	mov.w	r0, #4294967295
 800294a:	f7fe fb11 	bl	8000f70 <HAL_NVIC_SetPriority>
}
 800294e:	b019      	add	sp, #100	; 0x64
 8002950:	bd30      	pop	{r4, r5, pc}
 8002952:	bf00      	nop
 8002954:	40023800 	.word	0x40023800
 8002958:	40007000 	.word	0x40007000

0800295c <PCM_to_Float>:

void PCM_to_Float(uint16_t *samples_PCM, float32_t *samples_float32,
		uint16_t length_array) {

	for (uint16_t i = 0; i < length_array; i++) {
		samples_float32[i] = (float32_t) samples_PCM[i] * (1.0f / 65535.0f);
 800295c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002984 <PCM_to_Float+0x28>
 8002960:	3802      	subs	r0, #2
 8002962:	eb01 0282 	add.w	r2, r1, r2, lsl #2
	for (uint16_t i = 0; i < length_array; i++) {
 8002966:	4291      	cmp	r1, r2
 8002968:	d100      	bne.n	800296c <PCM_to_Float+0x10>
	}

}
 800296a:	4770      	bx	lr
		samples_float32[i] = (float32_t) samples_PCM[i] * (1.0f / 65535.0f);
 800296c:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 8002970:	ee07 3a90 	vmov	s15, r3
 8002974:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002978:	ee67 7a87 	vmul.f32	s15, s15, s14
 800297c:	ece1 7a01 	vstmia	r1!, {s15}
 8002980:	e7f1      	b.n	8002966 <PCM_to_Float+0xa>
 8002982:	bf00      	nop
 8002984:	37800080 	.word	0x37800080

08002988 <BSP_AUDIO_IN_TransferComplete_CallBack>:
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
			(uint8_t) length_block);

}

void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8002988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if (AUDIODataReady == 0) {
 800298c:	4f17      	ldr	r7, [pc, #92]	; (80029ec <BSP_AUDIO_IN_TransferComplete_CallBack+0x64>)
 800298e:	683e      	ldr	r6, [r7, #0]
 8002990:	bb56      	cbnz	r6, 80029e8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x60>
		buff_pos = ITCounter * PCM_OUT_SIZE;
 8002992:	4d17      	ldr	r5, [pc, #92]	; (80029f0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x68>)
 8002994:	4a17      	ldr	r2, [pc, #92]	; (80029f4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x6c>)
 8002996:	682b      	ldr	r3, [r5, #0]
		BSP_AUDIO_IN_PDMToPCM(
 8002998:	4917      	ldr	r1, [pc, #92]	; (80029f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>)
 800299a:	4818      	ldr	r0, [pc, #96]	; (80029fc <BSP_AUDIO_IN_TransferComplete_CallBack+0x74>)
		buff_pos = ITCounter * PCM_OUT_SIZE;
 800299c:	f44f 547a 	mov.w	r4, #16000	; 0x3e80
 80029a0:	4363      	muls	r3, r4
 80029a2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 80029a6:	fbb3 f3f8 	udiv	r3, r3, r8
 80029aa:	8013      	strh	r3, [r2, #0]
		BSP_AUDIO_IN_PDMToPCM(
 80029ac:	f000 fa2a 	bl	8002e04 <BSP_AUDIO_IN_PDMToPCM>
				(uint16_t *) &InternalBuffer[INTERNAL_BUFF_SIZE / 2],
				(uint16_t *) &PCM_Buf[0]);

		PCM_to_Float((uint16_t *) &PCM_Buf[0], (float32_t *) &float_array[0],
 80029b0:	2210      	movs	r2, #16
 80029b2:	4913      	ldr	r1, [pc, #76]	; (8002a00 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
 80029b4:	4810      	ldr	r0, [pc, #64]	; (80029f8 <BSP_AUDIO_IN_TransferComplete_CallBack+0x70>)
 80029b6:	f7ff ffd1 	bl	800295c <PCM_to_Float>
		PCM_OUT_SIZE);
		PCM_Preprocess((float32_t *) &float_array[0],
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 80029ba:	6829      	ldr	r1, [r5, #0]
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 80029bc:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <BSP_AUDIO_IN_TransferComplete_CallBack+0x7c>)
 80029be:	4810      	ldr	r0, [pc, #64]	; (8002a00 <BSP_AUDIO_IN_TransferComplete_CallBack+0x78>)
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 80029c0:	434c      	muls	r4, r1
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 80029c2:	4911      	ldr	r1, [pc, #68]	; (8002a08 <BSP_AUDIO_IN_TransferComplete_CallBack+0x80>)
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 80029c4:	fbb4 f4f8 	udiv	r4, r4, r8
 80029c8:	00a4      	lsls	r4, r4, #2
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 80029ca:	2310      	movs	r3, #16
 80029cc:	4422      	add	r2, r4
 80029ce:	4421      	add	r1, r4
 80029d0:	f7ff fe8c 	bl	80026ec <arm_mult_f32>
				(float32_t *) &FFT_Input[ITCounter * PCM_OUT_SIZE],
				PCM_OUT_SIZE);

		if (ITCounter == sample_runs) {
 80029d4:	682b      	ldr	r3, [r5, #0]
 80029d6:	2b0f      	cmp	r3, #15
 80029d8:	d104      	bne.n	80029e4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x5c>
			AUDIODataReady = 1;
 80029da:	2301      	movs	r3, #1
 80029dc:	603b      	str	r3, [r7, #0]
			ITCounter = 0;
 80029de:	602e      	str	r6, [r5, #0]
 80029e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			ITCounter++;
 80029e4:	3301      	adds	r3, #1
 80029e6:	602b      	str	r3, [r5, #0]
 80029e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80029ec:	200004ac 	.word	0x200004ac
 80029f0:	200004b0 	.word	0x200004b0
 80029f4:	200004b4 	.word	0x200004b4
 80029f8:	20000e74 	.word	0x20000e74
 80029fc:	20000798 	.word	0x20000798
 8002a00:	20000a1c 	.word	0x20000a1c
 8002a04:	20001098 	.word	0x20001098
 8002a08:	20000518 	.word	0x20000518

08002a0c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
		}
	}
}

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8002a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (AUDIODataReady == 0) {
 8002a10:	4f17      	ldr	r7, [pc, #92]	; (8002a70 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x64>)
 8002a12:	683e      	ldr	r6, [r7, #0]
 8002a14:	bb56      	cbnz	r6, 8002a6c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x60>
		buff_pos = ITCounter * PCM_OUT_SIZE;
 8002a16:	4d17      	ldr	r5, [pc, #92]	; (8002a74 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x68>)
 8002a18:	4a17      	ldr	r2, [pc, #92]	; (8002a78 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x6c>)
 8002a1a:	682b      	ldr	r3, [r5, #0]
		/* PDM to PCM data convert */
		BSP_AUDIO_IN_PDMToPCM((uint16_t *) &InternalBuffer[0],
 8002a1c:	4917      	ldr	r1, [pc, #92]	; (8002a7c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>)
 8002a1e:	4818      	ldr	r0, [pc, #96]	; (8002a80 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x74>)
		buff_pos = ITCounter * PCM_OUT_SIZE;
 8002a20:	f44f 547a 	mov.w	r4, #16000	; 0x3e80
 8002a24:	4363      	muls	r3, r4
 8002a26:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
 8002a2a:	fbb3 f3f8 	udiv	r3, r3, r8
 8002a2e:	8013      	strh	r3, [r2, #0]
		BSP_AUDIO_IN_PDMToPCM((uint16_t *) &InternalBuffer[0],
 8002a30:	f000 f9e8 	bl	8002e04 <BSP_AUDIO_IN_PDMToPCM>
				(uint16_t *) &PCM_Buf[0]);
		PCM_to_Float((uint16_t *) &PCM_Buf[0], (float32_t *) &float_array[0],
 8002a34:	2210      	movs	r2, #16
 8002a36:	4913      	ldr	r1, [pc, #76]	; (8002a84 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
 8002a38:	4810      	ldr	r0, [pc, #64]	; (8002a7c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x70>)
 8002a3a:	f7ff ff8f 	bl	800295c <PCM_to_Float>
		PCM_OUT_SIZE);
		PCM_Preprocess((float32_t *) &float_array[0],
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 8002a3e:	6829      	ldr	r1, [r5, #0]
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 8002a40:	4a11      	ldr	r2, [pc, #68]	; (8002a88 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x7c>)
 8002a42:	4810      	ldr	r0, [pc, #64]	; (8002a84 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x78>)
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 8002a44:	434c      	muls	r4, r1
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 8002a46:	4911      	ldr	r1, [pc, #68]	; (8002a8c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x80>)
				(float32_t *) &hann_window[ITCounter * PCM_OUT_SIZE],
 8002a48:	fbb4 f4f8 	udiv	r4, r4, r8
 8002a4c:	00a4      	lsls	r4, r4, #2
	arm_mult_f32(&input_ptr[0], &window[0], &output_ptr[0],
 8002a4e:	2310      	movs	r3, #16
 8002a50:	4422      	add	r2, r4
 8002a52:	4421      	add	r1, r4
 8002a54:	f7ff fe4a 	bl	80026ec <arm_mult_f32>
				(float32_t *) &FFT_Input[ITCounter * PCM_OUT_SIZE],
				PCM_OUT_SIZE);

		if (ITCounter == sample_runs) {
 8002a58:	682b      	ldr	r3, [r5, #0]
 8002a5a:	2b0f      	cmp	r3, #15
 8002a5c:	d104      	bne.n	8002a68 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5c>
			AUDIODataReady = 1;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	603b      	str	r3, [r7, #0]
			ITCounter = 0;
 8002a62:	602e      	str	r6, [r5, #0]
 8002a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else {
			ITCounter++;
 8002a68:	3301      	adds	r3, #1
 8002a6a:	602b      	str	r3, [r5, #0]
 8002a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a70:	200004ac 	.word	0x200004ac
 8002a74:	200004b0 	.word	0x200004b0
 8002a78:	200004b4 	.word	0x200004b4
 8002a7c:	20000e74 	.word	0x20000e74
 8002a80:	20000718 	.word	0x20000718
 8002a84:	20000a1c 	.word	0x20000a1c
 8002a88:	20001098 	.word	0x20001098
 8002a8c:	20000518 	.word	0x20000518

08002a90 <enablefpu>:
}

// Enable the FPU (Cortex-M4 - STM32F4xx and higher)
// http://infocenter.arm.com/help/topic/com.arm.doc.dui0553a/BEHBJHIG.html
void enablefpu() {
	__asm volatile(
 8002a90:	f8df 0014 	ldr.w	r0, [pc, #20]	; 8002aa8 <enablefpu+0x18>
 8002a94:	6801      	ldr	r1, [r0, #0]
 8002a96:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a9a:	6001      	str	r1, [r0, #0]
 8002a9c:	f3bf 8f4f 	dsb	sy
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	4770      	bx	lr
 8002aa6:	0000      	.short	0x0000
 8002aa8:	e000ed88 	.word	0xe000ed88

08002aac <timer_setup>:
			"  isb" /* reset pipeline now the FPU is enabled */);
}

int timer_setup(void)

{
 8002aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__TIM4_CLK_ENABLE();
 8002aae:	4b13      	ldr	r3, [pc, #76]	; (8002afc <timer_setup+0x50>)
	TIM_Handle.Init.Prescaler = 42000;
 8002ab0:	4c13      	ldr	r4, [pc, #76]	; (8002b00 <timer_setup+0x54>)
	__TIM4_CLK_ENABLE();
 8002ab2:	2500      	movs	r5, #0
 8002ab4:	9501      	str	r5, [sp, #4]
 8002ab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ab8:	f042 0204 	orr.w	r2, r2, #4
 8002abc:	641a      	str	r2, [r3, #64]	; 0x40
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
	TIM_Handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ac0:	60a5      	str	r5, [r4, #8]
	__TIM4_CLK_ENABLE();
 8002ac2:	f003 0304 	and.w	r3, r3, #4
 8002ac6:	9301      	str	r3, [sp, #4]
 8002ac8:	9b01      	ldr	r3, [sp, #4]
	TIM_Handle.Init.Prescaler = 42000;
 8002aca:	f24a 4310 	movw	r3, #42000	; 0xa410
 8002ace:	6063      	str	r3, [r4, #4]
	TIM_Handle.Init.Period = 80;
 8002ad0:	2350      	movs	r3, #80	; 0x50
 8002ad2:	60e3      	str	r3, [r4, #12]
	TIM_Handle.Instance = TIM4;   //Same timer whose clocks we enabled
	HAL_TIM_Base_Init(&TIM_Handle);     // Init timer
 8002ad4:	4620      	mov	r0, r4
	TIM_Handle.Instance = TIM4;   //Same timer whose clocks we enabled
 8002ad6:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <timer_setup+0x58>)
 8002ad8:	6023      	str	r3, [r4, #0]
	HAL_TIM_Base_Init(&TIM_Handle);     // Init timer
 8002ada:	f7ff fd19 	bl	8002510 <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT(&TIM_Handle); // start timer interrupts
 8002ade:	4620      	mov	r0, r4
 8002ae0:	f7ff fc00 	bl	80022e4 <HAL_TIM_Base_Start_IT>
	HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4629      	mov	r1, r5
 8002ae8:	201e      	movs	r0, #30
 8002aea:	f7fe fa41 	bl	8000f70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002aee:	201e      	movs	r0, #30
 8002af0:	f7fe fa72 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
	return 1;

}
 8002af4:	2001      	movs	r0, #1
 8002af6:	b003      	add	sp, #12
 8002af8:	bd30      	pop	{r4, r5, pc}
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	200014f8 	.word	0x200014f8
 8002b04:	40000800 	.word	0x40000800

08002b08 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void)

{
	if (__HAL_TIM_GET_FLAG(&TIM_Handle, TIM_FLAG_UPDATE) != RESET) //In case other interrupts are also running
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <TIM4_IRQHandler+0x18>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691a      	ldr	r2, [r3, #16]
 8002b0e:	07d1      	lsls	r1, r2, #31
 8002b10:	d505      	bpl.n	8002b1e <TIM4_IRQHandler+0x16>
			{
		if (__HAL_TIM_GET_ITSTATUS(&TIM_Handle, TIM_IT_UPDATE) != RESET) {
 8002b12:	68da      	ldr	r2, [r3, #12]
 8002b14:	07d2      	lsls	r2, r2, #31
			__HAL_TIM_CLEAR_FLAG(&TIM_Handle, TIM_FLAG_UPDATE);
 8002b16:	bf44      	itt	mi
 8002b18:	f06f 0201 	mvnmi.w	r2, #1
 8002b1c:	611a      	strmi	r2, [r3, #16]
 8002b1e:	4770      	bx	lr
 8002b20:	200014f8 	.word	0x200014f8

08002b24 <Hanning>:
	//		visHandle();
		}
	}
}

float32_t *Hanning(uint32_t N, uint8_t itype) {
 8002b24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t half, i, idx, n;

	memset(hann_window, 0, (N * 4));
 8002b28:	0086      	lsls	r6, r0, #2
float32_t *Hanning(uint32_t N, uint8_t itype) {
 8002b2a:	4605      	mov	r5, r0
 8002b2c:	4689      	mov	r9, r1
 8002b2e:	ed2d 8b02 	vpush	{d8}
	memset(hann_window, 0, (N * 4));
 8002b32:	4632      	mov	r2, r6
 8002b34:	2100      	movs	r1, #0
 8002b36:	484b      	ldr	r0, [pc, #300]	; (8002c64 <Hanning+0x140>)
 8002b38:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8002c64 <Hanning+0x140>
 8002b3c:	f002 fd10 	bl	8005560 <memset>

	if (itype == 1) //periodic function
 8002b40:	f1b9 0f01 	cmp.w	r9, #1
		n = N - 1;
 8002b44:	bf0c      	ite	eq
 8002b46:	f105 37ff 	addeq.w	r7, r5, #4294967295
	else
		n = N;
 8002b4a:	462f      	movne	r7, r5

	if (n % 2 == 0) {
 8002b4c:	f017 0401 	ands.w	r4, r7, #1
 8002b50:	d146      	bne.n	8002be0 <Hanning+0xbc>
		half = n / 2;
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
			hann_window[i] = 0.5 * (1 - cos(2 * PI * (i + 1) / (n + 1)));
 8002b52:	1c7b      	adds	r3, r7, #1
 8002b54:	ed9f 8a44 	vldr	s16, [pc, #272]	; 8002c68 <Hanning+0x144>
 8002b58:	ee08 3a90 	vmov	s17, r3
		half = n / 2;
 8002b5c:	ea4f 0b57 	mov.w	fp, r7, lsr #1
 8002b60:	46c2      	mov	sl, r8
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
 8002b62:	455c      	cmp	r4, fp
 8002b64:	d114      	bne.n	8002b90 <Hanning+0x6c>
 8002b66:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8002b6a:	461a      	mov	r2, r3

		idx = half - 1;
		for (i = half; i < n; i++) {
 8002b6c:	42bc      	cmp	r4, r7
 8002b6e:	d331      	bcc.n	8002bd4 <Hanning+0xb0>
			hann_window[i] = hann_window[idx];
			idx--;
		}
	}

	if (itype == 1) //periodic function
 8002b70:	f1b9 0f01 	cmp.w	r9, #1
 8002b74:	d107      	bne.n	8002b86 <Hanning+0x62>
 8002b76:	3e04      	subs	r6, #4
			{
		for (i = N - 1; i >= 1; i--)
 8002b78:	3d01      	subs	r5, #1
 8002b7a:	4446      	add	r6, r8
 8002b7c:	2d00      	cmp	r5, #0
 8002b7e:	d16c      	bne.n	8002c5a <Hanning+0x136>
			hann_window[i] = hann_window[i - 1];
		hann_window[0] = 0.0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	f8c8 3000 	str.w	r3, [r8]
	}
	return (&hann_window[0]);
}
 8002b86:	ecbd 8b02 	vpop	{d8}
 8002b8a:	4836      	ldr	r0, [pc, #216]	; (8002c64 <Hanning+0x140>)
 8002b8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			hann_window[i] = 0.5 * (1 - cos(2 * PI * (i + 1) / (n + 1)));
 8002b90:	3401      	adds	r4, #1
 8002b92:	ee07 4a90 	vmov	s15, r4
 8002b96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b9a:	eeb8 7a68 	vcvt.f32.u32	s14, s17
 8002b9e:	ee67 7a88 	vmul.f32	s15, s15, s16
 8002ba2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002ba6:	ee16 0a90 	vmov	r0, s13
 8002baa:	f7fd fc71 	bl	8000490 <__aeabi_f2d>
 8002bae:	ec41 0b10 	vmov	d0, r0, r1
 8002bb2:	f002 fcdd 	bl	8005570 <cos>
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	ec53 2b10 	vmov	r2, r3, d0
 8002bbc:	492b      	ldr	r1, [pc, #172]	; (8002c6c <Hanning+0x148>)
 8002bbe:	f7fd fb07 	bl	80001d0 <__aeabi_dsub>
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	; (8002c70 <Hanning+0x14c>)
 8002bc6:	f7fd fcb7 	bl	8000538 <__aeabi_dmul>
 8002bca:	f7fd ff97 	bl	8000afc <__aeabi_d2f>
 8002bce:	f84a 0b04 	str.w	r0, [sl], #4
 8002bd2:	e7c6      	b.n	8002b62 <Hanning+0x3e>
			hann_window[i] = hann_window[idx];
 8002bd4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8002bd8:	f842 1b04 	str.w	r1, [r2], #4
		for (i = half; i < n; i++) {
 8002bdc:	3401      	adds	r4, #1
 8002bde:	e7c5      	b.n	8002b6c <Hanning+0x48>
		half = (n + 1) / 2;
 8002be0:	1c7b      	adds	r3, r7, #1
 8002be2:	ee08 3a10 	vmov	s16, r3
			hann_window[i] = 0.5 * (1 - cos(2 * PI * (i + 1) / (n + 1)));
 8002be6:	eddf 8a20 	vldr	s17, [pc, #128]	; 8002c68 <Hanning+0x144>
		half = (n + 1) / 2;
 8002bea:	ea4f 0b53 	mov.w	fp, r3, lsr #1
 8002bee:	46c2      	mov	sl, r8
		for (i = 0; i < half; i++) //CALC_HANNING   Calculates Hanning window samples.
 8002bf0:	2400      	movs	r4, #0
 8002bf2:	455c      	cmp	r4, fp
 8002bf4:	d10f      	bne.n	8002c16 <Hanning+0xf2>
 8002bf6:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
 8002bfa:	3b02      	subs	r3, #2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	1d1a      	adds	r2, r3, #4
 8002c00:	3308      	adds	r3, #8
 8002c02:	4442      	add	r2, r8
 8002c04:	4443      	add	r3, r8
		for (i = half; i < n; i++) {
 8002c06:	42bc      	cmp	r4, r7
 8002c08:	d2b2      	bcs.n	8002b70 <Hanning+0x4c>
			hann_window[i] = hann_window[idx];
 8002c0a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8002c0e:	f843 1b04 	str.w	r1, [r3], #4
		for (i = half; i < n; i++) {
 8002c12:	3401      	adds	r4, #1
 8002c14:	e7f7      	b.n	8002c06 <Hanning+0xe2>
			hann_window[i] = 0.5 * (1 - cos(2 * PI * (i + 1) / (n + 1)));
 8002c16:	3401      	adds	r4, #1
 8002c18:	ee07 4a90 	vmov	s15, r4
 8002c1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c20:	eeb8 7a48 	vcvt.f32.u32	s14, s16
 8002c24:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8002c28:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002c2c:	ee16 0a90 	vmov	r0, s13
 8002c30:	f7fd fc2e 	bl	8000490 <__aeabi_f2d>
 8002c34:	ec41 0b10 	vmov	d0, r0, r1
 8002c38:	f002 fc9a 	bl	8005570 <cos>
 8002c3c:	2000      	movs	r0, #0
 8002c3e:	ec53 2b10 	vmov	r2, r3, d0
 8002c42:	490a      	ldr	r1, [pc, #40]	; (8002c6c <Hanning+0x148>)
 8002c44:	f7fd fac4 	bl	80001d0 <__aeabi_dsub>
 8002c48:	2200      	movs	r2, #0
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <Hanning+0x14c>)
 8002c4c:	f7fd fc74 	bl	8000538 <__aeabi_dmul>
 8002c50:	f7fd ff54 	bl	8000afc <__aeabi_d2f>
 8002c54:	f84a 0b04 	str.w	r0, [sl], #4
 8002c58:	e7cb      	b.n	8002bf2 <Hanning+0xce>
			hann_window[i] = hann_window[i - 1];
 8002c5a:	f856 3d04 	ldr.w	r3, [r6, #-4]!
 8002c5e:	6073      	str	r3, [r6, #4]
 8002c60:	3d01      	subs	r5, #1
 8002c62:	e78b      	b.n	8002b7c <Hanning+0x58>
 8002c64:	20000518 	.word	0x20000518
 8002c68:	40c90fdb 	.word	0x40c90fdb
 8002c6c:	3ff00000 	.word	0x3ff00000
 8002c70:	3fe00000 	.word	0x3fe00000

08002c74 <fft_ws2812_Init>:
void fft_ws2812_Init() {
 8002c74:	b508      	push	{r3, lr}
	enablefpu();
 8002c76:	f7ff ff0b 	bl	8002a90 <enablefpu>
	HAL_Init();
 8002c7a:	f7fe f93b 	bl	8000ef4 <HAL_Init>
	visInit();
 8002c7e:	f000 fa97 	bl	80031b0 <visInit>
	timer_setup();
 8002c82:	f7ff ff13 	bl	8002aac <timer_setup>
	BSP_LED_Init(LED4);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f83c 	bl	8002d04 <BSP_LED_Init>
	BSP_LED_Init(LED5);
 8002c8c:	2002      	movs	r0, #2
 8002c8e:	f000 f839 	bl	8002d04 <BSP_LED_Init>
	BSP_LED_Init(LED6);
 8002c92:	2003      	movs	r0, #3
 8002c94:	f000 f836 	bl	8002d04 <BSP_LED_Init>
	BSP_LED_On(LED4);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f000 f88d 	bl	8002db8 <BSP_LED_On>
	hann_ptr = Hanning((FFT_LEN), 1);
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	2080      	movs	r0, #128	; 0x80
 8002ca2:	f7ff ff3f 	bl	8002b24 <Hanning>
 8002ca6:	4b09      	ldr	r3, [pc, #36]	; (8002ccc <fft_ws2812_Init+0x58>)
	arm_rfft_fast_init_f32(&rfft_s, FFT_LEN);
 8002ca8:	2180      	movs	r1, #128	; 0x80
	hann_ptr = Hanning((FFT_LEN), 1);
 8002caa:	6018      	str	r0, [r3, #0]
	arm_rfft_fast_init_f32(&rfft_s, FFT_LEN);
 8002cac:	4808      	ldr	r0, [pc, #32]	; (8002cd0 <fft_ws2812_Init+0x5c>)
 8002cae:	f7ff fd61 	bl	8002774 <arm_rfft_fast_init_f32>
	BSP_AUDIO_IN_Init(DEFAULT_AUDIO_IN_FREQ, DEFAULT_AUDIO_IN_BIT_RESOLUTION,
 8002cb2:	2110      	movs	r1, #16
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	f44f 507a 	mov.w	r0, #16000	; 0x3e80
 8002cba:	f000 f95b 	bl	8002f74 <BSP_AUDIO_IN_Init>
	BSP_AUDIO_IN_Record((uint16_t *) &InternalBuffer[0], INTERNAL_BUFF_SIZE); // start reading pdm data into buffer
 8002cbe:	2180      	movs	r1, #128	; 0x80
 8002cc0:	4804      	ldr	r0, [pc, #16]	; (8002cd4 <fft_ws2812_Init+0x60>)
}
 8002cc2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BSP_AUDIO_IN_Record((uint16_t *) &InternalBuffer[0], INTERNAL_BUFF_SIZE); // start reading pdm data into buffer
 8002cc6:	f000 b893 	b.w	8002df0 <BSP_AUDIO_IN_Record>
 8002cca:	bf00      	nop
 8002ccc:	20000e94 	.word	0x20000e94
 8002cd0:	20000e5c 	.word	0x20000e5c
 8002cd4:	20000718 	.word	0x20000718

08002cd8 <main>:
int main(void) {
 8002cd8:	b508      	push	{r3, lr}
	fft_ws2812_Init();
 8002cda:	f7ff ffcb 	bl	8002c74 <fft_ws2812_Init>
	SystemClock_Config();
 8002cde:	f7ff fddb 	bl	8002898 <SystemClock_Config>
 8002ce2:	e7fe      	b.n	8002ce2 <main+0xa>

08002ce4 <BSP_AUDIO_IN_Error_Callback>:



void BSP_AUDIO_IN_Error_Callback(void) {
 8002ce4:	e7fe      	b.n	8002ce4 <BSP_AUDIO_IN_Error_Callback>

08002ce6 <NMI_Handler>:
 8002ce6:	4770      	bx	lr

08002ce8 <HardFault_Handler>:
/**
 * @brief  This function handles Hard Fault exception.
 * @param  None
 * @retval None
 */
void HardFault_Handler(void) {
 8002ce8:	e7fe      	b.n	8002ce8 <HardFault_Handler>

08002cea <MemManage_Handler>:
/**
 * @brief  This function handles Memory Manage exception.
 * @param  None
 * @retval None
 */
void MemManage_Handler(void) {
 8002cea:	e7fe      	b.n	8002cea <MemManage_Handler>

08002cec <BusFault_Handler>:
/**
 * @brief  This function handles Bus Fault exception.
 * @param  None
 * @retval None
 */
void BusFault_Handler(void) {
 8002cec:	e7fe      	b.n	8002cec <BusFault_Handler>

08002cee <UsageFault_Handler>:
/**
 * @brief  This function handles Usage Fault exception.
 * @param  None
 * @retval None
 */
void UsageFault_Handler(void) {
 8002cee:	e7fe      	b.n	8002cee <UsageFault_Handler>

08002cf0 <SVC_Handler>:
 8002cf0:	4770      	bx	lr

08002cf2 <DebugMon_Handler>:
 8002cf2:	4770      	bx	lr

08002cf4 <PendSV_Handler>:
/**
 * @brief  This function handles PendSVC exception.
 * @param  None
 * @retval None
 */
void PendSV_Handler(void) {
 8002cf4:	4770      	bx	lr
	...

08002cf8 <DMA1_Stream3_IRQHandler>:
 * @brief  This function handles DMA Stream interrupt request.
 * @param  None
 * @retval None
 */
void I2S2_IRQHandler(void) {
	HAL_DMA_IRQHandler(hAudioInI2s.hdmarx);
 8002cf8:	4b01      	ldr	r3, [pc, #4]	; (8002d00 <DMA1_Stream3_IRQHandler+0x8>)
 8002cfa:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002cfc:	f7fe bac0 	b.w	8001280 <HAL_DMA_IRQHandler>
 8002d00:	2000157c 	.word	0x2000157c

08002d04 <BSP_LED_Init>:
  *     @arg LED3
  *     @arg LED5
  *     @arg LED6
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8002d04:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d06:	4604      	mov	r4, r0
{
 8002d08:	b08a      	sub	sp, #40	; 0x28
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d0a:	bb08      	cbnz	r0, 8002d50 <BSP_LED_Init+0x4c>
 8002d0c:	4b27      	ldr	r3, [pc, #156]	; (8002dac <BSP_LED_Init+0xa8>)
 8002d0e:	9001      	str	r0, [sp, #4]
 8002d10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d12:	f042 0208 	orr.w	r2, r2, #8
 8002d16:	631a      	str	r2, [r3, #48]	; 0x30
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	f003 0308 	and.w	r3, r3, #8
 8002d1e:	9301      	str	r3, [sp, #4]
 8002d20:	9b01      	ldr	r3, [sp, #4]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002d22:	4b23      	ldr	r3, [pc, #140]	; (8002db0 <BSP_LED_Init+0xac>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002d24:	4d23      	ldr	r5, [pc, #140]	; (8002db4 <BSP_LED_Init+0xb0>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002d26:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002d2a:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8002d2e:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d30:	2301      	movs	r3, #1
 8002d32:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d34:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002d36:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	9308      	str	r3, [sp, #32]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8002d3c:	f7fe fb5a 	bl	80013f4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8002d40:	2200      	movs	r2, #0
 8002d42:	4631      	mov	r1, r6
 8002d44:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8002d48:	f7fe fc34 	bl	80015b4 <HAL_GPIO_WritePin>
}
 8002d4c:	b00a      	add	sp, #40	; 0x28
 8002d4e:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8002d50:	2801      	cmp	r0, #1
 8002d52:	d10c      	bne.n	8002d6e <BSP_LED_Init+0x6a>
 8002d54:	2300      	movs	r3, #0
 8002d56:	9302      	str	r3, [sp, #8]
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <BSP_LED_Init+0xa8>)
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5c:	f042 0208 	orr.w	r2, r2, #8
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	9302      	str	r3, [sp, #8]
 8002d6a:	9b02      	ldr	r3, [sp, #8]
 8002d6c:	e7d9      	b.n	8002d22 <BSP_LED_Init+0x1e>
 8002d6e:	2802      	cmp	r0, #2
 8002d70:	d10c      	bne.n	8002d8c <BSP_LED_Init+0x88>
 8002d72:	2300      	movs	r3, #0
 8002d74:	9303      	str	r3, [sp, #12]
 8002d76:	4b0d      	ldr	r3, [pc, #52]	; (8002dac <BSP_LED_Init+0xa8>)
 8002d78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d7a:	f042 0208 	orr.w	r2, r2, #8
 8002d7e:	631a      	str	r2, [r3, #48]	; 0x30
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f003 0308 	and.w	r3, r3, #8
 8002d86:	9303      	str	r3, [sp, #12]
 8002d88:	9b03      	ldr	r3, [sp, #12]
 8002d8a:	e7ca      	b.n	8002d22 <BSP_LED_Init+0x1e>
 8002d8c:	2803      	cmp	r0, #3
 8002d8e:	d1c8      	bne.n	8002d22 <BSP_LED_Init+0x1e>
 8002d90:	2300      	movs	r3, #0
 8002d92:	9304      	str	r3, [sp, #16]
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <BSP_LED_Init+0xa8>)
 8002d96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d98:	f042 0208 	orr.w	r2, r2, #8
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	9b04      	ldr	r3, [sp, #16]
 8002da8:	e7bb      	b.n	8002d22 <BSP_LED_Init+0x1e>
 8002daa:	bf00      	nop
 8002dac:	40023800 	.word	0x40023800
 8002db0:	0801a668 	.word	0x0801a668
 8002db4:	20000408 	.word	0x20000408

08002db8 <BSP_LED_On>:
  *     @arg LED5
  *     @arg LED6  
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <BSP_LED_On+0x14>)
 8002dba:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8002dbe:	4b04      	ldr	r3, [pc, #16]	; (8002dd0 <BSP_LED_On+0x18>)
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002dc6:	f7fe bbf5 	b.w	80015b4 <HAL_GPIO_WritePin>
 8002dca:	bf00      	nop
 8002dcc:	0801a668 	.word	0x0801a668
 8002dd0:	20000408 	.word	0x20000408

08002dd4 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_I2S_TxCpltCallback>:
/**
  * @brief  Tx Transfer completed callbacks.
  * @param  hi2s: I2S handle
  */
void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dd8:	b508      	push	{r3, lr}
  if(hi2s->Instance == I2S3)
 8002dda:	6802      	ldr	r2, [r0, #0]
 8002ddc:	4b02      	ldr	r3, [pc, #8]	; (8002de8 <HAL_I2S_TxCpltCallback+0x10>)
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d101      	bne.n	8002de6 <HAL_I2S_TxCpltCallback+0xe>
  {
    /* Call the user function which will manage directly transfer complete */  
    BSP_AUDIO_OUT_TransferComplete_CallBack();       
 8002de2:	f7ff fff7 	bl	8002dd4 <BSP_AUDIO_OUT_TransferComplete_CallBack>
 8002de6:	bd08      	pop	{r3, pc}
 8002de8:	40003c00 	.word	0x40003c00

08002dec <BSP_AUDIO_OUT_Error_CallBack>:
 8002dec:	4770      	bx	lr
	...

08002df0 <BSP_AUDIO_IN_Record>:
  * @param  pbuf: Main buffer pointer for the recorded data storing  
  * @param  size: Current size of the recorded buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002df0:	b508      	push	{r3, lr}
  uint32_t ret = AUDIO_ERROR;
  
  /* Start the process receive DMA */
  HAL_I2S_Receive_DMA(&hAudioInI2s, pbuf, size);
 8002df2:	b28a      	uxth	r2, r1
 8002df4:	4601      	mov	r1, r0
 8002df6:	4802      	ldr	r0, [pc, #8]	; (8002e00 <BSP_AUDIO_IN_Record+0x10>)
 8002df8:	f7fe fbe2 	bl	80015c0 <HAL_I2S_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
  
  return ret;
}
 8002dfc:	2000      	movs	r0, #0
 8002dfe:	bd08      	pop	{r3, pc}
 8002e00:	2000157c 	.word	0x2000157c

08002e04 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf: Pointer to data PDM buffer
  * @param  PCMBuf: Pointer to data PCM buffer
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_PDMToPCM(uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8002e04:	b510      	push	{r4, lr}
  uint16_t AppPDM[INTERNAL_BUFF_SIZE/2];
  uint32_t index = 0; 
  
  /* PDM Demux */
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8002e06:	2300      	movs	r3, #0
{
 8002e08:	b0a0      	sub	sp, #128	; 0x80
 8002e0a:	460c      	mov	r4, r1
  {
    AppPDM[index] = HTONS(PDMBuf[index]);
 8002e0c:	f830 1013 	ldrh.w	r1, [r0, r3, lsl #1]
 8002e10:	020a      	lsls	r2, r1, #8
 8002e12:	ea42 2211 	orr.w	r2, r2, r1, lsr #8
 8002e16:	f82d 2013 	strh.w	r2, [sp, r3, lsl #1]
  for(index = 0; index<INTERNAL_BUFF_SIZE/2; index++)
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	2b40      	cmp	r3, #64	; 0x40
 8002e1e:	d1f5      	bne.n	8002e0c <BSP_AUDIO_IN_PDMToPCM+0x8>
  }
  
  for(index = 0; index < DEFAULT_AUDIO_IN_CHANNEL_NBR; index++)
  {
    /* PDM to PCM filter */
	PDM_Filter((uint8_t*)&AppPDM[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <BSP_AUDIO_IN_PDMToPCM+0x3c>)
 8002e22:	4621      	mov	r1, r4
 8002e24:	4668      	mov	r0, sp
 8002e26:	f002 fb5b 	bl	80054e0 <PDM_Filter>
 8002e2a:	2300      	movs	r3, #0
  }
  /* Duplicate samples since a single microphone in mounted on STM32F4-Discovery */
  for(index = 0; index < PCM_OUT_SIZE; index++)
  {
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8002e2c:	5ae1      	ldrh	r1, [r4, r3]
 8002e2e:	18e2      	adds	r2, r4, r3
 8002e30:	3304      	adds	r3, #4
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8002e32:	2b40      	cmp	r3, #64	; 0x40
    PCMBuf[(index<<1)+1] = PCMBuf[index<<1];
 8002e34:	8051      	strh	r1, [r2, #2]
  for(index = 0; index < PCM_OUT_SIZE; index++)
 8002e36:	d1f9      	bne.n	8002e2c <BSP_AUDIO_IN_PDMToPCM+0x28>
  }
  
  /* Return AUDIO_OK when all operations are correctly done */
  return AUDIO_OK; 
}
 8002e38:	2000      	movs	r0, #0
 8002e3a:	b020      	add	sp, #128	; 0x80
 8002e3c:	bd10      	pop	{r4, pc}
 8002e3e:	bf00      	nop
 8002e40:	200015d0 	.word	0x200015d0

08002e44 <BSP_AUDIO_IN_ClockConfig>:
  * @param  Params : pointer on additional configuration parameters, can be NULL.   
  * @note   This API is called by BSP_AUDIO_IN_Init()
  *         Being __weak it can be overwritten by the application
  */
__weak void BSP_AUDIO_IN_ClockConfig(I2S_HandleTypeDef *hi2s, uint32_t AudioFreq, void *Params)
{
 8002e44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002e46:	460c      	mov	r4, r1
  RCC_PeriphCLKInitTypeDef rccclkinit;

  /*Enable PLLI2S clock*/
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 8002e48:	4668      	mov	r0, sp
 8002e4a:	f7ff f973 	bl	8002134 <HAL_RCCEx_GetPeriphCLKConfig>
 8002e4e:	2301      	movs	r3, #1
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((AudioFreq & 0x7) == 0)
 8002e50:	f014 0f07 	tst.w	r4, #7
  {
    /* Audio frequency multiple of 8 (8/16/32/48/96/192)*/
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 192 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 192/6 = 32 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002e54:	9300      	str	r3, [sp, #0]
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8002e56:	bf0b      	itete	eq
 8002e58:	23c0      	moveq	r3, #192	; 0xc0
  {
    /* Other Frequency (11.025/22.500/44.100) */
    /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN = 290 Mhz */
    /* I2SCLK = PLLI2S_VCO Output/PLLI2SR = 290/2 = 145 Mhz */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8002e5a:	f44f 7391 	movne.w	r3, #290	; 0x122
    rccclkinit.PLLI2S.PLLI2SN = 192;
 8002e5e:	9301      	streq	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SN = 290;
 8002e60:	9301      	strne	r3, [sp, #4]
    rccclkinit.PLLI2S.PLLI2SR = 6;
 8002e62:	bf0c      	ite	eq
 8002e64:	2306      	moveq	r3, #6
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8002e66:	2302      	movne	r3, #2
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8002e68:	4668      	mov	r0, sp
    rccclkinit.PLLI2S.PLLI2SR = 2;
 8002e6a:	9302      	str	r3, [sp, #8]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 8002e6c:	f7ff f8ca 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8002e70:	b004      	add	sp, #16
 8002e72:	bd10      	pop	{r4, pc}

08002e74 <BSP_AUDIO_IN_MspInit>:
  * @brief  BSP AUDIO IN MSP Init.
  * @param  hi2s: I2S handle
  * @param  Params : pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_AUDIO_IN_MspInit(I2S_HandleTypeDef *hi2s, void *Params)
{
 8002e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
  static DMA_HandleTypeDef hdma_i2sRx;
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the I2S2 peripheral clock */
  I2S2_CLK_ENABLE();
 8002e7a:	4c38      	ldr	r4, [pc, #224]	; (8002f5c <BSP_AUDIO_IN_MspInit+0xe8>)
 8002e7c:	2500      	movs	r5, #0
 8002e7e:	9501      	str	r5, [sp, #4]
 8002e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e86:	6423      	str	r3, [r4, #64]	; 0x40
 8002e88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	9301      	str	r3, [sp, #4]
 8002e90:	9b01      	ldr	r3, [sp, #4]

  /* Enable I2S GPIO clocks */
  I2S2_SCK_GPIO_CLK_ENABLE();
 8002e92:	9502      	str	r5, [sp, #8]
 8002e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e96:	f043 0302 	orr.w	r3, r3, #2
 8002e9a:	6323      	str	r3, [r4, #48]	; 0x30
 8002e9c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	9302      	str	r3, [sp, #8]
 8002ea4:	9b02      	ldr	r3, [sp, #8]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8002ea6:	9503      	str	r5, [sp, #12]
 8002ea8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002eaa:	f043 0304 	orr.w	r3, r3, #4
 8002eae:	6323      	str	r3, [r4, #48]	; 0x30
 8002eb0:	6b23      	ldr	r3, [r4, #48]	; 0x30
  
  /* I2S2 pins configuration: SCK and MOSI pins ------------------------------*/
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8002eb2:	9507      	str	r5, [sp, #28]
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8002eb4:	f003 0304 	and.w	r3, r3, #4
 8002eb8:	9303      	str	r3, [sp, #12]
{
 8002eba:	4606      	mov	r6, r0
  I2S2_MOSI_GPIO_CLK_ENABLE();
 8002ebc:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;

  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ebe:	4828      	ldr	r0, [pc, #160]	; (8002f60 <BSP_AUDIO_IN_MspInit+0xec>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002ec0:	2302      	movs	r3, #2
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002ec2:	f04f 0805 	mov.w	r8, #5
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ec6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8002ec8:	f44f 6780 	mov.w	r7, #1024	; 0x400
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002ecc:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8002ece:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pin       = I2S2_SCK_PIN; 
 8002ed0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_SCK_AF;
 8002ed2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_SCK_GPIO_PORT, &GPIO_InitStruct);
 8002ed6:	f7fe fa8d 	bl	80013f4 <HAL_GPIO_Init>
  
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 8002eda:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8002edc:	a905      	add	r1, sp, #20
 8002ede:	4821      	ldr	r0, [pc, #132]	; (8002f64 <BSP_AUDIO_IN_MspInit+0xf0>)
  GPIO_InitStruct.Pin       = I2S2_MOSI_PIN ;
 8002ee0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Alternate = I2S2_MOSI_AF;
 8002ee2:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
  HAL_GPIO_Init(I2S2_MOSI_GPIO_PORT, &GPIO_InitStruct); 
 8002ee6:	f7fe fa85 	bl	80013f4 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  I2S2_DMAx_CLK_ENABLE();
 8002eea:	9504      	str	r5, [sp, #16]
 8002eec:	6b23      	ldr	r3, [r4, #48]	; 0x30
    
  if(hi2s->Instance == I2S2)
 8002eee:	6832      	ldr	r2, [r6, #0]
  I2S2_DMAx_CLK_ENABLE();
 8002ef0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002ef4:	6323      	str	r3, [r4, #48]	; 0x30
 8002ef6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002efc:	9304      	str	r3, [sp, #16]
 8002efe:	9b04      	ldr	r3, [sp, #16]
  if(hi2s->Instance == I2S2)
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <BSP_AUDIO_IN_MspInit+0xf4>)
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d11f      	bne.n	8002f46 <BSP_AUDIO_IN_MspInit+0xd2>
  {
    /* Configure the hdma_i2sRx handle parameters */   
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8002f06:	4c19      	ldr	r4, [pc, #100]	; (8002f6c <BSP_AUDIO_IN_MspInit+0xf8>)
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
    
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8002f08:	63f4      	str	r4, [r6, #60]	; 0x3c
    hdma_i2sRx.Init.PeriphDataAlignment = I2S2_DMAx_PERIPH_DATA_SIZE;
 8002f0a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f0e:	6163      	str	r3, [r4, #20]
    hdma_i2sRx.Init.MemDataAlignment    = I2S2_DMAx_MEM_DATA_SIZE;
 8002f10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f14:	61a3      	str	r3, [r4, #24]
    hdma_i2sRx.Init.Mode                = DMA_CIRCULAR;
 8002f16:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f1a:	61e3      	str	r3, [r4, #28]
    hdma_i2sRx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002f20:	6223      	str	r3, [r4, #32]
    hdma_i2sRx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002f22:	2303      	movs	r3, #3
 8002f24:	62a3      	str	r3, [r4, #40]	; 0x28
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_i2sRx);
 8002f26:	4620      	mov	r0, r4
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8002f28:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <BSP_AUDIO_IN_MspInit+0xfc>)
    hdma_i2sRx.Init.Channel             = I2S2_DMAx_CHANNEL;
 8002f2a:	6065      	str	r5, [r4, #4]
    hdma_i2sRx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002f2c:	60a5      	str	r5, [r4, #8]
    hdma_i2sRx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002f2e:	60e5      	str	r5, [r4, #12]
    hdma_i2sRx.Init.MemInc              = DMA_MINC_ENABLE;
 8002f30:	6127      	str	r7, [r4, #16]
    hdma_i2sRx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8002f32:	6265      	str	r5, [r4, #36]	; 0x24
    hdma_i2sRx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002f34:	62e5      	str	r5, [r4, #44]	; 0x2c
    hdma_i2sRx.Init.PeriphBurst         = DMA_MBURST_SINGLE; 
 8002f36:	6325      	str	r5, [r4, #48]	; 0x30
    hdma_i2sRx.Instance = I2S2_DMAx_STREAM;
 8002f38:	6023      	str	r3, [r4, #0]
    __HAL_LINKDMA(hi2s, hdmarx, hdma_i2sRx);
 8002f3a:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_DMA_DeInit(&hdma_i2sRx);
 8002f3c:	f7fe f914 	bl	8001168 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_i2sRx);      
 8002f40:	4620      	mov	r0, r4
 8002f42:	f7fe f893 	bl	800106c <HAL_DMA_Init>
  }
  
  /* I2S DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(I2S2_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002f46:	2200      	movs	r2, #0
 8002f48:	210f      	movs	r1, #15
 8002f4a:	200e      	movs	r0, #14
 8002f4c:	f7fe f810 	bl	8000f70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(I2S2_DMAx_IRQ); 
 8002f50:	200e      	movs	r0, #14
 8002f52:	f7fe f841 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
}
 8002f56:	b00a      	add	sp, #40	; 0x28
 8002f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f5c:	40023800 	.word	0x40023800
 8002f60:	40020400 	.word	0x40020400
 8002f64:	40020800 	.word	0x40020800
 8002f68:	40003800 	.word	0x40003800
 8002f6c:	200004b8 	.word	0x200004b8
 8002f70:	40026058 	.word	0x40026058

08002f74 <BSP_AUDIO_IN_Init>:
{
 8002f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002f78:	4601      	mov	r1, r0
{
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	4607      	mov	r7, r0
 8002f7e:	4691      	mov	r9, r2
  BSP_AUDIO_IN_ClockConfig(&hAudioInI2s, AudioFreq, NULL);
 8002f80:	482f      	ldr	r0, [pc, #188]	; (8003040 <BSP_AUDIO_IN_Init+0xcc>)
 8002f82:	4c30      	ldr	r4, [pc, #192]	; (8003044 <BSP_AUDIO_IN_Init+0xd0>)
 8002f84:	4e30      	ldr	r6, [pc, #192]	; (8003048 <BSP_AUDIO_IN_Init+0xd4>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	f7ff ff5c 	bl	8002e44 <BSP_AUDIO_IN_ClockConfig>
static void PDMDecoder_Init(uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
  uint32_t index = 0;

  /* Enable CRC peripheral to unlock the PDM library */
  __HAL_RCC_CRC_CLK_ENABLE();
 8002f8c:	2500      	movs	r5, #0
 8002f8e:	4b2f      	ldr	r3, [pc, #188]	; (800304c <BSP_AUDIO_IN_Init+0xd8>)
 8002f90:	9503      	str	r5, [sp, #12]
 8002f92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f94:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f98:	631a      	str	r2, [r3, #48]	; 0x30
 8002f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fa0:	9303      	str	r3, [sp, #12]
 8002fa2:	9b03      	ldr	r3, [sp, #12]
  for(index = 0; index < ChnlNbrIn; index++)
  {
    /* Init PDM filters */
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8002fa4:	4b2a      	ldr	r3, [pc, #168]	; (8003050 <BSP_AUDIO_IN_Init+0xdc>)
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));

    /* PDM lib config phase */
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8002fa6:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 8002faa:	46aa      	mov	sl, r5
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8002fac:	fbb7 f8f8 	udiv	r8, r7, r8
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8002fb0:	f04f 0b02 	mov.w	fp, #2
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8002fb4:	fa1f f888 	uxth.w	r8, r8
  for(index = 0; index < ChnlNbrIn; index++)
 8002fb8:	45a9      	cmp	r9, r5
 8002fba:	d125      	bne.n	8003008 <BSP_AUDIO_IN_Init+0x94>
  hAudioInI2s.Instance = I2S2;
 8002fbc:	4c20      	ldr	r4, [pc, #128]	; (8003040 <BSP_AUDIO_IN_Init+0xcc>)
 8002fbe:	4d25      	ldr	r5, [pc, #148]	; (8003054 <BSP_AUDIO_IN_Init+0xe0>)
 8002fc0:	6025      	str	r5, [r4, #0]
  if(HAL_I2S_GetState(&hAudioInI2s) == HAL_I2S_STATE_RESET)
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7fe fc9d 	bl	8001902 <HAL_I2S_GetState>
 8002fc8:	4601      	mov	r1, r0
 8002fca:	b910      	cbnz	r0, 8002fd2 <BSP_AUDIO_IN_Init+0x5e>
    BSP_AUDIO_IN_MspInit(&hAudioInI2s, NULL);
 8002fcc:	4620      	mov	r0, r4
 8002fce:	f7ff ff51 	bl	8002e74 <BSP_AUDIO_IN_MspInit>
{
  /* Initialize the hAudioInI2s Instance parameter */
  hAudioInI2s.Instance          = I2S2;
  
  /* Disable I2S block */
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8002fd2:	69eb      	ldr	r3, [r5, #28]
  hAudioInI2s.Instance          = I2S2;
 8002fd4:	6025      	str	r5, [r4, #0]
  __HAL_I2S_DISABLE(&hAudioInI2s);
 8002fd6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002fda:	041b      	lsls	r3, r3, #16
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	61eb      	str	r3, [r5, #28]
  
  /* I2S2 peripheral configuration */
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
  hAudioInI2s.Init.CPOL         = I2S_CPOL_HIGH;
 8002fe0:	2308      	movs	r3, #8
 8002fe2:	61a3      	str	r3, [r4, #24]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 8002fe4:	f44f 7340 	mov.w	r3, #768	; 0x300
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 8002fe8:	2500      	movs	r5, #0
  hAudioInI2s.Init.Mode         = I2S_MODE_MASTER_RX;
 8002fea:	6063      	str	r3, [r4, #4]
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8002fec:	007f      	lsls	r7, r7, #1
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8002fee:	2320      	movs	r3, #32

  /* Initialize the I2S peripheral with the structure above */  
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8002ff0:	4813      	ldr	r0, [pc, #76]	; (8003040 <BSP_AUDIO_IN_Init+0xcc>)
  hAudioInI2s.Init.AudioFreq    = 2 * AudioFreq;
 8002ff2:	6167      	str	r7, [r4, #20]
  hAudioInI2s.Init.ClockSource  = I2S_CLOCK_PLL;
 8002ff4:	61e5      	str	r5, [r4, #28]
  hAudioInI2s.Init.DataFormat   = I2S_DATAFORMAT_16B;
 8002ff6:	60e5      	str	r5, [r4, #12]
  hAudioInI2s.Init.MCLKOutput   = I2S_MCLKOUTPUT_DISABLE;
 8002ff8:	6125      	str	r5, [r4, #16]
  hAudioInI2s.Init.Standard     = I2S_STANDARD_LSB;
 8002ffa:	60a3      	str	r3, [r4, #8]
  if(HAL_I2S_Init(&hAudioInI2s) != HAL_OK)
 8002ffc:	f7fe fb58 	bl	80016b0 <HAL_I2S_Init>
}
 8003000:	4628      	mov	r0, r5
 8003002:	b005      	add	sp, #20
 8003004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8003008:	6063      	str	r3, [r4, #4]
    PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_LSB;
 800300a:	f8a4 a000 	strh.w	sl, [r4]
    PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800300e:	f8a4 a002 	strh.w	sl, [r4, #2]
    PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8003012:	f8a4 b00a 	strh.w	fp, [r4, #10]
    PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8003016:	f8a4 9008 	strh.w	r9, [r4, #8]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800301a:	4620      	mov	r0, r4
    PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800301c:	9301      	str	r3, [sp, #4]
    PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800301e:	f002 f8cb 	bl	80051b8 <PDM_Filter_Init>
    PDM_FilterConfig[index].mic_gain = 24;
 8003022:	2218      	movs	r2, #24
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8003024:	4631      	mov	r1, r6
 8003026:	4620      	mov	r0, r4
    PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 8003028:	f8a6 8002 	strh.w	r8, [r6, #2]
    PDM_FilterConfig[index].mic_gain = 24;
 800302c:	80b2      	strh	r2, [r6, #4]
    PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800302e:	f8a6 b000 	strh.w	fp, [r6]
  for(index = 0; index < ChnlNbrIn; index++)
 8003032:	3501      	adds	r5, #1
    PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8003034:	f002 f95a 	bl	80052ec <PDM_Filter_setConfig>
 8003038:	344c      	adds	r4, #76	; 0x4c
 800303a:	3606      	adds	r6, #6
 800303c:	9b01      	ldr	r3, [sp, #4]
 800303e:	e7bb      	b.n	8002fb8 <BSP_AUDIO_IN_Init+0x44>
 8003040:	2000157c 	.word	0x2000157c
 8003044:	200015d0 	.word	0x200015d0
 8003048:	200015c4 	.word	0x200015c4
 800304c:	40023800 	.word	0x40023800
 8003050:	7e809d48 	.word	0x7e809d48
 8003054:	40003800 	.word	0x40003800

08003058 <HAL_I2S_RxCpltCallback>:
{
 8003058:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_TransferComplete_CallBack();
 800305a:	f7ff fc95 	bl	8002988 <BSP_AUDIO_IN_TransferComplete_CallBack>
 800305e:	bd08      	pop	{r3, pc}

08003060 <HAL_I2S_RxHalfCpltCallback>:
{
 8003060:	b508      	push	{r3, lr}
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8003062:	f7ff fcd3 	bl	8002a0c <BSP_AUDIO_IN_HalfTransfer_CallBack>
 8003066:	bd08      	pop	{r3, pc}

08003068 <HAL_I2S_ErrorCallback>:
  */
void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
  /* Manage the error generated on DMA FIFO: This function 
     should be coded by user (its prototype is already declared in stm32f4_discovery_audio.h) */  
  if(hi2s->Instance == I2S3)
 8003068:	6802      	ldr	r2, [r0, #0]
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <HAL_I2S_ErrorCallback+0x20>)
 800306c:	429a      	cmp	r2, r3
{
 800306e:	b510      	push	{r4, lr}
 8003070:	4604      	mov	r4, r0
  if(hi2s->Instance == I2S3)
 8003072:	d101      	bne.n	8003078 <HAL_I2S_ErrorCallback+0x10>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 8003074:	f7ff feba 	bl	8002dec <BSP_AUDIO_OUT_Error_CallBack>
  }
  if(hi2s->Instance == I2S2)
 8003078:	6822      	ldr	r2, [r4, #0]
 800307a:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_I2S_ErrorCallback+0x24>)
 800307c:	429a      	cmp	r2, r3
 800307e:	d101      	bne.n	8003084 <HAL_I2S_ErrorCallback+0x1c>
  {
    BSP_AUDIO_IN_Error_Callback();
 8003080:	f7ff fe30 	bl	8002ce4 <BSP_AUDIO_IN_Error_Callback>
 8003084:	bd10      	pop	{r4, pc}
 8003086:	bf00      	nop
 8003088:	40003c00 	.word	0x40003c00
 800308c:	40003800 	.word	0x40003800

08003090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003090:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003092:	2007      	movs	r0, #7
 8003094:	f7fd ff5a 	bl	8000f4c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003098:	2200      	movs	r2, #0
 800309a:	4611      	mov	r1, r2
 800309c:	f06f 000b 	mvn.w	r0, #11
 80030a0:	f7fd ff66 	bl	8000f70 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80030a4:	2200      	movs	r2, #0
 80030a6:	4611      	mov	r1, r2
 80030a8:	f06f 000a 	mvn.w	r0, #10
 80030ac:	f7fd ff60 	bl	8000f70 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80030b0:	2200      	movs	r2, #0
 80030b2:	4611      	mov	r1, r2
 80030b4:	f06f 0009 	mvn.w	r0, #9
 80030b8:	f7fd ff5a 	bl	8000f70 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80030bc:	2200      	movs	r2, #0
 80030be:	4611      	mov	r1, r2
 80030c0:	f06f 0004 	mvn.w	r0, #4
 80030c4:	f7fd ff54 	bl	8000f70 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80030c8:	2200      	movs	r2, #0
 80030ca:	4611      	mov	r1, r2
 80030cc:	f06f 0003 	mvn.w	r0, #3
 80030d0:	f7fd ff4e 	bl	8000f70 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80030d4:	2200      	movs	r2, #0
 80030d6:	4611      	mov	r1, r2
 80030d8:	f06f 0001 	mvn.w	r0, #1
 80030dc:	f7fd ff48 	bl	8000f70 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030e0:	2200      	movs	r2, #0
 80030e2:	4611      	mov	r1, r2
 80030e4:	f04f 30ff 	mov.w	r0, #4294967295

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80030ec:	f7fd bf40 	b.w	8000f70 <HAL_NVIC_SetPriority>

080030f0 <HAL_I2S_MspInit>:
  }

}

void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80030f0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2s->Instance==SPI3)
 80030f2:	6802      	ldr	r2, [r0, #0]
 80030f4:	4b14      	ldr	r3, [pc, #80]	; (8003148 <HAL_I2S_MspInit+0x58>)
 80030f6:	429a      	cmp	r2, r3
{
 80030f8:	b086      	sub	sp, #24
  if(hi2s->Instance==SPI3)
 80030fa:	d123      	bne.n	8003144 <HAL_I2S_MspInit+0x54>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80030fc:	2400      	movs	r4, #0
 80030fe:	f503 33fe 	add.w	r3, r3, #130048	; 0x1fc00
 8003102:	9400      	str	r4, [sp, #0]
 8003104:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003106:	4811      	ldr	r0, [pc, #68]	; (800314c <HAL_I2S_MspInit+0x5c>)
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003108:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800310c:	641a      	str	r2, [r3, #64]	; 0x40
 800310e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003110:	9403      	str	r4, [sp, #12]
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311a:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800311c:	2310      	movs	r3, #16
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800311e:	2602      	movs	r6, #2
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003120:	2506      	movs	r5, #6
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8003122:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8003124:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003126:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003128:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800312a:	f7fe f963 	bl	80013f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800312e:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003132:	a901      	add	r1, sp, #4
 8003134:	4806      	ldr	r0, [pc, #24]	; (8003150 <HAL_I2S_MspInit+0x60>)
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8003136:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003138:	9602      	str	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313a:	9403      	str	r4, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800313c:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800313e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003140:	f7fe f958 	bl	80013f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003144:	b006      	add	sp, #24
 8003146:	bd70      	pop	{r4, r5, r6, pc}
 8003148:	40003c00 	.word	0x40003c00
 800314c:	40020000 	.word	0x40020000
 8003150:	40020800 	.word	0x40020800

08003154 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003154:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003156:	f7fd fee7 	bl	8000f28 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800315a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800315e:	f7fd bf6a 	b.w	8001036 <HAL_SYSTICK_IRQHandler>
	...

08003164 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003164:	490f      	ldr	r1, [pc, #60]	; (80031a4 <SystemInit+0x40>)
 8003166:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800316a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003172:	4b0d      	ldr	r3, [pc, #52]	; (80031a8 <SystemInit+0x44>)
 8003174:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003176:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8003178:	f042 0201 	orr.w	r2, r2, #1
 800317c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800317e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8003186:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800318a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800318c:	4a07      	ldr	r2, [pc, #28]	; (80031ac <SystemInit+0x48>)
 800318e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003196:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8003198:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800319a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800319e:	608b      	str	r3, [r1, #8]
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	e000ed00 	.word	0xe000ed00
 80031a8:	40023800 	.word	0x40023800
 80031ac:	24003010 	.word	0x24003010

080031b0 <visInit>:
		break;
	}
	return out;
}

void visInit() {
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	i_test = 0;

	memset(frame_Buffer, 0, sizeof(frame_Buffer));
 80031b2:	4e0d      	ldr	r6, [pc, #52]	; (80031e8 <visInit+0x38>)
	i_test = 0;
 80031b4:	4b0d      	ldr	r3, [pc, #52]	; (80031ec <visInit+0x3c>)
	memset(frame_Buffer2, 0, sizeof(frame_Buffer2));
 80031b6:	4f0e      	ldr	r7, [pc, #56]	; (80031f0 <visInit+0x40>)
	i_test = 0;
 80031b8:	2500      	movs	r5, #0
	memset(frame_Buffer, 0, sizeof(frame_Buffer));
 80031ba:	24c0      	movs	r4, #192	; 0xc0
 80031bc:	4622      	mov	r2, r4
 80031be:	4629      	mov	r1, r5
 80031c0:	4630      	mov	r0, r6
	i_test = 0;
 80031c2:	701d      	strb	r5, [r3, #0]
	memset(frame_Buffer, 0, sizeof(frame_Buffer));
 80031c4:	f002 f9cc 	bl	8005560 <memset>
	memset(frame_Buffer2, 0, sizeof(frame_Buffer2));
 80031c8:	4622      	mov	r2, r4
 80031ca:	4629      	mov	r1, r5
 80031cc:	4638      	mov	r0, r7
 80031ce:	f002 f9c7 	bl	8005560 <memset>
	ws2812b_init(&frame_Buffer[0], &frame_Buffer2[0], (3 * (FFT_LEN / 2)));
 80031d2:	4622      	mov	r2, r4
 80031d4:	4639      	mov	r1, r7
 80031d6:	4630      	mov	r0, r6
 80031d8:	f000 f816 	bl	8003208 <ws2812b_init>
	ws2812b.transferComplete = 1;
 80031dc:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <visInit+0x44>)
 80031de:	2201      	movs	r2, #1
 80031e0:	f883 2020 	strb.w	r2, [r3, #32]
 80031e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031e6:	bf00      	nop
 80031e8:	20001298 	.word	0x20001298
 80031ec:	20001498 	.word	0x20001498
 80031f0:	200013d8 	.word	0x200013d8
 80031f4:	200013ac 	.word	0x200013ac

080031f8 <DMA_TransferError>:

	// start TIM2
	__HAL_TIM_ENABLE(&TIM1_handle);
}

void DMA_TransferError(DMA_HandleTypeDef *DmaHandle) {
 80031f8:	b082      	sub	sp, #8
	volatile int i = 0;
 80031fa:	2300      	movs	r3, #0
 80031fc:	9301      	str	r3, [sp, #4]
	i++;
 80031fe:	9b01      	ldr	r3, [sp, #4]
 8003200:	3301      	adds	r3, #1
 8003202:	9301      	str	r3, [sp, #4]
}
 8003204:	b002      	add	sp, #8
 8003206:	4770      	bx	lr

08003208 <ws2812b_init>:
void ws2812b_init(uint8_t * buf1, uint8_t* buf2, uint16_t buf_len) {
 8003208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800320c:	b08d      	sub	sp, #52	; 0x34
	WS2812B_GPIO_CLK_ENABLE()
 800320e:	2400      	movs	r4, #0
 8003210:	4e9c      	ldr	r6, [pc, #624]	; (8003484 <ws2812b_init+0x27c>)
 8003212:	9405      	str	r4, [sp, #20]
 8003214:	6b33      	ldr	r3, [r6, #48]	; 0x30
void ws2812b_init(uint8_t * buf1, uint8_t* buf2, uint16_t buf_len) {
 8003216:	9201      	str	r2, [sp, #4]
	WS2812B_GPIO_CLK_ENABLE()
 8003218:	f043 0304 	orr.w	r3, r3, #4
void ws2812b_init(uint8_t * buf1, uint8_t* buf2, uint16_t buf_len) {
 800321c:	9002      	str	r0, [sp, #8]
 800321e:	9103      	str	r1, [sp, #12]
	WS2812B_GPIO_CLK_ENABLE()
 8003220:	6333      	str	r3, [r6, #48]	; 0x30
 8003222:	6b33      	ldr	r3, [r6, #48]	; 0x30
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8003224:	4898      	ldr	r0, [pc, #608]	; (8003488 <ws2812b_init+0x280>)
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003226:	9409      	str	r4, [sp, #36]	; 0x24
	WS2812B_GPIO_CLK_ENABLE()
 8003228:	f003 0304 	and.w	r3, r3, #4
	GPIO_InitStruct.Pin = WS2812B_PINS;
 800322c:	2501      	movs	r5, #1
	WS2812B_GPIO_CLK_ENABLE()
 800322e:	9305      	str	r3, [sp, #20]
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 8003230:	a907      	add	r1, sp, #28
	WS2812B_GPIO_CLK_ENABLE()
 8003232:	9b05      	ldr	r3, [sp, #20]
	GPIO_InitStruct.Pin = WS2812B_PINS;
 8003234:	9507      	str	r5, [sp, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003236:	9508      	str	r5, [sp, #32]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003238:	940a      	str	r4, [sp, #40]	; 0x28
	HAL_GPIO_Init(WS2812B_PORT, &GPIO_InitStruct);
 800323a:	f7fe f8db 	bl	80013f4 <HAL_GPIO_Init>
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800323e:	9406      	str	r4, [sp, #24]
 8003240:	6b33      	ldr	r3, [r6, #48]	; 0x30
	HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8003242:	4892      	ldr	r0, [pc, #584]	; (800348c <ws2812b_init+0x284>)
	__HAL_RCC_GPIOD_CLK_ENABLE()
 8003244:	f043 0308 	orr.w	r3, r3, #8
 8003248:	6333      	str	r3, [r6, #48]	; 0x30
 800324a:	6b33      	ldr	r3, [r6, #48]	; 0x30
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800324c:	9508      	str	r5, [sp, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE()
 800324e:	f003 0308 	and.w	r3, r3, #8
 8003252:	9306      	str	r3, [sp, #24]
 8003254:	9b06      	ldr	r3, [sp, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003256:	9409      	str	r4, [sp, #36]	; 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003258:	2302      	movs	r3, #2
 800325a:	930a      	str	r3, [sp, #40]	; 0x28
	HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 800325c:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = LED_BLUE_PIN;
 800325e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003262:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(LED_BLUE_PORT, &GPIO_InitStruct);
 8003264:	f7fe f8c6 	bl	80013f4 <HAL_GPIO_Init>
	HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8003268:	a907      	add	r1, sp, #28
	GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 800326a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
	HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 800326e:	4887      	ldr	r0, [pc, #540]	; (800348c <ws2812b_init+0x284>)
	GPIO_InitStruct.Pin = LED_ORANGE_PIN;
 8003270:	9307      	str	r3, [sp, #28]
	HAL_GPIO_Init(LED_ORANGE_PORT, &GPIO_InitStruct);
 8003272:	f7fe f8bf 	bl	80013f4 <HAL_GPIO_Init>
	__HAL_RCC_DMA2_CLK_ENABLE()
 8003276:	9407      	str	r4, [sp, #28]
 8003278:	6b33      	ldr	r3, [r6, #48]	; 0x30
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800327a:	4d85      	ldr	r5, [pc, #532]	; (8003490 <ws2812b_init+0x288>)
	__HAL_RCC_DMA2_CLK_ENABLE()
 800327c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003280:	6333      	str	r3, [r6, #48]	; 0x30
 8003282:	6b33      	ldr	r3, [r6, #48]	; 0x30
	dmaUpdate.Init.PeriphInc = DMA_PINC_DISABLE;
 8003284:	60ec      	str	r4, [r5, #12]
	__HAL_RCC_DMA2_CLK_ENABLE()
 8003286:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328a:	9307      	str	r3, [sp, #28]
 800328c:	9b07      	ldr	r3, [sp, #28]
	dmaUpdate.Init.MemInc = DMA_MINC_DISABLE;
 800328e:	612c      	str	r4, [r5, #16]
	dmaUpdate.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003290:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003294:	616b      	str	r3, [r5, #20]
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003296:	f44f 4380 	mov.w	r3, #16384	; 0x4000
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 800329a:	f04f 6740 	mov.w	r7, #201326592	; 0xc000000
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800329e:	f04f 0a40 	mov.w	sl, #64	; 0x40
	dmaUpdate.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032a2:	61ab      	str	r3, [r5, #24]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 80032a4:	f44f 7980 	mov.w	r9, #256	; 0x100
	dmaUpdate.Instance = DMA2_Stream5;
 80032a8:	4b7a      	ldr	r3, [pc, #488]	; (8003494 <ws2812b_init+0x28c>)
 80032aa:	602b      	str	r3, [r5, #0]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032ac:	f44f 3840 	mov.w	r8, #196608	; 0x30000
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032b0:	f04f 0b03 	mov.w	fp, #3
	HAL_DMA_DeInit(&dmaUpdate);
 80032b4:	4628      	mov	r0, r5
	dmaUpdate.Init.Channel = DMA_CHANNEL_6;
 80032b6:	606f      	str	r7, [r5, #4]
	dmaUpdate.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032b8:	f8c5 a008 	str.w	sl, [r5, #8]
	dmaUpdate.Init.Mode = DMA_CIRCULAR;
 80032bc:	f8c5 901c 	str.w	r9, [r5, #28]
	dmaUpdate.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80032c0:	f8c5 8020 	str.w	r8, [r5, #32]
	dmaUpdate.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80032c4:	626c      	str	r4, [r5, #36]	; 0x24
	dmaUpdate.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80032c6:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	dmaUpdate.Init.MemBurst = DMA_MBURST_SINGLE;
 80032ca:	62ec      	str	r4, [r5, #44]	; 0x2c
	dmaUpdate.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80032cc:	632c      	str	r4, [r5, #48]	; 0x30
	HAL_DMA_DeInit(&dmaUpdate);
 80032ce:	f7fd ff4b 	bl	8001168 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaUpdate);
 80032d2:	4628      	mov	r0, r5
 80032d4:	f7fd feca 	bl	800106c <HAL_DMA_Init>
	HAL_DMA_Start(&dmaUpdate, (uint32_t) WS2812_IO_High,
 80032d8:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <ws2812b_init+0x290>)
 80032da:	4970      	ldr	r1, [pc, #448]	; (800349c <ws2812b_init+0x294>)
 80032dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80032e0:	4628      	mov	r0, r5
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80032e2:	4d6f      	ldr	r5, [pc, #444]	; (80034a0 <ws2812b_init+0x298>)
	HAL_DMA_Start(&dmaUpdate, (uint32_t) WS2812_IO_High,
 80032e4:	f7fd ff64 	bl	80011b0 <HAL_DMA_Start>
	dmaCC1.Init.MemInc = DMA_MINC_ENABLE;
 80032e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032ec:	612b      	str	r3, [r5, #16]
	dmaCC1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80032ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80032f2:	616b      	str	r3, [r5, #20]
	dmaCC1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80032f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80032f8:	61ab      	str	r3, [r5, #24]
	HAL_DMA_DeInit(&dmaCC1);
 80032fa:	4628      	mov	r0, r5
	dmaCC1.Instance = DMA2_Stream1;
 80032fc:	4b69      	ldr	r3, [pc, #420]	; (80034a4 <ws2812b_init+0x29c>)
 80032fe:	602b      	str	r3, [r5, #0]
	dmaCC1.Init.Channel = DMA_CHANNEL_6;
 8003300:	606f      	str	r7, [r5, #4]
	dmaCC1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003302:	f8c5 a008 	str.w	sl, [r5, #8]
	dmaCC1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003306:	60ec      	str	r4, [r5, #12]
	dmaCC1.Init.Mode = DMA_CIRCULAR;
 8003308:	f8c5 901c 	str.w	r9, [r5, #28]
	dmaCC1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800330c:	f8c5 8020 	str.w	r8, [r5, #32]
	dmaCC1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003310:	626c      	str	r4, [r5, #36]	; 0x24
	dmaCC1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003312:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	dmaCC1.Init.MemBurst = DMA_MBURST_SINGLE;
 8003316:	62ec      	str	r4, [r5, #44]	; 0x2c
	dmaCC1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8003318:	632c      	str	r4, [r5, #48]	; 0x30
	HAL_DMA_DeInit(&dmaCC1);
 800331a:	f7fd ff25 	bl	8001168 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC1);
 800331e:	4628      	mov	r0, r5
 8003320:	f7fd fea4 	bl	800106c <HAL_DMA_Init>
	HAL_DMA_Start(&dmaCC1, (uint32_t) ws2812bDmaBitBuffer,
 8003324:	4a60      	ldr	r2, [pc, #384]	; (80034a8 <ws2812b_init+0x2a0>)
 8003326:	4961      	ldr	r1, [pc, #388]	; (80034ac <ws2812b_init+0x2a4>)
 8003328:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800332c:	4628      	mov	r0, r5
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800332e:	4d60      	ldr	r5, [pc, #384]	; (80034b0 <ws2812b_init+0x2a8>)
	HAL_DMA_Start(&dmaCC1, (uint32_t) ws2812bDmaBitBuffer,
 8003330:	f7fd ff3e 	bl	80011b0 <HAL_DMA_Start>
	dmaCC2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003334:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003338:	616b      	str	r3, [r5, #20]
	dmaCC2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800333a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800333e:	61ab      	str	r3, [r5, #24]
	dmaCC2.Instance = DMA2_Stream2;
 8003340:	4b5c      	ldr	r3, [pc, #368]	; (80034b4 <ws2812b_init+0x2ac>)
 8003342:	602b      	str	r3, [r5, #0]
	dmaCC2.XferCpltCallback = DMA_TransferCompleteHandler;
 8003344:	4b5c      	ldr	r3, [pc, #368]	; (80034b8 <ws2812b_init+0x2b0>)
 8003346:	63eb      	str	r3, [r5, #60]	; 0x3c
	dmaCC2.XferHalfCpltCallback = DMA_TransferHalfHandler;
 8003348:	4b5c      	ldr	r3, [pc, #368]	; (80034bc <ws2812b_init+0x2b4>)
 800334a:	642b      	str	r3, [r5, #64]	; 0x40
	HAL_DMA_DeInit(&dmaCC2);
 800334c:	4628      	mov	r0, r5
	dmaCC2.XferErrorCallback = DMA_TransferError;
 800334e:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <ws2812b_init+0x2b8>)
 8003350:	64eb      	str	r3, [r5, #76]	; 0x4c
	dmaCC2.Init.Channel = DMA_CHANNEL_6;
 8003352:	606f      	str	r7, [r5, #4]
	dmaCC2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003354:	f8c5 a008 	str.w	sl, [r5, #8]
	dmaCC2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003358:	60ec      	str	r4, [r5, #12]
	dmaCC2.Init.MemInc = DMA_MINC_DISABLE;
 800335a:	612c      	str	r4, [r5, #16]
	dmaCC2.Init.Mode = DMA_CIRCULAR;
 800335c:	f8c5 901c 	str.w	r9, [r5, #28]
	dmaCC2.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8003360:	f8c5 8020 	str.w	r8, [r5, #32]
	dmaCC2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003364:	626c      	str	r4, [r5, #36]	; 0x24
	dmaCC2.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003366:	f8c5 b028 	str.w	fp, [r5, #40]	; 0x28
	dmaCC2.Init.MemBurst = DMA_MBURST_SINGLE;
 800336a:	62ec      	str	r4, [r5, #44]	; 0x2c
	dmaCC2.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800336c:	632c      	str	r4, [r5, #48]	; 0x30
	HAL_DMA_DeInit(&dmaCC2);
 800336e:	f7fd fefb 	bl	8001168 <HAL_DMA_DeInit>
	HAL_DMA_Init(&dmaCC2);
 8003372:	4628      	mov	r0, r5
 8003374:	f7fd fe7a 	bl	800106c <HAL_DMA_Init>
	HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8003378:	4622      	mov	r2, r4
 800337a:	4621      	mov	r1, r4
 800337c:	203a      	movs	r0, #58	; 0x3a
 800337e:	f7fd fdf7 	bl	8000f70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003382:	203a      	movs	r0, #58	; 0x3a
 8003384:	f7fd fe28 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
	HAL_DMA_Start_IT(&dmaCC2, (uint32_t) WS2812_IO_Low,
 8003388:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800338c:	4a42      	ldr	r2, [pc, #264]	; (8003498 <ws2812b_init+0x290>)
 800338e:	494d      	ldr	r1, [pc, #308]	; (80034c4 <ws2812b_init+0x2bc>)
 8003390:	4628      	mov	r0, r5
 8003392:	f7fd ff37 	bl	8001204 <HAL_DMA_Start_IT>
	__HAL_RCC_TIM1_CLK_ENABLE()
 8003396:	9404      	str	r4, [sp, #16]
 8003398:	6c73      	ldr	r3, [r6, #68]	; 0x44
	tim_period = SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 800339a:	494b      	ldr	r1, [pc, #300]	; (80034c8 <ws2812b_init+0x2c0>)
	TIM1_handle.Instance = TIM1;
 800339c:	4d4b      	ldr	r5, [pc, #300]	; (80034cc <ws2812b_init+0x2c4>)
	__HAL_RCC_TIM1_CLK_ENABLE()
 800339e:	f043 0301 	orr.w	r3, r3, #1
 80033a2:	6473      	str	r3, [r6, #68]	; 0x44
 80033a4:	6c73      	ldr	r3, [r6, #68]	; 0x44
	TIM1_handle.Init.RepetitionCounter = 0;
 80033a6:	616c      	str	r4, [r5, #20]
	__HAL_RCC_TIM1_CLK_ENABLE()
 80033a8:	f003 0301 	and.w	r3, r3, #1
 80033ac:	9304      	str	r3, [sp, #16]
 80033ae:	9b04      	ldr	r3, [sp, #16]
	tim_period = SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80033b0:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <ws2812b_init+0x2c8>)
	TIM1_handle.Init.Prescaler = 0;
 80033b2:	606c      	str	r4, [r5, #4]
	tim_period = SystemCoreClock / 800000; // 0,125us period (10 times lower the 1,25us period to have fixed math below)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b47      	ldr	r3, [pc, #284]	; (80034d4 <ws2812b_init+0x2cc>)
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	600b      	str	r3, [r1, #0]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 80033be:	f44f 4196 	mov.w	r1, #19200	; 0x4b00
 80033c2:	fbb2 f2f1 	udiv	r2, r2, r1
 80033c6:	4944      	ldr	r1, [pc, #272]	; (80034d8 <ws2812b_init+0x2d0>)
	TIM1_handle.Init.Period = tim_period;
 80033c8:	60eb      	str	r3, [r5, #12]
	timer_reset_pulse_period = (SystemCoreClock / (320 * 60)); // 60us just to be sure
 80033ca:	600a      	str	r2, [r1, #0]
	uint32_t cc1 = (10 * tim_period) / 36;
 80033cc:	260a      	movs	r6, #10
	TIM1_handle.Instance = TIM1;
 80033ce:	4a43      	ldr	r2, [pc, #268]	; (80034dc <ws2812b_init+0x2d4>)
 80033d0:	602a      	str	r2, [r5, #0]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80033d2:	4628      	mov	r0, r5
	uint32_t cc1 = (10 * tim_period) / 36;
 80033d4:	435e      	muls	r6, r3
	TIM1_handle.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033d6:	612c      	str	r4, [r5, #16]
	TIM1_handle.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033d8:	60ac      	str	r4, [r5, #8]
	HAL_TIM_PWM_Init(&TIM1_handle);
 80033da:	f7ff f8b3 	bl	8002544 <HAL_TIM_PWM_Init>
	HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80033de:	4622      	mov	r2, r4
 80033e0:	4621      	mov	r1, r4
 80033e2:	2019      	movs	r0, #25
 80033e4:	f7fd fdc4 	bl	8000f70 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80033e8:	2019      	movs	r0, #25
 80033ea:	f7fd fdf5 	bl	8000fd8 <HAL_NVIC_EnableIRQ>
	tim2OC1.OCMode = TIM_OCMODE_PWM1;
 80033ee:	493c      	ldr	r1, [pc, #240]	; (80034e0 <ws2812b_init+0x2d8>)
 80033f0:	2760      	movs	r7, #96	; 0x60
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 80033f2:	4622      	mov	r2, r4
 80033f4:	4628      	mov	r0, r5
	tim2OC1.OCMode = TIM_OCMODE_PWM1;
 80033f6:	600f      	str	r7, [r1, #0]
	tim2OC1.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033f8:	608c      	str	r4, [r1, #8]
	tim2OC1.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033fa:	60cc      	str	r4, [r1, #12]
	tim2OC1.OCFastMode = TIM_OCFAST_DISABLE;
 80033fc:	610c      	str	r4, [r1, #16]
	uint32_t cc1 = (10 * tim_period) / 36;
 80033fe:	2324      	movs	r3, #36	; 0x24
 8003400:	fbb6 f3f3 	udiv	r3, r6, r3
	tim2OC1.Pulse = cc1;
 8003404:	604b      	str	r3, [r1, #4]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC1, TIM_CHANNEL_1);
 8003406:	f7ff f8e7 	bl	80025d8 <HAL_TIM_PWM_ConfigChannel>
	tim2OC2.OCMode = TIM_OCMODE_PWM1;
 800340a:	4936      	ldr	r1, [pc, #216]	; (80034e4 <ws2812b_init+0x2dc>)
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 800340c:	2204      	movs	r2, #4
 800340e:	4628      	mov	r0, r5
	uint32_t cc2 = (10 * tim_period) / 15;
 8003410:	230f      	movs	r3, #15
	tim2OC2.OCMode = TIM_OCMODE_PWM1;
 8003412:	600f      	str	r7, [r1, #0]
	uint32_t cc2 = (10 * tim_period) / 15;
 8003414:	fbb6 f6f3 	udiv	r6, r6, r3
	tim2OC2.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003418:	608c      	str	r4, [r1, #8]
	tim2OC2.Pulse = cc2;
 800341a:	604e      	str	r6, [r1, #4]
	tim2OC2.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800341c:	60cc      	str	r4, [r1, #12]
	tim2OC2.OCFastMode = TIM_OCFAST_DISABLE;
 800341e:	610c      	str	r4, [r1, #16]
	tim2OC2.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003420:	614c      	str	r4, [r1, #20]
	tim2OC2.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003422:	618c      	str	r4, [r1, #24]
	HAL_TIM_PWM_ConfigChannel(&TIM1_handle, &tim2OC2, TIM_CHANNEL_2);
 8003424:	f7ff f8d8 	bl	80025d8 <HAL_TIM_PWM_ConfigChannel>
	HAL_TIM_Base_Start(&TIM1_handle);
 8003428:	4628      	mov	r0, r5
 800342a:	f7fe ff4e 	bl	80022ca <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&TIM1_handle, TIM_CHANNEL_1);
 800342e:	4621      	mov	r1, r4
 8003430:	4628      	mov	r0, r5
 8003432:	f7ff f93f 	bl	80026b4 <HAL_TIM_PWM_Start>
	__HAL_TIM_DISABLE(&TIM1_handle);
 8003436:	682b      	ldr	r3, [r5, #0]
 8003438:	6a19      	ldr	r1, [r3, #32]
 800343a:	f241 1211 	movw	r2, #4369	; 0x1111
 800343e:	4211      	tst	r1, r2
 8003440:	d108      	bne.n	8003454 <ws2812b_init+0x24c>
 8003442:	6a19      	ldr	r1, [r3, #32]
 8003444:	f240 4244 	movw	r2, #1092	; 0x444
 8003448:	4211      	tst	r1, r2
 800344a:	bf02      	ittt	eq
 800344c:	681a      	ldreq	r2, [r3, #0]
 800344e:	f022 0201 	biceq.w	r2, r2, #1
 8003452:	601a      	streq	r2, [r3, #0]
	ws2812b.item[0].channel = 0;
 8003454:	4b24      	ldr	r3, [pc, #144]	; (80034e8 <ws2812b_init+0x2e0>)
	ws2812b.item[0].buf_state = NOT_IN_USE;
 8003456:	2103      	movs	r1, #3
 8003458:	7259      	strb	r1, [r3, #9]
	ws2812b.item[1].buf_state = NOT_IN_USE;
 800345a:	7659      	strb	r1, [r3, #25]
	ws2812b.item[0].frameBufferPointer = buf1;
 800345c:	9902      	ldr	r1, [sp, #8]
 800345e:	60d9      	str	r1, [r3, #12]
	ws2812b.item[1].frameBufferPointer = buf2;
 8003460:	9903      	ldr	r1, [sp, #12]
 8003462:	61d9      	str	r1, [r3, #28]
	ws2812b.item[0].frameBufferSize = buf_len;
 8003464:	9901      	ldr	r1, [sp, #4]
 8003466:	6019      	str	r1, [r3, #0]
	ws2812b.item[0].channel = 0;
 8003468:	2200      	movs	r2, #0
	ws2812b.item[1].frameBufferSize = buf_len;
 800346a:	6119      	str	r1, [r3, #16]
	ws2812b.transferComplete = 1;
 800346c:	2101      	movs	r1, #1
	ws2812b.item[0].channel = 0;
 800346e:	721a      	strb	r2, [r3, #8]
	ws2812b.item[1].channel = 0;
 8003470:	761a      	strb	r2, [r3, #24]
	ws2812b.item[0].frameBufferCounter = 0;
 8003472:	605a      	str	r2, [r3, #4]
	ws2812b.item[1].frameBufferCounter = 0;
 8003474:	615a      	str	r2, [r3, #20]
	ws2812b.transferComplete = 1;
 8003476:	f883 1020 	strb.w	r1, [r3, #32]
	ws2812b.startTransfer = 0;
 800347a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800347e:	b00d      	add	sp, #52	; 0x34
 8003480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003484:	40023800 	.word	0x40023800
 8003488:	40020800 	.word	0x40020800
 800348c:	40020c00 	.word	0x40020c00
 8003490:	200023f0 	.word	0x200023f0
 8003494:	40026488 	.word	0x40026488
 8003498:	40020818 	.word	0x40020818
 800349c:	2000041c 	.word	0x2000041c
 80034a0:	2000178c 	.word	0x2000178c
 80034a4:	40026428 	.word	0x40026428
 80034a8:	4002081a 	.word	0x4002081a
 80034ac:	200017f0 	.word	0x200017f0
 80034b0:	200016d0 	.word	0x200016d0
 80034b4:	40026440 	.word	0x40026440
 80034b8:	0800363d 	.word	0x0800363d
 80034bc:	0800371d 	.word	0x0800371d
 80034c0:	080031f9 	.word	0x080031f9
 80034c4:	20000420 	.word	0x20000420
 80034c8:	20001788 	.word	0x20001788
 80034cc:	2000174c 	.word	0x2000174c
 80034d0:	20000418 	.word	0x20000418
 80034d4:	000c3500 	.word	0x000c3500
 80034d8:	200016cc 	.word	0x200016cc
 80034dc:	40010000 	.word	0x40010000
 80034e0:	20001730 	.word	0x20001730
 80034e4:	200016b0 	.word	0x200016b0
 80034e8:	200013ac 	.word	0x200013ac

080034ec <DMA2_Stream2_IRQHandler>:

}

void DMA2_Stream2_IRQHandler(void) {

	HAL_DMA_IRQHandler(&dmaCC2);
 80034ec:	4801      	ldr	r0, [pc, #4]	; (80034f4 <DMA2_Stream2_IRQHandler+0x8>)
 80034ee:	f7fd bec7 	b.w	8001280 <HAL_DMA_IRQHandler>
 80034f2:	bf00      	nop
 80034f4:	200016d0 	.word	0x200016d0

080034f8 <TIM1_UP_TIM10_IRQHandler>:

}

void TIM1_UP_TIM10_IRQHandler(void) {
#if defined(LED_ORANGE_PORT)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80034f8:	4b03      	ldr	r3, [pc, #12]	; (8003508 <TIM1_UP_TIM10_IRQHandler+0x10>)
#endif

	HAL_TIM_IRQHandler(&TIM1_handle);
 80034fa:	4804      	ldr	r0, [pc, #16]	; (800350c <TIM1_UP_TIM10_IRQHandler+0x14>)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 80034fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003500:	619a      	str	r2, [r3, #24]
	HAL_TIM_IRQHandler(&TIM1_handle);
 8003502:	f7fe beff 	b.w	8002304 <HAL_TIM_IRQHandler>
 8003506:	bf00      	nop
 8003508:	40020c00 	.word	0x40020c00
 800350c:	2000174c 	.word	0x2000174c

08003510 <HAL_TIM_PeriodElapsedCallback>:

// TIM2 Interrupt Handler gets executed on every TIM2 Update if enabled
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {

	ws2812b.timerPeriodCounter = 0;
	TIM1->CR1 = 0; // disable timer
 8003510:	4a0a      	ldr	r2, [pc, #40]	; (800353c <HAL_TIM_PeriodElapsedCallback+0x2c>)
	ws2812b.timerPeriodCounter = 0;
 8003512:	480b      	ldr	r0, [pc, #44]	; (8003540 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003514:	2300      	movs	r3, #0
 8003516:	6243      	str	r3, [r0, #36]	; 0x24
	TIM1->CR1 = 0; // disable timer
 8003518:	6013      	str	r3, [r2, #0]

	// disable the TIM2 Update IRQ
	__HAL_TIM_DISABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 800351a:	4b0a      	ldr	r3, [pc, #40]	; (8003544 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68d9      	ldr	r1, [r3, #12]
 8003520:	f021 0101 	bic.w	r1, r1, #1
 8003524:	60d9      	str	r1, [r3, #12]

	// Set back 1,25us period
	TIM1->ARR = tim_period;
 8003526:	4908      	ldr	r1, [pc, #32]	; (8003548 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003528:	6809      	ldr	r1, [r1, #0]
 800352a:	62d1      	str	r1, [r2, #44]	; 0x2c

	// Generate an update event to reload the Prescaler value immediatly
	TIM1->EGR = TIM_EGR_UG;
 800352c:	2101      	movs	r1, #1
 800352e:	6151      	str	r1, [r2, #20]
	__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 8003530:	f06f 0201 	mvn.w	r2, #1
 8003534:	611a      	str	r2, [r3, #16]

	// set transfer_complete flag
	ws2812b.transferComplete = 1;
 8003536:	f880 1020 	strb.w	r1, [r0, #32]
 800353a:	4770      	bx	lr
 800353c:	40010000 	.word	0x40010000
 8003540:	200013ac 	.word	0x200013ac
 8003544:	2000174c 	.word	0x2000174c
 8003548:	20001788 	.word	0x20001788

0800354c <ws2812b_set_pixel>:
}



void ws2812b_set_pixel(uint8_t row, uint16_t column, uint8_t red, uint8_t green,
		uint8_t blue) {
 800354c:	b570      	push	{r4, r5, r6, lr}

	// Apply gamma
	red = gammaTable[red];
 800354e:	4e2c      	ldr	r6, [pc, #176]	; (8003600 <ws2812b_set_pixel+0xb4>)
	green = gammaTable[green];
	blue = gammaTable[blue];

	uint32_t calcCol = (column * 24);
	uint32_t invRed = ~red;
	uint32_t invGreen = ~green;
 8003550:	5cf5      	ldrb	r5, [r6, r3]
	uint32_t invBlue = ~blue;
 8003552:	f89d 3010 	ldrb.w	r3, [sp, #16]
	uint32_t invRed = ~red;
 8003556:	5cb4      	ldrb	r4, [r6, r2]
	uint32_t invBlue = ~blue;
 8003558:	5cf2      	ldrb	r2, [r6, r3]
	uint32_t calcCol = (column * 24);
 800355a:	2318      	movs	r3, #24
 800355c:	434b      	muls	r3, r1
	ws2812bDmaBitBuffer[(calcCol+8+7)] |= (((((invRed)<<7) & 0x80)>>7)<<row);
	ws2812bDmaBitBuffer[(calcCol+16+7)] |= (((((invBlue)<<7) & 0x80)>>7)<<row);
#elif defined(SETPIX_4)

	// Bitband optimisations with pure increments, 5us interrupts
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 800355e:	4929      	ldr	r1, [pc, #164]	; (8003604 <ws2812b_set_pixel+0xb8>)
 8003560:	eb01 0143 	add.w	r1, r1, r3, lsl #1
 8003564:	f101 7188 	add.w	r1, r1, #17825792	; 0x1100000
	uint32_t invGreen = ~green;
 8003568:	43ed      	mvns	r5, r5
	uint32_t *bitBand = BITBAND_SRAM(&ws2812bDmaBitBuffer[(calcCol)], row);
 800356a:	0149      	lsls	r1, r1, #5
 800356c:	eb01 0380 	add.w	r3, r1, r0, lsl #2

	*bitBand = (invGreen >> 7);
 8003570:	09ee      	lsrs	r6, r5, #7
 8003572:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
	bitBand += 16;

	*bitBand = (invGreen >> 6);
 8003576:	09a9      	lsrs	r1, r5, #6
 8003578:	6419      	str	r1, [r3, #64]	; 0x40
	bitBand += 16;

	*bitBand = (invGreen >> 5);
 800357a:	0969      	lsrs	r1, r5, #5
 800357c:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	bitBand += 16;

	*bitBand = (invGreen >> 4);
 8003580:	0929      	lsrs	r1, r5, #4
 8003582:	f8c3 10c0 	str.w	r1, [r3, #192]	; 0xc0
	bitBand += 16;

	*bitBand = (invGreen >> 3);
 8003586:	08e9      	lsrs	r1, r5, #3
 8003588:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	bitBand += 16;

	*bitBand = (invGreen >> 2);
 800358c:	08a9      	lsrs	r1, r5, #2
	uint32_t invRed = ~red;
 800358e:	43e4      	mvns	r4, r4
	*bitBand = (invGreen >> 2);
 8003590:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
	bitBand += 16;

	*bitBand = (invGreen >> 1);
 8003594:	0869      	lsrs	r1, r5, #1
 8003596:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180

	*bitBand = (invGreen >> 0);
	bitBand += 16;

	// RED
	*bitBand = (invRed >> 7);
 800359a:	09e1      	lsrs	r1, r4, #7
 800359c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	bitBand += 16;

	*bitBand = (invRed >> 6);
 80035a0:	09a1      	lsrs	r1, r4, #6
 80035a2:	f8c3 1240 	str.w	r1, [r3, #576]	; 0x240
	bitBand += 16;

	*bitBand = (invRed >> 5);
 80035a6:	0961      	lsrs	r1, r4, #5
 80035a8:	f8c3 1280 	str.w	r1, [r3, #640]	; 0x280
	bitBand += 16;

	*bitBand = (invRed >> 4);
 80035ac:	0921      	lsrs	r1, r4, #4
 80035ae:	f8c3 12c0 	str.w	r1, [r3, #704]	; 0x2c0
	bitBand += 16;

	*bitBand = (invRed >> 3);
 80035b2:	08e1      	lsrs	r1, r4, #3
 80035b4:	f8c3 1300 	str.w	r1, [r3, #768]	; 0x300
	bitBand += 16;

	*bitBand = (invRed >> 2);
 80035b8:	08a1      	lsrs	r1, r4, #2
	uint32_t invBlue = ~blue;
 80035ba:	43d2      	mvns	r2, r2
	*bitBand = (invRed >> 2);
 80035bc:	f8c3 1340 	str.w	r1, [r3, #832]	; 0x340
	bitBand += 16;

	*bitBand = (invRed >> 1);
 80035c0:	0861      	lsrs	r1, r4, #1
 80035c2:	f8c3 1380 	str.w	r1, [r3, #896]	; 0x380

	*bitBand = (invRed >> 0);
	bitBand += 16;

	// BLUE
	*bitBand = (invBlue >> 7);
 80035c6:	09d1      	lsrs	r1, r2, #7
 80035c8:	f8c3 1400 	str.w	r1, [r3, #1024]	; 0x400
	bitBand += 16;

	*bitBand = (invBlue >> 6);
 80035cc:	0991      	lsrs	r1, r2, #6
 80035ce:	f8c3 1440 	str.w	r1, [r3, #1088]	; 0x440
	bitBand += 16;

	*bitBand = (invBlue >> 5);
 80035d2:	0951      	lsrs	r1, r2, #5
 80035d4:	f8c3 1480 	str.w	r1, [r3, #1152]	; 0x480
	bitBand += 16;

	*bitBand = (invBlue >> 4);
 80035d8:	0911      	lsrs	r1, r2, #4
 80035da:	f8c3 14c0 	str.w	r1, [r3, #1216]	; 0x4c0
	bitBand += 16;

	*bitBand = (invBlue >> 3);
 80035de:	08d1      	lsrs	r1, r2, #3
 80035e0:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
	bitBand += 16;

	*bitBand = (invBlue >> 2);
 80035e4:	0891      	lsrs	r1, r2, #2
 80035e6:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
	bitBand += 16;

	*bitBand = (invBlue >> 1);
 80035ea:	0851      	lsrs	r1, r2, #1
	*bitBand = (invGreen >> 0);
 80035ec:	f8c3 51c0 	str.w	r5, [r3, #448]	; 0x1c0
	*bitBand = (invRed >> 0);
 80035f0:	f8c3 43c0 	str.w	r4, [r3, #960]	; 0x3c0
	*bitBand = (invBlue >> 1);
 80035f4:	f8c3 1580 	str.w	r1, [r3, #1408]	; 0x580
	bitBand += 16;

	*bitBand = (invBlue >> 0);
 80035f8:	f8c3 25c0 	str.w	r2, [r3, #1472]	; 0x5c0
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
 80035fe:	bf00      	nop
 8003600:	0801a680 	.word	0x0801a680
 8003604:	200017f0 	.word	0x200017f0

08003608 <loadNextFramebufferData.part.0.constprop.2>:
static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row) {
 8003608:	b573      	push	{r0, r1, r4, r5, r6, lr}
		uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800360a:	6841      	ldr	r1, [r0, #4]
 800360c:	68c5      	ldr	r5, [r0, #12]
 800360e:	1c4b      	adds	r3, r1, #1
 8003610:	6043      	str	r3, [r0, #4]
		uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8003612:	1c8e      	adds	r6, r1, #2
		uint32_t r = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8003614:	5c6a      	ldrb	r2, [r5, r1]
		uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8003616:	6046      	str	r6, [r0, #4]
		uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 8003618:	3103      	adds	r1, #3
		uint32_t g = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800361a:	5ceb      	ldrb	r3, [r5, r3]
		uint32_t b = bItem->frameBufferPointer[bItem->frameBufferCounter++];
 800361c:	6041      	str	r1, [r0, #4]
static void loadNextFramebufferData(WS2812_BufferItem *bItem, uint32_t row) {
 800361e:	4604      	mov	r4, r0
		ws2812b_set_pixel(bItem->channel, row, r, g, b);
 8003620:	5da9      	ldrb	r1, [r5, r6]
 8003622:	7a00      	ldrb	r0, [r0, #8]
 8003624:	9100      	str	r1, [sp, #0]
 8003626:	2100      	movs	r1, #0
 8003628:	f7ff ff90 	bl	800354c <ws2812b_set_pixel>
		if (bItem->frameBufferCounter == bItem->frameBufferSize) {
 800362c:	6823      	ldr	r3, [r4, #0]
 800362e:	6862      	ldr	r2, [r4, #4]
 8003630:	429a      	cmp	r2, r3
			bItem->frameBufferCounter = 0;
 8003632:	bf04      	itt	eq
 8003634:	2300      	moveq	r3, #0
 8003636:	6063      	streq	r3, [r4, #4]
}
 8003638:	b002      	add	sp, #8
 800363a:	bd70      	pop	{r4, r5, r6, pc}

0800363c <DMA_TransferCompleteHandler>:
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 800363c:	4b2c      	ldr	r3, [pc, #176]	; (80036f0 <DMA_TransferCompleteHandler+0xb4>)
	if (ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS) {
 800363e:	492d      	ldr	r1, [pc, #180]	; (80036f4 <DMA_TransferCompleteHandler+0xb8>)
 8003640:	482d      	ldr	r0, [pc, #180]	; (80036f8 <DMA_TransferCompleteHandler+0xbc>)
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8003642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
void DMA_TransferCompleteHandler(DMA_HandleTypeDef *DmaHandle) {
 8003646:	b570      	push	{r4, r5, r6, lr}
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN;
 8003648:	619a      	str	r2, [r3, #24]
	if (ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS) {
 800364a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	460c      	mov	r4, r1
 8003650:	d144      	bne.n	80036dc <DMA_TransferCompleteHandler+0xa0>
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8003652:	4a2a      	ldr	r2, [pc, #168]	; (80036fc <DMA_TransferCompleteHandler+0xc0>)
		ws2812b.repeatCounter = 0;
 8003654:	2400      	movs	r4, #0
 8003656:	628c      	str	r4, [r1, #40]	; 0x28
		TIM1->CR1 &= ~TIM_CR1_CEN;
 8003658:	6813      	ldr	r3, [r2, #0]
 800365a:	f023 0301 	bic.w	r3, r3, #1
 800365e:	6013      	str	r3, [r2, #0]
		__HAL_DMA_DISABLE(&dmaUpdate);
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <DMA_TransferCompleteHandler+0xc4>)
 8003662:	681d      	ldr	r5, [r3, #0]
 8003664:	682b      	ldr	r3, [r5, #0]
 8003666:	f023 0301 	bic.w	r3, r3, #1
 800366a:	602b      	str	r3, [r5, #0]
		__HAL_DMA_DISABLE(&dmaCC1);
 800366c:	4b25      	ldr	r3, [pc, #148]	; (8003704 <DMA_TransferCompleteHandler+0xc8>)
 800366e:	681d      	ldr	r5, [r3, #0]
 8003670:	682b      	ldr	r3, [r5, #0]
 8003672:	f023 0301 	bic.w	r3, r3, #1
 8003676:	602b      	str	r3, [r5, #0]
		__HAL_DMA_DISABLE(&dmaCC2);
 8003678:	4b23      	ldr	r3, [pc, #140]	; (8003708 <DMA_TransferCompleteHandler+0xcc>)
 800367a:	681d      	ldr	r5, [r3, #0]
 800367c:	682b      	ldr	r3, [r5, #0]
 800367e:	f023 0301 	bic.w	r3, r3, #1
 8003682:	602b      	str	r3, [r5, #0]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_UPDATE);
 8003684:	4b21      	ldr	r3, [pc, #132]	; (800370c <DMA_TransferCompleteHandler+0xd0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68dd      	ldr	r5, [r3, #12]
 800368a:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800368e:	60dd      	str	r5, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC1);
 8003690:	68dd      	ldr	r5, [r3, #12]
 8003692:	f425 7500 	bic.w	r5, r5, #512	; 0x200
 8003696:	60dd      	str	r5, [r3, #12]
		__HAL_TIM_DISABLE_DMA(&TIM1_handle, TIM_DMA_CC2);
 8003698:	68dd      	ldr	r5, [r3, #12]
 800369a:	f425 6580 	bic.w	r5, r5, #1024	; 0x400
 800369e:	60dd      	str	r5, [r3, #12]
		TIM1->ARR = timer_reset_pulse_period;
 80036a0:	4d1b      	ldr	r5, [pc, #108]	; (8003710 <DMA_TransferCompleteHandler+0xd4>)
 80036a2:	682d      	ldr	r5, [r5, #0]
 80036a4:	62d5      	str	r5, [r2, #44]	; 0x2c
		TIM1->EGR = TIM_EGR_UG;
 80036a6:	2601      	movs	r6, #1
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80036a8:	f06f 0501 	mvn.w	r5, #1
		TIM1->CNT = 0;
 80036ac:	6254      	str	r4, [r2, #36]	; 0x24
		TIM1->EGR = TIM_EGR_UG;
 80036ae:	6156      	str	r6, [r2, #20]
		__HAL_TIM_CLEAR_FLAG(&TIM1_handle, TIM_FLAG_UPDATE);
 80036b0:	611d      	str	r5, [r3, #16]
		__HAL_TIM_ENABLE_IT(&TIM1_handle, TIM_IT_UPDATE);
 80036b2:	68dd      	ldr	r5, [r3, #12]
 80036b4:	4335      	orrs	r5, r6
 80036b6:	60dd      	str	r5, [r3, #12]
		TIM1->CR1 |= TIM_CR1_CEN;
 80036b8:	6813      	ldr	r3, [r2, #0]
 80036ba:	4333      	orrs	r3, r6
 80036bc:	6013      	str	r3, [r2, #0]
		WS2812B_PORT->BSRR = WS2812_IO_Low[0];
 80036be:	4b15      	ldr	r3, [pc, #84]	; (8003714 <DMA_TransferCompleteHandler+0xd8>)
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	4b15      	ldr	r3, [pc, #84]	; (8003718 <DMA_TransferCompleteHandler+0xdc>)
 80036c4:	619a      	str	r2, [r3, #24]
		ws2812b_output->buf_state = NOT_IN_USE;
 80036c6:	6803      	ldr	r3, [r0, #0]
		ws2812b.transferComplete = 1;
 80036c8:	f881 6020 	strb.w	r6, [r1, #32]
		ws2812b_output->buf_state = NOT_IN_USE;
 80036cc:	2203      	movs	r2, #3
 80036ce:	725a      	strb	r2, [r3, #9]
		ws2812b_output = NULL;
 80036d0:	6004      	str	r4, [r0, #0]
	LED_ORANGE_PORT->BSRR = LED_ORANGE_PIN << 16;
 80036d2:	4b07      	ldr	r3, [pc, #28]	; (80036f0 <DMA_TransferCompleteHandler+0xb4>)
 80036d4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036d8:	619a      	str	r2, [r3, #24]
 80036da:	bd70      	pop	{r4, r5, r6, pc}
		loadNextFramebufferData(ws2812b_output, 0);
 80036dc:	6800      	ldr	r0, [r0, #0]
	if (bItem->buf_state == READ_LOCKED) {
 80036de:	7a43      	ldrb	r3, [r0, #9]
 80036e0:	b90b      	cbnz	r3, 80036e6 <DMA_TransferCompleteHandler+0xaa>
 80036e2:	f7ff ff91 	bl	8003608 <loadNextFramebufferData.part.0.constprop.2>
		ws2812b.repeatCounter++;
 80036e6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80036e8:	3301      	adds	r3, #1
 80036ea:	62a3      	str	r3, [r4, #40]	; 0x28
 80036ec:	e7f1      	b.n	80036d2 <DMA_TransferCompleteHandler+0x96>
 80036ee:	bf00      	nop
 80036f0:	40020c00 	.word	0x40020c00
 80036f4:	200013ac 	.word	0x200013ac
 80036f8:	200014f4 	.word	0x200014f4
 80036fc:	40010000 	.word	0x40010000
 8003700:	200023f0 	.word	0x200023f0
 8003704:	2000178c 	.word	0x2000178c
 8003708:	200016d0 	.word	0x200016d0
 800370c:	2000174c 	.word	0x2000174c
 8003710:	200016cc 	.word	0x200016cc
 8003714:	20000420 	.word	0x20000420
 8003718:	40020800 	.word	0x40020800

0800371c <DMA_TransferHalfHandler>:
void DMA_TransferHalfHandler(DMA_HandleTypeDef *DmaHandle) {
 800371c:	b513      	push	{r0, r1, r4, lr}
	if (ws2812b.repeatCounter == WS2812B_NUMBER_OF_LEDS) {
 800371e:	4c0c      	ldr	r4, [pc, #48]	; (8003750 <DMA_TransferHalfHandler+0x34>)
 8003720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003722:	2b40      	cmp	r3, #64	; 0x40
 8003724:	d10b      	bne.n	800373e <DMA_TransferHalfHandler+0x22>
		ws2812b_set_pixel(0, 0, 0, 0, 0);
 8003726:	2300      	movs	r3, #0
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	461a      	mov	r2, r3
 800372c:	4619      	mov	r1, r3
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff ff0c 	bl	800354c <ws2812b_set_pixel>
	ws2812b.repeatCounter++;
 8003734:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003736:	3301      	adds	r3, #1
 8003738:	62a3      	str	r3, [r4, #40]	; 0x28
}
 800373a:	b002      	add	sp, #8
 800373c:	bd10      	pop	{r4, pc}
		loadNextFramebufferData(ws2812b_output, 0);
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <DMA_TransferHalfHandler+0x38>)
 8003740:	6818      	ldr	r0, [r3, #0]
	if (bItem->buf_state == READ_LOCKED) {
 8003742:	7a43      	ldrb	r3, [r0, #9]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1f5      	bne.n	8003734 <DMA_TransferHalfHandler+0x18>
 8003748:	f7ff ff5e 	bl	8003608 <loadNextFramebufferData.part.0.constprop.2>
 800374c:	e7f2      	b.n	8003734 <DMA_TransferHalfHandler+0x18>
 800374e:	bf00      	nop
 8003750:	200013ac 	.word	0x200013ac
 8003754:	200014f4 	.word	0x200014f4

08003758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003790 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800375c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800375e:	e003      	b.n	8003768 <LoopCopyDataInit>

08003760 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003762:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003764:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003766:	3104      	adds	r1, #4

08003768 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003768:	480b      	ldr	r0, [pc, #44]	; (8003798 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800376a:	4b0c      	ldr	r3, [pc, #48]	; (800379c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800376c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800376e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003770:	d3f6      	bcc.n	8003760 <CopyDataInit>
  ldr  r2, =_sbss
 8003772:	4a0b      	ldr	r2, [pc, #44]	; (80037a0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003774:	e002      	b.n	800377c <LoopFillZerobss>

08003776 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003776:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003778:	f842 3b04 	str.w	r3, [r2], #4

0800377c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800377e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003780:	d3f9      	bcc.n	8003776 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003782:	f7ff fcef 	bl	8003164 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003786:	f001 fec7 	bl	8005518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800378a:	f7ff faa5 	bl	8002cd8 <main>
  bx  lr    
 800378e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003790:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003794:	0801a998 	.word	0x0801a998
  ldr  r0, =_sdata
 8003798:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800379c:	2000048c 	.word	0x2000048c
  ldr  r2, =_sbss
 80037a0:	2000048c 	.word	0x2000048c
  ldr  r3, = _ebss
 80037a4:	20002450 	.word	0x20002450

080037a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037a8:	e7fe      	b.n	80037a8 <ADC_IRQHandler>
	...

080037ac <D16_GENERIC>:
 80037ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037b0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80037b2:	6b14      	ldr	r4, [r2, #48]	; 0x30
 80037b4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80037b8:	f8d2 b014 	ldr.w	fp, [r2, #20]
 80037bc:	69d3      	ldr	r3, [r2, #28]
 80037be:	6896      	ldr	r6, [r2, #8]
 80037c0:	b087      	sub	sp, #28
 80037c2:	9402      	str	r4, [sp, #8]
 80037c4:	9103      	str	r1, [sp, #12]
 80037c6:	6b54      	ldr	r4, [r2, #52]	; 0x34
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	d066      	beq.n	800389a <D16_GENERIC+0xee>
 80037cc:	f004 0510 	and.w	r5, r4, #16
 80037d0:	f004 0420 	and.w	r4, r4, #32
 80037d4:	9504      	str	r5, [sp, #16]
 80037d6:	4936      	ldr	r1, [pc, #216]	; (80038b0 <D16_GENERIC+0x104>)
 80037d8:	9405      	str	r4, [sp, #20]
 80037da:	f04f 0e00 	mov.w	lr, #0
 80037de:	4635      	mov	r5, r6
 80037e0:	e04f      	b.n	8003882 <D16_GENERIC+0xd6>
 80037e2:	5d87      	ldrb	r7, [r0, r6]
 80037e4:	7804      	ldrb	r4, [r0, #0]
 80037e6:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 80037ea:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 80037ee:	b2fe      	uxtb	r6, r7
 80037f0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80037f4:	f851 4026 	ldr.w	r4, [r1, r6, lsl #2]
 80037f8:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80037fc:	441c      	add	r4, r3
 80037fe:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8003802:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8003806:	f3c7 0609 	ubfx	r6, r7, #0, #10
 800380a:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 800380e:	4c29      	ldr	r4, [pc, #164]	; (80038b4 <D16_GENERIC+0x108>)
 8003810:	0abb      	lsrs	r3, r7, #10
 8003812:	fb26 5404 	smlad	r4, r6, r4, r5
 8003816:	4d28      	ldr	r5, [pc, #160]	; (80038b8 <D16_GENERIC+0x10c>)
 8003818:	fb26 f505 	smuad	r5, r6, r5
 800381c:	f5a4 6400 	sub.w	r4, r4, #2048	; 0x800
 8003820:	eb04 080a 	add.w	r8, r4, sl
 8003824:	ebcb 0808 	rsb	r8, fp, r8
 8003828:	4646      	mov	r6, r8
 800382a:	17f7      	asrs	r7, r6, #31
 800382c:	e9cd 6700 	strd	r6, r7, [sp]
 8003830:	9e04      	ldr	r6, [sp, #16]
 8003832:	f10e 0c01 	add.w	ip, lr, #1
 8003836:	b16e      	cbz	r6, 8003854 <D16_GENERIC+0xa8>
 8003838:	6a16      	ldr	r6, [r2, #32]
 800383a:	9f01      	ldr	r7, [sp, #4]
 800383c:	fba8 8906 	umull	r8, r9, r8, r6
 8003840:	fb06 9907 	mla	r9, r6, r7, r9
 8003844:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003848:	f149 0900 	adc.w	r9, r9, #0
 800384c:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8003850:	46a3      	mov	fp, r4
 8003852:	4654      	mov	r4, sl
 8003854:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 8003856:	9f02      	ldr	r7, [sp, #8]
 8003858:	0424      	lsls	r4, r4, #16
 800385a:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 800385e:	f04f 0900 	mov.w	r9, #0
 8003862:	fb0e fe06 	mul.w	lr, lr, r6
 8003866:	fbc7 8904 	smlal	r8, r9, r7, r4
 800386a:	9e03      	ldr	r6, [sp, #12]
 800386c:	464f      	mov	r7, r9
 800386e:	10bc      	asrs	r4, r7, #2
 8003870:	f304 040f 	ssat	r4, #16, r4
 8003874:	f826 401e 	strh.w	r4, [r6, lr, lsl #1]
 8003878:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 800387a:	fa1f fe8c 	uxth.w	lr, ip
 800387e:	4574      	cmp	r4, lr
 8003880:	d90a      	bls.n	8003898 <D16_GENERIC+0xec>
 8003882:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003884:	2c01      	cmp	r4, #1
 8003886:	b2e6      	uxtb	r6, r4
 8003888:	d1ab      	bne.n	80037e2 <D16_GENERIC+0x36>
 800388a:	9c05      	ldr	r4, [sp, #20]
 800388c:	f850 7b02 	ldr.w	r7, [r0], #2
 8003890:	2c00      	cmp	r4, #0
 8003892:	d0ac      	beq.n	80037ee <D16_GENERIC+0x42>
 8003894:	ba7f      	rev16	r7, r7
 8003896:	e7aa      	b.n	80037ee <D16_GENERIC+0x42>
 8003898:	462e      	mov	r6, r5
 800389a:	2000      	movs	r0, #0
 800389c:	6096      	str	r6, [r2, #8]
 800389e:	61d3      	str	r3, [r2, #28]
 80038a0:	f8c2 a010 	str.w	sl, [r2, #16]
 80038a4:	f8c2 b014 	str.w	fp, [r2, #20]
 80038a8:	b007      	add	sp, #28
 80038aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038ae:	bf00      	nop
 80038b0:	20000000 	.word	0x20000000
 80038b4:	00030001 	.word	0x00030001
 80038b8:	00010003 	.word	0x00010003

080038bc <D24_GENERIC>:
 80038bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c0:	8cd6      	ldrh	r6, [r2, #38]	; 0x26
 80038c2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 80038c4:	f8d2 a010 	ldr.w	sl, [r2, #16]
 80038c8:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80038cc:	69d3      	ldr	r3, [r2, #28]
 80038ce:	6894      	ldr	r4, [r2, #8]
 80038d0:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 80038d4:	b089      	sub	sp, #36	; 0x24
 80038d6:	9504      	str	r5, [sp, #16]
 80038d8:	9105      	str	r1, [sp, #20]
 80038da:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80038dc:	2e00      	cmp	r6, #0
 80038de:	f000 8096 	beq.w	8003a0e <D24_GENERIC+0x152>
 80038e2:	f005 0610 	and.w	r6, r5, #16
 80038e6:	f005 0520 	and.w	r5, r5, #32
 80038ea:	4953      	ldr	r1, [pc, #332]	; (8003a38 <D24_GENERIC+0x17c>)
 80038ec:	9606      	str	r6, [sp, #24]
 80038ee:	9507      	str	r5, [sp, #28]
 80038f0:	f04f 0e00 	mov.w	lr, #0
 80038f4:	f8cd 9004 	str.w	r9, [sp, #4]
 80038f8:	e06a      	b.n	80039d0 <D24_GENERIC+0x114>
 80038fa:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 80038fe:	f810 8007 	ldrb.w	r8, [r0, r7]
 8003902:	f890 c000 	ldrb.w	ip, [r0]
 8003906:	042d      	lsls	r5, r5, #16
 8003908:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800390c:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8003910:	44ac      	add	ip, r5
 8003912:	4438      	add	r0, r7
 8003914:	fa5f f68c 	uxtb.w	r6, ip
 8003918:	f3cc 2507 	ubfx	r5, ip, #8, #8
 800391c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003920:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8003924:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8003928:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800392c:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8003930:	f851 302c 	ldr.w	r3, [r1, ip, lsl #2]
 8003934:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8003938:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800393c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8003940:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8003944:	4d3d      	ldr	r5, [pc, #244]	; (8003a3c <D24_GENERIC+0x180>)
 8003946:	fb26 b705 	smlad	r7, r6, r5, fp
 800394a:	4d3d      	ldr	r5, [pc, #244]	; (8003a40 <D24_GENERIC+0x184>)
 800394c:	fb26 4b05 	smlad	fp, r6, r5, r4
 8003950:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8003954:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8003958:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 800395c:	2401      	movs	r4, #1
 800395e:	fb26 f604 	smuad	r6, r6, r4
 8003962:	f5a7 55d8 	sub.w	r5, r7, #6912	; 0x1b00
 8003966:	9f01      	ldr	r7, [sp, #4]
 8003968:	eb0e 0c04 	add.w	ip, lr, r4
 800396c:	eb08 0406 	add.w	r4, r8, r6
 8003970:	eb05 060a 	add.w	r6, r5, sl
 8003974:	1bf6      	subs	r6, r6, r7
 8003976:	4637      	mov	r7, r6
 8003978:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800397c:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8003980:	9f06      	ldr	r7, [sp, #24]
 8003982:	b177      	cbz	r7, 80039a2 <D24_GENERIC+0xe6>
 8003984:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8003988:	9501      	str	r5, [sp, #4]
 800398a:	fba6 9a08 	umull	r9, sl, r6, r8
 800398e:	9e03      	ldr	r6, [sp, #12]
 8003990:	fb08 aa06 	mla	sl, r8, r6, sl
 8003994:	f119 4600 	adds.w	r6, r9, #2147483648	; 0x80000000
 8003998:	f14a 0700 	adc.w	r7, sl, #0
 800399c:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80039a0:	4655      	mov	r5, sl
 80039a2:	8d16      	ldrh	r6, [r2, #40]	; 0x28
 80039a4:	9f04      	ldr	r7, [sp, #16]
 80039a6:	03ad      	lsls	r5, r5, #14
 80039a8:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80039ac:	f04f 0900 	mov.w	r9, #0
 80039b0:	fb0e fe06 	mul.w	lr, lr, r6
 80039b4:	fbc7 8905 	smlal	r8, r9, r7, r5
 80039b8:	9e05      	ldr	r6, [sp, #20]
 80039ba:	464f      	mov	r7, r9
 80039bc:	10bd      	asrs	r5, r7, #2
 80039be:	f305 050f 	ssat	r5, #16, r5
 80039c2:	f826 501e 	strh.w	r5, [r6, lr, lsl #1]
 80039c6:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 80039c8:	fa1f fe8c 	uxth.w	lr, ip
 80039cc:	4575      	cmp	r5, lr
 80039ce:	d91c      	bls.n	8003a0a <D24_GENERIC+0x14e>
 80039d0:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 80039d2:	b2ef      	uxtb	r7, r5
 80039d4:	2d01      	cmp	r5, #1
 80039d6:	b23e      	sxth	r6, r7
 80039d8:	d18f      	bne.n	80038fa <D24_GENERIC+0x3e>
 80039da:	9d07      	ldr	r5, [sp, #28]
 80039dc:	b15d      	cbz	r5, 80039f6 <D24_GENERIC+0x13a>
 80039de:	f01e 0f01 	tst.w	lr, #1
 80039e2:	d120      	bne.n	8003a26 <D24_GENERIC+0x16a>
 80039e4:	7806      	ldrb	r6, [r0, #0]
 80039e6:	78c7      	ldrb	r7, [r0, #3]
 80039e8:	7845      	ldrb	r5, [r0, #1]
 80039ea:	0236      	lsls	r6, r6, #8
 80039ec:	eb06 4c07 	add.w	ip, r6, r7, lsl #16
 80039f0:	44ac      	add	ip, r5
 80039f2:	3002      	adds	r0, #2
 80039f4:	e78e      	b.n	8003914 <D24_GENERIC+0x58>
 80039f6:	7846      	ldrb	r6, [r0, #1]
 80039f8:	f890 c002 	ldrb.w	ip, [r0, #2]
 80039fc:	f810 5b03 	ldrb.w	r5, [r0], #3
 8003a00:	0236      	lsls	r6, r6, #8
 8003a02:	eb06 4c0c 	add.w	ip, r6, ip, lsl #16
 8003a06:	44ac      	add	ip, r5
 8003a08:	e784      	b.n	8003914 <D24_GENERIC+0x58>
 8003a0a:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003a0e:	6094      	str	r4, [r2, #8]
 8003a10:	2000      	movs	r0, #0
 8003a12:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003a16:	61d3      	str	r3, [r2, #28]
 8003a18:	f8c2 a010 	str.w	sl, [r2, #16]
 8003a1c:	f8c2 9014 	str.w	r9, [r2, #20]
 8003a20:	b009      	add	sp, #36	; 0x24
 8003a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a26:	78c6      	ldrb	r6, [r0, #3]
 8003a28:	7887      	ldrb	r7, [r0, #2]
 8003a2a:	f810 5b04 	ldrb.w	r5, [r0], #4
 8003a2e:	0236      	lsls	r6, r6, #8
 8003a30:	eb06 4c07 	add.w	ip, r6, r7, lsl #16
 8003a34:	44ac      	add	ip, r5
 8003a36:	e76d      	b.n	8003914 <D24_GENERIC+0x58>
 8003a38:	20000000 	.word	0x20000000
 8003a3c:	00030001 	.word	0x00030001
 8003a40:	00060007 	.word	0x00060007

08003a44 <D32_GENERIC>:
 8003a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a48:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003a4a:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003a4c:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003a50:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8003a54:	69d6      	ldr	r6, [r2, #28]
 8003a56:	6893      	ldr	r3, [r2, #8]
 8003a58:	f8d2 b00c 	ldr.w	fp, [r2, #12]
 8003a5c:	b087      	sub	sp, #28
 8003a5e:	9402      	str	r4, [sp, #8]
 8003a60:	9103      	str	r1, [sp, #12]
 8003a62:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003a64:	2d00      	cmp	r5, #0
 8003a66:	f000 8098 	beq.w	8003b9a <D32_GENERIC+0x156>
 8003a6a:	f004 0510 	and.w	r5, r4, #16
 8003a6e:	f004 0420 	and.w	r4, r4, #32
 8003a72:	4950      	ldr	r1, [pc, #320]	; (8003bb4 <D32_GENERIC+0x170>)
 8003a74:	9504      	str	r5, [sp, #16]
 8003a76:	9405      	str	r4, [sp, #20]
 8003a78:	f04f 0c00 	mov.w	ip, #0
 8003a7c:	f8cd 9004 	str.w	r9, [sp, #4]
 8003a80:	469e      	mov	lr, r3
 8003a82:	e073      	b.n	8003b6c <D32_GENERIC+0x128>
 8003a84:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003a88:	f810 8007 	ldrb.w	r8, [r0, r7]
 8003a8c:	5d07      	ldrb	r7, [r0, r4]
 8003a8e:	7800      	ldrb	r0, [r0, #0]
 8003a90:	041b      	lsls	r3, r3, #16
 8003a92:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8003a96:	eb03 2707 	add.w	r7, r3, r7, lsl #8
 8003a9a:	4407      	add	r7, r0
 8003a9c:	eb05 0044 	add.w	r0, r5, r4, lsl #1
 8003aa0:	b2fc      	uxtb	r4, r7
 8003aa2:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8003aa6:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8003aaa:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8003aae:	f3c7 4907 	ubfx	r9, r7, #16, #8
 8003ab2:	0e3f      	lsrs	r7, r7, #24
 8003ab4:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8003ab8:	f851 3029 	ldr.w	r3, [r1, r9, lsl #2]
 8003abc:	f851 6027 	ldr.w	r6, [r1, r7, lsl #2]
 8003ac0:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8003ac4:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 8003ac8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8003acc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003ad0:	f3c6 0709 	ubfx	r7, r6, #0, #10
 8003ad4:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003ad8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003adc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8003ae0:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8003ae4:	4d34      	ldr	r5, [pc, #208]	; (8003bb8 <D32_GENERIC+0x174>)
 8003ae6:	fb24 bb05 	smlad	fp, r4, r5, fp
 8003aea:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8003aee:	fb23 b805 	smlad	r8, r3, r5, fp
 8003af2:	4d32      	ldr	r5, [pc, #200]	; (8003bbc <D32_GENERIC+0x178>)
 8003af4:	fb24 eb05 	smlad	fp, r4, r5, lr
 8003af8:	4d31      	ldr	r5, [pc, #196]	; (8003bc0 <D32_GENERIC+0x17c>)
 8003afa:	fb23 bb05 	smlad	fp, r3, r5, fp
 8003afe:	2501      	movs	r5, #1
 8003b00:	fb24 f405 	smuad	r4, r4, r5
 8003b04:	4d2f      	ldr	r5, [pc, #188]	; (8003bc4 <D32_GENERIC+0x180>)
 8003b06:	fb23 4e05 	smlad	lr, r3, r5, r4
 8003b0a:	9d01      	ldr	r5, [sp, #4]
 8003b0c:	f5a8 4380 	sub.w	r3, r8, #16384	; 0x4000
 8003b10:	eb03 040a 	add.w	r4, r3, sl
 8003b14:	1b64      	subs	r4, r4, r5
 8003b16:	9d04      	ldr	r5, [sp, #16]
 8003b18:	f10c 0701 	add.w	r7, ip, #1
 8003b1c:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8003b20:	b16d      	cbz	r5, 8003b3e <D32_GENERIC+0xfa>
 8003b22:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	fba4 4508 	umull	r4, r5, r4, r8
 8003b2c:	fb08 5509 	mla	r5, r8, r9, r5
 8003b30:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8003b34:	f145 0500 	adc.w	r5, r5, #0
 8003b38:	ea4f 0a45 	mov.w	sl, r5, lsl #1
 8003b3c:	4653      	mov	r3, sl
 8003b3e:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8003b40:	9d02      	ldr	r5, [sp, #8]
 8003b42:	035b      	lsls	r3, r3, #13
 8003b44:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003b48:	f04f 0900 	mov.w	r9, #0
 8003b4c:	fb0c fc04 	mul.w	ip, ip, r4
 8003b50:	fbc5 8903 	smlal	r8, r9, r5, r3
 8003b54:	9c03      	ldr	r4, [sp, #12]
 8003b56:	464d      	mov	r5, r9
 8003b58:	10ab      	asrs	r3, r5, #2
 8003b5a:	f303 030f 	ssat	r3, #16, r3
 8003b5e:	f824 301c 	strh.w	r3, [r4, ip, lsl #1]
 8003b62:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003b64:	fa1f fc87 	uxth.w	ip, r7
 8003b68:	4563      	cmp	r3, ip
 8003b6a:	d913      	bls.n	8003b94 <D32_GENERIC+0x150>
 8003b6c:	8d55      	ldrh	r5, [r2, #42]	; 0x2a
 8003b6e:	b2ec      	uxtb	r4, r5
 8003b70:	eb04 0744 	add.w	r7, r4, r4, lsl #1
 8003b74:	eb00 0807 	add.w	r8, r0, r7
 8003b78:	4263      	negs	r3, r4
 8003b7a:	2d01      	cmp	r5, #1
 8003b7c:	eb08 0503 	add.w	r5, r8, r3
 8003b80:	d180      	bne.n	8003a84 <D32_GENERIC+0x40>
 8003b82:	1d03      	adds	r3, r0, #4
 8003b84:	6807      	ldr	r7, [r0, #0]
 8003b86:	9805      	ldr	r0, [sp, #20]
 8003b88:	b110      	cbz	r0, 8003b90 <D32_GENERIC+0x14c>
 8003b8a:	ba7f      	rev16	r7, r7
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	e787      	b.n	8003aa0 <D32_GENERIC+0x5c>
 8003b90:	4618      	mov	r0, r3
 8003b92:	e785      	b.n	8003aa0 <D32_GENERIC+0x5c>
 8003b94:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8003b98:	4673      	mov	r3, lr
 8003b9a:	2000      	movs	r0, #0
 8003b9c:	6093      	str	r3, [r2, #8]
 8003b9e:	f8c2 b00c 	str.w	fp, [r2, #12]
 8003ba2:	61d6      	str	r6, [r2, #28]
 8003ba4:	f8c2 a010 	str.w	sl, [r2, #16]
 8003ba8:	f8c2 9014 	str.w	r9, [r2, #20]
 8003bac:	b007      	add	sp, #28
 8003bae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000000 	.word	0x20000000
 8003bb8:	00060003 	.word	0x00060003
 8003bbc:	000a000c 	.word	0x000a000c
 8003bc0:	000c000a 	.word	0x000c000a
 8003bc4:	00030006 	.word	0x00030006

08003bc8 <D48_GENERIC>:
 8003bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bcc:	b089      	sub	sp, #36	; 0x24
 8003bce:	68d4      	ldr	r4, [r2, #12]
 8003bd0:	8cd5      	ldrh	r5, [r2, #38]	; 0x26
 8003bd2:	6953      	ldr	r3, [r2, #20]
 8003bd4:	9401      	str	r4, [sp, #4]
 8003bd6:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003bd8:	9303      	str	r3, [sp, #12]
 8003bda:	9404      	str	r4, [sp, #16]
 8003bdc:	f8d2 a010 	ldr.w	sl, [r2, #16]
 8003be0:	69d6      	ldr	r6, [r2, #28]
 8003be2:	6893      	ldr	r3, [r2, #8]
 8003be4:	6b54      	ldr	r4, [r2, #52]	; 0x34
 8003be6:	9105      	str	r1, [sp, #20]
 8003be8:	2d00      	cmp	r5, #0
 8003bea:	f000 80c5 	beq.w	8003d78 <D48_GENERIC+0x1b0>
 8003bee:	f004 0510 	and.w	r5, r4, #16
 8003bf2:	f004 0420 	and.w	r4, r4, #32
 8003bf6:	4966      	ldr	r1, [pc, #408]	; (8003d90 <D48_GENERIC+0x1c8>)
 8003bf8:	9506      	str	r5, [sp, #24]
 8003bfa:	9407      	str	r4, [sp, #28]
 8003bfc:	f04f 0c00 	mov.w	ip, #0
 8003c00:	4657      	mov	r7, sl
 8003c02:	9302      	str	r3, [sp, #8]
 8003c04:	e09c      	b.n	8003d40 <D48_GENERIC+0x178>
 8003c06:	f81b 4005 	ldrb.w	r4, [fp, r5]
 8003c0a:	f810 b009 	ldrb.w	fp, [r0, r9]
 8003c0e:	f81a 9009 	ldrb.w	r9, [sl, r9]
 8003c12:	f810 a00e 	ldrb.w	sl, [r0, lr]
 8003c16:	7800      	ldrb	r0, [r0, #0]
 8003c18:	0424      	lsls	r4, r4, #16
 8003c1a:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8003c1e:	f818 4005 	ldrb.w	r4, [r8, r5]
 8003c22:	eb0b 2b0a 	add.w	fp, fp, sl, lsl #8
 8003c26:	44a8      	add	r8, r5
 8003c28:	eb04 2409 	add.w	r4, r4, r9, lsl #8
 8003c2c:	eb0b 0500 	add.w	r5, fp, r0
 8003c30:	eb08 004e 	add.w	r0, r8, lr, lsl #1
 8003c34:	fa5f f885 	uxtb.w	r8, r5
 8003c38:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8003c3c:	f851 a028 	ldr.w	sl, [r1, r8, lsl #2]
 8003c40:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8003c44:	f3c5 4e07 	ubfx	lr, r5, #16, #8
 8003c48:	0e2d      	lsrs	r5, r5, #24
 8003c4a:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8003c4e:	f851 802e 	ldr.w	r8, [r1, lr, lsl #2]
 8003c52:	f851 e025 	ldr.w	lr, [r1, r5, lsl #2]
 8003c56:	b2e6      	uxtb	r6, r4
 8003c58:	eb09 259a 	add.w	r5, r9, sl, lsr #10
 8003c5c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8003c60:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8003c64:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8003c68:	f851 9024 	ldr.w	r9, [r1, r4, lsl #2]
 8003c6c:	eb0e 2498 	add.w	r4, lr, r8, lsr #10
 8003c70:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 8003c74:	eb09 269e 	add.w	r6, r9, lr, lsr #10
 8003c78:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003c7c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003c80:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8003c84:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003c88:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003c8c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8003c90:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003c94:	ea44 4808 	orr.w	r8, r4, r8, lsl #16
 8003c98:	ea49 4e0e 	orr.w	lr, r9, lr, lsl #16
 8003c9c:	4c3d      	ldr	r4, [pc, #244]	; (8003d94 <D48_GENERIC+0x1cc>)
 8003c9e:	9d01      	ldr	r5, [sp, #4]
 8003ca0:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003ca4:	4d3c      	ldr	r5, [pc, #240]	; (8003d98 <D48_GENERIC+0x1d0>)
 8003ca6:	fb28 4405 	smlad	r4, r8, r5, r4
 8003caa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003cae:	fb2e 4b03 	smlad	fp, lr, r3, r4
 8003cb2:	4c3a      	ldr	r4, [pc, #232]	; (8003d9c <D48_GENERIC+0x1d4>)
 8003cb4:	9b02      	ldr	r3, [sp, #8]
 8003cb6:	fb2a 3304 	smlad	r3, sl, r4, r3
 8003cba:	f04f 141b 	mov.w	r4, #1769499	; 0x1b001b
 8003cbe:	fb28 3304 	smlad	r3, r8, r4, r3
 8003cc2:	4c37      	ldr	r4, [pc, #220]	; (8003da0 <D48_GENERIC+0x1d8>)
 8003cc4:	fb2e 3304 	smlad	r3, lr, r4, r3
 8003cc8:	2501      	movs	r5, #1
 8003cca:	9301      	str	r3, [sp, #4]
 8003ccc:	fb2a fa05 	smuad	sl, sl, r5
 8003cd0:	4b34      	ldr	r3, [pc, #208]	; (8003da4 <D48_GENERIC+0x1dc>)
 8003cd2:	fb28 a803 	smlad	r8, r8, r3, sl
 8003cd6:	4b34      	ldr	r3, [pc, #208]	; (8003da8 <D48_GENERIC+0x1e0>)
 8003cd8:	fb2e 8303 	smlad	r3, lr, r3, r8
 8003cdc:	f5ab 4458 	sub.w	r4, fp, #55296	; 0xd800
 8003ce0:	9302      	str	r3, [sp, #8]
 8003ce2:	9b03      	ldr	r3, [sp, #12]
 8003ce4:	eb04 0807 	add.w	r8, r4, r7
 8003ce8:	ebc3 0808 	rsb	r8, r3, r8
 8003cec:	9b06      	ldr	r3, [sp, #24]
 8003cee:	4465      	add	r5, ip
 8003cf0:	ea4f 7be8 	mov.w	fp, r8, asr #31
 8003cf4:	b163      	cbz	r3, 8003d10 <D48_GENERIC+0x148>
 8003cf6:	6a17      	ldr	r7, [r2, #32]
 8003cf8:	9403      	str	r4, [sp, #12]
 8003cfa:	fba8 8907 	umull	r8, r9, r8, r7
 8003cfe:	fb07 990b 	mla	r9, r7, fp, r9
 8003d02:	f118 4800 	adds.w	r8, r8, #2147483648	; 0x80000000
 8003d06:	f149 0900 	adc.w	r9, r9, #0
 8003d0a:	ea4f 0749 	mov.w	r7, r9, lsl #1
 8003d0e:	463c      	mov	r4, r7
 8003d10:	f8b2 e028 	ldrh.w	lr, [r2, #40]	; 0x28
 8003d14:	9b04      	ldr	r3, [sp, #16]
 8003d16:	02e4      	lsls	r4, r4, #11
 8003d18:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8003d1c:	f04f 0900 	mov.w	r9, #0
 8003d20:	fb0c fc0e 	mul.w	ip, ip, lr
 8003d24:	fbc3 8904 	smlal	r8, r9, r3, r4
 8003d28:	9b05      	ldr	r3, [sp, #20]
 8003d2a:	ea4f 04a9 	mov.w	r4, r9, asr #2
 8003d2e:	f304 040f 	ssat	r4, #16, r4
 8003d32:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8003d36:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003d38:	fa1f fc85 	uxth.w	ip, r5
 8003d3c:	4564      	cmp	r4, ip
 8003d3e:	d919      	bls.n	8003d74 <D48_GENERIC+0x1ac>
 8003d40:	8d54      	ldrh	r4, [r2, #42]	; 0x2a
 8003d42:	fa5f fe84 	uxtb.w	lr, r4
 8003d46:	eb0e 094e 	add.w	r9, lr, lr, lsl #1
 8003d4a:	f1ce 0500 	rsb	r5, lr, #0
 8003d4e:	eb00 0b09 	add.w	fp, r0, r9
 8003d52:	eb0b 0a05 	add.w	sl, fp, r5
 8003d56:	2c01      	cmp	r4, #1
 8003d58:	eb0a 0809 	add.w	r8, sl, r9
 8003d5c:	f47f af53 	bne.w	8003c06 <D48_GENERIC+0x3e>
 8003d60:	9b07      	ldr	r3, [sp, #28]
 8003d62:	6805      	ldr	r5, [r0, #0]
 8003d64:	6844      	ldr	r4, [r0, #4]
 8003d66:	3006      	adds	r0, #6
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f43f af63 	beq.w	8003c34 <D48_GENERIC+0x6c>
 8003d6e:	ba6d      	rev16	r5, r5
 8003d70:	ba64      	rev16	r4, r4
 8003d72:	e75f      	b.n	8003c34 <D48_GENERIC+0x6c>
 8003d74:	9b02      	ldr	r3, [sp, #8]
 8003d76:	46ba      	mov	sl, r7
 8003d78:	6093      	str	r3, [r2, #8]
 8003d7a:	9b01      	ldr	r3, [sp, #4]
 8003d7c:	60d3      	str	r3, [r2, #12]
 8003d7e:	9b03      	ldr	r3, [sp, #12]
 8003d80:	61d6      	str	r6, [r2, #28]
 8003d82:	2000      	movs	r0, #0
 8003d84:	f8c2 a010 	str.w	sl, [r2, #16]
 8003d88:	6153      	str	r3, [r2, #20]
 8003d8a:	b009      	add	sp, #36	; 0x24
 8003d8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d90:	20000000 	.word	0x20000000
 8003d94:	000f000a 	.word	0x000f000a
 8003d98:	00060003 	.word	0x00060003
 8003d9c:	00150019 	.word	0x00150019
 8003da0:	00190015 	.word	0x00190015
 8003da4:	00030006 	.word	0x00030006
 8003da8:	000a000f 	.word	0x000a000f

08003dac <D64_GENERIC>:
 8003dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	b089      	sub	sp, #36	; 0x24
 8003db2:	6895      	ldr	r5, [r2, #8]
 8003db4:	6913      	ldr	r3, [r2, #16]
 8003db6:	9501      	str	r5, [sp, #4]
 8003db8:	8cd4      	ldrh	r4, [r2, #38]	; 0x26
 8003dba:	68d5      	ldr	r5, [r2, #12]
 8003dbc:	9304      	str	r3, [sp, #16]
 8003dbe:	9502      	str	r5, [sp, #8]
 8003dc0:	6953      	ldr	r3, [r2, #20]
 8003dc2:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8003dc4:	9305      	str	r3, [sp, #20]
 8003dc6:	9506      	str	r5, [sp, #24]
 8003dc8:	69d3      	ldr	r3, [r2, #28]
 8003dca:	9107      	str	r1, [sp, #28]
 8003dcc:	2c00      	cmp	r4, #0
 8003dce:	f000 80db 	beq.w	8003f88 <D64_GENERIC+0x1dc>
 8003dd2:	6a11      	ldr	r1, [r2, #32]
 8003dd4:	9103      	str	r1, [sp, #12]
 8003dd6:	f8df e1ec 	ldr.w	lr, [pc, #492]	; 8003fc4 <D64_GENERIC+0x218>
 8003dda:	f04f 0c00 	mov.w	ip, #0
 8003dde:	4681      	mov	r9, r0
 8003de0:	e0c1      	b.n	8003f66 <D64_GENERIC+0x1ba>
 8003de2:	eb07 0847 	add.w	r8, r7, r7, lsl #1
 8003de6:	427d      	negs	r5, r7
 8003de8:	eb09 0408 	add.w	r4, r9, r8
 8003dec:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
 8003df0:	eb0a 0048 	add.w	r0, sl, r8, lsl #1
 8003df4:	5d66      	ldrb	r6, [r4, r5]
 8003df6:	5d41      	ldrb	r1, [r0, r5]
 8003df8:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8003dfc:	f819 a008 	ldrb.w	sl, [r9, r8]
 8003e00:	f814 8015 	ldrb.w	r8, [r4, r5, lsl #1]
 8003e04:	f899 4000 	ldrb.w	r4, [r9]
 8003e08:	f810 9015 	ldrb.w	r9, [r0, r5, lsl #1]
 8003e0c:	4428      	add	r0, r5
 8003e0e:	0409      	lsls	r1, r1, #16
 8003e10:	0436      	lsls	r6, r6, #16
 8003e12:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8003e16:	eb06 660a 	add.w	r6, r6, sl, lsl #24
 8003e1a:	f810 b015 	ldrb.w	fp, [r0, r5, lsl #1]
 8003e1e:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8003e22:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8003e26:	eb06 2608 	add.w	r6, r6, r8, lsl #8
 8003e2a:	4459      	add	r1, fp
 8003e2c:	eb05 0987 	add.w	r9, r5, r7, lsl #2
 8003e30:	4426      	add	r6, r4
 8003e32:	f3c6 2007 	ubfx	r0, r6, #8, #8
 8003e36:	b2f4      	uxtb	r4, r6
 8003e38:	f85e 5020 	ldr.w	r5, [lr, r0, lsl #2]
 8003e3c:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8003e40:	f3c6 4007 	ubfx	r0, r6, #16, #8
 8003e44:	0e36      	lsrs	r6, r6, #24
 8003e46:	eb03 0a04 	add.w	sl, r3, r4
 8003e4a:	f85e 7020 	ldr.w	r7, [lr, r0, lsl #2]
 8003e4e:	f85e 4026 	ldr.w	r4, [lr, r6, lsl #2]
 8003e52:	b2c8      	uxtb	r0, r1
 8003e54:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8003e58:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8003e5c:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8003e60:	f85e 6020 	ldr.w	r6, [lr, r0, lsl #2]
 8003e64:	f85e 0023 	ldr.w	r0, [lr, r3, lsl #2]
 8003e68:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8003e6c:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8003e70:	0e09      	lsrs	r1, r1, #24
 8003e72:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8003e76:	f85e 3023 	ldr.w	r3, [lr, r3, lsl #2]
 8003e7a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8003e7e:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8003e82:	eb03 2890 	add.w	r8, r3, r0, lsr #10
 8003e86:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8003e8a:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8003e8e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8003e92:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8003e96:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8003e9a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8003e9e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8003ea2:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8003ea6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8003eaa:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8003eae:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8003eb2:	ea45 4a0a 	orr.w	sl, r5, sl, lsl #16
 8003eb6:	0a8b      	lsrs	r3, r1, #10
 8003eb8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8003ebc:	4939      	ldr	r1, [pc, #228]	; (8003fa4 <D64_GENERIC+0x1f8>)
 8003ebe:	9c02      	ldr	r4, [sp, #8]
 8003ec0:	fb2a 4101 	smlad	r1, sl, r1, r4
 8003ec4:	4c38      	ldr	r4, [pc, #224]	; (8003fa8 <D64_GENERIC+0x1fc>)
 8003ec6:	fb27 1104 	smlad	r1, r7, r4, r1
 8003eca:	4c38      	ldr	r4, [pc, #224]	; (8003fac <D64_GENERIC+0x200>)
 8003ecc:	fb20 1104 	smlad	r1, r0, r4, r1
 8003ed0:	f44f 3680 	mov.w	r6, #65536	; 0x10000
 8003ed4:	fb28 1106 	smlad	r1, r8, r6, r1
 8003ed8:	4c35      	ldr	r4, [pc, #212]	; (8003fb0 <D64_GENERIC+0x204>)
 8003eda:	9d01      	ldr	r5, [sp, #4]
 8003edc:	fb2a 5404 	smlad	r4, sl, r4, r5
 8003ee0:	4d33      	ldr	r5, [pc, #204]	; (8003fb0 <D64_GENERIC+0x204>)
 8003ee2:	fb28 4415 	smladx	r4, r8, r5, r4
 8003ee6:	4d33      	ldr	r5, [pc, #204]	; (8003fb4 <D64_GENERIC+0x208>)
 8003ee8:	fb27 4405 	smlad	r4, r7, r5, r4
 8003eec:	fb20 4415 	smladx	r4, r0, r5, r4
 8003ef0:	2501      	movs	r5, #1
 8003ef2:	9402      	str	r4, [sp, #8]
 8003ef4:	fb2a fa05 	smuad	sl, sl, r5
 8003ef8:	4c2f      	ldr	r4, [pc, #188]	; (8003fb8 <D64_GENERIC+0x20c>)
 8003efa:	fb27 a704 	smlad	r7, r7, r4, sl
 8003efe:	4c2f      	ldr	r4, [pc, #188]	; (8003fbc <D64_GENERIC+0x210>)
 8003f00:	fb20 7004 	smlad	r0, r0, r4, r7
 8003f04:	4c2e      	ldr	r4, [pc, #184]	; (8003fc0 <D64_GENERIC+0x214>)
 8003f06:	fb28 0004 	smlad	r0, r8, r4, r0
 8003f0a:	f5a1 3600 	sub.w	r6, r1, #131072	; 0x20000
 8003f0e:	9903      	ldr	r1, [sp, #12]
 8003f10:	9001      	str	r0, [sp, #4]
 8003f12:	b189      	cbz	r1, 8003f38 <D64_GENERIC+0x18c>
 8003f14:	9804      	ldr	r0, [sp, #16]
 8003f16:	9c05      	ldr	r4, [sp, #20]
 8003f18:	9605      	str	r6, [sp, #20]
 8003f1a:	4430      	add	r0, r6
 8003f1c:	1b00      	subs	r0, r0, r4
 8003f1e:	17c5      	asrs	r5, r0, #31
 8003f20:	460f      	mov	r7, r1
 8003f22:	fba0 0101 	umull	r0, r1, r0, r1
 8003f26:	fb07 1105 	mla	r1, r7, r5, r1
 8003f2a:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8003f2e:	f141 0100 	adc.w	r1, r1, #0
 8003f32:	0049      	lsls	r1, r1, #1
 8003f34:	9104      	str	r1, [sp, #16]
 8003f36:	460e      	mov	r6, r1
 8003f38:	8d14      	ldrh	r4, [r2, #40]	; 0x28
 8003f3a:	9906      	ldr	r1, [sp, #24]
 8003f3c:	9807      	ldr	r0, [sp, #28]
 8003f3e:	02b6      	lsls	r6, r6, #10
 8003f40:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
 8003f44:	f04f 0800 	mov.w	r8, #0
 8003f48:	fb0c f404 	mul.w	r4, ip, r4
 8003f4c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8003f50:	4641      	mov	r1, r8
 8003f52:	1089      	asrs	r1, r1, #2
 8003f54:	f301 010f 	ssat	r1, #16, r1
 8003f58:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8003f5c:	8cd1      	ldrh	r1, [r2, #38]	; 0x26
 8003f5e:	f10c 0c01 	add.w	ip, ip, #1
 8003f62:	4561      	cmp	r1, ip
 8003f64:	dd10      	ble.n	8003f88 <D64_GENERIC+0x1dc>
 8003f66:	8d57      	ldrh	r7, [r2, #42]	; 0x2a
 8003f68:	2f01      	cmp	r7, #1
 8003f6a:	f47f af3a 	bne.w	8003de2 <D64_GENERIC+0x36>
 8003f6e:	6b57      	ldr	r7, [r2, #52]	; 0x34
 8003f70:	f8d9 6000 	ldr.w	r6, [r9]
 8003f74:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8003f78:	06b8      	lsls	r0, r7, #26
 8003f7a:	f109 0908 	add.w	r9, r9, #8
 8003f7e:	f57f af58 	bpl.w	8003e32 <D64_GENERIC+0x86>
 8003f82:	ba76      	rev16	r6, r6
 8003f84:	ba49      	rev16	r1, r1
 8003f86:	e754      	b.n	8003e32 <D64_GENERIC+0x86>
 8003f88:	9901      	ldr	r1, [sp, #4]
 8003f8a:	61d3      	str	r3, [r2, #28]
 8003f8c:	9b04      	ldr	r3, [sp, #16]
 8003f8e:	6091      	str	r1, [r2, #8]
 8003f90:	6113      	str	r3, [r2, #16]
 8003f92:	9902      	ldr	r1, [sp, #8]
 8003f94:	9b05      	ldr	r3, [sp, #20]
 8003f96:	60d1      	str	r1, [r2, #12]
 8003f98:	2000      	movs	r0, #0
 8003f9a:	6153      	str	r3, [r2, #20]
 8003f9c:	b009      	add	sp, #36	; 0x24
 8003f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fa2:	bf00      	nop
 8003fa4:	001c0015 	.word	0x001c0015
 8003fa8:	000f000a 	.word	0x000f000a
 8003fac:	00060003 	.word	0x00060003
 8003fb0:	0024002a 	.word	0x0024002a
 8003fb4:	002e0030 	.word	0x002e0030
 8003fb8:	00030006 	.word	0x00030006
 8003fbc:	000a000f 	.word	0x000a000f
 8003fc0:	0015001c 	.word	0x0015001c
 8003fc4:	20000000 	.word	0x20000000

08003fc8 <D80_GENERIC>:
 8003fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fcc:	b08b      	sub	sp, #44	; 0x2c
 8003fce:	6914      	ldr	r4, [r2, #16]
 8003fd0:	9405      	str	r4, [sp, #20]
 8003fd2:	6954      	ldr	r4, [r2, #20]
 8003fd4:	9406      	str	r4, [sp, #24]
 8003fd6:	6894      	ldr	r4, [r2, #8]
 8003fd8:	9401      	str	r4, [sp, #4]
 8003fda:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8003fdc:	68d4      	ldr	r4, [r2, #12]
 8003fde:	9402      	str	r4, [sp, #8]
 8003fe0:	6b14      	ldr	r4, [r2, #48]	; 0x30
 8003fe2:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8003fe6:	9407      	str	r4, [sp, #28]
 8003fe8:	9108      	str	r1, [sp, #32]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	f000 8111 	beq.w	8004212 <D80_GENERIC+0x24a>
 8003ff0:	6a13      	ldr	r3, [r2, #32]
 8003ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8004260 <D80_GENERIC+0x298>
 8003ffa:	f8cd b00c 	str.w	fp, [sp, #12]
 8003ffe:	4604      	mov	r4, r0
 8004000:	9200      	str	r2, [sp, #0]
 8004002:	9304      	str	r3, [sp, #16]
 8004004:	e0ee      	b.n	80041e4 <D80_GENERIC+0x21c>
 8004006:	fa5f f888 	uxtb.w	r8, r8
 800400a:	fa0f f688 	sxth.w	r6, r8
 800400e:	0077      	lsls	r7, r6, #1
 8004010:	19b9      	adds	r1, r7, r6
 8004012:	f1c8 0500 	rsb	r5, r8, #0
 8004016:	1860      	adds	r0, r4, r1
 8004018:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 800401c:	1943      	adds	r3, r0, r5
 800401e:	5d40      	ldrb	r0, [r0, r5]
 8004020:	f814 b001 	ldrb.w	fp, [r4, r1]
 8004024:	f814 8008 	ldrb.w	r8, [r4, r8]
 8004028:	f894 a000 	ldrb.w	sl, [r4]
 800402c:	eb03 0c06 	add.w	ip, r3, r6
 8004030:	eb0c 0e05 	add.w	lr, ip, r5
 8004034:	0400      	lsls	r0, r0, #16
 8004036:	f81c 1005 	ldrb.w	r1, [ip, r5]
 800403a:	5d9b      	ldrb	r3, [r3, r6]
 800403c:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8004040:	eb00 600b 	add.w	r0, r0, fp, lsl #24
 8004044:	eb0e 0b45 	add.w	fp, lr, r5, lsl #1
 8004048:	eb0b 0406 	add.w	r4, fp, r6
 800404c:	0409      	lsls	r1, r1, #16
 800404e:	eb01 6303 	add.w	r3, r1, r3, lsl #24
 8004052:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 8004056:	5d61      	ldrb	r1, [r4, r5]
 8004058:	f81b 6006 	ldrb.w	r6, [fp, r6]
 800405c:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8004060:	442c      	add	r4, r5
 8004062:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8004066:	4450      	add	r0, sl
 8004068:	443c      	add	r4, r7
 800406a:	eb01 2106 	add.w	r1, r1, r6, lsl #8
 800406e:	4473      	add	r3, lr
 8004070:	b2c6      	uxtb	r6, r0
 8004072:	f3c0 2507 	ubfx	r5, r0, #8, #8
 8004076:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800407a:	9a03      	ldr	r2, [sp, #12]
 800407c:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004080:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8004084:	0e00      	lsrs	r0, r0, #24
 8004086:	443a      	add	r2, r7
 8004088:	f859 e026 	ldr.w	lr, [r9, r6, lsl #2]
 800408c:	f859 7020 	ldr.w	r7, [r9, r0, lsl #2]
 8004090:	b2de      	uxtb	r6, r3
 8004092:	eb05 2092 	add.w	r0, r5, r2, lsr #10
 8004096:	f3c3 2507 	ubfx	r5, r3, #8, #8
 800409a:	eb0e 2a90 	add.w	sl, lr, r0, lsr #10
 800409e:	f859 8026 	ldr.w	r8, [r9, r6, lsl #2]
 80040a2:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 80040a6:	f3c3 4607 	ubfx	r6, r3, #16, #8
 80040aa:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 80040ae:	0e1b      	lsrs	r3, r3, #24
 80040b0:	eb08 2897 	add.w	r8, r8, r7, lsr #10
 80040b4:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80040b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80040bc:	fa5f fc81 	uxtb.w	ip, r1
 80040c0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80040c4:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80040c8:	eb06 2e95 	add.w	lr, r6, r5, lsr #10
 80040cc:	f859 602c 	ldr.w	r6, [r9, ip, lsl #2]
 80040d0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80040d4:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 80040d8:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 80040dc:	eb01 2196 	add.w	r1, r1, r6, lsr #10
 80040e0:	f3c2 0b09 	ubfx	fp, r2, #0, #10
 80040e4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80040e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80040ec:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80040f0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80040f4:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80040f8:	ea40 4b0b 	orr.w	fp, r0, fp, lsl #16
 80040fc:	ea43 4e0e 	orr.w	lr, r3, lr, lsl #16
 8004100:	f3c1 0009 	ubfx	r0, r1, #0, #10
 8004104:	0a8b      	lsrs	r3, r1, #10
 8004106:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800410a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800410e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004112:	9303      	str	r3, [sp, #12]
 8004114:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8004118:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800411c:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8004120:	4b43      	ldr	r3, [pc, #268]	; (8004230 <D80_GENERIC+0x268>)
 8004122:	9a02      	ldr	r2, [sp, #8]
 8004124:	fb2b 2303 	smlad	r3, fp, r3, r2
 8004128:	4a42      	ldr	r2, [pc, #264]	; (8004234 <D80_GENERIC+0x26c>)
 800412a:	fb2a 3302 	smlad	r3, sl, r2, r3
 800412e:	4a42      	ldr	r2, [pc, #264]	; (8004238 <D80_GENERIC+0x270>)
 8004130:	fb28 3302 	smlad	r3, r8, r2, r3
 8004134:	4a41      	ldr	r2, [pc, #260]	; (800423c <D80_GENERIC+0x274>)
 8004136:	fb2e 3302 	smlad	r3, lr, r2, r3
 800413a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 800413e:	fb26 3301 	smlad	r3, r6, r1, r3
 8004142:	4a3f      	ldr	r2, [pc, #252]	; (8004240 <D80_GENERIC+0x278>)
 8004144:	9901      	ldr	r1, [sp, #4]
 8004146:	fb2b 1002 	smlad	r0, fp, r2, r1
 800414a:	4a3e      	ldr	r2, [pc, #248]	; (8004244 <D80_GENERIC+0x27c>)
 800414c:	fb2a 0002 	smlad	r0, sl, r2, r0
 8004150:	f04f 114b 	mov.w	r1, #4915275	; 0x4b004b
 8004154:	fb28 0101 	smlad	r1, r8, r1, r0
 8004158:	4a3b      	ldr	r2, [pc, #236]	; (8004248 <D80_GENERIC+0x280>)
 800415a:	fb2e 1102 	smlad	r1, lr, r2, r1
 800415e:	4a3b      	ldr	r2, [pc, #236]	; (800424c <D80_GENERIC+0x284>)
 8004160:	fb26 1202 	smlad	r2, r6, r2, r1
 8004164:	2001      	movs	r0, #1
 8004166:	9202      	str	r2, [sp, #8]
 8004168:	fb2b fb00 	smuad	fp, fp, r0
 800416c:	4a38      	ldr	r2, [pc, #224]	; (8004250 <D80_GENERIC+0x288>)
 800416e:	fb2a ba02 	smlad	sl, sl, r2, fp
 8004172:	4d38      	ldr	r5, [pc, #224]	; (8004254 <D80_GENERIC+0x28c>)
 8004174:	fb28 a805 	smlad	r8, r8, r5, sl
 8004178:	4d37      	ldr	r5, [pc, #220]	; (8004258 <D80_GENERIC+0x290>)
 800417a:	fb2e 8e05 	smlad	lr, lr, r5, r8
 800417e:	4d37      	ldr	r5, [pc, #220]	; (800425c <D80_GENERIC+0x294>)
 8004180:	fb26 e205 	smlad	r2, r6, r5, lr
 8004184:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004186:	9201      	str	r2, [sp, #4]
 8004188:	f5a3 337a 	sub.w	r3, r3, #256000	; 0x3e800
 800418c:	b191      	cbz	r1, 80041b4 <D80_GENERIC+0x1ec>
 800418e:	9a05      	ldr	r2, [sp, #20]
 8004190:	441a      	add	r2, r3
 8004192:	4610      	mov	r0, r2
 8004194:	9a06      	ldr	r2, [sp, #24]
 8004196:	9306      	str	r3, [sp, #24]
 8004198:	1a80      	subs	r0, r0, r2
 800419a:	17c7      	asrs	r7, r0, #31
 800419c:	460a      	mov	r2, r1
 800419e:	fba0 0101 	umull	r0, r1, r0, r1
 80041a2:	fb02 1107 	mla	r1, r2, r7, r1
 80041a6:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 80041aa:	f141 0100 	adc.w	r1, r1, #0
 80041ae:	004a      	lsls	r2, r1, #1
 80041b0:	9205      	str	r2, [sp, #20]
 80041b2:	4613      	mov	r3, r2
 80041b4:	9e00      	ldr	r6, [sp, #0]
 80041b6:	9f04      	ldr	r7, [sp, #16]
 80041b8:	8d35      	ldrh	r5, [r6, #40]	; 0x28
 80041ba:	9a07      	ldr	r2, [sp, #28]
 80041bc:	025b      	lsls	r3, r3, #9
 80041be:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80041c2:	2100      	movs	r1, #0
 80041c4:	fbc2 0103 	smlal	r0, r1, r2, r3
 80041c8:	fb07 f505 	mul.w	r5, r7, r5
 80041cc:	9a08      	ldr	r2, [sp, #32]
 80041ce:	108b      	asrs	r3, r1, #2
 80041d0:	f303 030f 	ssat	r3, #16, r3
 80041d4:	f822 3015 	strh.w	r3, [r2, r5, lsl #1]
 80041d8:	463a      	mov	r2, r7
 80041da:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
 80041dc:	3201      	adds	r2, #1
 80041de:	4293      	cmp	r3, r2
 80041e0:	9204      	str	r2, [sp, #16]
 80041e2:	dd13      	ble.n	800420c <D80_GENERIC+0x244>
 80041e4:	9b00      	ldr	r3, [sp, #0]
 80041e6:	f8b3 802a 	ldrh.w	r8, [r3, #42]	; 0x2a
 80041ea:	f1b8 0f01 	cmp.w	r8, #1
 80041ee:	f47f af0a 	bne.w	8004006 <D80_GENERIC+0x3e>
 80041f2:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 80041f4:	68a1      	ldr	r1, [r4, #8]
 80041f6:	06aa      	lsls	r2, r5, #26
 80041f8:	e894 0009 	ldmia.w	r4, {r0, r3}
 80041fc:	f104 040a 	add.w	r4, r4, #10
 8004200:	f57f af36 	bpl.w	8004070 <D80_GENERIC+0xa8>
 8004204:	ba40      	rev16	r0, r0
 8004206:	ba5b      	rev16	r3, r3
 8004208:	ba49      	rev16	r1, r1
 800420a:	e731      	b.n	8004070 <D80_GENERIC+0xa8>
 800420c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8004210:	4632      	mov	r2, r6
 8004212:	9b01      	ldr	r3, [sp, #4]
 8004214:	6093      	str	r3, [r2, #8]
 8004216:	9b02      	ldr	r3, [sp, #8]
 8004218:	60d3      	str	r3, [r2, #12]
 800421a:	9b05      	ldr	r3, [sp, #20]
 800421c:	6113      	str	r3, [r2, #16]
 800421e:	9b06      	ldr	r3, [sp, #24]
 8004220:	f8c2 b01c 	str.w	fp, [r2, #28]
 8004224:	2000      	movs	r0, #0
 8004226:	6153      	str	r3, [r2, #20]
 8004228:	b00b      	add	sp, #44	; 0x2c
 800422a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422e:	bf00      	nop
 8004230:	002d0024 	.word	0x002d0024
 8004234:	001c0015 	.word	0x001c0015
 8004238:	000f000a 	.word	0x000f000a
 800423c:	00060003 	.word	0x00060003
 8004240:	0037003f 	.word	0x0037003f
 8004244:	00450049 	.word	0x00450049
 8004248:	00490045 	.word	0x00490045
 800424c:	003f0037 	.word	0x003f0037
 8004250:	00030006 	.word	0x00030006
 8004254:	000a000f 	.word	0x000a000f
 8004258:	0015001c 	.word	0x0015001c
 800425c:	0024002d 	.word	0x0024002d
 8004260:	20000000 	.word	0x20000000

08004264 <D128_GENERIC>:
 8004264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004268:	b091      	sub	sp, #68	; 0x44
 800426a:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 800426c:	9004      	str	r0, [sp, #16]
 800426e:	4610      	mov	r0, r2
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	6912      	ldr	r2, [r2, #16]
 8004274:	920b      	str	r2, [sp, #44]	; 0x2c
 8004276:	4602      	mov	r2, r0
 8004278:	6940      	ldr	r0, [r0, #20]
 800427a:	900c      	str	r0, [sp, #48]	; 0x30
 800427c:	4610      	mov	r0, r2
 800427e:	4614      	mov	r4, r2
 8004280:	69d2      	ldr	r2, [r2, #28]
 8004282:	9202      	str	r2, [sp, #8]
 8004284:	6882      	ldr	r2, [r0, #8]
 8004286:	9201      	str	r2, [sp, #4]
 8004288:	68c0      	ldr	r0, [r0, #12]
 800428a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800428c:	9003      	str	r0, [sp, #12]
 800428e:	920d      	str	r2, [sp, #52]	; 0x34
 8004290:	910e      	str	r1, [sp, #56]	; 0x38
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 819b 	beq.w	80045ce <D128_GENERIC+0x36a>
 8004298:	6a23      	ldr	r3, [r4, #32]
 800429a:	930f      	str	r3, [sp, #60]	; 0x3c
 800429c:	2300      	movs	r3, #0
 800429e:	f8df 93a4 	ldr.w	r9, [pc, #932]	; 8004644 <D128_GENERIC+0x3e0>
 80042a2:	9305      	str	r3, [sp, #20]
 80042a4:	e179      	b.n	800459a <D128_GENERIC+0x336>
 80042a6:	b2d2      	uxtb	r2, r2
 80042a8:	9d04      	ldr	r5, [sp, #16]
 80042aa:	b210      	sxth	r0, r2
 80042ac:	eb00 0a40 	add.w	sl, r0, r0, lsl #1
 80042b0:	4251      	negs	r1, r2
 80042b2:	eb05 040a 	add.w	r4, r5, sl
 80042b6:	0083      	lsls	r3, r0, #2
 80042b8:	eb04 0801 	add.w	r8, r4, r1
 80042bc:	eb03 0c00 	add.w	ip, r3, r0
 80042c0:	eb08 070c 	add.w	r7, r8, ip
 80042c4:	9308      	str	r3, [sp, #32]
 80042c6:	187b      	adds	r3, r7, r1
 80042c8:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
 80042cc:	eb03 0e41 	add.w	lr, r3, r1, lsl #1
 80042d0:	eb0e 0600 	add.w	r6, lr, r0
 80042d4:	9306      	str	r3, [sp, #24]
 80042d6:	1873      	adds	r3, r6, r1
 80042d8:	f815 b00a 	ldrb.w	fp, [r5, sl]
 80042dc:	9304      	str	r3, [sp, #16]
 80042de:	f818 a00c 	ldrb.w	sl, [r8, ip]
 80042e2:	9b06      	ldr	r3, [sp, #24]
 80042e4:	f815 c002 	ldrb.w	ip, [r5, r2]
 80042e8:	782d      	ldrb	r5, [r5, #0]
 80042ea:	5c7a      	ldrb	r2, [r7, r1]
 80042ec:	9507      	str	r5, [sp, #28]
 80042ee:	9d04      	ldr	r5, [sp, #16]
 80042f0:	f81e 8000 	ldrb.w	r8, [lr, r0]
 80042f4:	f817 e011 	ldrb.w	lr, [r7, r1, lsl #1]
 80042f8:	f813 7011 	ldrb.w	r7, [r3, r1, lsl #1]
 80042fc:	5c64      	ldrb	r4, [r4, r1]
 80042fe:	5c73      	ldrb	r3, [r6, r1]
 8004300:	9706      	str	r7, [sp, #24]
 8004302:	0412      	lsls	r2, r2, #16
 8004304:	f816 7011 	ldrb.w	r7, [r6, r1, lsl #1]
 8004308:	eb05 0641 	add.w	r6, r5, r1, lsl #1
 800430c:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8004310:	eb06 0a00 	add.w	sl, r6, r0
 8004314:	0424      	lsls	r4, r4, #16
 8004316:	eb04 640b 	add.w	r4, r4, fp, lsl #24
 800431a:	f81a b001 	ldrb.w	fp, [sl, r1]
 800431e:	5c36      	ldrb	r6, [r6, r0]
 8004320:	f815 0011 	ldrb.w	r0, [r5, r1, lsl #1]
 8004324:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 8004328:	eb0b 6606 	add.w	r6, fp, r6, lsl #24
 800432c:	f81a b011 	ldrb.w	fp, [sl, r1, lsl #1]
 8004330:	eb0a 0501 	add.w	r5, sl, r1
 8004334:	041b      	lsls	r3, r3, #16
 8004336:	eb06 2b0b 	add.w	fp, r6, fp, lsl #8
 800433a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800433e:	9e08      	ldr	r6, [sp, #32]
 8004340:	f815 a011 	ldrb.w	sl, [r5, r1, lsl #1]
 8004344:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8004348:	eb05 0141 	add.w	r1, r5, r1, lsl #1
 800434c:	9f06      	ldr	r7, [sp, #24]
 800434e:	9d07      	ldr	r5, [sp, #28]
 8004350:	eb04 240c 	add.w	r4, r4, ip, lsl #8
 8004354:	eb02 220e 	add.w	r2, r2, lr, lsl #8
 8004358:	4431      	add	r1, r6
 800435a:	442c      	add	r4, r5
 800435c:	443a      	add	r2, r7
 800435e:	9104      	str	r1, [sp, #16]
 8004360:	44d3      	add	fp, sl
 8004362:	4418      	add	r0, r3
 8004364:	b2e3      	uxtb	r3, r4
 8004366:	f3c4 2107 	ubfx	r1, r4, #8, #8
 800436a:	9e02      	ldr	r6, [sp, #8]
 800436c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8004370:	f859 5021 	ldr.w	r5, [r9, r1, lsl #2]
 8004374:	f3c4 4107 	ubfx	r1, r4, #16, #8
 8004378:	0e24      	lsrs	r4, r4, #24
 800437a:	441e      	add	r6, r3
 800437c:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 8004380:	4633      	mov	r3, r6
 8004382:	b2d4      	uxtb	r4, r2
 8004384:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8004388:	f859 e024 	ldr.w	lr, [r9, r4, lsl #2]
 800438c:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004390:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004394:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8004398:	f3c2 4407 	ubfx	r4, r2, #16, #8
 800439c:	0e12      	lsrs	r2, r2, #24
 800439e:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80043a2:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80043a6:	9602      	str	r6, [sp, #8]
 80043a8:	eb0e 2897 	add.w	r8, lr, r7, lsr #10
 80043ac:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80043b0:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80043b4:	9706      	str	r7, [sp, #24]
 80043b6:	b2c2      	uxtb	r2, r0
 80043b8:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80043bc:	eb06 2c91 	add.w	ip, r6, r1, lsr #10
 80043c0:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80043c4:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80043c8:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80043cc:	eb06 2e94 	add.w	lr, r6, r4, lsr #10
 80043d0:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80043d4:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80043d8:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80043dc:	0e00      	lsrs	r0, r0, #24
 80043de:	fa5f f68b 	uxtb.w	r6, fp
 80043e2:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 80043e6:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 80043ea:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 80043ee:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80043f2:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80043f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80043fa:	9308      	str	r3, [sp, #32]
 80043fc:	eb06 2390 	add.w	r3, r6, r0, lsr #10
 8004400:	461e      	mov	r6, r3
 8004402:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8004406:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800440a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800440e:	9509      	str	r5, [sp, #36]	; 0x24
 8004410:	9607      	str	r6, [sp, #28]
 8004412:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004416:	f3cb 4507 	ubfx	r5, fp, #16, #8
 800441a:	9e02      	ldr	r6, [sp, #8]
 800441c:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8004420:	ea4f 6a1b 	mov.w	sl, fp, lsr #24
 8004424:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004428:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 800442c:	9602      	str	r6, [sp, #8]
 800442e:	9e06      	ldr	r6, [sp, #24]
 8004430:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004434:	eb0a 2b95 	add.w	fp, sl, r5, lsr #10
 8004438:	f3c6 0a09 	ubfx	sl, r6, #0, #10
 800443c:	f3cc 0609 	ubfx	r6, ip, #0, #10
 8004440:	9606      	str	r6, [sp, #24]
 8004442:	f3c2 0609 	ubfx	r6, r2, #0, #10
 8004446:	9a07      	ldr	r2, [sp, #28]
 8004448:	960a      	str	r6, [sp, #40]	; 0x28
 800444a:	f3c2 0609 	ubfx	r6, r2, #0, #10
 800444e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004450:	4694      	mov	ip, r2
 8004452:	9a08      	ldr	r2, [sp, #32]
 8004454:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8004458:	9a02      	ldr	r2, [sp, #8]
 800445a:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 800445e:	9a06      	ldr	r2, [sp, #24]
 8004460:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004464:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8004468:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800446a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800446e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004472:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004476:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800447a:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 800447e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8004482:	f3cb 0e09 	ubfx	lr, fp, #0, #10
 8004486:	ea4f 269b 	mov.w	r6, fp, lsr #10
 800448a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800448e:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004492:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004496:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800449a:	9602      	str	r6, [sp, #8]
 800449c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80044a0:	ea4e 4505 	orr.w	r5, lr, r5, lsl #16
 80044a4:	4e52      	ldr	r6, [pc, #328]	; (80045f0 <D128_GENERIC+0x38c>)
 80044a6:	9f03      	ldr	r7, [sp, #12]
 80044a8:	fb2c 7606 	smlad	r6, ip, r6, r7
 80044ac:	4f51      	ldr	r7, [pc, #324]	; (80045f4 <D128_GENERIC+0x390>)
 80044ae:	fb2a 6607 	smlad	r6, sl, r7, r6
 80044b2:	4f51      	ldr	r7, [pc, #324]	; (80045f8 <D128_GENERIC+0x394>)
 80044b4:	fb21 6607 	smlad	r6, r1, r7, r6
 80044b8:	4f50      	ldr	r7, [pc, #320]	; (80045fc <D128_GENERIC+0x398>)
 80044ba:	fb24 6607 	smlad	r6, r4, r7, r6
 80044be:	4f50      	ldr	r7, [pc, #320]	; (8004600 <D128_GENERIC+0x39c>)
 80044c0:	fb22 6607 	smlad	r6, r2, r7, r6
 80044c4:	4f4f      	ldr	r7, [pc, #316]	; (8004604 <D128_GENERIC+0x3a0>)
 80044c6:	fb20 6607 	smlad	r6, r0, r7, r6
 80044ca:	4f4f      	ldr	r7, [pc, #316]	; (8004608 <D128_GENERIC+0x3a4>)
 80044cc:	fb23 6607 	smlad	r6, r3, r7, r6
 80044d0:	f44f 3780 	mov.w	r7, #65536	; 0x10000
 80044d4:	fb25 6807 	smlad	r8, r5, r7, r6
 80044d8:	4f4c      	ldr	r7, [pc, #304]	; (800460c <D128_GENERIC+0x3a8>)
 80044da:	9e01      	ldr	r6, [sp, #4]
 80044dc:	fb2c 6e07 	smlad	lr, ip, r7, r6
 80044e0:	4e4b      	ldr	r6, [pc, #300]	; (8004610 <D128_GENERIC+0x3ac>)
 80044e2:	fb2a ee06 	smlad	lr, sl, r6, lr
 80044e6:	4f4b      	ldr	r7, [pc, #300]	; (8004614 <D128_GENERIC+0x3b0>)
 80044e8:	fb21 ee07 	smlad	lr, r1, r7, lr
 80044ec:	4f4a      	ldr	r7, [pc, #296]	; (8004618 <D128_GENERIC+0x3b4>)
 80044ee:	fb24 ee07 	smlad	lr, r4, r7, lr
 80044f2:	4f4a      	ldr	r7, [pc, #296]	; (800461c <D128_GENERIC+0x3b8>)
 80044f4:	fb22 ee07 	smlad	lr, r2, r7, lr
 80044f8:	4f49      	ldr	r7, [pc, #292]	; (8004620 <D128_GENERIC+0x3bc>)
 80044fa:	fb20 ee07 	smlad	lr, r0, r7, lr
 80044fe:	4f49      	ldr	r7, [pc, #292]	; (8004624 <D128_GENERIC+0x3c0>)
 8004500:	fb23 e707 	smlad	r7, r3, r7, lr
 8004504:	f8df e140 	ldr.w	lr, [pc, #320]	; 8004648 <D128_GENERIC+0x3e4>
 8004508:	fb25 760e 	smlad	r6, r5, lr, r7
 800450c:	f04f 0b01 	mov.w	fp, #1
 8004510:	9603      	str	r6, [sp, #12]
 8004512:	fb2c fb0b 	smuad	fp, ip, fp
 8004516:	4f44      	ldr	r7, [pc, #272]	; (8004628 <D128_GENERIC+0x3c4>)
 8004518:	fb2a ba07 	smlad	sl, sl, r7, fp
 800451c:	4f43      	ldr	r7, [pc, #268]	; (800462c <D128_GENERIC+0x3c8>)
 800451e:	fb21 aa07 	smlad	sl, r1, r7, sl
 8004522:	4f43      	ldr	r7, [pc, #268]	; (8004630 <D128_GENERIC+0x3cc>)
 8004524:	fb24 aa07 	smlad	sl, r4, r7, sl
 8004528:	4f42      	ldr	r7, [pc, #264]	; (8004634 <D128_GENERIC+0x3d0>)
 800452a:	fb22 aa07 	smlad	sl, r2, r7, sl
 800452e:	4f42      	ldr	r7, [pc, #264]	; (8004638 <D128_GENERIC+0x3d4>)
 8004530:	fb20 a707 	smlad	r7, r0, r7, sl
 8004534:	4841      	ldr	r0, [pc, #260]	; (800463c <D128_GENERIC+0x3d8>)
 8004536:	fb23 7700 	smlad	r7, r3, r0, r7
 800453a:	4b41      	ldr	r3, [pc, #260]	; (8004640 <D128_GENERIC+0x3dc>)
 800453c:	fb25 7303 	smlad	r3, r5, r3, r7
 8004540:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004542:	9301      	str	r3, [sp, #4]
 8004544:	f5a8 1680 	sub.w	r6, r8, #1048576	; 0x100000
 8004548:	b185      	cbz	r5, 800456c <D128_GENERIC+0x308>
 800454a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800454c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800454e:	960c      	str	r6, [sp, #48]	; 0x30
 8004550:	4432      	add	r2, r6
 8004552:	1a52      	subs	r2, r2, r1
 8004554:	17d1      	asrs	r1, r2, #31
 8004556:	fba2 2305 	umull	r2, r3, r2, r5
 800455a:	fb05 3301 	mla	r3, r5, r1, r3
 800455e:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004562:	f143 0300 	adc.w	r3, r3, #0
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	930b      	str	r3, [sp, #44]	; 0x2c
 800456a:	461e      	mov	r6, r3
 800456c:	9800      	ldr	r0, [sp, #0]
 800456e:	9c05      	ldr	r4, [sp, #20]
 8004570:	8d01      	ldrh	r1, [r0, #40]	; 0x28
 8004572:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8004574:	01f6      	lsls	r6, r6, #7
 8004576:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800457a:	2300      	movs	r3, #0
 800457c:	fbc5 2306 	smlal	r2, r3, r5, r6
 8004580:	fb04 f101 	mul.w	r1, r4, r1
 8004584:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004586:	109b      	asrs	r3, r3, #2
 8004588:	f303 030f 	ssat	r3, #16, r3
 800458c:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8004590:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
 8004592:	1c62      	adds	r2, r4, #1
 8004594:	4293      	cmp	r3, r2
 8004596:	9205      	str	r2, [sp, #20]
 8004598:	dd19      	ble.n	80045ce <D128_GENERIC+0x36a>
 800459a:	9b00      	ldr	r3, [sp, #0]
 800459c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800459e:	2a01      	cmp	r2, #1
 80045a0:	f47f ae81 	bne.w	80042a6 <D128_GENERIC+0x42>
 80045a4:	9804      	ldr	r0, [sp, #16]
 80045a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a8:	6804      	ldr	r4, [r0, #0]
 80045aa:	6842      	ldr	r2, [r0, #4]
 80045ac:	4601      	mov	r1, r0
 80045ae:	069b      	lsls	r3, r3, #26
 80045b0:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80045b4:	6880      	ldr	r0, [r0, #8]
 80045b6:	f101 0110 	add.w	r1, r1, #16
 80045ba:	d506      	bpl.n	80045ca <D128_GENERIC+0x366>
 80045bc:	ba64      	rev16	r4, r4
 80045be:	ba52      	rev16	r2, r2
 80045c0:	ba40      	rev16	r0, r0
 80045c2:	fa9b fb9b 	rev16.w	fp, fp
 80045c6:	9104      	str	r1, [sp, #16]
 80045c8:	e6cc      	b.n	8004364 <D128_GENERIC+0x100>
 80045ca:	9104      	str	r1, [sp, #16]
 80045cc:	e6ca      	b.n	8004364 <D128_GENERIC+0x100>
 80045ce:	9a00      	ldr	r2, [sp, #0]
 80045d0:	9901      	ldr	r1, [sp, #4]
 80045d2:	6091      	str	r1, [r2, #8]
 80045d4:	9903      	ldr	r1, [sp, #12]
 80045d6:	60d1      	str	r1, [r2, #12]
 80045d8:	9b02      	ldr	r3, [sp, #8]
 80045da:	61d3      	str	r3, [r2, #28]
 80045dc:	4611      	mov	r1, r2
 80045de:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045e0:	610a      	str	r2, [r1, #16]
 80045e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045e4:	614a      	str	r2, [r1, #20]
 80045e6:	2000      	movs	r0, #0
 80045e8:	b011      	add	sp, #68	; 0x44
 80045ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ee:	bf00      	nop
 80045f0:	00780069 	.word	0x00780069
 80045f4:	005b004e 	.word	0x005b004e
 80045f8:	00420037 	.word	0x00420037
 80045fc:	002d0024 	.word	0x002d0024
 8004600:	001c0015 	.word	0x001c0015
 8004604:	000f000a 	.word	0x000f000a
 8004608:	00060003 	.word	0x00060003
 800460c:	00880096 	.word	0x00880096
 8004610:	00a200ac 	.word	0x00a200ac
 8004614:	00b400ba 	.word	0x00b400ba
 8004618:	00be00c0 	.word	0x00be00c0
 800461c:	00c000be 	.word	0x00c000be
 8004620:	00ba00b4 	.word	0x00ba00b4
 8004624:	00ac00a2 	.word	0x00ac00a2
 8004628:	00030006 	.word	0x00030006
 800462c:	000a000f 	.word	0x000a000f
 8004630:	0015001c 	.word	0x0015001c
 8004634:	0024002d 	.word	0x0024002d
 8004638:	00370042 	.word	0x00370042
 800463c:	004e005b 	.word	0x004e005b
 8004640:	00690078 	.word	0x00690078
 8004644:	20000000 	.word	0x20000000
 8004648:	00960088 	.word	0x00960088

0800464c <D16_1CH_HTONS_VOL_HP>:
 800464c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004650:	4692      	mov	sl, r2
 8004652:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004654:	f8da 5010 	ldr.w	r5, [sl, #16]
 8004658:	f8da 4014 	ldr.w	r4, [sl, #20]
 800465c:	f8da 301c 	ldr.w	r3, [sl, #28]
 8004660:	f8da 6008 	ldr.w	r6, [sl, #8]
 8004664:	f8da c030 	ldr.w	ip, [sl, #48]	; 0x30
 8004668:	f8da 7020 	ldr.w	r7, [sl, #32]
 800466c:	b083      	sub	sp, #12
 800466e:	2a00      	cmp	r2, #0
 8004670:	d04e      	beq.n	8004710 <D16_1CH_HTONS_VOL_HP+0xc4>
 8004672:	3902      	subs	r1, #2
 8004674:	f8df e0a4 	ldr.w	lr, [pc, #164]	; 800471c <D16_1CH_HTONS_VOL_HP+0xd0>
 8004678:	9101      	str	r1, [sp, #4]
 800467a:	eb00 0b42 	add.w	fp, r0, r2, lsl #1
 800467e:	f850 2b02 	ldr.w	r2, [r0], #2
 8004682:	ba52      	rev16	r2, r2
 8004684:	fa5f f982 	uxtb.w	r9, r2
 8004688:	f3c2 2807 	ubfx	r8, r2, #8, #8
 800468c:	f85e 2029 	ldr.w	r2, [lr, r9, lsl #2]
 8004690:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
 8004694:	491f      	ldr	r1, [pc, #124]	; (8004714 <D16_1CH_HTONS_VOL_HP+0xc8>)
 8004696:	441a      	add	r2, r3
 8004698:	eb08 2392 	add.w	r3, r8, r2, lsr #10
 800469c:	f3c3 0809 	ubfx	r8, r3, #0, #10
 80046a0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80046a4:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 80046a8:	0a9b      	lsrs	r3, r3, #10
 80046aa:	fb22 6801 	smlad	r8, r2, r1, r6
 80046ae:	491a      	ldr	r1, [pc, #104]	; (8004718 <D16_1CH_HTONS_VOL_HP+0xcc>)
 80046b0:	fb22 f601 	smuad	r6, r2, r1
 80046b4:	f5a8 6200 	sub.w	r2, r8, #2048	; 0x800
 80046b8:	4415      	add	r5, r2
 80046ba:	1b2c      	subs	r4, r5, r4
 80046bc:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80046c0:	fba4 4507 	umull	r4, r5, r4, r7
 80046c4:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 80046c8:	fb07 5509 	mla	r5, r7, r9, r5
 80046cc:	f145 0500 	adc.w	r5, r5, #0
 80046d0:	046c      	lsls	r4, r5, #17
 80046d2:	9901      	ldr	r1, [sp, #4]
 80046d4:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80046d8:	f04f 0900 	mov.w	r9, #0
 80046dc:	fbc4 890c 	smlal	r8, r9, r4, ip
 80046e0:	ea4f 08a9 	mov.w	r8, r9, asr #2
 80046e4:	f308 080f 	ssat	r8, #16, r8
 80046e8:	f821 8f02 	strh.w	r8, [r1, #2]!
 80046ec:	4558      	cmp	r0, fp
 80046ee:	ea4f 0545 	mov.w	r5, r5, lsl #1
 80046f2:	4614      	mov	r4, r2
 80046f4:	9101      	str	r1, [sp, #4]
 80046f6:	d1c2      	bne.n	800467e <D16_1CH_HTONS_VOL_HP+0x32>
 80046f8:	2000      	movs	r0, #0
 80046fa:	f8ca 6008 	str.w	r6, [sl, #8]
 80046fe:	f8ca 301c 	str.w	r3, [sl, #28]
 8004702:	f8ca 5010 	str.w	r5, [sl, #16]
 8004706:	f8ca 2014 	str.w	r2, [sl, #20]
 800470a:	b003      	add	sp, #12
 800470c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004710:	4622      	mov	r2, r4
 8004712:	e7f1      	b.n	80046f8 <D16_1CH_HTONS_VOL_HP+0xac>
 8004714:	00030001 	.word	0x00030001
 8004718:	00010003 	.word	0x00010003
 800471c:	20000000 	.word	0x20000000

08004720 <D24_1CH_HTONS_VOL_HP>:
 8004720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004724:	b087      	sub	sp, #28
 8004726:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004728:	9303      	str	r3, [sp, #12]
 800472a:	4617      	mov	r7, r2
 800472c:	9205      	str	r2, [sp, #20]
 800472e:	6915      	ldr	r5, [r2, #16]
 8004730:	6954      	ldr	r4, [r2, #20]
 8004732:	69d6      	ldr	r6, [r2, #28]
 8004734:	6893      	ldr	r3, [r2, #8]
 8004736:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 800473a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800473c:	9204      	str	r2, [sp, #16]
 800473e:	9a03      	ldr	r2, [sp, #12]
 8004740:	f8d7 a020 	ldr.w	sl, [r7, #32]
 8004744:	2a00      	cmp	r2, #0
 8004746:	d07c      	beq.n	8004842 <D24_1CH_HTONS_VOL_HP+0x122>
 8004748:	f1a1 0b02 	sub.w	fp, r1, #2
 800474c:	2700      	movs	r7, #0
 800474e:	46a8      	mov	r8, r5
 8004750:	f8cd b008 	str.w	fp, [sp, #8]
 8004754:	4655      	mov	r5, sl
 8004756:	46e3      	mov	fp, ip
 8004758:	f8df e0f4 	ldr.w	lr, [pc, #244]	; 8004850 <D24_1CH_HTONS_VOL_HP+0x130>
 800475c:	46ba      	mov	sl, r7
 800475e:	469c      	mov	ip, r3
 8004760:	e055      	b.n	800480e <D24_1CH_HTONS_VOL_HP+0xee>
 8004762:	7802      	ldrb	r2, [r0, #0]
 8004764:	78c3      	ldrb	r3, [r0, #3]
 8004766:	7841      	ldrb	r1, [r0, #1]
 8004768:	0212      	lsls	r2, r2, #8
 800476a:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 800476e:	440b      	add	r3, r1
 8004770:	3002      	adds	r0, #2
 8004772:	b2d9      	uxtb	r1, r3
 8004774:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004778:	f85e 7021 	ldr.w	r7, [lr, r1, lsl #2]
 800477c:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 8004780:	0c1b      	lsrs	r3, r3, #16
 8004782:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8004786:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800478a:	f85e 1023 	ldr.w	r1, [lr, r3, lsl #2]
 800478e:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8004792:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8004796:	eb01 2692 	add.w	r6, r1, r2, lsr #10
 800479a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800479e:	4a2a      	ldr	r2, [pc, #168]	; (8004848 <D24_1CH_HTONS_VOL_HP+0x128>)
 80047a0:	fb23 b102 	smlad	r1, r3, r2, fp
 80047a4:	4a29      	ldr	r2, [pc, #164]	; (800484c <D24_1CH_HTONS_VOL_HP+0x12c>)
 80047a6:	fb23 cb02 	smlad	fp, r3, r2, ip
 80047aa:	f3c6 0c09 	ubfx	ip, r6, #0, #10
 80047ae:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 80047b2:	eb0b 0b4c 	add.w	fp, fp, ip, lsl #1
 80047b6:	2201      	movs	r2, #1
 80047b8:	fb23 f702 	smuad	r7, r3, r2
 80047bc:	f5a1 51d8 	sub.w	r1, r1, #6912	; 0x1b00
 80047c0:	eb01 0208 	add.w	r2, r1, r8
 80047c4:	1b12      	subs	r2, r2, r4
 80047c6:	17d4      	asrs	r4, r2, #31
 80047c8:	fba2 2305 	umull	r2, r3, r2, r5
 80047cc:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 80047d0:	fb05 3304 	mla	r3, r5, r4, r3
 80047d4:	f143 0300 	adc.w	r3, r3, #0
 80047d8:	9c04      	ldr	r4, [sp, #16]
 80047da:	03da      	lsls	r2, r3, #15
 80047dc:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 80047e0:	f04f 0900 	mov.w	r9, #0
 80047e4:	fbc4 8902 	smlal	r8, r9, r4, r2
 80047e8:	e9cd 8900 	strd	r8, r9, [sp]
 80047ec:	9a02      	ldr	r2, [sp, #8]
 80047ee:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80047f2:	9b01      	ldr	r3, [sp, #4]
 80047f4:	109b      	asrs	r3, r3, #2
 80047f6:	f303 030f 	ssat	r3, #16, r3
 80047fa:	f822 3f02 	strh.w	r3, [r2, #2]!
 80047fe:	9b03      	ldr	r3, [sp, #12]
 8004800:	9202      	str	r2, [sp, #8]
 8004802:	f10a 0a01 	add.w	sl, sl, #1
 8004806:	459a      	cmp	sl, r3
 8004808:	44bc      	add	ip, r7
 800480a:	d00c      	beq.n	8004826 <D24_1CH_HTONS_VOL_HP+0x106>
 800480c:	460c      	mov	r4, r1
 800480e:	f01a 0f01 	tst.w	sl, #1
 8004812:	d0a6      	beq.n	8004762 <D24_1CH_HTONS_VOL_HP+0x42>
 8004814:	78c2      	ldrb	r2, [r0, #3]
 8004816:	7883      	ldrb	r3, [r0, #2]
 8004818:	f810 1b04 	ldrb.w	r1, [r0], #4
 800481c:	0212      	lsls	r2, r2, #8
 800481e:	eb02 4303 	add.w	r3, r2, r3, lsl #16
 8004822:	440b      	add	r3, r1
 8004824:	e7a5      	b.n	8004772 <D24_1CH_HTONS_VOL_HP+0x52>
 8004826:	9805      	ldr	r0, [sp, #20]
 8004828:	4663      	mov	r3, ip
 800482a:	4645      	mov	r5, r8
 800482c:	46dc      	mov	ip, fp
 800482e:	6083      	str	r3, [r0, #8]
 8004830:	f8c0 c00c 	str.w	ip, [r0, #12]
 8004834:	61c6      	str	r6, [r0, #28]
 8004836:	6105      	str	r5, [r0, #16]
 8004838:	6141      	str	r1, [r0, #20]
 800483a:	2000      	movs	r0, #0
 800483c:	b007      	add	sp, #28
 800483e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004842:	4621      	mov	r1, r4
 8004844:	4638      	mov	r0, r7
 8004846:	e7f2      	b.n	800482e <D24_1CH_HTONS_VOL_HP+0x10e>
 8004848:	00030001 	.word	0x00030001
 800484c:	00060007 	.word	0x00060007
 8004850:	20000000 	.word	0x20000000

08004854 <D32_1CH_HTONS_VOL_HP>:
 8004854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004858:	4691      	mov	r9, r2
 800485a:	b085      	sub	sp, #20
 800485c:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 800485e:	f8d9 6010 	ldr.w	r6, [r9, #16]
 8004862:	f8d9 7014 	ldr.w	r7, [r9, #20]
 8004866:	f8d9 401c 	ldr.w	r4, [r9, #28]
 800486a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800486e:	f8d9 500c 	ldr.w	r5, [r9, #12]
 8004872:	f8d9 8020 	ldr.w	r8, [r9, #32]
 8004876:	4682      	mov	sl, r0
 8004878:	f8d9 0030 	ldr.w	r0, [r9, #48]	; 0x30
 800487c:	9002      	str	r0, [sp, #8]
 800487e:	2a00      	cmp	r2, #0
 8004880:	d073      	beq.n	800496a <D32_1CH_HTONS_VOL_HP+0x116>
 8004882:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004886:	f8df e0f8 	ldr.w	lr, [pc, #248]	; 8004980 <D32_1CH_HTONS_VOL_HP+0x12c>
 800488a:	f8cd 900c 	str.w	r9, [sp, #12]
 800488e:	468c      	mov	ip, r1
 8004890:	f8cd a004 	str.w	sl, [sp, #4]
 8004894:	4691      	mov	r9, r2
 8004896:	9a01      	ldr	r2, [sp, #4]
 8004898:	f852 1b04 	ldr.w	r1, [r2], #4
 800489c:	9201      	str	r2, [sp, #4]
 800489e:	ba49      	rev16	r1, r1
 80048a0:	b2c8      	uxtb	r0, r1
 80048a2:	f3c1 2207 	ubfx	r2, r1, #8, #8
 80048a6:	f3c1 4b07 	ubfx	fp, r1, #16, #8
 80048aa:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80048ae:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
 80048b2:	0e09      	lsrs	r1, r1, #24
 80048b4:	eb00 2094 	add.w	r0, r0, r4, lsr #10
 80048b8:	f85e 402b 	ldr.w	r4, [lr, fp, lsl #2]
 80048bc:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80048c0:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 80048c4:	eb04 2b92 	add.w	fp, r4, r2, lsr #10
 80048c8:	eb01 249b 	add.w	r4, r1, fp, lsr #10
 80048cc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80048d0:	f3c4 0109 	ubfx	r1, r4, #0, #10
 80048d4:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80048d8:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80048dc:	ea42 4000 	orr.w	r0, r2, r0, lsl #16
 80048e0:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 80048e4:	4a22      	ldr	r2, [pc, #136]	; (8004970 <D32_1CH_HTONS_VOL_HP+0x11c>)
 80048e6:	fb20 5202 	smlad	r2, r0, r2, r5
 80048ea:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80048ee:	fb2b 2101 	smlad	r1, fp, r1, r2
 80048f2:	4a20      	ldr	r2, [pc, #128]	; (8004974 <D32_1CH_HTONS_VOL_HP+0x120>)
 80048f4:	fb20 3502 	smlad	r5, r0, r2, r3
 80048f8:	4b1f      	ldr	r3, [pc, #124]	; (8004978 <D32_1CH_HTONS_VOL_HP+0x124>)
 80048fa:	fb2b 5503 	smlad	r5, fp, r3, r5
 80048fe:	2301      	movs	r3, #1
 8004900:	fb20 f003 	smuad	r0, r0, r3
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <D32_1CH_HTONS_VOL_HP+0x128>)
 8004906:	fb2b 0303 	smlad	r3, fp, r3, r0
 800490a:	f5a1 4280 	sub.w	r2, r1, #16384	; 0x4000
 800490e:	1990      	adds	r0, r2, r6
 8004910:	1bc0      	subs	r0, r0, r7
 8004912:	17c7      	asrs	r7, r0, #31
 8004914:	fba0 0108 	umull	r0, r1, r0, r8
 8004918:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 800491c:	fb08 1107 	mla	r1, r8, r7, r1
 8004920:	f141 0100 	adc.w	r1, r1, #0
 8004924:	9f02      	ldr	r7, [sp, #8]
 8004926:	0388      	lsls	r0, r1, #14
 8004928:	f04f 4a00 	mov.w	sl, #2147483648	; 0x80000000
 800492c:	f04f 0b00 	mov.w	fp, #0
 8004930:	fbc0 ab07 	smlal	sl, fp, r0, r7
 8004934:	465f      	mov	r7, fp
 8004936:	10b8      	asrs	r0, r7, #2
 8004938:	f300 000f 	ssat	r0, #16, r0
 800493c:	f82c 0b02 	strh.w	r0, [ip], #2
 8004940:	45cc      	cmp	ip, r9
 8004942:	ea4f 0641 	mov.w	r6, r1, lsl #1
 8004946:	4617      	mov	r7, r2
 8004948:	d1a5      	bne.n	8004896 <D32_1CH_HTONS_VOL_HP+0x42>
 800494a:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800494e:	f8c9 3008 	str.w	r3, [r9, #8]
 8004952:	2000      	movs	r0, #0
 8004954:	f8c9 500c 	str.w	r5, [r9, #12]
 8004958:	f8c9 401c 	str.w	r4, [r9, #28]
 800495c:	f8c9 6010 	str.w	r6, [r9, #16]
 8004960:	f8c9 2014 	str.w	r2, [r9, #20]
 8004964:	b005      	add	sp, #20
 8004966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800496a:	463a      	mov	r2, r7
 800496c:	e7ef      	b.n	800494e <D32_1CH_HTONS_VOL_HP+0xfa>
 800496e:	bf00      	nop
 8004970:	00060003 	.word	0x00060003
 8004974:	000a000c 	.word	0x000a000c
 8004978:	000c000a 	.word	0x000c000a
 800497c:	00030006 	.word	0x00030006
 8004980:	20000000 	.word	0x20000000

08004984 <D48_1CH_HTONS_VOL_HP>:
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	4613      	mov	r3, r2
 800498a:	b085      	sub	sp, #20
 800498c:	461d      	mov	r5, r3
 800498e:	461c      	mov	r4, r3
 8004990:	9203      	str	r2, [sp, #12]
 8004992:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004994:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8004996:	6a2d      	ldr	r5, [r5, #32]
 8004998:	f8d3 9014 	ldr.w	r9, [r3, #20]
 800499c:	f8d3 e01c 	ldr.w	lr, [r3, #28]
 80049a0:	68e4      	ldr	r4, [r4, #12]
 80049a2:	9600      	str	r6, [sp, #0]
 80049a4:	4680      	mov	r8, r0
 80049a6:	9501      	str	r5, [sp, #4]
 80049a8:	6918      	ldr	r0, [r3, #16]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2a00      	cmp	r2, #0
 80049ae:	f000 808a 	beq.w	8004ac6 <D48_1CH_HTONS_VOL_HP+0x142>
 80049b2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80049b6:	4d45      	ldr	r5, [pc, #276]	; (8004acc <D48_1CH_HTONS_VOL_HP+0x148>)
 80049b8:	9202      	str	r2, [sp, #8]
 80049ba:	468c      	mov	ip, r1
 80049bc:	e898 0044 	ldmia.w	r8, {r2, r6}
 80049c0:	f108 0806 	add.w	r8, r8, #6
 80049c4:	ba52      	rev16	r2, r2
 80049c6:	ba76      	rev16	r6, r6
 80049c8:	b2d7      	uxtb	r7, r2
 80049ca:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80049ce:	f855 a027 	ldr.w	sl, [r5, r7, lsl #2]
 80049d2:	f855 1021 	ldr.w	r1, [r5, r1, lsl #2]
 80049d6:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80049da:	0e12      	lsrs	r2, r2, #24
 80049dc:	eb0a 2a9e 	add.w	sl, sl, lr, lsr #10
 80049e0:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
 80049e4:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 80049e8:	fa5f fb86 	uxtb.w	fp, r6
 80049ec:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80049f0:	f3c6 2e07 	ubfx	lr, r6, #8, #8
 80049f4:	eb07 2791 	add.w	r7, r7, r1, lsr #10
 80049f8:	f855 602b 	ldr.w	r6, [r5, fp, lsl #2]
 80049fc:	f855 e02e 	ldr.w	lr, [r5, lr, lsl #2]
 8004a00:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8004a04:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8004a08:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8004a0c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004a10:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004a14:	f3ce 0b09 	ubfx	fp, lr, #0, #10
 8004a18:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004a1c:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004a20:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004a24:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 8004a28:	ea41 4a0a 	orr.w	sl, r1, sl, lsl #16
 8004a2c:	ea4b 4606 	orr.w	r6, fp, r6, lsl #16
 8004a30:	4a27      	ldr	r2, [pc, #156]	; (8004ad0 <D48_1CH_HTONS_VOL_HP+0x14c>)
 8004a32:	fb2a 4202 	smlad	r2, sl, r2, r4
 8004a36:	4927      	ldr	r1, [pc, #156]	; (8004ad4 <D48_1CH_HTONS_VOL_HP+0x150>)
 8004a38:	fb27 2201 	smlad	r2, r7, r1, r2
 8004a3c:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8004a40:	fb26 2201 	smlad	r2, r6, r1, r2
 8004a44:	4924      	ldr	r1, [pc, #144]	; (8004ad8 <D48_1CH_HTONS_VOL_HP+0x154>)
 8004a46:	fb2a 3401 	smlad	r4, sl, r1, r3
 8004a4a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
 8004a4e:	fb27 4403 	smlad	r4, r7, r3, r4
 8004a52:	4b22      	ldr	r3, [pc, #136]	; (8004adc <D48_1CH_HTONS_VOL_HP+0x158>)
 8004a54:	fb26 4403 	smlad	r4, r6, r3, r4
 8004a58:	2101      	movs	r1, #1
 8004a5a:	fb2a fa01 	smuad	sl, sl, r1
 8004a5e:	4b20      	ldr	r3, [pc, #128]	; (8004ae0 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8004a60:	fb27 a703 	smlad	r7, r7, r3, sl
 8004a64:	4b1f      	ldr	r3, [pc, #124]	; (8004ae4 <D48_1CH_HTONS_VOL_HP+0x160>)
 8004a66:	fb26 7303 	smlad	r3, r6, r3, r7
 8004a6a:	f5a2 4258 	sub.w	r2, r2, #55296	; 0xd800
 8004a6e:	9e01      	ldr	r6, [sp, #4]
 8004a70:	9f00      	ldr	r7, [sp, #0]
 8004a72:	4410      	add	r0, r2
 8004a74:	ebc9 0000 	rsb	r0, r9, r0
 8004a78:	ea4f 7ae0 	mov.w	sl, r0, asr #31
 8004a7c:	fba0 0106 	umull	r0, r1, r0, r6
 8004a80:	f110 4000 	adds.w	r0, r0, #2147483648	; 0x80000000
 8004a84:	fb06 110a 	mla	r1, r6, sl, r1
 8004a88:	f141 0100 	adc.w	r1, r1, #0
 8004a8c:	0308      	lsls	r0, r1, #12
 8004a8e:	f04f 4900 	mov.w	r9, #2147483648	; 0x80000000
 8004a92:	f04f 0a00 	mov.w	sl, #0
 8004a96:	fbc0 9a07 	smlal	r9, sl, r0, r7
 8004a9a:	4657      	mov	r7, sl
 8004a9c:	10b8      	asrs	r0, r7, #2
 8004a9e:	f300 000f 	ssat	r0, #16, r0
 8004aa2:	f82c 0b02 	strh.w	r0, [ip], #2
 8004aa6:	0048      	lsls	r0, r1, #1
 8004aa8:	9902      	ldr	r1, [sp, #8]
 8004aaa:	458c      	cmp	ip, r1
 8004aac:	4691      	mov	r9, r2
 8004aae:	d185      	bne.n	80049bc <D48_1CH_HTONS_VOL_HP+0x38>
 8004ab0:	9d03      	ldr	r5, [sp, #12]
 8004ab2:	6128      	str	r0, [r5, #16]
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	60ab      	str	r3, [r5, #8]
 8004ab8:	60ec      	str	r4, [r5, #12]
 8004aba:	f8c5 e01c 	str.w	lr, [r5, #28]
 8004abe:	616a      	str	r2, [r5, #20]
 8004ac0:	b005      	add	sp, #20
 8004ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ac6:	464a      	mov	r2, r9
 8004ac8:	e7f2      	b.n	8004ab0 <D48_1CH_HTONS_VOL_HP+0x12c>
 8004aca:	bf00      	nop
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	000f000a 	.word	0x000f000a
 8004ad4:	00060003 	.word	0x00060003
 8004ad8:	00150019 	.word	0x00150019
 8004adc:	00190015 	.word	0x00190015
 8004ae0:	00030006 	.word	0x00030006
 8004ae4:	000a000f 	.word	0x000a000f

08004ae8 <D64_1CH_HTONS_VOL_HP>:
 8004ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004aec:	b087      	sub	sp, #28
 8004aee:	4684      	mov	ip, r0
 8004af0:	4610      	mov	r0, r2
 8004af2:	9205      	str	r2, [sp, #20]
 8004af4:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004af6:	6912      	ldr	r2, [r2, #16]
 8004af8:	9200      	str	r2, [sp, #0]
 8004afa:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8004afc:	9202      	str	r2, [sp, #8]
 8004afe:	6a02      	ldr	r2, [r0, #32]
 8004b00:	f8d0 8014 	ldr.w	r8, [r0, #20]
 8004b04:	69c4      	ldr	r4, [r0, #28]
 8004b06:	6887      	ldr	r7, [r0, #8]
 8004b08:	68c5      	ldr	r5, [r0, #12]
 8004b0a:	9203      	str	r2, [sp, #12]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	f000 80aa 	beq.w	8004c66 <D64_1CH_HTONS_VOL_HP+0x17e>
 8004b12:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004b16:	4e55      	ldr	r6, [pc, #340]	; (8004c6c <D64_1CH_HTONS_VOL_HP+0x184>)
 8004b18:	9304      	str	r3, [sp, #16]
 8004b1a:	9101      	str	r1, [sp, #4]
 8004b1c:	f85c 2b08 	ldr.w	r2, [ip], #8
 8004b20:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8004b24:	ba52      	rev16	r2, r2
 8004b26:	fa93 f993 	rev16.w	r9, r3
 8004b2a:	b2d0      	uxtb	r0, r2
 8004b2c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 8004b30:	f856 b020 	ldr.w	fp, [r6, r0, lsl #2]
 8004b34:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004b38:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004b3c:	0e12      	lsrs	r2, r2, #24
 8004b3e:	44a3      	add	fp, r4
 8004b40:	f856 4020 	ldr.w	r4, [r6, r0, lsl #2]
 8004b44:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8004b48:	fa5f f289 	uxtb.w	r2, r9
 8004b4c:	eb03 2e9b 	add.w	lr, r3, fp, lsr #10
 8004b50:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8004b54:	eb04 2a9e 	add.w	sl, r4, lr, lsr #10
 8004b58:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8004b5c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8004b60:	f3c9 4407 	ubfx	r4, r9, #16, #8
 8004b64:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8004b68:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8004b6c:	eb02 2290 	add.w	r2, r2, r0, lsr #10
 8004b70:	f856 4024 	ldr.w	r4, [r6, r4, lsl #2]
 8004b74:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8004b78:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8004b7c:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8004b80:	eb09 2994 	add.w	r9, r9, r4, lsr #10
 8004b84:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004b88:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8004b8c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8004b90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b94:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004b98:	ea4e 4b0b 	orr.w	fp, lr, fp, lsl #16
 8004b9c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004ba0:	f3c9 0e09 	ubfx	lr, r9, #0, #10
 8004ba4:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004ba8:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8004bac:	ea4e 4e04 	orr.w	lr, lr, r4, lsl #16
 8004bb0:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8004bb4:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8004bb8:	4b2d      	ldr	r3, [pc, #180]	; (8004c70 <D64_1CH_HTONS_VOL_HP+0x188>)
 8004bba:	fb2b 5503 	smlad	r5, fp, r3, r5
 8004bbe:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <D64_1CH_HTONS_VOL_HP+0x18c>)
 8004bc0:	fb2a 5503 	smlad	r5, sl, r3, r5
 8004bc4:	4b2c      	ldr	r3, [pc, #176]	; (8004c78 <D64_1CH_HTONS_VOL_HP+0x190>)
 8004bc6:	fb22 5503 	smlad	r5, r2, r3, r5
 8004bca:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8004bce:	fb2e 5900 	smlad	r9, lr, r0, r5
 8004bd2:	4b2a      	ldr	r3, [pc, #168]	; (8004c7c <D64_1CH_HTONS_VOL_HP+0x194>)
 8004bd4:	fb2b 7503 	smlad	r5, fp, r3, r7
 8004bd8:	fb2e 5513 	smladx	r5, lr, r3, r5
 8004bdc:	4b28      	ldr	r3, [pc, #160]	; (8004c80 <D64_1CH_HTONS_VOL_HP+0x198>)
 8004bde:	fb2a 5503 	smlad	r5, sl, r3, r5
 8004be2:	fb22 5513 	smladx	r5, r2, r3, r5
 8004be6:	2001      	movs	r0, #1
 8004be8:	fb2b fb00 	smuad	fp, fp, r0
 8004bec:	4b25      	ldr	r3, [pc, #148]	; (8004c84 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8004bee:	fb2a ba03 	smlad	sl, sl, r3, fp
 8004bf2:	4b25      	ldr	r3, [pc, #148]	; (8004c88 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8004bf4:	fb22 a203 	smlad	r2, r2, r3, sl
 8004bf8:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8004bfa:	fb2e 2703 	smlad	r7, lr, r3, r2
 8004bfe:	9b00      	ldr	r3, [sp, #0]
 8004c00:	9903      	ldr	r1, [sp, #12]
 8004c02:	f5a9 3000 	sub.w	r0, r9, #131072	; 0x20000
 8004c06:	4403      	add	r3, r0
 8004c08:	ebc8 0203 	rsb	r2, r8, r3
 8004c0c:	ea4f 7be2 	mov.w	fp, r2, asr #31
 8004c10:	fba2 2301 	umull	r2, r3, r2, r1
 8004c14:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8004c18:	fb01 330b 	mla	r3, r1, fp, r3
 8004c1c:	f143 0300 	adc.w	r3, r3, #0
 8004c20:	9902      	ldr	r1, [sp, #8]
 8004c22:	02da      	lsls	r2, r3, #11
 8004c24:	f04f 4800 	mov.w	r8, #2147483648	; 0x80000000
 8004c28:	f04f 0900 	mov.w	r9, #0
 8004c2c:	fbc1 8902 	smlal	r8, r9, r1, r2
 8004c30:	9901      	ldr	r1, [sp, #4]
 8004c32:	005b      	lsls	r3, r3, #1
 8004c34:	ea4f 02a9 	mov.w	r2, r9, asr #2
 8004c38:	9300      	str	r3, [sp, #0]
 8004c3a:	f302 020f 	ssat	r2, #16, r2
 8004c3e:	9b04      	ldr	r3, [sp, #16]
 8004c40:	f821 2b02 	strh.w	r2, [r1], #2
 8004c44:	4299      	cmp	r1, r3
 8004c46:	9101      	str	r1, [sp, #4]
 8004c48:	4680      	mov	r8, r0
 8004c4a:	f47f af67 	bne.w	8004b1c <D64_1CH_HTONS_VOL_HP+0x34>
 8004c4e:	9a05      	ldr	r2, [sp, #20]
 8004c50:	4613      	mov	r3, r2
 8004c52:	6097      	str	r7, [r2, #8]
 8004c54:	60d5      	str	r5, [r2, #12]
 8004c56:	61d4      	str	r4, [r2, #28]
 8004c58:	9a00      	ldr	r2, [sp, #0]
 8004c5a:	6158      	str	r0, [r3, #20]
 8004c5c:	2000      	movs	r0, #0
 8004c5e:	611a      	str	r2, [r3, #16]
 8004c60:	b007      	add	sp, #28
 8004c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c66:	4640      	mov	r0, r8
 8004c68:	e7f1      	b.n	8004c4e <D64_1CH_HTONS_VOL_HP+0x166>
 8004c6a:	bf00      	nop
 8004c6c:	20000000 	.word	0x20000000
 8004c70:	001c0015 	.word	0x001c0015
 8004c74:	000f000a 	.word	0x000f000a
 8004c78:	00060003 	.word	0x00060003
 8004c7c:	0024002a 	.word	0x0024002a
 8004c80:	002e0030 	.word	0x002e0030
 8004c84:	00030006 	.word	0x00030006
 8004c88:	000a000f 	.word	0x000a000f
 8004c8c:	0015001c 	.word	0x0015001c

08004c90 <D80_1CH_HTONS_VOL_HP>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	4613      	mov	r3, r2
 8004c96:	b089      	sub	sp, #36	; 0x24
 8004c98:	4686      	mov	lr, r0
 8004c9a:	6918      	ldr	r0, [r3, #16]
 8004c9c:	9001      	str	r0, [sp, #4]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	68c4      	ldr	r4, [r0, #12]
 8004ca4:	9400      	str	r4, [sp, #0]
 8004ca6:	4604      	mov	r4, r0
 8004ca8:	9207      	str	r2, [sp, #28]
 8004caa:	9302      	str	r3, [sp, #8]
 8004cac:	f8d0 c008 	ldr.w	ip, [r0, #8]
 8004cb0:	69c3      	ldr	r3, [r0, #28]
 8004cb2:	8cd2      	ldrh	r2, [r2, #38]	; 0x26
 8004cb4:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8004cb6:	9004      	str	r0, [sp, #16]
 8004cb8:	6a20      	ldr	r0, [r4, #32]
 8004cba:	9005      	str	r0, [sp, #20]
 8004cbc:	2a00      	cmp	r2, #0
 8004cbe:	f000 80ce 	beq.w	8004e5e <D80_1CH_HTONS_VOL_HP+0x1ce>
 8004cc2:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8004cc6:	4867      	ldr	r0, [pc, #412]	; (8004e64 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8004cc8:	9206      	str	r2, [sp, #24]
 8004cca:	9103      	str	r1, [sp, #12]
 8004ccc:	f8de 5000 	ldr.w	r5, [lr]
 8004cd0:	f8de 4004 	ldr.w	r4, [lr, #4]
 8004cd4:	f8de 2008 	ldr.w	r2, [lr, #8]
 8004cd8:	f10e 0e0a 	add.w	lr, lr, #10
 8004cdc:	ba6d      	rev16	r5, r5
 8004cde:	ba64      	rev16	r4, r4
 8004ce0:	fa92 fb92 	rev16.w	fp, r2
 8004ce4:	b2ee      	uxtb	r6, r5
 8004ce6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8004cea:	f850 7026 	ldr.w	r7, [r0, r6, lsl #2]
 8004cee:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 8004cf2:	9900      	ldr	r1, [sp, #0]
 8004cf4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8004cf8:	eb03 0a07 	add.w	sl, r3, r7
 8004cfc:	0e2d      	lsrs	r5, r5, #24
 8004cfe:	f850 3026 	ldr.w	r3, [r0, r6, lsl #2]
 8004d02:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
 8004d06:	eb02 229a 	add.w	r2, r2, sl, lsr #10
 8004d0a:	eb03 2992 	add.w	r9, r3, r2, lsr #10
 8004d0e:	b2e5      	uxtb	r5, r4
 8004d10:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8004d14:	f850 7025 	ldr.w	r7, [r0, r5, lsl #2]
 8004d18:	f850 5023 	ldr.w	r5, [r0, r3, lsl #2]
 8004d1c:	f3c4 4307 	ubfx	r3, r4, #16, #8
 8004d20:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8004d24:	0e24      	lsrs	r4, r4, #24
 8004d26:	eb07 2896 	add.w	r8, r7, r6, lsr #10
 8004d2a:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8004d2e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
 8004d32:	fa5f f38b 	uxtb.w	r3, fp
 8004d36:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8004d3a:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 8004d3e:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8004d42:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8004d46:	f850 b02b 	ldr.w	fp, [r0, fp, lsl #2]
 8004d4a:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8004d4e:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 8004d52:	eb0b 2b93 	add.w	fp, fp, r3, lsr #10
 8004d56:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004d5a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8004d5e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004d62:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004d66:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8004d6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004d6e:	ea42 4a0a 	orr.w	sl, r2, sl, lsl #16
 8004d72:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004d76:	f3cb 0209 	ubfx	r2, fp, #0, #10
 8004d7a:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8004d7e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8004d82:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8004d86:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8004d8a:	ea42 4603 	orr.w	r6, r2, r3, lsl #16
 8004d8e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8004d92:	ea4f 239b 	mov.w	r3, fp, lsr #10
 8004d96:	4a34      	ldr	r2, [pc, #208]	; (8004e68 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8004d98:	fb2a 1202 	smlad	r2, sl, r2, r1
 8004d9c:	4933      	ldr	r1, [pc, #204]	; (8004e6c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8004d9e:	fb29 2201 	smlad	r2, r9, r1, r2
 8004da2:	4933      	ldr	r1, [pc, #204]	; (8004e70 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8004da4:	fb28 2201 	smlad	r2, r8, r1, r2
 8004da8:	4932      	ldr	r1, [pc, #200]	; (8004e74 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8004daa:	fb24 2201 	smlad	r2, r4, r1, r2
 8004dae:	f44f 3580 	mov.w	r5, #65536	; 0x10000
 8004db2:	fb26 2205 	smlad	r2, r6, r5, r2
 8004db6:	4930      	ldr	r1, [pc, #192]	; (8004e78 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8004db8:	fb2a cc01 	smlad	ip, sl, r1, ip
 8004dbc:	492f      	ldr	r1, [pc, #188]	; (8004e7c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8004dbe:	fb29 cc01 	smlad	ip, r9, r1, ip
 8004dc2:	f04f 154b 	mov.w	r5, #4915275	; 0x4b004b
 8004dc6:	fb28 c505 	smlad	r5, r8, r5, ip
 8004dca:	492d      	ldr	r1, [pc, #180]	; (8004e80 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8004dcc:	fb24 5501 	smlad	r5, r4, r1, r5
 8004dd0:	492c      	ldr	r1, [pc, #176]	; (8004e84 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8004dd2:	fb26 5101 	smlad	r1, r6, r1, r5
 8004dd6:	2501      	movs	r5, #1
 8004dd8:	9100      	str	r1, [sp, #0]
 8004dda:	fb2a fa05 	smuad	sl, sl, r5
 8004dde:	492a      	ldr	r1, [pc, #168]	; (8004e88 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8004de0:	fb29 a901 	smlad	r9, r9, r1, sl
 8004de4:	4d29      	ldr	r5, [pc, #164]	; (8004e8c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8004de6:	fb28 9805 	smlad	r8, r8, r5, r9
 8004dea:	4d29      	ldr	r5, [pc, #164]	; (8004e90 <D80_1CH_HTONS_VOL_HP+0x200>)
 8004dec:	fb24 8405 	smlad	r4, r4, r5, r8
 8004df0:	4d28      	ldr	r5, [pc, #160]	; (8004e94 <D80_1CH_HTONS_VOL_HP+0x204>)
 8004df2:	fb26 4c05 	smlad	ip, r6, r5, r4
 8004df6:	9901      	ldr	r1, [sp, #4]
 8004df8:	f5a2 327a 	sub.w	r2, r2, #256000	; 0x3e800
 8004dfc:	4411      	add	r1, r2
 8004dfe:	460c      	mov	r4, r1
 8004e00:	9902      	ldr	r1, [sp, #8]
 8004e02:	9202      	str	r2, [sp, #8]
 8004e04:	1a64      	subs	r4, r4, r1
 8004e06:	9905      	ldr	r1, [sp, #20]
 8004e08:	17e7      	asrs	r7, r4, #31
 8004e0a:	fba4 4501 	umull	r4, r5, r4, r1
 8004e0e:	fb01 5507 	mla	r5, r1, r7, r5
 8004e12:	f114 4400 	adds.w	r4, r4, #2147483648	; 0x80000000
 8004e16:	f145 0500 	adc.w	r5, r5, #0
 8004e1a:	9904      	ldr	r1, [sp, #16]
 8004e1c:	02ac      	lsls	r4, r5, #10
 8004e1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004e22:	2700      	movs	r7, #0
 8004e24:	fbc1 6704 	smlal	r6, r7, r1, r4
 8004e28:	9903      	ldr	r1, [sp, #12]
 8004e2a:	10bc      	asrs	r4, r7, #2
 8004e2c:	f304 040f 	ssat	r4, #16, r4
 8004e30:	f821 4b02 	strh.w	r4, [r1], #2
 8004e34:	460e      	mov	r6, r1
 8004e36:	9103      	str	r1, [sp, #12]
 8004e38:	0069      	lsls	r1, r5, #1
 8004e3a:	9101      	str	r1, [sp, #4]
 8004e3c:	9906      	ldr	r1, [sp, #24]
 8004e3e:	428e      	cmp	r6, r1
 8004e40:	f47f af44 	bne.w	8004ccc <D80_1CH_HTONS_VOL_HP+0x3c>
 8004e44:	9807      	ldr	r0, [sp, #28]
 8004e46:	9c00      	ldr	r4, [sp, #0]
 8004e48:	9901      	ldr	r1, [sp, #4]
 8004e4a:	f8c0 c008 	str.w	ip, [r0, #8]
 8004e4e:	60c4      	str	r4, [r0, #12]
 8004e50:	61c3      	str	r3, [r0, #28]
 8004e52:	6101      	str	r1, [r0, #16]
 8004e54:	6142      	str	r2, [r0, #20]
 8004e56:	2000      	movs	r0, #0
 8004e58:	b009      	add	sp, #36	; 0x24
 8004e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e5e:	9a02      	ldr	r2, [sp, #8]
 8004e60:	e7f0      	b.n	8004e44 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8004e62:	bf00      	nop
 8004e64:	20000000 	.word	0x20000000
 8004e68:	002d0024 	.word	0x002d0024
 8004e6c:	001c0015 	.word	0x001c0015
 8004e70:	000f000a 	.word	0x000f000a
 8004e74:	00060003 	.word	0x00060003
 8004e78:	0037003f 	.word	0x0037003f
 8004e7c:	00450049 	.word	0x00450049
 8004e80:	00490045 	.word	0x00490045
 8004e84:	003f0037 	.word	0x003f0037
 8004e88:	00030006 	.word	0x00030006
 8004e8c:	000a000f 	.word	0x000a000f
 8004e90:	0015001c 	.word	0x0015001c
 8004e94:	0024002d 	.word	0x0024002d

08004e98 <D128_1CH_HTONS_VOL_HP>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	b091      	sub	sp, #68	; 0x44
 8004e9e:	4614      	mov	r4, r2
 8004ea0:	920f      	str	r2, [sp, #60]	; 0x3c
 8004ea2:	8cd3      	ldrh	r3, [r2, #38]	; 0x26
 8004ea4:	6912      	ldr	r2, [r2, #16]
 8004ea6:	9202      	str	r2, [sp, #8]
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	4615      	mov	r5, r2
 8004eac:	69d6      	ldr	r6, [r2, #28]
 8004eae:	6892      	ldr	r2, [r2, #8]
 8004eb0:	6964      	ldr	r4, [r4, #20]
 8004eb2:	9203      	str	r2, [sp, #12]
 8004eb4:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8004eb6:	9405      	str	r4, [sp, #20]
 8004eb8:	920c      	str	r2, [sp, #48]	; 0x30
 8004eba:	68ec      	ldr	r4, [r5, #12]
 8004ebc:	6a2a      	ldr	r2, [r5, #32]
 8004ebe:	9401      	str	r4, [sp, #4]
 8004ec0:	920d      	str	r2, [sp, #52]	; 0x34
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 8148 	beq.w	8005158 <D128_1CH_HTONS_VOL_HP+0x2c0>
 8004ec8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004ecc:	930e      	str	r3, [sp, #56]	; 0x38
 8004ece:	f8df 82c4 	ldr.w	r8, [pc, #708]	; 8005194 <D128_1CH_HTONS_VOL_HP+0x2fc>
 8004ed2:	9106      	str	r1, [sp, #24]
 8004ed4:	f100 0310 	add.w	r3, r0, #16
 8004ed8:	469b      	mov	fp, r3
 8004eda:	9604      	str	r6, [sp, #16]
 8004edc:	f1ab 0110 	sub.w	r1, fp, #16
 8004ee0:	c90e      	ldmia	r1, {r1, r2, r3}
 8004ee2:	f85b 0c04 	ldr.w	r0, [fp, #-4]
 8004ee6:	ba49      	rev16	r1, r1
 8004ee8:	ba52      	rev16	r2, r2
 8004eea:	ba5b      	rev16	r3, r3
 8004eec:	fa90 fa90 	rev16.w	sl, r0
 8004ef0:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8004ef4:	b2cc      	uxtb	r4, r1
 8004ef6:	9e04      	ldr	r6, [sp, #16]
 8004ef8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8004efc:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8004f00:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8004f04:	0e09      	lsrs	r1, r1, #24
 8004f06:	4426      	add	r6, r4
 8004f08:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8004f0c:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8004f10:	b2d0      	uxtb	r0, r2
 8004f12:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8004f16:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8004f1a:	f858 e020 	ldr.w	lr, [r8, r0, lsl #2]
 8004f1e:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8004f22:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8004f26:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8004f2a:	0e12      	lsrs	r2, r2, #24
 8004f2c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8004f30:	9400      	str	r4, [sp, #0]
 8004f32:	eb0e 2997 	add.w	r9, lr, r7, lsr #10
 8004f36:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8004f3a:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8004f3e:	9704      	str	r7, [sp, #16]
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8004f46:	eb00 2c91 	add.w	ip, r0, r1, lsr #10
 8004f4a:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8004f4e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8004f52:	eb00 2e94 	add.w	lr, r0, r4, lsr #10
 8004f56:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8004f5a:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8004f5e:	0e1b      	lsrs	r3, r3, #24
 8004f60:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8004f64:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8004f68:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8004f6c:	fa5f f38a 	uxtb.w	r3, sl
 8004f70:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8004f74:	9609      	str	r6, [sp, #36]	; 0x24
 8004f76:	eb02 229e 	add.w	r2, r2, lr, lsr #10
 8004f7a:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8004f7e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8004f82:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8004f86:	950a      	str	r5, [sp, #40]	; 0x28
 8004f88:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8004f8c:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8004f90:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8004f94:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8004f98:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8004f9c:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8004fa0:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8004fa4:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8004fa8:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8004fac:	9307      	str	r3, [sp, #28]
 8004fae:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8004fb2:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8004fb6:	920b      	str	r2, [sp, #44]	; 0x2c
 8004fb8:	9b00      	ldr	r3, [sp, #0]
 8004fba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fbc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8004fc0:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8004fc4:	f8cd a020 	str.w	sl, [sp, #32]
 8004fc8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004fcc:	9b04      	ldr	r3, [sp, #16]
 8004fce:	f8cd 9010 	str.w	r9, [sp, #16]
 8004fd2:	4691      	mov	r9, r2
 8004fd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fd6:	f8cd a000 	str.w	sl, [sp]
 8004fda:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8004fde:	9a00      	ldr	r2, [sp, #0]
 8004fe0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8004fe4:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8004fe8:	9b07      	ldr	r3, [sp, #28]
 8004fea:	9a04      	ldr	r2, [sp, #16]
 8004fec:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8004ff0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004ff4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004ff6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8004ffa:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8004ffe:	9200      	str	r2, [sp, #0]
 8005000:	9a08      	ldr	r2, [sp, #32]
 8005002:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8005006:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800500a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800500e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8005012:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8005016:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800501a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800501e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005022:	0a92      	lsrs	r2, r2, #10
 8005024:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8005028:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 800502c:	9204      	str	r2, [sp, #16]
 800502e:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8005032:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8005036:	4f49      	ldr	r7, [pc, #292]	; (800515c <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8005038:	9a01      	ldr	r2, [sp, #4]
 800503a:	fb29 2707 	smlad	r7, r9, r7, r2
 800503e:	4a48      	ldr	r2, [pc, #288]	; (8005160 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8005040:	fb2a 7702 	smlad	r7, sl, r2, r7
 8005044:	4a47      	ldr	r2, [pc, #284]	; (8005164 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8005046:	fb21 7702 	smlad	r7, r1, r2, r7
 800504a:	4a47      	ldr	r2, [pc, #284]	; (8005168 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800504c:	fb24 7702 	smlad	r7, r4, r2, r7
 8005050:	4a46      	ldr	r2, [pc, #280]	; (800516c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8005052:	9e00      	ldr	r6, [sp, #0]
 8005054:	fb26 7702 	smlad	r7, r6, r2, r7
 8005058:	4a45      	ldr	r2, [pc, #276]	; (8005170 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800505a:	fb20 7702 	smlad	r7, r0, r2, r7
 800505e:	4a45      	ldr	r2, [pc, #276]	; (8005174 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8005060:	fb23 7702 	smlad	r7, r3, r2, r7
 8005064:	f44f 3e80 	mov.w	lr, #65536	; 0x10000
 8005068:	fb25 770e 	smlad	r7, r5, lr, r7
 800506c:	4a42      	ldr	r2, [pc, #264]	; (8005178 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800506e:	9707      	str	r7, [sp, #28]
 8005070:	9f03      	ldr	r7, [sp, #12]
 8005072:	fb29 7e02 	smlad	lr, r9, r2, r7
 8005076:	4a41      	ldr	r2, [pc, #260]	; (800517c <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8005078:	fb2a ee02 	smlad	lr, sl, r2, lr
 800507c:	f8df c118 	ldr.w	ip, [pc, #280]	; 8005198 <D128_1CH_HTONS_VOL_HP+0x300>
 8005080:	fb21 ee0c 	smlad	lr, r1, ip, lr
 8005084:	f8df c114 	ldr.w	ip, [pc, #276]	; 800519c <D128_1CH_HTONS_VOL_HP+0x304>
 8005088:	fb24 ee0c 	smlad	lr, r4, ip, lr
 800508c:	f8df c110 	ldr.w	ip, [pc, #272]	; 80051a0 <D128_1CH_HTONS_VOL_HP+0x308>
 8005090:	fb26 ee0c 	smlad	lr, r6, ip, lr
 8005094:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80051a4 <D128_1CH_HTONS_VOL_HP+0x30c>
 8005098:	fb20 ec0c 	smlad	ip, r0, ip, lr
 800509c:	f8df e108 	ldr.w	lr, [pc, #264]	; 80051a8 <D128_1CH_HTONS_VOL_HP+0x310>
 80050a0:	fb23 ce0e 	smlad	lr, r3, lr, ip
 80050a4:	f8df c104 	ldr.w	ip, [pc, #260]	; 80051ac <D128_1CH_HTONS_VOL_HP+0x314>
 80050a8:	fb25 e20c 	smlad	r2, r5, ip, lr
 80050ac:	f04f 0e01 	mov.w	lr, #1
 80050b0:	9201      	str	r2, [sp, #4]
 80050b2:	fb29 fe0e 	smuad	lr, r9, lr
 80050b6:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 80051b0 <D128_1CH_HTONS_VOL_HP+0x318>
 80050ba:	fb2a ea09 	smlad	sl, sl, r9, lr
 80050be:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 80051b4 <D128_1CH_HTONS_VOL_HP+0x31c>
 80050c2:	fb21 a909 	smlad	r9, r1, r9, sl
 80050c6:	492e      	ldr	r1, [pc, #184]	; (8005180 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80050c8:	fb24 9901 	smlad	r9, r4, r1, r9
 80050cc:	492d      	ldr	r1, [pc, #180]	; (8005184 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80050ce:	fb26 9901 	smlad	r9, r6, r1, r9
 80050d2:	492d      	ldr	r1, [pc, #180]	; (8005188 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80050d4:	fb20 9901 	smlad	r9, r0, r1, r9
 80050d8:	492c      	ldr	r1, [pc, #176]	; (800518c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 80050da:	fb23 9901 	smlad	r9, r3, r1, r9
 80050de:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 80050e0:	fb25 9303 	smlad	r3, r5, r3, r9
 80050e4:	9303      	str	r3, [sp, #12]
 80050e6:	9b07      	ldr	r3, [sp, #28]
 80050e8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80050ea:	f5a3 1780 	sub.w	r7, r3, #1048576	; 0x100000
 80050ee:	9b02      	ldr	r3, [sp, #8]
 80050f0:	443b      	add	r3, r7
 80050f2:	461a      	mov	r2, r3
 80050f4:	9b05      	ldr	r3, [sp, #20]
 80050f6:	9705      	str	r7, [sp, #20]
 80050f8:	1ad2      	subs	r2, r2, r3
 80050fa:	17d1      	asrs	r1, r2, #31
 80050fc:	fba2 2304 	umull	r2, r3, r2, r4
 8005100:	fb04 3301 	mla	r3, r4, r1, r3
 8005104:	f112 4200 	adds.w	r2, r2, #2147483648	; 0x80000000
 8005108:	f143 0300 	adc.w	r3, r3, #0
 800510c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800510e:	021a      	lsls	r2, r3, #8
 8005110:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005114:	2100      	movs	r1, #0
 8005116:	fbc2 0104 	smlal	r0, r1, r2, r4
 800511a:	108a      	asrs	r2, r1, #2
 800511c:	9906      	ldr	r1, [sp, #24]
 800511e:	f302 020f 	ssat	r2, #16, r2
 8005122:	005b      	lsls	r3, r3, #1
 8005124:	f821 2b02 	strh.w	r2, [r1], #2
 8005128:	9302      	str	r3, [sp, #8]
 800512a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800512c:	9106      	str	r1, [sp, #24]
 800512e:	4299      	cmp	r1, r3
 8005130:	f10b 0b10 	add.w	fp, fp, #16
 8005134:	f47f aed2 	bne.w	8004edc <D128_1CH_HTONS_VOL_HP+0x44>
 8005138:	9e04      	ldr	r6, [sp, #16]
 800513a:	463c      	mov	r4, r7
 800513c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800513e:	9903      	ldr	r1, [sp, #12]
 8005140:	6091      	str	r1, [r2, #8]
 8005142:	9901      	ldr	r1, [sp, #4]
 8005144:	60d1      	str	r1, [r2, #12]
 8005146:	4613      	mov	r3, r2
 8005148:	61d6      	str	r6, [r2, #28]
 800514a:	9a02      	ldr	r2, [sp, #8]
 800514c:	611a      	str	r2, [r3, #16]
 800514e:	2000      	movs	r0, #0
 8005150:	615c      	str	r4, [r3, #20]
 8005152:	b011      	add	sp, #68	; 0x44
 8005154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005158:	9c05      	ldr	r4, [sp, #20]
 800515a:	e7ef      	b.n	800513c <D128_1CH_HTONS_VOL_HP+0x2a4>
 800515c:	00780069 	.word	0x00780069
 8005160:	005b004e 	.word	0x005b004e
 8005164:	00420037 	.word	0x00420037
 8005168:	002d0024 	.word	0x002d0024
 800516c:	001c0015 	.word	0x001c0015
 8005170:	000f000a 	.word	0x000f000a
 8005174:	00060003 	.word	0x00060003
 8005178:	00880096 	.word	0x00880096
 800517c:	00a200ac 	.word	0x00a200ac
 8005180:	0015001c 	.word	0x0015001c
 8005184:	0024002d 	.word	0x0024002d
 8005188:	00370042 	.word	0x00370042
 800518c:	004e005b 	.word	0x004e005b
 8005190:	00690078 	.word	0x00690078
 8005194:	20000000 	.word	0x20000000
 8005198:	00b400ba 	.word	0x00b400ba
 800519c:	00be00c0 	.word	0x00be00c0
 80051a0:	00c000be 	.word	0x00c000be
 80051a4:	00ba00b4 	.word	0x00ba00b4
 80051a8:	00ac00a2 	.word	0x00ac00a2
 80051ac:	00960088 	.word	0x00960088
 80051b0:	00030006 	.word	0x00030006
 80051b4:	000a000f 	.word	0x000a000f

080051b8 <PDM_Filter_Init>:
 80051b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051ba:	2240      	movs	r2, #64	; 0x40
 80051bc:	4604      	mov	r4, r0
 80051be:	2100      	movs	r1, #0
 80051c0:	300c      	adds	r0, #12
 80051c2:	f000 f9cd 	bl	8005560 <memset>
 80051c6:	4a40      	ldr	r2, [pc, #256]	; (80052c8 <PDM_Filter_Init+0x110>)
 80051c8:	4940      	ldr	r1, [pc, #256]	; (80052cc <PDM_Filter_Init+0x114>)
 80051ca:	6813      	ldr	r3, [r2, #0]
 80051cc:	f023 0301 	bic.w	r3, r3, #1
 80051d0:	6013      	str	r3, [r2, #0]
 80051d2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80051d4:	428b      	cmp	r3, r1
 80051d6:	d00f      	beq.n	80051f8 <PDM_Filter_Init+0x40>
 80051d8:	4b3d      	ldr	r3, [pc, #244]	; (80052d0 <PDM_Filter_Init+0x118>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	2a00      	cmp	r2, #0
 80051e2:	d1fc      	bne.n	80051de <PDM_Filter_Init+0x26>
 80051e4:	4b3b      	ldr	r3, [pc, #236]	; (80052d4 <PDM_Filter_Init+0x11c>)
 80051e6:	493c      	ldr	r1, [pc, #240]	; (80052d8 <PDM_Filter_Init+0x120>)
 80051e8:	6019      	str	r1, [r3, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4937      	ldr	r1, [pc, #220]	; (80052cc <PDM_Filter_Init+0x114>)
 80051ee:	428b      	cmp	r3, r1
 80051f0:	d001      	beq.n	80051f6 <PDM_Filter_Init+0x3e>
 80051f2:	6462      	str	r2, [r4, #68]	; 0x44
 80051f4:	e7fe      	b.n	80051f4 <PDM_Filter_Init+0x3c>
 80051f6:	6463      	str	r3, [r4, #68]	; 0x44
 80051f8:	8822      	ldrh	r2, [r4, #0]
 80051fa:	8963      	ldrh	r3, [r4, #10]
 80051fc:	8921      	ldrh	r1, [r4, #8]
 80051fe:	86a3      	strh	r3, [r4, #52]	; 0x34
 8005200:	2a01      	cmp	r2, #1
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	61a3      	str	r3, [r4, #24]
 8005208:	6123      	str	r3, [r4, #16]
 800520a:	6163      	str	r3, [r4, #20]
 800520c:	60e3      	str	r3, [r4, #12]
 800520e:	6263      	str	r3, [r4, #36]	; 0x24
 8005210:	61e3      	str	r3, [r4, #28]
 8005212:	6223      	str	r3, [r4, #32]
 8005214:	6423      	str	r3, [r4, #64]	; 0x40
 8005216:	86e1      	strh	r1, [r4, #54]	; 0x36
 8005218:	d91d      	bls.n	8005256 <PDM_Filter_Init+0x9e>
 800521a:	2203      	movs	r2, #3
 800521c:	2002      	movs	r0, #2
 800521e:	8861      	ldrh	r1, [r4, #2]
 8005220:	2901      	cmp	r1, #1
 8005222:	d914      	bls.n	800524e <PDM_Filter_Init+0x96>
 8005224:	4610      	mov	r0, r2
 8005226:	2140      	movs	r1, #64	; 0x40
 8005228:	2200      	movs	r2, #0
 800522a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800522c:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005230:	bf04      	itt	eq
 8005232:	6421      	streq	r1, [r4, #64]	; 0x40
 8005234:	460a      	moveq	r2, r1
 8005236:	6861      	ldr	r1, [r4, #4]
 8005238:	b119      	cbz	r1, 8005242 <PDM_Filter_Init+0x8a>
 800523a:	f042 0210 	orr.w	r2, r2, #16
 800523e:	6422      	str	r2, [r4, #64]	; 0x40
 8005240:	62e1      	str	r1, [r4, #44]	; 0x2c
 8005242:	2100      	movs	r1, #0
 8005244:	8721      	strh	r1, [r4, #56]	; 0x38
 8005246:	b908      	cbnz	r0, 800524c <PDM_Filter_Init+0x94>
 8005248:	3280      	adds	r2, #128	; 0x80
 800524a:	6422      	str	r2, [r4, #64]	; 0x40
 800524c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800524e:	d00a      	beq.n	8005266 <PDM_Filter_Init+0xae>
 8005250:	2140      	movs	r1, #64	; 0x40
 8005252:	2200      	movs	r2, #0
 8005254:	e7e9      	b.n	800522a <PDM_Filter_Init+0x72>
 8005256:	4921      	ldr	r1, [pc, #132]	; (80052dc <PDM_Filter_Init+0x124>)
 8005258:	d01f      	beq.n	800529a <PDM_Filter_Init+0xe2>
 800525a:	780a      	ldrb	r2, [r1, #0]
 800525c:	2a01      	cmp	r2, #1
 800525e:	d006      	beq.n	800526e <PDM_Filter_Init+0xb6>
 8005260:	4618      	mov	r0, r3
 8005262:	2201      	movs	r2, #1
 8005264:	e7db      	b.n	800521e <PDM_Filter_Init+0x66>
 8005266:	2220      	movs	r2, #32
 8005268:	6422      	str	r2, [r4, #64]	; 0x40
 800526a:	2160      	movs	r1, #96	; 0x60
 800526c:	e7dd      	b.n	800522a <PDM_Filter_Init+0x72>
 800526e:	4b1c      	ldr	r3, [pc, #112]	; (80052e0 <PDM_Filter_Init+0x128>)
 8005270:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 8005274:	f853 5f04 	ldr.w	r5, [r3, #4]!
 8005278:	4e1a      	ldr	r6, [pc, #104]	; (80052e4 <PDM_Filter_Init+0x12c>)
 800527a:	4a1b      	ldr	r2, [pc, #108]	; (80052e8 <PDM_Filter_Init+0x130>)
 800527c:	0528      	lsls	r0, r5, #20
 800527e:	4006      	ands	r6, r0
 8005280:	f3c5 5009 	ubfx	r0, r5, #20, #10
 8005284:	4430      	add	r0, r6
 8005286:	402a      	ands	r2, r5
 8005288:	4402      	add	r2, r0
 800528a:	429f      	cmp	r7, r3
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	d1f1      	bne.n	8005274 <PDM_Filter_Init+0xbc>
 8005290:	2300      	movs	r3, #0
 8005292:	700b      	strb	r3, [r1, #0]
 8005294:	4618      	mov	r0, r3
 8005296:	2201      	movs	r2, #1
 8005298:	e7c1      	b.n	800521e <PDM_Filter_Init+0x66>
 800529a:	7808      	ldrb	r0, [r1, #0]
 800529c:	b990      	cbnz	r0, 80052c4 <PDM_Filter_Init+0x10c>
 800529e:	4b10      	ldr	r3, [pc, #64]	; (80052e0 <PDM_Filter_Init+0x128>)
 80052a0:	f503 6780 	add.w	r7, r3, #1024	; 0x400
 80052a4:	f853 5f04 	ldr.w	r5, [r3, #4]!
 80052a8:	4e0e      	ldr	r6, [pc, #56]	; (80052e4 <PDM_Filter_Init+0x12c>)
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <PDM_Filter_Init+0x130>)
 80052ac:	0528      	lsls	r0, r5, #20
 80052ae:	4006      	ands	r6, r0
 80052b0:	f3c5 5009 	ubfx	r0, r5, #20, #10
 80052b4:	4430      	add	r0, r6
 80052b6:	402a      	ands	r2, r5
 80052b8:	4402      	add	r2, r0
 80052ba:	429f      	cmp	r7, r3
 80052bc:	601a      	str	r2, [r3, #0]
 80052be:	d1f1      	bne.n	80052a4 <PDM_Filter_Init+0xec>
 80052c0:	2201      	movs	r2, #1
 80052c2:	700a      	strb	r2, [r1, #0]
 80052c4:	2000      	movs	r0, #0
 80052c6:	e7aa      	b.n	800521e <PDM_Filter_Init+0x66>
 80052c8:	e0002000 	.word	0xe0002000
 80052cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80052d0:	40023008 	.word	0x40023008
 80052d4:	40023000 	.word	0x40023000
 80052d8:	f407a5c2 	.word	0xf407a5c2
 80052dc:	200004a8 	.word	0x200004a8
 80052e0:	1ffffffc 	.word	0x1ffffffc
 80052e4:	3ff00000 	.word	0x3ff00000
 80052e8:	000ffc00 	.word	0x000ffc00

080052ec <PDM_Filter_setConfig>:
 80052ec:	4b6a      	ldr	r3, [pc, #424]	; (8005498 <PDM_Filter_setConfig+0x1ac>)
 80052ee:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d001      	beq.n	80052f8 <PDM_Filter_setConfig+0xc>
 80052f4:	2004      	movs	r0, #4
 80052f6:	4770      	bx	lr
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	880a      	ldrh	r2, [r1, #0]
 80052fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80052fe:	4605      	mov	r5, r0
 8005300:	460e      	mov	r6, r1
 8005302:	1e51      	subs	r1, r2, #1
 8005304:	f423 7080 	bic.w	r0, r3, #256	; 0x100
 8005308:	2906      	cmp	r1, #6
 800530a:	ed2d 8b04 	vpush	{d8-d9}
 800530e:	6428      	str	r0, [r5, #64]	; 0x40
 8005310:	d91b      	bls.n	800534a <PDM_Filter_setConfig+0x5e>
 8005312:	2408      	movs	r4, #8
 8005314:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 8005318:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800531c:	4299      	cmp	r1, r3
 800531e:	f000 8086 	beq.w	800542e <PDM_Filter_setConfig+0x142>
 8005322:	f113 0f0c 	cmn.w	r3, #12
 8005326:	da2a      	bge.n	800537e <PDM_Filter_setConfig+0x92>
 8005328:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 800532c:	3440      	adds	r4, #64	; 0x40
 800532e:	80b3      	strh	r3, [r6, #4]
 8005330:	862a      	strh	r2, [r5, #48]	; 0x30
 8005332:	8873      	ldrh	r3, [r6, #2]
 8005334:	866b      	strh	r3, [r5, #50]	; 0x32
 8005336:	2c00      	cmp	r4, #0
 8005338:	d15b      	bne.n	80053f2 <PDM_Filter_setConfig+0x106>
 800533a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800533c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005340:	642b      	str	r3, [r5, #64]	; 0x40
 8005342:	2000      	movs	r0, #0
 8005344:	ecbd 8b04 	vpop	{d8-d9}
 8005348:	bd70      	pop	{r4, r5, r6, pc}
 800534a:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 800534c:	4291      	cmp	r1, r2
 800534e:	d073      	beq.n	8005438 <PDM_Filter_setConfig+0x14c>
 8005350:	f423 7387 	bic.w	r3, r3, #270	; 0x10e
 8005354:	f023 0301 	bic.w	r3, r3, #1
 8005358:	4313      	orrs	r3, r2
 800535a:	f003 0170 	and.w	r1, r3, #112	; 0x70
 800535e:	642b      	str	r3, [r5, #64]	; 0x40
 8005360:	2970      	cmp	r1, #112	; 0x70
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	f103 33ff 	add.w	r3, r3, #4294967295
 800536a:	d06d      	beq.n	8005448 <PDM_Filter_setConfig+0x15c>
 800536c:	2b06      	cmp	r3, #6
 800536e:	f200 8090 	bhi.w	8005492 <PDM_Filter_setConfig+0x1a6>
 8005372:	e8df f003 	tbb	[pc, r3]
 8005376:	5659      	.short	0x5659
 8005378:	444a5053 	.word	0x444a5053
 800537c:	4d          	.byte	0x4d
 800537d:	00          	.byte	0x00
 800537e:	2b33      	cmp	r3, #51	; 0x33
 8005380:	dc39      	bgt.n	80053f6 <PDM_Filter_setConfig+0x10a>
 8005382:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005384:	f002 020f 	and.w	r2, r2, #15
 8005388:	3a01      	subs	r2, #1
 800538a:	2a06      	cmp	r2, #6
 800538c:	d879      	bhi.n	8005482 <PDM_Filter_setConfig+0x196>
 800538e:	4943      	ldr	r1, [pc, #268]	; (800549c <PDM_Filter_setConfig+0x1b0>)
 8005390:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005394:	ed92 9a00 	vldr	s18, [r2]
 8005398:	ed92 8a07 	vldr	s16, [r2, #28]
 800539c:	ee07 3a90 	vmov	s15, r3
 80053a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053a4:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 80053a8:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 80053ac:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80053b0:	f000 f968 	bl	8005684 <powf>
 80053b4:	eddf 0a3a 	vldr	s1, [pc, #232]	; 80054a0 <PDM_Filter_setConfig+0x1b4>
 80053b8:	eef0 8a40 	vmov.f32	s17, s0
 80053bc:	ee70 0ac9 	vsub.f32	s1, s1, s18
 80053c0:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80053c4:	f000 f95e 	bl	8005684 <powf>
 80053c8:	ee28 8a28 	vmul.f32	s16, s16, s17
 80053cc:	ee68 7a00 	vmul.f32	s15, s16, s0
 80053d0:	ee17 0a90 	vmov	r0, s15
 80053d4:	f7fb f85c 	bl	8000490 <__aeabi_f2d>
 80053d8:	ec41 0b10 	vmov	d0, r0, r1
 80053dc:	f000 f90c 	bl	80055f8 <round>
 80053e0:	ec51 0b10 	vmov	r0, r1, d0
 80053e4:	f7fb fb6a 	bl	8000abc <__aeabi_d2uiz>
 80053e8:	88b3      	ldrh	r3, [r6, #4]
 80053ea:	8832      	ldrh	r2, [r6, #0]
 80053ec:	63e8      	str	r0, [r5, #60]	; 0x3c
 80053ee:	872b      	strh	r3, [r5, #56]	; 0x38
 80053f0:	e79e      	b.n	8005330 <PDM_Filter_setConfig+0x44>
 80053f2:	4620      	mov	r0, r4
 80053f4:	e7a6      	b.n	8005344 <PDM_Filter_setConfig+0x58>
 80053f6:	2333      	movs	r3, #51	; 0x33
 80053f8:	3440      	adds	r4, #64	; 0x40
 80053fa:	80b3      	strh	r3, [r6, #4]
 80053fc:	e798      	b.n	8005330 <PDM_Filter_setConfig+0x44>
 80053fe:	4b29      	ldr	r3, [pc, #164]	; (80054a4 <PDM_Filter_setConfig+0x1b8>)
 8005400:	64ab      	str	r3, [r5, #72]	; 0x48
 8005402:	2400      	movs	r4, #0
 8005404:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8005408:	e78b      	b.n	8005322 <PDM_Filter_setConfig+0x36>
 800540a:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <PDM_Filter_setConfig+0x1bc>)
 800540c:	64ab      	str	r3, [r5, #72]	; 0x48
 800540e:	e7f8      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <PDM_Filter_setConfig+0x1c0>)
 8005412:	64ab      	str	r3, [r5, #72]	; 0x48
 8005414:	e7f5      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005416:	4b26      	ldr	r3, [pc, #152]	; (80054b0 <PDM_Filter_setConfig+0x1c4>)
 8005418:	64ab      	str	r3, [r5, #72]	; 0x48
 800541a:	e7f2      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 800541c:	4b25      	ldr	r3, [pc, #148]	; (80054b4 <PDM_Filter_setConfig+0x1c8>)
 800541e:	64ab      	str	r3, [r5, #72]	; 0x48
 8005420:	e7ef      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005422:	4b25      	ldr	r3, [pc, #148]	; (80054b8 <PDM_Filter_setConfig+0x1cc>)
 8005424:	64ab      	str	r3, [r5, #72]	; 0x48
 8005426:	e7ec      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005428:	4b24      	ldr	r3, [pc, #144]	; (80054bc <PDM_Filter_setConfig+0x1d0>)
 800542a:	64ab      	str	r3, [r5, #72]	; 0x48
 800542c:	e7e9      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 800542e:	8e29      	ldrh	r1, [r5, #48]	; 0x30
 8005430:	4291      	cmp	r1, r2
 8005432:	f47f af76 	bne.w	8005322 <PDM_Filter_setConfig+0x36>
 8005436:	e77c      	b.n	8005332 <PDM_Filter_setConfig+0x46>
 8005438:	f9b5 1038 	ldrsh.w	r1, [r5, #56]	; 0x38
 800543c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8005440:	4299      	cmp	r1, r3
 8005442:	d023      	beq.n	800548c <PDM_Filter_setConfig+0x1a0>
 8005444:	2400      	movs	r4, #0
 8005446:	e76c      	b.n	8005322 <PDM_Filter_setConfig+0x36>
 8005448:	2b06      	cmp	r3, #6
 800544a:	d822      	bhi.n	8005492 <PDM_Filter_setConfig+0x1a6>
 800544c:	e8df f003 	tbb	[pc, r3]
 8005450:	0d101316 	.word	0x0d101316
 8005454:	070a      	.short	0x070a
 8005456:	04          	.byte	0x04
 8005457:	00          	.byte	0x00
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <PDM_Filter_setConfig+0x1d4>)
 800545a:	64ab      	str	r3, [r5, #72]	; 0x48
 800545c:	e7d1      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 800545e:	4b19      	ldr	r3, [pc, #100]	; (80054c4 <PDM_Filter_setConfig+0x1d8>)
 8005460:	64ab      	str	r3, [r5, #72]	; 0x48
 8005462:	e7ce      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005464:	4b18      	ldr	r3, [pc, #96]	; (80054c8 <PDM_Filter_setConfig+0x1dc>)
 8005466:	64ab      	str	r3, [r5, #72]	; 0x48
 8005468:	e7cb      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 800546a:	4b18      	ldr	r3, [pc, #96]	; (80054cc <PDM_Filter_setConfig+0x1e0>)
 800546c:	64ab      	str	r3, [r5, #72]	; 0x48
 800546e:	e7c8      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005470:	4b17      	ldr	r3, [pc, #92]	; (80054d0 <PDM_Filter_setConfig+0x1e4>)
 8005472:	64ab      	str	r3, [r5, #72]	; 0x48
 8005474:	e7c5      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005476:	4b17      	ldr	r3, [pc, #92]	; (80054d4 <PDM_Filter_setConfig+0x1e8>)
 8005478:	64ab      	str	r3, [r5, #72]	; 0x48
 800547a:	e7c2      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 800547c:	4b16      	ldr	r3, [pc, #88]	; (80054d8 <PDM_Filter_setConfig+0x1ec>)
 800547e:	64ab      	str	r3, [r5, #72]	; 0x48
 8005480:	e7bf      	b.n	8005402 <PDM_Filter_setConfig+0x116>
 8005482:	ed9f 8a16 	vldr	s16, [pc, #88]	; 80054dc <PDM_Filter_setConfig+0x1f0>
 8005486:	eeb0 9a48 	vmov.f32	s18, s16
 800548a:	e787      	b.n	800539c <PDM_Filter_setConfig+0xb0>
 800548c:	8873      	ldrh	r3, [r6, #2]
 800548e:	866b      	strh	r3, [r5, #50]	; 0x32
 8005490:	e753      	b.n	800533a <PDM_Filter_setConfig+0x4e>
 8005492:	2400      	movs	r4, #0
 8005494:	e73e      	b.n	8005314 <PDM_Filter_setConfig+0x28>
 8005496:	bf00      	nop
 8005498:	b5e8b5cd 	.word	0xb5e8b5cd
 800549c:	080071d0 	.word	0x080071d0
 80054a0:	42000000 	.word	0x42000000
 80054a4:	080038bd 	.word	0x080038bd
 80054a8:	080037ad 	.word	0x080037ad
 80054ac:	08003a45 	.word	0x08003a45
 80054b0:	08004265 	.word	0x08004265
 80054b4:	08003fc9 	.word	0x08003fc9
 80054b8:	08003dad 	.word	0x08003dad
 80054bc:	08003bc9 	.word	0x08003bc9
 80054c0:	08004855 	.word	0x08004855
 80054c4:	08004721 	.word	0x08004721
 80054c8:	0800464d 	.word	0x0800464d
 80054cc:	08004e99 	.word	0x08004e99
 80054d0:	08004c91 	.word	0x08004c91
 80054d4:	08004ae9 	.word	0x08004ae9
 80054d8:	08004985 	.word	0x08004985
 80054dc:	00000000 	.word	0x00000000

080054e0 <PDM_Filter>:
 80054e0:	b410      	push	{r4}
 80054e2:	4b0c      	ldr	r3, [pc, #48]	; (8005514 <PDM_Filter+0x34>)
 80054e4:	6c54      	ldr	r4, [r2, #68]	; 0x44
 80054e6:	429c      	cmp	r4, r3
 80054e8:	d003      	beq.n	80054f2 <PDM_Filter+0x12>
 80054ea:	2004      	movs	r0, #4
 80054ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80054f4:	05dc      	lsls	r4, r3, #23
 80054f6:	d407      	bmi.n	8005508 <PDM_Filter+0x28>
 80054f8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80054fc:	bf14      	ite	ne
 80054fe:	2020      	movne	r0, #32
 8005500:	2030      	moveq	r0, #48	; 0x30
 8005502:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	6c93      	ldr	r3, [r2, #72]	; 0x48
 800550a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800550e:	320c      	adds	r2, #12
 8005510:	4718      	bx	r3
 8005512:	bf00      	nop
 8005514:	b5e8b5cd 	.word	0xb5e8b5cd

08005518 <__libc_init_array>:
 8005518:	b570      	push	{r4, r5, r6, lr}
 800551a:	4e0d      	ldr	r6, [pc, #52]	; (8005550 <__libc_init_array+0x38>)
 800551c:	4c0d      	ldr	r4, [pc, #52]	; (8005554 <__libc_init_array+0x3c>)
 800551e:	1ba4      	subs	r4, r4, r6
 8005520:	10a4      	asrs	r4, r4, #2
 8005522:	2500      	movs	r5, #0
 8005524:	42a5      	cmp	r5, r4
 8005526:	d109      	bne.n	800553c <__libc_init_array+0x24>
 8005528:	4e0b      	ldr	r6, [pc, #44]	; (8005558 <__libc_init_array+0x40>)
 800552a:	4c0c      	ldr	r4, [pc, #48]	; (800555c <__libc_init_array+0x44>)
 800552c:	f001 fe42 	bl	80071b4 <_init>
 8005530:	1ba4      	subs	r4, r4, r6
 8005532:	10a4      	asrs	r4, r4, #2
 8005534:	2500      	movs	r5, #0
 8005536:	42a5      	cmp	r5, r4
 8005538:	d105      	bne.n	8005546 <__libc_init_array+0x2e>
 800553a:	bd70      	pop	{r4, r5, r6, pc}
 800553c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005540:	4798      	blx	r3
 8005542:	3501      	adds	r5, #1
 8005544:	e7ee      	b.n	8005524 <__libc_init_array+0xc>
 8005546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800554a:	4798      	blx	r3
 800554c:	3501      	adds	r5, #1
 800554e:	e7f2      	b.n	8005536 <__libc_init_array+0x1e>
 8005550:	0801a990 	.word	0x0801a990
 8005554:	0801a990 	.word	0x0801a990
 8005558:	0801a990 	.word	0x0801a990
 800555c:	0801a994 	.word	0x0801a994

08005560 <memset>:
 8005560:	4402      	add	r2, r0
 8005562:	4603      	mov	r3, r0
 8005564:	4293      	cmp	r3, r2
 8005566:	d100      	bne.n	800556a <memset+0xa>
 8005568:	4770      	bx	lr
 800556a:	f803 1b01 	strb.w	r1, [r3], #1
 800556e:	e7f9      	b.n	8005564 <memset+0x4>

08005570 <cos>:
 8005570:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005572:	ec51 0b10 	vmov	r0, r1, d0
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <cos+0x80>)
 8005578:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800557c:	4293      	cmp	r3, r2
 800557e:	dc06      	bgt.n	800558e <cos+0x1e>
 8005580:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80055e8 <cos+0x78>
 8005584:	f000 fef8 	bl	8006378 <__kernel_cos>
 8005588:	ec51 0b10 	vmov	r0, r1, d0
 800558c:	e007      	b.n	800559e <cos+0x2e>
 800558e:	4a19      	ldr	r2, [pc, #100]	; (80055f4 <cos+0x84>)
 8005590:	4293      	cmp	r3, r2
 8005592:	dd09      	ble.n	80055a8 <cos+0x38>
 8005594:	ee10 2a10 	vmov	r2, s0
 8005598:	460b      	mov	r3, r1
 800559a:	f7fa fe19 	bl	80001d0 <__aeabi_dsub>
 800559e:	ec41 0b10 	vmov	d0, r0, r1
 80055a2:	b005      	add	sp, #20
 80055a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80055a8:	4668      	mov	r0, sp
 80055aa:	f000 f9e9 	bl	8005980 <__ieee754_rem_pio2>
 80055ae:	f000 0003 	and.w	r0, r0, #3
 80055b2:	2801      	cmp	r0, #1
 80055b4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80055b8:	ed9d 0b00 	vldr	d0, [sp]
 80055bc:	d007      	beq.n	80055ce <cos+0x5e>
 80055be:	2802      	cmp	r0, #2
 80055c0:	d00e      	beq.n	80055e0 <cos+0x70>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d0de      	beq.n	8005584 <cos+0x14>
 80055c6:	2001      	movs	r0, #1
 80055c8:	f001 fb0e 	bl	8006be8 <__kernel_sin>
 80055cc:	e7dc      	b.n	8005588 <cos+0x18>
 80055ce:	f001 fb0b 	bl	8006be8 <__kernel_sin>
 80055d2:	ec53 2b10 	vmov	r2, r3, d0
 80055d6:	ee10 0a10 	vmov	r0, s0
 80055da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80055de:	e7de      	b.n	800559e <cos+0x2e>
 80055e0:	f000 feca 	bl	8006378 <__kernel_cos>
 80055e4:	e7f5      	b.n	80055d2 <cos+0x62>
 80055e6:	bf00      	nop
	...
 80055f0:	3fe921fb 	.word	0x3fe921fb
 80055f4:	7fefffff 	.word	0x7fefffff

080055f8 <round>:
 80055f8:	ec51 0b10 	vmov	r0, r1, d0
 80055fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fe:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8005602:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8005606:	2c13      	cmp	r4, #19
 8005608:	460b      	mov	r3, r1
 800560a:	460f      	mov	r7, r1
 800560c:	dc17      	bgt.n	800563e <round+0x46>
 800560e:	2c00      	cmp	r4, #0
 8005610:	da09      	bge.n	8005626 <round+0x2e>
 8005612:	3401      	adds	r4, #1
 8005614:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005618:	d103      	bne.n	8005622 <round+0x2a>
 800561a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800561e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005622:	2100      	movs	r1, #0
 8005624:	e028      	b.n	8005678 <round+0x80>
 8005626:	4a16      	ldr	r2, [pc, #88]	; (8005680 <round+0x88>)
 8005628:	4122      	asrs	r2, r4
 800562a:	4211      	tst	r1, r2
 800562c:	d100      	bne.n	8005630 <round+0x38>
 800562e:	b180      	cbz	r0, 8005652 <round+0x5a>
 8005630:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005634:	4123      	asrs	r3, r4
 8005636:	443b      	add	r3, r7
 8005638:	ea23 0302 	bic.w	r3, r3, r2
 800563c:	e7f1      	b.n	8005622 <round+0x2a>
 800563e:	2c33      	cmp	r4, #51	; 0x33
 8005640:	dd0a      	ble.n	8005658 <round+0x60>
 8005642:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005646:	d104      	bne.n	8005652 <round+0x5a>
 8005648:	ee10 2a10 	vmov	r2, s0
 800564c:	460b      	mov	r3, r1
 800564e:	f7fa fdc1 	bl	80001d4 <__adddf3>
 8005652:	ec41 0b10 	vmov	d0, r0, r1
 8005656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005658:	f2a5 4213 	subw	r2, r5, #1043	; 0x413
 800565c:	f04f 35ff 	mov.w	r5, #4294967295
 8005660:	40d5      	lsrs	r5, r2
 8005662:	4228      	tst	r0, r5
 8005664:	d0f5      	beq.n	8005652 <round+0x5a>
 8005666:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800566a:	2201      	movs	r2, #1
 800566c:	40a2      	lsls	r2, r4
 800566e:	1812      	adds	r2, r2, r0
 8005670:	bf28      	it	cs
 8005672:	3301      	addcs	r3, #1
 8005674:	ea22 0105 	bic.w	r1, r2, r5
 8005678:	4608      	mov	r0, r1
 800567a:	4619      	mov	r1, r3
 800567c:	e7e9      	b.n	8005652 <round+0x5a>
 800567e:	bf00      	nop
 8005680:	000fffff 	.word	0x000fffff

08005684 <powf>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	ed2d 8b04 	vpush	{d8-d9}
 800568a:	4cb5      	ldr	r4, [pc, #724]	; (8005960 <powf+0x2dc>)
 800568c:	b08a      	sub	sp, #40	; 0x28
 800568e:	eef0 8a40 	vmov.f32	s17, s0
 8005692:	eeb0 8a60 	vmov.f32	s16, s1
 8005696:	f000 fb65 	bl	8005d64 <__ieee754_powf>
 800569a:	f994 5000 	ldrsb.w	r5, [r4]
 800569e:	1c6b      	adds	r3, r5, #1
 80056a0:	eeb0 9a40 	vmov.f32	s18, s0
 80056a4:	4626      	mov	r6, r4
 80056a6:	d05d      	beq.n	8005764 <powf+0xe0>
 80056a8:	eeb4 8a48 	vcmp.f32	s16, s16
 80056ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b0:	d658      	bvs.n	8005764 <powf+0xe0>
 80056b2:	eef4 8a68 	vcmp.f32	s17, s17
 80056b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056ba:	d721      	bvc.n	8005700 <powf+0x7c>
 80056bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80056c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c4:	d14e      	bne.n	8005764 <powf+0xe0>
 80056c6:	2301      	movs	r3, #1
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	4ba6      	ldr	r3, [pc, #664]	; (8005964 <powf+0x2e0>)
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	ee18 0a90 	vmov	r0, s17
 80056d2:	2300      	movs	r3, #0
 80056d4:	9308      	str	r3, [sp, #32]
 80056d6:	f7fa fedb 	bl	8000490 <__aeabi_f2d>
 80056da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80056de:	ee18 0a10 	vmov	r0, s16
 80056e2:	f7fa fed5 	bl	8000490 <__aeabi_f2d>
 80056e6:	4ba0      	ldr	r3, [pc, #640]	; (8005968 <powf+0x2e4>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	2d02      	cmp	r5, #2
 80056ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80056f0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056f4:	d030      	beq.n	8005758 <powf+0xd4>
 80056f6:	4668      	mov	r0, sp
 80056f8:	f001 fbbe 	bl	8006e78 <matherr>
 80056fc:	bb30      	cbnz	r0, 800574c <powf+0xc8>
 80056fe:	e062      	b.n	80057c6 <powf+0x142>
 8005700:	eef5 8a40 	vcmp.f32	s17, #0.0
 8005704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005708:	d162      	bne.n	80057d0 <powf+0x14c>
 800570a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800570e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005712:	d12d      	bne.n	8005770 <powf+0xec>
 8005714:	2301      	movs	r3, #1
 8005716:	9300      	str	r3, [sp, #0]
 8005718:	4b92      	ldr	r3, [pc, #584]	; (8005964 <powf+0x2e0>)
 800571a:	9301      	str	r3, [sp, #4]
 800571c:	ee18 0a90 	vmov	r0, s17
 8005720:	2300      	movs	r3, #0
 8005722:	9308      	str	r3, [sp, #32]
 8005724:	f7fa feb4 	bl	8000490 <__aeabi_f2d>
 8005728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800572c:	ee18 0a10 	vmov	r0, s16
 8005730:	f7fa feae 	bl	8000490 <__aeabi_f2d>
 8005734:	2200      	movs	r2, #0
 8005736:	2300      	movs	r3, #0
 8005738:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800573c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005740:	2d00      	cmp	r5, #0
 8005742:	d0d8      	beq.n	80056f6 <powf+0x72>
 8005744:	4b88      	ldr	r3, [pc, #544]	; (8005968 <powf+0x2e4>)
 8005746:	2200      	movs	r2, #0
 8005748:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800574c:	9b08      	ldr	r3, [sp, #32]
 800574e:	b11b      	cbz	r3, 8005758 <powf+0xd4>
 8005750:	f001 fd2a 	bl	80071a8 <__errno>
 8005754:	9b08      	ldr	r3, [sp, #32]
 8005756:	6003      	str	r3, [r0, #0]
 8005758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800575c:	f7fb f9ce 	bl	8000afc <__aeabi_d2f>
 8005760:	ee09 0a10 	vmov	s18, r0
 8005764:	eeb0 0a49 	vmov.f32	s0, s18
 8005768:	b00a      	add	sp, #40	; 0x28
 800576a:	ecbd 8b04 	vpop	{d8-d9}
 800576e:	bd70      	pop	{r4, r5, r6, pc}
 8005770:	eeb0 0a48 	vmov.f32	s0, s16
 8005774:	f001 fc8d 	bl	8007092 <finitef>
 8005778:	2800      	cmp	r0, #0
 800577a:	d0f3      	beq.n	8005764 <powf+0xe0>
 800577c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8005780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005784:	d5ee      	bpl.n	8005764 <powf+0xe0>
 8005786:	2301      	movs	r3, #1
 8005788:	9300      	str	r3, [sp, #0]
 800578a:	4b76      	ldr	r3, [pc, #472]	; (8005964 <powf+0x2e0>)
 800578c:	9301      	str	r3, [sp, #4]
 800578e:	ee18 0a90 	vmov	r0, s17
 8005792:	2300      	movs	r3, #0
 8005794:	9308      	str	r3, [sp, #32]
 8005796:	f7fa fe7b 	bl	8000490 <__aeabi_f2d>
 800579a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800579e:	ee18 0a10 	vmov	r0, s16
 80057a2:	f7fa fe75 	bl	8000490 <__aeabi_f2d>
 80057a6:	f994 3000 	ldrsb.w	r3, [r4]
 80057aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057ae:	b923      	cbnz	r3, 80057ba <powf+0x136>
 80057b0:	2200      	movs	r2, #0
 80057b2:	2300      	movs	r3, #0
 80057b4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80057b8:	e79d      	b.n	80056f6 <powf+0x72>
 80057ba:	496c      	ldr	r1, [pc, #432]	; (800596c <powf+0x2e8>)
 80057bc:	2000      	movs	r0, #0
 80057be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d197      	bne.n	80056f6 <powf+0x72>
 80057c6:	f001 fcef 	bl	80071a8 <__errno>
 80057ca:	2321      	movs	r3, #33	; 0x21
 80057cc:	6003      	str	r3, [r0, #0]
 80057ce:	e7bd      	b.n	800574c <powf+0xc8>
 80057d0:	f001 fc5f 	bl	8007092 <finitef>
 80057d4:	4605      	mov	r5, r0
 80057d6:	2800      	cmp	r0, #0
 80057d8:	f040 8091 	bne.w	80058fe <powf+0x27a>
 80057dc:	eeb0 0a68 	vmov.f32	s0, s17
 80057e0:	f001 fc57 	bl	8007092 <finitef>
 80057e4:	2800      	cmp	r0, #0
 80057e6:	f000 808a 	beq.w	80058fe <powf+0x27a>
 80057ea:	eeb0 0a48 	vmov.f32	s0, s16
 80057ee:	f001 fc50 	bl	8007092 <finitef>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	f000 8083 	beq.w	80058fe <powf+0x27a>
 80057f8:	eeb4 9a49 	vcmp.f32	s18, s18
 80057fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005800:	f994 4000 	ldrsb.w	r4, [r4]
 8005804:	4b57      	ldr	r3, [pc, #348]	; (8005964 <powf+0x2e0>)
 8005806:	d71b      	bvc.n	8005840 <powf+0x1bc>
 8005808:	2201      	movs	r2, #1
 800580a:	ee18 0a90 	vmov	r0, s17
 800580e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8005812:	9508      	str	r5, [sp, #32]
 8005814:	f7fa fe3c 	bl	8000490 <__aeabi_f2d>
 8005818:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800581c:	ee18 0a10 	vmov	r0, s16
 8005820:	f7fa fe36 	bl	8000490 <__aeabi_f2d>
 8005824:	2200      	movs	r2, #0
 8005826:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800582a:	2300      	movs	r3, #0
 800582c:	2c00      	cmp	r4, #0
 800582e:	d0c1      	beq.n	80057b4 <powf+0x130>
 8005830:	4610      	mov	r0, r2
 8005832:	4619      	mov	r1, r3
 8005834:	f7fa ffaa 	bl	800078c <__aeabi_ddiv>
 8005838:	2c02      	cmp	r4, #2
 800583a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800583e:	e7c1      	b.n	80057c4 <powf+0x140>
 8005840:	2203      	movs	r2, #3
 8005842:	ee18 0a90 	vmov	r0, s17
 8005846:	e88d 000c 	stmia.w	sp, {r2, r3}
 800584a:	9508      	str	r5, [sp, #32]
 800584c:	f7fa fe20 	bl	8000490 <__aeabi_f2d>
 8005850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005854:	ee18 0a10 	vmov	r0, s16
 8005858:	f7fa fe1a 	bl	8000490 <__aeabi_f2d>
 800585c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005860:	bb5c      	cbnz	r4, 80058ba <powf+0x236>
 8005862:	4b43      	ldr	r3, [pc, #268]	; (8005970 <powf+0x2ec>)
 8005864:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8005868:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800586c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005870:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005874:	d56c      	bpl.n	8005950 <powf+0x2cc>
 8005876:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800587a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800587e:	ee17 0a90 	vmov	r0, s15
 8005882:	f7fa fe05 	bl	8000490 <__aeabi_f2d>
 8005886:	4604      	mov	r4, r0
 8005888:	460d      	mov	r5, r1
 800588a:	ec45 4b10 	vmov	d0, r4, r5
 800588e:	f001 faf5 	bl	8006e7c <rint>
 8005892:	4620      	mov	r0, r4
 8005894:	ec53 2b10 	vmov	r2, r3, d0
 8005898:	4629      	mov	r1, r5
 800589a:	f7fb f8b5 	bl	8000a08 <__aeabi_dcmpeq>
 800589e:	b920      	cbnz	r0, 80058aa <powf+0x226>
 80058a0:	4b34      	ldr	r3, [pc, #208]	; (8005974 <powf+0x2f0>)
 80058a2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80058a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058aa:	f996 3000 	ldrsb.w	r3, [r6]
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d14e      	bne.n	8005950 <powf+0x2cc>
 80058b2:	f001 fc79 	bl	80071a8 <__errno>
 80058b6:	2322      	movs	r3, #34	; 0x22
 80058b8:	e788      	b.n	80057cc <powf+0x148>
 80058ba:	4b2f      	ldr	r3, [pc, #188]	; (8005978 <powf+0x2f4>)
 80058bc:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80058c0:	2200      	movs	r2, #0
 80058c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80058ca:	d5ee      	bpl.n	80058aa <powf+0x226>
 80058cc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80058d0:	ee68 7a27 	vmul.f32	s15, s16, s15
 80058d4:	ee17 0a90 	vmov	r0, s15
 80058d8:	f7fa fdda 	bl	8000490 <__aeabi_f2d>
 80058dc:	4604      	mov	r4, r0
 80058de:	460d      	mov	r5, r1
 80058e0:	ec45 4b10 	vmov	d0, r4, r5
 80058e4:	f001 faca 	bl	8006e7c <rint>
 80058e8:	4620      	mov	r0, r4
 80058ea:	ec53 2b10 	vmov	r2, r3, d0
 80058ee:	4629      	mov	r1, r5
 80058f0:	f7fb f88a 	bl	8000a08 <__aeabi_dcmpeq>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d1d8      	bne.n	80058aa <powf+0x226>
 80058f8:	2200      	movs	r2, #0
 80058fa:	4b1c      	ldr	r3, [pc, #112]	; (800596c <powf+0x2e8>)
 80058fc:	e7d3      	b.n	80058a6 <powf+0x222>
 80058fe:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8005902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005906:	f47f af2d 	bne.w	8005764 <powf+0xe0>
 800590a:	eeb0 0a68 	vmov.f32	s0, s17
 800590e:	f001 fbc0 	bl	8007092 <finitef>
 8005912:	2800      	cmp	r0, #0
 8005914:	f43f af26 	beq.w	8005764 <powf+0xe0>
 8005918:	eeb0 0a48 	vmov.f32	s0, s16
 800591c:	f001 fbb9 	bl	8007092 <finitef>
 8005920:	2800      	cmp	r0, #0
 8005922:	f43f af1f 	beq.w	8005764 <powf+0xe0>
 8005926:	2304      	movs	r3, #4
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	4b0e      	ldr	r3, [pc, #56]	; (8005964 <powf+0x2e0>)
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	ee18 0a90 	vmov	r0, s17
 8005932:	2300      	movs	r3, #0
 8005934:	9308      	str	r3, [sp, #32]
 8005936:	f7fa fdab 	bl	8000490 <__aeabi_f2d>
 800593a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800593e:	ee18 0a10 	vmov	r0, s16
 8005942:	f7fa fda5 	bl	8000490 <__aeabi_f2d>
 8005946:	2200      	movs	r2, #0
 8005948:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800594c:	2300      	movs	r3, #0
 800594e:	e7aa      	b.n	80058a6 <powf+0x222>
 8005950:	4668      	mov	r0, sp
 8005952:	f001 fa91 	bl	8006e78 <matherr>
 8005956:	2800      	cmp	r0, #0
 8005958:	f47f aef8 	bne.w	800574c <powf+0xc8>
 800595c:	e7a9      	b.n	80058b2 <powf+0x22e>
 800595e:	bf00      	nop
 8005960:	20000424 	.word	0x20000424
 8005964:	0801a780 	.word	0x0801a780
 8005968:	3ff00000 	.word	0x3ff00000
 800596c:	fff00000 	.word	0xfff00000
 8005970:	47efffff 	.word	0x47efffff
 8005974:	c7efffff 	.word	0xc7efffff
 8005978:	7ff00000 	.word	0x7ff00000
 800597c:	00000000 	.word	0x00000000

08005980 <__ieee754_rem_pio2>:
 8005980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005984:	ec57 6b10 	vmov	r6, r7, d0
 8005988:	4bc3      	ldr	r3, [pc, #780]	; (8005c98 <__ieee754_rem_pio2+0x318>)
 800598a:	b08d      	sub	sp, #52	; 0x34
 800598c:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005990:	4598      	cmp	r8, r3
 8005992:	4604      	mov	r4, r0
 8005994:	9704      	str	r7, [sp, #16]
 8005996:	dc07      	bgt.n	80059a8 <__ieee754_rem_pio2+0x28>
 8005998:	2200      	movs	r2, #0
 800599a:	2300      	movs	r3, #0
 800599c:	ed84 0b00 	vstr	d0, [r4]
 80059a0:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80059a4:	2500      	movs	r5, #0
 80059a6:	e027      	b.n	80059f8 <__ieee754_rem_pio2+0x78>
 80059a8:	4bbc      	ldr	r3, [pc, #752]	; (8005c9c <__ieee754_rem_pio2+0x31c>)
 80059aa:	4598      	cmp	r8, r3
 80059ac:	dc75      	bgt.n	8005a9a <__ieee754_rem_pio2+0x11a>
 80059ae:	9b04      	ldr	r3, [sp, #16]
 80059b0:	4dbb      	ldr	r5, [pc, #748]	; (8005ca0 <__ieee754_rem_pio2+0x320>)
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	ee10 0a10 	vmov	r0, s0
 80059b8:	a3a9      	add	r3, pc, #676	; (adr r3, 8005c60 <__ieee754_rem_pio2+0x2e0>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	4639      	mov	r1, r7
 80059c0:	dd36      	ble.n	8005a30 <__ieee754_rem_pio2+0xb0>
 80059c2:	f7fa fc05 	bl	80001d0 <__aeabi_dsub>
 80059c6:	45a8      	cmp	r8, r5
 80059c8:	4606      	mov	r6, r0
 80059ca:	460f      	mov	r7, r1
 80059cc:	d018      	beq.n	8005a00 <__ieee754_rem_pio2+0x80>
 80059ce:	a3a6      	add	r3, pc, #664	; (adr r3, 8005c68 <__ieee754_rem_pio2+0x2e8>)
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fbfc 	bl	80001d0 <__aeabi_dsub>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	e9c4 2300 	strd	r2, r3, [r4]
 80059e0:	4630      	mov	r0, r6
 80059e2:	4639      	mov	r1, r7
 80059e4:	f7fa fbf4 	bl	80001d0 <__aeabi_dsub>
 80059e8:	a39f      	add	r3, pc, #636	; (adr r3, 8005c68 <__ieee754_rem_pio2+0x2e8>)
 80059ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ee:	f7fa fbef 	bl	80001d0 <__aeabi_dsub>
 80059f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80059f6:	2501      	movs	r5, #1
 80059f8:	4628      	mov	r0, r5
 80059fa:	b00d      	add	sp, #52	; 0x34
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	a39b      	add	r3, pc, #620	; (adr r3, 8005c70 <__ieee754_rem_pio2+0x2f0>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f7fa fbe3 	bl	80001d0 <__aeabi_dsub>
 8005a0a:	a39b      	add	r3, pc, #620	; (adr r3, 8005c78 <__ieee754_rem_pio2+0x2f8>)
 8005a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a10:	4606      	mov	r6, r0
 8005a12:	460f      	mov	r7, r1
 8005a14:	f7fa fbdc 	bl	80001d0 <__aeabi_dsub>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	460b      	mov	r3, r1
 8005a1c:	e9c4 2300 	strd	r2, r3, [r4]
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa fbd4 	bl	80001d0 <__aeabi_dsub>
 8005a28:	a393      	add	r3, pc, #588	; (adr r3, 8005c78 <__ieee754_rem_pio2+0x2f8>)
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	e7de      	b.n	80059ee <__ieee754_rem_pio2+0x6e>
 8005a30:	f7fa fbd0 	bl	80001d4 <__adddf3>
 8005a34:	45a8      	cmp	r8, r5
 8005a36:	4606      	mov	r6, r0
 8005a38:	460f      	mov	r7, r1
 8005a3a:	d016      	beq.n	8005a6a <__ieee754_rem_pio2+0xea>
 8005a3c:	a38a      	add	r3, pc, #552	; (adr r3, 8005c68 <__ieee754_rem_pio2+0x2e8>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f7fa fbc7 	bl	80001d4 <__adddf3>
 8005a46:	4602      	mov	r2, r0
 8005a48:	460b      	mov	r3, r1
 8005a4a:	e9c4 2300 	strd	r2, r3, [r4]
 8005a4e:	4630      	mov	r0, r6
 8005a50:	4639      	mov	r1, r7
 8005a52:	f7fa fbbd 	bl	80001d0 <__aeabi_dsub>
 8005a56:	a384      	add	r3, pc, #528	; (adr r3, 8005c68 <__ieee754_rem_pio2+0x2e8>)
 8005a58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a5c:	f7fa fbba 	bl	80001d4 <__adddf3>
 8005a60:	f04f 35ff 	mov.w	r5, #4294967295
 8005a64:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005a68:	e7c6      	b.n	80059f8 <__ieee754_rem_pio2+0x78>
 8005a6a:	a381      	add	r3, pc, #516	; (adr r3, 8005c70 <__ieee754_rem_pio2+0x2f0>)
 8005a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a70:	f7fa fbb0 	bl	80001d4 <__adddf3>
 8005a74:	a380      	add	r3, pc, #512	; (adr r3, 8005c78 <__ieee754_rem_pio2+0x2f8>)
 8005a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	460f      	mov	r7, r1
 8005a7e:	f7fa fba9 	bl	80001d4 <__adddf3>
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	e9c4 2300 	strd	r2, r3, [r4]
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fa fb9f 	bl	80001d0 <__aeabi_dsub>
 8005a92:	a379      	add	r3, pc, #484	; (adr r3, 8005c78 <__ieee754_rem_pio2+0x2f8>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	e7e0      	b.n	8005a5c <__ieee754_rem_pio2+0xdc>
 8005a9a:	4b82      	ldr	r3, [pc, #520]	; (8005ca4 <__ieee754_rem_pio2+0x324>)
 8005a9c:	4598      	cmp	r8, r3
 8005a9e:	f300 80d0 	bgt.w	8005c42 <__ieee754_rem_pio2+0x2c2>
 8005aa2:	f001 f95b 	bl	8006d5c <fabs>
 8005aa6:	ec57 6b10 	vmov	r6, r7, d0
 8005aaa:	ee10 0a10 	vmov	r0, s0
 8005aae:	a374      	add	r3, pc, #464	; (adr r3, 8005c80 <__ieee754_rem_pio2+0x300>)
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	4639      	mov	r1, r7
 8005ab6:	f7fa fd3f 	bl	8000538 <__aeabi_dmul>
 8005aba:	2200      	movs	r2, #0
 8005abc:	4b7a      	ldr	r3, [pc, #488]	; (8005ca8 <__ieee754_rem_pio2+0x328>)
 8005abe:	f7fa fb89 	bl	80001d4 <__adddf3>
 8005ac2:	f7fa ffd3 	bl	8000a6c <__aeabi_d2iz>
 8005ac6:	4605      	mov	r5, r0
 8005ac8:	f7fa fcd0 	bl	800046c <__aeabi_i2d>
 8005acc:	a364      	add	r3, pc, #400	; (adr r3, 8005c60 <__ieee754_rem_pio2+0x2e0>)
 8005ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad6:	f7fa fd2f 	bl	8000538 <__aeabi_dmul>
 8005ada:	4602      	mov	r2, r0
 8005adc:	460b      	mov	r3, r1
 8005ade:	4630      	mov	r0, r6
 8005ae0:	4639      	mov	r1, r7
 8005ae2:	f7fa fb75 	bl	80001d0 <__aeabi_dsub>
 8005ae6:	a360      	add	r3, pc, #384	; (adr r3, 8005c68 <__ieee754_rem_pio2+0x2e8>)
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	4682      	mov	sl, r0
 8005aee:	468b      	mov	fp, r1
 8005af0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af4:	f7fa fd20 	bl	8000538 <__aeabi_dmul>
 8005af8:	2d1f      	cmp	r5, #31
 8005afa:	4606      	mov	r6, r0
 8005afc:	460f      	mov	r7, r1
 8005afe:	dc2a      	bgt.n	8005b56 <__ieee754_rem_pio2+0x1d6>
 8005b00:	1e6a      	subs	r2, r5, #1
 8005b02:	4b6a      	ldr	r3, [pc, #424]	; (8005cac <__ieee754_rem_pio2+0x32c>)
 8005b04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b08:	4598      	cmp	r8, r3
 8005b0a:	d024      	beq.n	8005b56 <__ieee754_rem_pio2+0x1d6>
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	463b      	mov	r3, r7
 8005b10:	4650      	mov	r0, sl
 8005b12:	4659      	mov	r1, fp
 8005b14:	f7fa fb5c 	bl	80001d0 <__aeabi_dsub>
 8005b18:	e9c4 0100 	strd	r0, r1, [r4]
 8005b1c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005b20:	4650      	mov	r0, sl
 8005b22:	4642      	mov	r2, r8
 8005b24:	464b      	mov	r3, r9
 8005b26:	4659      	mov	r1, fp
 8005b28:	f7fa fb52 	bl	80001d0 <__aeabi_dsub>
 8005b2c:	463b      	mov	r3, r7
 8005b2e:	4632      	mov	r2, r6
 8005b30:	f7fa fb4e 	bl	80001d0 <__aeabi_dsub>
 8005b34:	9b04      	ldr	r3, [sp, #16]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005b3c:	f6bf af5c 	bge.w	80059f8 <__ieee754_rem_pio2+0x78>
 8005b40:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005b44:	6063      	str	r3, [r4, #4]
 8005b46:	f8c4 8000 	str.w	r8, [r4]
 8005b4a:	60a0      	str	r0, [r4, #8]
 8005b4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005b50:	60e3      	str	r3, [r4, #12]
 8005b52:	426d      	negs	r5, r5
 8005b54:	e750      	b.n	80059f8 <__ieee754_rem_pio2+0x78>
 8005b56:	4632      	mov	r2, r6
 8005b58:	463b      	mov	r3, r7
 8005b5a:	4650      	mov	r0, sl
 8005b5c:	4659      	mov	r1, fp
 8005b5e:	f7fa fb37 	bl	80001d0 <__aeabi_dsub>
 8005b62:	ea4f 5228 	mov.w	r2, r8, asr #20
 8005b66:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005b6a:	1ad3      	subs	r3, r2, r3
 8005b6c:	2b10      	cmp	r3, #16
 8005b6e:	e9c4 0100 	strd	r0, r1, [r4]
 8005b72:	9205      	str	r2, [sp, #20]
 8005b74:	ddd2      	ble.n	8005b1c <__ieee754_rem_pio2+0x19c>
 8005b76:	a33e      	add	r3, pc, #248	; (adr r3, 8005c70 <__ieee754_rem_pio2+0x2f0>)
 8005b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b80:	f7fa fcda 	bl	8000538 <__aeabi_dmul>
 8005b84:	4606      	mov	r6, r0
 8005b86:	460f      	mov	r7, r1
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4650      	mov	r0, sl
 8005b8e:	4659      	mov	r1, fp
 8005b90:	f7fa fb1e 	bl	80001d0 <__aeabi_dsub>
 8005b94:	4602      	mov	r2, r0
 8005b96:	460b      	mov	r3, r1
 8005b98:	4680      	mov	r8, r0
 8005b9a:	4689      	mov	r9, r1
 8005b9c:	4650      	mov	r0, sl
 8005b9e:	4659      	mov	r1, fp
 8005ba0:	f7fa fb16 	bl	80001d0 <__aeabi_dsub>
 8005ba4:	4632      	mov	r2, r6
 8005ba6:	463b      	mov	r3, r7
 8005ba8:	f7fa fb12 	bl	80001d0 <__aeabi_dsub>
 8005bac:	a332      	add	r3, pc, #200	; (adr r3, 8005c78 <__ieee754_rem_pio2+0x2f8>)
 8005bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb2:	4606      	mov	r6, r0
 8005bb4:	460f      	mov	r7, r1
 8005bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bba:	f7fa fcbd 	bl	8000538 <__aeabi_dmul>
 8005bbe:	4632      	mov	r2, r6
 8005bc0:	463b      	mov	r3, r7
 8005bc2:	f7fa fb05 	bl	80001d0 <__aeabi_dsub>
 8005bc6:	4602      	mov	r2, r0
 8005bc8:	460b      	mov	r3, r1
 8005bca:	4606      	mov	r6, r0
 8005bcc:	460f      	mov	r7, r1
 8005bce:	4640      	mov	r0, r8
 8005bd0:	4649      	mov	r1, r9
 8005bd2:	f7fa fafd 	bl	80001d0 <__aeabi_dsub>
 8005bd6:	9a05      	ldr	r2, [sp, #20]
 8005bd8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	2b31      	cmp	r3, #49	; 0x31
 8005be0:	e9c4 0100 	strd	r0, r1, [r4]
 8005be4:	dd2a      	ble.n	8005c3c <__ieee754_rem_pio2+0x2bc>
 8005be6:	a328      	add	r3, pc, #160	; (adr r3, 8005c88 <__ieee754_rem_pio2+0x308>)
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf0:	f7fa fca2 	bl	8000538 <__aeabi_dmul>
 8005bf4:	4606      	mov	r6, r0
 8005bf6:	460f      	mov	r7, r1
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4640      	mov	r0, r8
 8005bfe:	4649      	mov	r1, r9
 8005c00:	f7fa fae6 	bl	80001d0 <__aeabi_dsub>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4682      	mov	sl, r0
 8005c0a:	468b      	mov	fp, r1
 8005c0c:	4640      	mov	r0, r8
 8005c0e:	4649      	mov	r1, r9
 8005c10:	f7fa fade 	bl	80001d0 <__aeabi_dsub>
 8005c14:	4632      	mov	r2, r6
 8005c16:	463b      	mov	r3, r7
 8005c18:	f7fa fada 	bl	80001d0 <__aeabi_dsub>
 8005c1c:	a31c      	add	r3, pc, #112	; (adr r3, 8005c90 <__ieee754_rem_pio2+0x310>)
 8005c1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c22:	4606      	mov	r6, r0
 8005c24:	460f      	mov	r7, r1
 8005c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c2a:	f7fa fc85 	bl	8000538 <__aeabi_dmul>
 8005c2e:	4632      	mov	r2, r6
 8005c30:	463b      	mov	r3, r7
 8005c32:	f7fa facd 	bl	80001d0 <__aeabi_dsub>
 8005c36:	4606      	mov	r6, r0
 8005c38:	460f      	mov	r7, r1
 8005c3a:	e767      	b.n	8005b0c <__ieee754_rem_pio2+0x18c>
 8005c3c:	46c2      	mov	sl, r8
 8005c3e:	46cb      	mov	fp, r9
 8005c40:	e76c      	b.n	8005b1c <__ieee754_rem_pio2+0x19c>
 8005c42:	4b1b      	ldr	r3, [pc, #108]	; (8005cb0 <__ieee754_rem_pio2+0x330>)
 8005c44:	4598      	cmp	r8, r3
 8005c46:	dd35      	ble.n	8005cb4 <__ieee754_rem_pio2+0x334>
 8005c48:	ee10 2a10 	vmov	r2, s0
 8005c4c:	463b      	mov	r3, r7
 8005c4e:	4630      	mov	r0, r6
 8005c50:	4639      	mov	r1, r7
 8005c52:	f7fa fabd 	bl	80001d0 <__aeabi_dsub>
 8005c56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005c5a:	e9c4 0100 	strd	r0, r1, [r4]
 8005c5e:	e6a1      	b.n	80059a4 <__ieee754_rem_pio2+0x24>
 8005c60:	54400000 	.word	0x54400000
 8005c64:	3ff921fb 	.word	0x3ff921fb
 8005c68:	1a626331 	.word	0x1a626331
 8005c6c:	3dd0b461 	.word	0x3dd0b461
 8005c70:	1a600000 	.word	0x1a600000
 8005c74:	3dd0b461 	.word	0x3dd0b461
 8005c78:	2e037073 	.word	0x2e037073
 8005c7c:	3ba3198a 	.word	0x3ba3198a
 8005c80:	6dc9c883 	.word	0x6dc9c883
 8005c84:	3fe45f30 	.word	0x3fe45f30
 8005c88:	2e000000 	.word	0x2e000000
 8005c8c:	3ba3198a 	.word	0x3ba3198a
 8005c90:	252049c1 	.word	0x252049c1
 8005c94:	397b839a 	.word	0x397b839a
 8005c98:	3fe921fb 	.word	0x3fe921fb
 8005c9c:	4002d97b 	.word	0x4002d97b
 8005ca0:	3ff921fb 	.word	0x3ff921fb
 8005ca4:	413921fb 	.word	0x413921fb
 8005ca8:	3fe00000 	.word	0x3fe00000
 8005cac:	0801a788 	.word	0x0801a788
 8005cb0:	7fefffff 	.word	0x7fefffff
 8005cb4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005cb8:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8005cbc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005cc0:	4630      	mov	r0, r6
 8005cc2:	460f      	mov	r7, r1
 8005cc4:	f7fa fed2 	bl	8000a6c <__aeabi_d2iz>
 8005cc8:	f7fa fbd0 	bl	800046c <__aeabi_i2d>
 8005ccc:	4602      	mov	r2, r0
 8005cce:	460b      	mov	r3, r1
 8005cd0:	4630      	mov	r0, r6
 8005cd2:	4639      	mov	r1, r7
 8005cd4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005cd8:	f7fa fa7a 	bl	80001d0 <__aeabi_dsub>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	4b1f      	ldr	r3, [pc, #124]	; (8005d5c <__ieee754_rem_pio2+0x3dc>)
 8005ce0:	f7fa fc2a 	bl	8000538 <__aeabi_dmul>
 8005ce4:	460f      	mov	r7, r1
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	f7fa fec0 	bl	8000a6c <__aeabi_d2iz>
 8005cec:	f7fa fbbe 	bl	800046c <__aeabi_i2d>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	4630      	mov	r0, r6
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005cfc:	f7fa fa68 	bl	80001d0 <__aeabi_dsub>
 8005d00:	2200      	movs	r2, #0
 8005d02:	4b16      	ldr	r3, [pc, #88]	; (8005d5c <__ieee754_rem_pio2+0x3dc>)
 8005d04:	f7fa fc18 	bl	8000538 <__aeabi_dmul>
 8005d08:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d0c:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005d10:	f04f 0803 	mov.w	r8, #3
 8005d14:	2600      	movs	r6, #0
 8005d16:	2700      	movs	r7, #0
 8005d18:	4632      	mov	r2, r6
 8005d1a:	463b      	mov	r3, r7
 8005d1c:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005d20:	f108 3aff 	add.w	sl, r8, #4294967295
 8005d24:	f7fa fe70 	bl	8000a08 <__aeabi_dcmpeq>
 8005d28:	b9b0      	cbnz	r0, 8005d58 <__ieee754_rem_pio2+0x3d8>
 8005d2a:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <__ieee754_rem_pio2+0x3e0>)
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	2302      	movs	r3, #2
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	462a      	mov	r2, r5
 8005d34:	4643      	mov	r3, r8
 8005d36:	4621      	mov	r1, r4
 8005d38:	a806      	add	r0, sp, #24
 8005d3a:	f000 fc05 	bl	8006548 <__kernel_rem_pio2>
 8005d3e:	9b04      	ldr	r3, [sp, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	4605      	mov	r5, r0
 8005d44:	f6bf ae58 	bge.w	80059f8 <__ieee754_rem_pio2+0x78>
 8005d48:	6863      	ldr	r3, [r4, #4]
 8005d4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d4e:	6063      	str	r3, [r4, #4]
 8005d50:	68e3      	ldr	r3, [r4, #12]
 8005d52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005d56:	e6fb      	b.n	8005b50 <__ieee754_rem_pio2+0x1d0>
 8005d58:	46d0      	mov	r8, sl
 8005d5a:	e7dd      	b.n	8005d18 <__ieee754_rem_pio2+0x398>
 8005d5c:	41700000 	.word	0x41700000
 8005d60:	0801a808 	.word	0x0801a808

08005d64 <__ieee754_powf>:
 8005d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d68:	ee10 5a90 	vmov	r5, s1
 8005d6c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 8005d70:	ed2d 8b02 	vpush	{d8}
 8005d74:	eeb0 8a40 	vmov.f32	s16, s0
 8005d78:	eef0 8a60 	vmov.f32	s17, s1
 8005d7c:	f000 8295 	beq.w	80062aa <__ieee754_powf+0x546>
 8005d80:	ee10 8a10 	vmov	r8, s0
 8005d84:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 8005d88:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005d8c:	dc06      	bgt.n	8005d9c <__ieee754_powf+0x38>
 8005d8e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005d92:	dd0a      	ble.n	8005daa <__ieee754_powf+0x46>
 8005d94:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005d98:	f000 8287 	beq.w	80062aa <__ieee754_powf+0x546>
 8005d9c:	ecbd 8b02 	vpop	{d8}
 8005da0:	48d9      	ldr	r0, [pc, #868]	; (8006108 <__ieee754_powf+0x3a4>)
 8005da2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005da6:	f001 b97f 	b.w	80070a8 <nanf>
 8005daa:	f1b8 0f00 	cmp.w	r8, #0
 8005dae:	da1d      	bge.n	8005dec <__ieee754_powf+0x88>
 8005db0:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 8005db4:	da2c      	bge.n	8005e10 <__ieee754_powf+0xac>
 8005db6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005dba:	db30      	blt.n	8005e1e <__ieee754_powf+0xba>
 8005dbc:	15fb      	asrs	r3, r7, #23
 8005dbe:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005dc2:	fa47 f603 	asr.w	r6, r7, r3
 8005dc6:	fa06 f303 	lsl.w	r3, r6, r3
 8005dca:	429f      	cmp	r7, r3
 8005dcc:	d127      	bne.n	8005e1e <__ieee754_powf+0xba>
 8005dce:	f006 0601 	and.w	r6, r6, #1
 8005dd2:	f1c6 0602 	rsb	r6, r6, #2
 8005dd6:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005dda:	d122      	bne.n	8005e22 <__ieee754_powf+0xbe>
 8005ddc:	2d00      	cmp	r5, #0
 8005dde:	f280 826a 	bge.w	80062b6 <__ieee754_powf+0x552>
 8005de2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005de6:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8005dea:	e00d      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005dec:	2600      	movs	r6, #0
 8005dee:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005df2:	d1f0      	bne.n	8005dd6 <__ieee754_powf+0x72>
 8005df4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 8005df8:	f000 8257 	beq.w	80062aa <__ieee754_powf+0x546>
 8005dfc:	dd0a      	ble.n	8005e14 <__ieee754_powf+0xb0>
 8005dfe:	2d00      	cmp	r5, #0
 8005e00:	f280 8256 	bge.w	80062b0 <__ieee754_powf+0x54c>
 8005e04:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800610c <__ieee754_powf+0x3a8>
 8005e08:	ecbd 8b02 	vpop	{d8}
 8005e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e10:	2602      	movs	r6, #2
 8005e12:	e7ec      	b.n	8005dee <__ieee754_powf+0x8a>
 8005e14:	2d00      	cmp	r5, #0
 8005e16:	daf5      	bge.n	8005e04 <__ieee754_powf+0xa0>
 8005e18:	eeb1 0a68 	vneg.f32	s0, s17
 8005e1c:	e7f4      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005e1e:	2600      	movs	r6, #0
 8005e20:	e7d9      	b.n	8005dd6 <__ieee754_powf+0x72>
 8005e22:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 8005e26:	d102      	bne.n	8005e2e <__ieee754_powf+0xca>
 8005e28:	ee28 0a08 	vmul.f32	s0, s16, s16
 8005e2c:	e7ec      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005e2e:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 8005e32:	eeb0 0a48 	vmov.f32	s0, s16
 8005e36:	d108      	bne.n	8005e4a <__ieee754_powf+0xe6>
 8005e38:	f1b8 0f00 	cmp.w	r8, #0
 8005e3c:	db05      	blt.n	8005e4a <__ieee754_powf+0xe6>
 8005e3e:	ecbd 8b02 	vpop	{d8}
 8005e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e46:	f000 ba4f 	b.w	80062e8 <__ieee754_sqrtf>
 8005e4a:	f001 f91b 	bl	8007084 <fabsf>
 8005e4e:	b124      	cbz	r4, 8005e5a <__ieee754_powf+0xf6>
 8005e50:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 8005e54:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8005e58:	d117      	bne.n	8005e8a <__ieee754_powf+0x126>
 8005e5a:	2d00      	cmp	r5, #0
 8005e5c:	bfbc      	itt	lt
 8005e5e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005e62:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005e66:	f1b8 0f00 	cmp.w	r8, #0
 8005e6a:	dacd      	bge.n	8005e08 <__ieee754_powf+0xa4>
 8005e6c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 8005e70:	ea54 0306 	orrs.w	r3, r4, r6
 8005e74:	d104      	bne.n	8005e80 <__ieee754_powf+0x11c>
 8005e76:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005e7a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005e7e:	e7c3      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005e80:	2e01      	cmp	r6, #1
 8005e82:	d1c1      	bne.n	8005e08 <__ieee754_powf+0xa4>
 8005e84:	eeb1 0a40 	vneg.f32	s0, s0
 8005e88:	e7be      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005e8a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 8005e8e:	3801      	subs	r0, #1
 8005e90:	ea56 0300 	orrs.w	r3, r6, r0
 8005e94:	d104      	bne.n	8005ea0 <__ieee754_powf+0x13c>
 8005e96:	ee38 8a48 	vsub.f32	s16, s16, s16
 8005e9a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8005e9e:	e7b3      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005ea0:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 8005ea4:	dd6d      	ble.n	8005f82 <__ieee754_powf+0x21e>
 8005ea6:	4b9a      	ldr	r3, [pc, #616]	; (8006110 <__ieee754_powf+0x3ac>)
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	dc06      	bgt.n	8005eba <__ieee754_powf+0x156>
 8005eac:	2d00      	cmp	r5, #0
 8005eae:	daa9      	bge.n	8005e04 <__ieee754_powf+0xa0>
 8005eb0:	ed9f 0a98 	vldr	s0, [pc, #608]	; 8006114 <__ieee754_powf+0x3b0>
 8005eb4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005eb8:	e7a6      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005eba:	4b97      	ldr	r3, [pc, #604]	; (8006118 <__ieee754_powf+0x3b4>)
 8005ebc:	429c      	cmp	r4, r3
 8005ebe:	dd02      	ble.n	8005ec6 <__ieee754_powf+0x162>
 8005ec0:	2d00      	cmp	r5, #0
 8005ec2:	dcf5      	bgt.n	8005eb0 <__ieee754_powf+0x14c>
 8005ec4:	e79e      	b.n	8005e04 <__ieee754_powf+0xa0>
 8005ec6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005eca:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ece:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800611c <__ieee754_powf+0x3b8>
 8005ed2:	ed9f 6a93 	vldr	s12, [pc, #588]	; 8006120 <__ieee754_powf+0x3bc>
 8005ed6:	eef1 6a40 	vneg.f32	s13, s0
 8005eda:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 8005ede:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8005ee2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005ee6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005eea:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005eee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005ef2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 8006124 <__ieee754_powf+0x3c0>
 8005ef6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005efa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 8006128 <__ieee754_powf+0x3c4>
 8005efe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005f02:	eeb0 7a67 	vmov.f32	s14, s15
 8005f06:	eea0 7a06 	vfma.f32	s14, s0, s12
 8005f0a:	ee17 3a10 	vmov	r3, s14
 8005f0e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005f12:	f023 030f 	bic.w	r3, r3, #15
 8005f16:	ee07 3a10 	vmov	s14, r3
 8005f1a:	eea6 7a86 	vfma.f32	s14, s13, s12
 8005f1e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005f22:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 8005f26:	f025 050f 	bic.w	r5, r5, #15
 8005f2a:	ee07 5a10 	vmov	s14, r5
 8005f2e:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005f32:	ee78 8ac7 	vsub.f32	s17, s17, s14
 8005f36:	ee07 3a10 	vmov	s14, r3
 8005f3a:	ee06 5a90 	vmov	s13, r5
 8005f3e:	eee7 7a28 	vfma.f32	s15, s14, s17
 8005f42:	3e01      	subs	r6, #1
 8005f44:	ea56 0200 	orrs.w	r2, r6, r0
 8005f48:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005f4c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005f50:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005f54:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8005f58:	ee16 4a90 	vmov	r4, s13
 8005f5c:	bf08      	it	eq
 8005f5e:	eeb0 8a40 	vmoveq.f32	s16, s0
 8005f62:	2c00      	cmp	r4, #0
 8005f64:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005f68:	f340 8186 	ble.w	8006278 <__ieee754_powf+0x514>
 8005f6c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8005f70:	f340 80fc 	ble.w	800616c <__ieee754_powf+0x408>
 8005f74:	eddf 7a67 	vldr	s15, [pc, #412]	; 8006114 <__ieee754_powf+0x3b0>
 8005f78:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005f7c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005f80:	e742      	b.n	8005e08 <__ieee754_powf+0xa4>
 8005f82:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 8005f86:	bfbf      	itttt	lt
 8005f88:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800612c <__ieee754_powf+0x3c8>
 8005f8c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8005f90:	f06f 0217 	mvnlt.w	r2, #23
 8005f94:	ee17 4a90 	vmovlt	r4, s15
 8005f98:	ea4f 53e4 	mov.w	r3, r4, asr #23
 8005f9c:	bfa8      	it	ge
 8005f9e:	2200      	movge	r2, #0
 8005fa0:	3b7f      	subs	r3, #127	; 0x7f
 8005fa2:	4413      	add	r3, r2
 8005fa4:	4a62      	ldr	r2, [pc, #392]	; (8006130 <__ieee754_powf+0x3cc>)
 8005fa6:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005faa:	4294      	cmp	r4, r2
 8005fac:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 8005fb0:	dd06      	ble.n	8005fc0 <__ieee754_powf+0x25c>
 8005fb2:	4a60      	ldr	r2, [pc, #384]	; (8006134 <__ieee754_powf+0x3d0>)
 8005fb4:	4294      	cmp	r4, r2
 8005fb6:	f340 80a5 	ble.w	8006104 <__ieee754_powf+0x3a0>
 8005fba:	3301      	adds	r3, #1
 8005fbc:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005fc0:	2400      	movs	r4, #0
 8005fc2:	4a5d      	ldr	r2, [pc, #372]	; (8006138 <__ieee754_powf+0x3d4>)
 8005fc4:	00a7      	lsls	r7, r4, #2
 8005fc6:	443a      	add	r2, r7
 8005fc8:	ee07 1a90 	vmov	s15, r1
 8005fcc:	ed92 7a00 	vldr	s14, [r2]
 8005fd0:	4a5a      	ldr	r2, [pc, #360]	; (800613c <__ieee754_powf+0x3d8>)
 8005fd2:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005fd6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005fda:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 8005fde:	1049      	asrs	r1, r1, #1
 8005fe0:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005fe4:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005fe8:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 8005fec:	ee37 6ac7 	vsub.f32	s12, s15, s14
 8005ff0:	ee06 1a90 	vmov	s13, r1
 8005ff4:	ee66 4a05 	vmul.f32	s9, s12, s10
 8005ff8:	ee14 ea90 	vmov	lr, s9
 8005ffc:	ea02 0e0e 	and.w	lr, r2, lr
 8006000:	ee05 ea90 	vmov	s11, lr
 8006004:	eeb1 4a65 	vneg.f32	s8, s11
 8006008:	eea4 6a26 	vfma.f32	s12, s8, s13
 800600c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006010:	ee35 7aa4 	vadd.f32	s14, s11, s9
 8006014:	ee77 6ae6 	vsub.f32	s13, s15, s13
 8006018:	eddf 7a49 	vldr	s15, [pc, #292]	; 8006140 <__ieee754_powf+0x3dc>
 800601c:	eea4 6a26 	vfma.f32	s12, s8, s13
 8006020:	ee66 6a05 	vmul.f32	s13, s12, s10
 8006024:	ee24 6aa4 	vmul.f32	s12, s9, s9
 8006028:	ed9f 5a46 	vldr	s10, [pc, #280]	; 8006144 <__ieee754_powf+0x3e0>
 800602c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006030:	ed9f 5a45 	vldr	s10, [pc, #276]	; 8006148 <__ieee754_powf+0x3e4>
 8006034:	eea6 5a27 	vfma.f32	s10, s12, s15
 8006038:	eddf 7a38 	vldr	s15, [pc, #224]	; 800611c <__ieee754_powf+0x3b8>
 800603c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006040:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800614c <__ieee754_powf+0x3e8>
 8006044:	eea6 5a27 	vfma.f32	s10, s12, s15
 8006048:	eddf 7a41 	vldr	s15, [pc, #260]	; 8006150 <__ieee754_powf+0x3ec>
 800604c:	eee6 7a05 	vfma.f32	s15, s12, s10
 8006050:	ee66 3a06 	vmul.f32	s7, s12, s12
 8006054:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006058:	ee27 7a26 	vmul.f32	s14, s14, s13
 800605c:	eeb0 6a45 	vmov.f32	s12, s10
 8006060:	eea3 7aa7 	vfma.f32	s14, s7, s15
 8006064:	eea5 6aa5 	vfma.f32	s12, s11, s11
 8006068:	ee36 6a07 	vadd.f32	s12, s12, s14
 800606c:	ee16 1a10 	vmov	r1, s12
 8006070:	4011      	ands	r1, r2
 8006072:	ee06 1a10 	vmov	s12, r1
 8006076:	ee76 7a45 	vsub.f32	s15, s12, s10
 800607a:	ed9f 5a36 	vldr	s10, [pc, #216]	; 8006154 <__ieee754_powf+0x3f0>
 800607e:	eee4 7a25 	vfma.f32	s15, s8, s11
 8006082:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006086:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800608a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800608e:	eeb0 7a67 	vmov.f32	s14, s15
 8006092:	eea5 7a86 	vfma.f32	s14, s11, s12
 8006096:	ee17 1a10 	vmov	r1, s14
 800609a:	4011      	ands	r1, r2
 800609c:	ee07 1a10 	vmov	s14, r1
 80060a0:	eea4 7a06 	vfma.f32	s14, s8, s12
 80060a4:	ee05 1a90 	vmov	s11, r1
 80060a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80060ac:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006158 <__ieee754_powf+0x3f4>
 80060b0:	492a      	ldr	r1, [pc, #168]	; (800615c <__ieee754_powf+0x3f8>)
 80060b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80060b6:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8006160 <__ieee754_powf+0x3fc>
 80060ba:	eee5 7a87 	vfma.f32	s15, s11, s14
 80060be:	4439      	add	r1, r7
 80060c0:	ed91 7a00 	vldr	s14, [r1]
 80060c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80060c8:	ee07 3a90 	vmov	s15, r3
 80060cc:	eeb0 6a47 	vmov.f32	s12, s14
 80060d0:	4b24      	ldr	r3, [pc, #144]	; (8006164 <__ieee754_powf+0x400>)
 80060d2:	eea5 6a85 	vfma.f32	s12, s11, s10
 80060d6:	443b      	add	r3, r7
 80060d8:	edd3 4a00 	vldr	s9, [r3]
 80060dc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80060e0:	ee36 6a24 	vadd.f32	s12, s12, s9
 80060e4:	ee76 7a26 	vadd.f32	s15, s12, s13
 80060e8:	ee17 3a90 	vmov	r3, s15
 80060ec:	4013      	ands	r3, r2
 80060ee:	ee07 3a90 	vmov	s15, r3
 80060f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80060f6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80060fa:	eee5 7ac5 	vfms.f32	s15, s11, s10
 80060fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006102:	e70e      	b.n	8005f22 <__ieee754_powf+0x1be>
 8006104:	2401      	movs	r4, #1
 8006106:	e75c      	b.n	8005fc2 <__ieee754_powf+0x25e>
 8006108:	0801a784 	.word	0x0801a784
 800610c:	00000000 	.word	0x00000000
 8006110:	3f7ffff7 	.word	0x3f7ffff7
 8006114:	7149f2ca 	.word	0x7149f2ca
 8006118:	3f800007 	.word	0x3f800007
 800611c:	3eaaaaab 	.word	0x3eaaaaab
 8006120:	3fb8aa00 	.word	0x3fb8aa00
 8006124:	3fb8aa3b 	.word	0x3fb8aa3b
 8006128:	36eca570 	.word	0x36eca570
 800612c:	4b800000 	.word	0x4b800000
 8006130:	001cc471 	.word	0x001cc471
 8006134:	005db3d6 	.word	0x005db3d6
 8006138:	0801a910 	.word	0x0801a910
 800613c:	fffff000 	.word	0xfffff000
 8006140:	3e6c3255 	.word	0x3e6c3255
 8006144:	3e53f142 	.word	0x3e53f142
 8006148:	3e8ba305 	.word	0x3e8ba305
 800614c:	3edb6db7 	.word	0x3edb6db7
 8006150:	3f19999a 	.word	0x3f19999a
 8006154:	3f763800 	.word	0x3f763800
 8006158:	3f76384f 	.word	0x3f76384f
 800615c:	0801a920 	.word	0x0801a920
 8006160:	369dc3a0 	.word	0x369dc3a0
 8006164:	0801a918 	.word	0x0801a918
 8006168:	3338aa3c 	.word	0x3338aa3c
 800616c:	f040 8094 	bne.w	8006298 <__ieee754_powf+0x534>
 8006170:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 8006168 <__ieee754_powf+0x404>
 8006174:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006178:	ee37 6a86 	vadd.f32	s12, s15, s12
 800617c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8006180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006184:	f73f aef6 	bgt.w	8005f74 <__ieee754_powf+0x210>
 8006188:	15db      	asrs	r3, r3, #23
 800618a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800618e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006192:	4103      	asrs	r3, r0
 8006194:	4423      	add	r3, r4
 8006196:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800619a:	4948      	ldr	r1, [pc, #288]	; (80062bc <__ieee754_powf+0x558>)
 800619c:	3a7f      	subs	r2, #127	; 0x7f
 800619e:	4111      	asrs	r1, r2
 80061a0:	ea23 0101 	bic.w	r1, r3, r1
 80061a4:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80061a8:	ee06 1a90 	vmov	s13, r1
 80061ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80061b0:	f1c2 0217 	rsb	r2, r2, #23
 80061b4:	4110      	asrs	r0, r2
 80061b6:	2c00      	cmp	r4, #0
 80061b8:	ee37 7a66 	vsub.f32	s14, s14, s13
 80061bc:	bfb8      	it	lt
 80061be:	4240      	neglt	r0, r0
 80061c0:	ee77 6a27 	vadd.f32	s13, s14, s15
 80061c4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 80062c0 <__ieee754_powf+0x55c>
 80061c8:	ee16 3a90 	vmov	r3, s13
 80061cc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80061d0:	f023 030f 	bic.w	r3, r3, #15
 80061d4:	ee06 3a90 	vmov	s13, r3
 80061d8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80061dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061e0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80062c4 <__ieee754_powf+0x560>
 80061e4:	ee26 7a87 	vmul.f32	s14, s13, s14
 80061e8:	eea7 7a86 	vfma.f32	s14, s15, s12
 80061ec:	eef0 7a47 	vmov.f32	s15, s14
 80061f0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80062c8 <__ieee754_powf+0x564>
 80061f4:	eeb0 0a67 	vmov.f32	s0, s15
 80061f8:	eea6 0a87 	vfma.f32	s0, s13, s14
 80061fc:	eeb0 6a40 	vmov.f32	s12, s0
 8006200:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8006204:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006208:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800620c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 80062cc <__ieee754_powf+0x568>
 8006210:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80062d0 <__ieee754_powf+0x56c>
 8006214:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006218:	eddf 6a2e 	vldr	s13, [pc, #184]	; 80062d4 <__ieee754_powf+0x570>
 800621c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006220:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 80062d8 <__ieee754_powf+0x574>
 8006224:	eea7 6a26 	vfma.f32	s12, s14, s13
 8006228:	eddf 6a2c 	vldr	s13, [pc, #176]	; 80062dc <__ieee754_powf+0x578>
 800622c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006230:	eeb0 6a40 	vmov.f32	s12, s0
 8006234:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006238:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800623c:	eeb0 7a46 	vmov.f32	s14, s12
 8006240:	ee77 6a66 	vsub.f32	s13, s14, s13
 8006244:	ee20 6a06 	vmul.f32	s12, s0, s12
 8006248:	eee0 7a27 	vfma.f32	s15, s0, s15
 800624c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006250:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006254:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006258:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800625c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006260:	ee10 3a10 	vmov	r3, s0
 8006264:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006268:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800626c:	da1a      	bge.n	80062a4 <__ieee754_powf+0x540>
 800626e:	f000 ff21 	bl	80070b4 <scalbnf>
 8006272:	ee20 0a08 	vmul.f32	s0, s0, s16
 8006276:	e5c7      	b.n	8005e08 <__ieee754_powf+0xa4>
 8006278:	4a19      	ldr	r2, [pc, #100]	; (80062e0 <__ieee754_powf+0x57c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	dd02      	ble.n	8006284 <__ieee754_powf+0x520>
 800627e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80062e4 <__ieee754_powf+0x580>
 8006282:	e679      	b.n	8005f78 <__ieee754_powf+0x214>
 8006284:	d108      	bne.n	8006298 <__ieee754_powf+0x534>
 8006286:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800628a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800628e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006292:	f63f af79 	bhi.w	8006188 <__ieee754_powf+0x424>
 8006296:	e7f2      	b.n	800627e <__ieee754_powf+0x51a>
 8006298:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800629c:	f73f af74 	bgt.w	8006188 <__ieee754_powf+0x424>
 80062a0:	2000      	movs	r0, #0
 80062a2:	e78d      	b.n	80061c0 <__ieee754_powf+0x45c>
 80062a4:	ee00 3a10 	vmov	s0, r3
 80062a8:	e7e3      	b.n	8006272 <__ieee754_powf+0x50e>
 80062aa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80062ae:	e5ab      	b.n	8005e08 <__ieee754_powf+0xa4>
 80062b0:	eeb0 0a68 	vmov.f32	s0, s17
 80062b4:	e5a8      	b.n	8005e08 <__ieee754_powf+0xa4>
 80062b6:	eeb0 0a48 	vmov.f32	s0, s16
 80062ba:	e5a5      	b.n	8005e08 <__ieee754_powf+0xa4>
 80062bc:	007fffff 	.word	0x007fffff
 80062c0:	3f317218 	.word	0x3f317218
 80062c4:	35bfbe8c 	.word	0x35bfbe8c
 80062c8:	3f317200 	.word	0x3f317200
 80062cc:	3331bb4c 	.word	0x3331bb4c
 80062d0:	b5ddea0e 	.word	0xb5ddea0e
 80062d4:	388ab355 	.word	0x388ab355
 80062d8:	bb360b61 	.word	0xbb360b61
 80062dc:	3e2aaaab 	.word	0x3e2aaaab
 80062e0:	43160000 	.word	0x43160000
 80062e4:	0da24260 	.word	0x0da24260

080062e8 <__ieee754_sqrtf>:
 80062e8:	ee10 2a10 	vmov	r2, s0
 80062ec:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 80062f0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	d302      	bcc.n	80062fe <__ieee754_sqrtf+0x16>
 80062f8:	eea0 0a00 	vfma.f32	s0, s0, s0
 80062fc:	bd70      	pop	{r4, r5, r6, pc}
 80062fe:	b3b1      	cbz	r1, 800636e <__ieee754_sqrtf+0x86>
 8006300:	2a00      	cmp	r2, #0
 8006302:	da04      	bge.n	800630e <__ieee754_sqrtf+0x26>
 8006304:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006308:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800630c:	bd70      	pop	{r4, r5, r6, pc}
 800630e:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8006312:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006316:	d204      	bcs.n	8006322 <__ieee754_sqrtf+0x3a>
 8006318:	2100      	movs	r1, #0
 800631a:	0210      	lsls	r0, r2, #8
 800631c:	d528      	bpl.n	8006370 <__ieee754_sqrtf+0x88>
 800631e:	3901      	subs	r1, #1
 8006320:	1a5b      	subs	r3, r3, r1
 8006322:	3b7f      	subs	r3, #127	; 0x7f
 8006324:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006328:	07d9      	lsls	r1, r3, #31
 800632a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800632e:	bf48      	it	mi
 8006330:	0052      	lslmi	r2, r2, #1
 8006332:	1059      	asrs	r1, r3, #1
 8006334:	2300      	movs	r3, #0
 8006336:	0052      	lsls	r2, r2, #1
 8006338:	2419      	movs	r4, #25
 800633a:	461e      	mov	r6, r3
 800633c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8006340:	1835      	adds	r5, r6, r0
 8006342:	4295      	cmp	r5, r2
 8006344:	bfde      	ittt	le
 8006346:	182e      	addle	r6, r5, r0
 8006348:	1b52      	suble	r2, r2, r5
 800634a:	181b      	addle	r3, r3, r0
 800634c:	3c01      	subs	r4, #1
 800634e:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8006352:	ea4f 0050 	mov.w	r0, r0, lsr #1
 8006356:	d1f3      	bne.n	8006340 <__ieee754_sqrtf+0x58>
 8006358:	b112      	cbz	r2, 8006360 <__ieee754_sqrtf+0x78>
 800635a:	3301      	adds	r3, #1
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	105b      	asrs	r3, r3, #1
 8006362:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 8006366:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800636a:	ee00 3a10 	vmov	s0, r3
 800636e:	bd70      	pop	{r4, r5, r6, pc}
 8006370:	0052      	lsls	r2, r2, #1
 8006372:	3101      	adds	r1, #1
 8006374:	e7d1      	b.n	800631a <__ieee754_sqrtf+0x32>
	...

08006378 <__kernel_cos>:
 8006378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800637c:	ec59 8b10 	vmov	r8, r9, d0
 8006380:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 8006384:	b085      	sub	sp, #20
 8006386:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 800638a:	ed8d 1b00 	vstr	d1, [sp]
 800638e:	da07      	bge.n	80063a0 <__kernel_cos+0x28>
 8006390:	ee10 0a10 	vmov	r0, s0
 8006394:	4649      	mov	r1, r9
 8006396:	f7fa fb69 	bl	8000a6c <__aeabi_d2iz>
 800639a:	2800      	cmp	r0, #0
 800639c:	f000 80aa 	beq.w	80064f4 <__kernel_cos+0x17c>
 80063a0:	4642      	mov	r2, r8
 80063a2:	464b      	mov	r3, r9
 80063a4:	4640      	mov	r0, r8
 80063a6:	4649      	mov	r1, r9
 80063a8:	f7fa f8c6 	bl	8000538 <__aeabi_dmul>
 80063ac:	a359      	add	r3, pc, #356	; (adr r3, 8006514 <__kernel_cos+0x19c>)
 80063ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b2:	4604      	mov	r4, r0
 80063b4:	460d      	mov	r5, r1
 80063b6:	f7fa f8bf 	bl	8000538 <__aeabi_dmul>
 80063ba:	a358      	add	r3, pc, #352	; (adr r3, 800651c <__kernel_cos+0x1a4>)
 80063bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063c0:	f7f9 ff08 	bl	80001d4 <__adddf3>
 80063c4:	4622      	mov	r2, r4
 80063c6:	462b      	mov	r3, r5
 80063c8:	f7fa f8b6 	bl	8000538 <__aeabi_dmul>
 80063cc:	a355      	add	r3, pc, #340	; (adr r3, 8006524 <__kernel_cos+0x1ac>)
 80063ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d2:	f7f9 fefd 	bl	80001d0 <__aeabi_dsub>
 80063d6:	4622      	mov	r2, r4
 80063d8:	462b      	mov	r3, r5
 80063da:	f7fa f8ad 	bl	8000538 <__aeabi_dmul>
 80063de:	a353      	add	r3, pc, #332	; (adr r3, 800652c <__kernel_cos+0x1b4>)
 80063e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063e4:	f7f9 fef6 	bl	80001d4 <__adddf3>
 80063e8:	4622      	mov	r2, r4
 80063ea:	462b      	mov	r3, r5
 80063ec:	f7fa f8a4 	bl	8000538 <__aeabi_dmul>
 80063f0:	a350      	add	r3, pc, #320	; (adr r3, 8006534 <__kernel_cos+0x1bc>)
 80063f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f6:	f7f9 feeb 	bl	80001d0 <__aeabi_dsub>
 80063fa:	4622      	mov	r2, r4
 80063fc:	462b      	mov	r3, r5
 80063fe:	f7fa f89b 	bl	8000538 <__aeabi_dmul>
 8006402:	a34e      	add	r3, pc, #312	; (adr r3, 800653c <__kernel_cos+0x1c4>)
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f7f9 fee4 	bl	80001d4 <__adddf3>
 800640c:	462b      	mov	r3, r5
 800640e:	4622      	mov	r2, r4
 8006410:	f7fa f892 	bl	8000538 <__aeabi_dmul>
 8006414:	4b3a      	ldr	r3, [pc, #232]	; (8006500 <__kernel_cos+0x188>)
 8006416:	429f      	cmp	r7, r3
 8006418:	4682      	mov	sl, r0
 800641a:	468b      	mov	fp, r1
 800641c:	dc2c      	bgt.n	8006478 <__kernel_cos+0x100>
 800641e:	2200      	movs	r2, #0
 8006420:	4b38      	ldr	r3, [pc, #224]	; (8006504 <__kernel_cos+0x18c>)
 8006422:	4620      	mov	r0, r4
 8006424:	4629      	mov	r1, r5
 8006426:	f7fa f887 	bl	8000538 <__aeabi_dmul>
 800642a:	4652      	mov	r2, sl
 800642c:	4606      	mov	r6, r0
 800642e:	460f      	mov	r7, r1
 8006430:	465b      	mov	r3, fp
 8006432:	4620      	mov	r0, r4
 8006434:	4629      	mov	r1, r5
 8006436:	f7fa f87f 	bl	8000538 <__aeabi_dmul>
 800643a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800643e:	4604      	mov	r4, r0
 8006440:	460d      	mov	r5, r1
 8006442:	4640      	mov	r0, r8
 8006444:	4649      	mov	r1, r9
 8006446:	f7fa f877 	bl	8000538 <__aeabi_dmul>
 800644a:	4602      	mov	r2, r0
 800644c:	460b      	mov	r3, r1
 800644e:	4620      	mov	r0, r4
 8006450:	4629      	mov	r1, r5
 8006452:	f7f9 febd 	bl	80001d0 <__aeabi_dsub>
 8006456:	4602      	mov	r2, r0
 8006458:	460b      	mov	r3, r1
 800645a:	4630      	mov	r0, r6
 800645c:	4639      	mov	r1, r7
 800645e:	f7f9 feb7 	bl	80001d0 <__aeabi_dsub>
 8006462:	460b      	mov	r3, r1
 8006464:	4928      	ldr	r1, [pc, #160]	; (8006508 <__kernel_cos+0x190>)
 8006466:	4602      	mov	r2, r0
 8006468:	2000      	movs	r0, #0
 800646a:	f7f9 feb1 	bl	80001d0 <__aeabi_dsub>
 800646e:	ec41 0b10 	vmov	d0, r0, r1
 8006472:	b005      	add	sp, #20
 8006474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006478:	4b24      	ldr	r3, [pc, #144]	; (800650c <__kernel_cos+0x194>)
 800647a:	4923      	ldr	r1, [pc, #140]	; (8006508 <__kernel_cos+0x190>)
 800647c:	429f      	cmp	r7, r3
 800647e:	bfd7      	itett	le
 8006480:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 8006484:	4f22      	ldrgt	r7, [pc, #136]	; (8006510 <__kernel_cos+0x198>)
 8006486:	2200      	movle	r2, #0
 8006488:	4616      	movle	r6, r2
 800648a:	bfd4      	ite	le
 800648c:	461f      	movle	r7, r3
 800648e:	2600      	movgt	r6, #0
 8006490:	4632      	mov	r2, r6
 8006492:	463b      	mov	r3, r7
 8006494:	2000      	movs	r0, #0
 8006496:	f7f9 fe9b 	bl	80001d0 <__aeabi_dsub>
 800649a:	2200      	movs	r2, #0
 800649c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064a0:	4b18      	ldr	r3, [pc, #96]	; (8006504 <__kernel_cos+0x18c>)
 80064a2:	4620      	mov	r0, r4
 80064a4:	4629      	mov	r1, r5
 80064a6:	f7fa f847 	bl	8000538 <__aeabi_dmul>
 80064aa:	4632      	mov	r2, r6
 80064ac:	463b      	mov	r3, r7
 80064ae:	f7f9 fe8f 	bl	80001d0 <__aeabi_dsub>
 80064b2:	4652      	mov	r2, sl
 80064b4:	4606      	mov	r6, r0
 80064b6:	460f      	mov	r7, r1
 80064b8:	465b      	mov	r3, fp
 80064ba:	4620      	mov	r0, r4
 80064bc:	4629      	mov	r1, r5
 80064be:	f7fa f83b 	bl	8000538 <__aeabi_dmul>
 80064c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064c6:	4604      	mov	r4, r0
 80064c8:	460d      	mov	r5, r1
 80064ca:	4640      	mov	r0, r8
 80064cc:	4649      	mov	r1, r9
 80064ce:	f7fa f833 	bl	8000538 <__aeabi_dmul>
 80064d2:	4602      	mov	r2, r0
 80064d4:	460b      	mov	r3, r1
 80064d6:	4620      	mov	r0, r4
 80064d8:	4629      	mov	r1, r5
 80064da:	f7f9 fe79 	bl	80001d0 <__aeabi_dsub>
 80064de:	4602      	mov	r2, r0
 80064e0:	460b      	mov	r3, r1
 80064e2:	4630      	mov	r0, r6
 80064e4:	4639      	mov	r1, r7
 80064e6:	f7f9 fe73 	bl	80001d0 <__aeabi_dsub>
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064f2:	e7ba      	b.n	800646a <__kernel_cos+0xf2>
 80064f4:	2000      	movs	r0, #0
 80064f6:	4904      	ldr	r1, [pc, #16]	; (8006508 <__kernel_cos+0x190>)
 80064f8:	e7b9      	b.n	800646e <__kernel_cos+0xf6>
 80064fa:	bf00      	nop
 80064fc:	f3af 8000 	nop.w
 8006500:	3fd33332 	.word	0x3fd33332
 8006504:	3fe00000 	.word	0x3fe00000
 8006508:	3ff00000 	.word	0x3ff00000
 800650c:	3fe90000 	.word	0x3fe90000
 8006510:	3fd20000 	.word	0x3fd20000
 8006514:	be8838d4 	.word	0xbe8838d4
 8006518:	bda8fae9 	.word	0xbda8fae9
 800651c:	bdb4b1c4 	.word	0xbdb4b1c4
 8006520:	3e21ee9e 	.word	0x3e21ee9e
 8006524:	809c52ad 	.word	0x809c52ad
 8006528:	3e927e4f 	.word	0x3e927e4f
 800652c:	19cb1590 	.word	0x19cb1590
 8006530:	3efa01a0 	.word	0x3efa01a0
 8006534:	16c15177 	.word	0x16c15177
 8006538:	3f56c16c 	.word	0x3f56c16c
 800653c:	5555554c 	.word	0x5555554c
 8006540:	3fa55555 	.word	0x3fa55555
 8006544:	00000000 	.word	0x00000000

08006548 <__kernel_rem_pio2>:
 8006548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800654c:	ed2d 8b02 	vpush	{d8}
 8006550:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8006554:	1ed4      	subs	r4, r2, #3
 8006556:	9306      	str	r3, [sp, #24]
 8006558:	9102      	str	r1, [sp, #8]
 800655a:	4bc3      	ldr	r3, [pc, #780]	; (8006868 <__kernel_rem_pio2+0x320>)
 800655c:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800655e:	9009      	str	r0, [sp, #36]	; 0x24
 8006560:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006564:	9300      	str	r3, [sp, #0]
 8006566:	9b06      	ldr	r3, [sp, #24]
 8006568:	3b01      	subs	r3, #1
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	2318      	movs	r3, #24
 800656e:	fb94 f4f3 	sdiv	r4, r4, r3
 8006572:	f06f 0317 	mvn.w	r3, #23
 8006576:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 800657a:	fb04 3303 	mla	r3, r4, r3, r3
 800657e:	eb03 0a02 	add.w	sl, r3, r2
 8006582:	9b00      	ldr	r3, [sp, #0]
 8006584:	9a04      	ldr	r2, [sp, #16]
 8006586:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8006858 <__kernel_rem_pio2+0x310>
 800658a:	eb03 0802 	add.w	r8, r3, r2
 800658e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006590:	1aa7      	subs	r7, r4, r2
 8006592:	ae20      	add	r6, sp, #128	; 0x80
 8006594:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8006598:	2500      	movs	r5, #0
 800659a:	4545      	cmp	r5, r8
 800659c:	dd13      	ble.n	80065c6 <__kernel_rem_pio2+0x7e>
 800659e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8006858 <__kernel_rem_pio2+0x310>
 80065a2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80065a6:	2600      	movs	r6, #0
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	429e      	cmp	r6, r3
 80065ac:	dc32      	bgt.n	8006614 <__kernel_rem_pio2+0xcc>
 80065ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065b0:	9303      	str	r3, [sp, #12]
 80065b2:	9b06      	ldr	r3, [sp, #24]
 80065b4:	199d      	adds	r5, r3, r6
 80065b6:	ab20      	add	r3, sp, #128	; 0x80
 80065b8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80065bc:	9308      	str	r3, [sp, #32]
 80065be:	ec59 8b18 	vmov	r8, r9, d8
 80065c2:	2700      	movs	r7, #0
 80065c4:	e01f      	b.n	8006606 <__kernel_rem_pio2+0xbe>
 80065c6:	42ef      	cmn	r7, r5
 80065c8:	d407      	bmi.n	80065da <__kernel_rem_pio2+0x92>
 80065ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80065ce:	f7f9 ff4d 	bl	800046c <__aeabi_i2d>
 80065d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80065d6:	3501      	adds	r5, #1
 80065d8:	e7df      	b.n	800659a <__kernel_rem_pio2+0x52>
 80065da:	ec51 0b18 	vmov	r0, r1, d8
 80065de:	e7f8      	b.n	80065d2 <__kernel_rem_pio2+0x8a>
 80065e0:	9908      	ldr	r1, [sp, #32]
 80065e2:	9d03      	ldr	r5, [sp, #12]
 80065e4:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80065e8:	9108      	str	r1, [sp, #32]
 80065ea:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80065ee:	9503      	str	r5, [sp, #12]
 80065f0:	f7f9 ffa2 	bl	8000538 <__aeabi_dmul>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7f9 fdea 	bl	80001d4 <__adddf3>
 8006600:	3701      	adds	r7, #1
 8006602:	4680      	mov	r8, r0
 8006604:	4689      	mov	r9, r1
 8006606:	9b04      	ldr	r3, [sp, #16]
 8006608:	429f      	cmp	r7, r3
 800660a:	dde9      	ble.n	80065e0 <__kernel_rem_pio2+0x98>
 800660c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8006610:	3601      	adds	r6, #1
 8006612:	e7c9      	b.n	80065a8 <__kernel_rem_pio2+0x60>
 8006614:	9b00      	ldr	r3, [sp, #0]
 8006616:	9f00      	ldr	r7, [sp, #0]
 8006618:	aa0c      	add	r2, sp, #48	; 0x30
 800661a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800661e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006620:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006622:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006626:	930a      	str	r3, [sp, #40]	; 0x28
 8006628:	ab98      	add	r3, sp, #608	; 0x260
 800662a:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 800662e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006632:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006636:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800663a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800663e:	9308      	str	r3, [sp, #32]
 8006640:	9a08      	ldr	r2, [sp, #32]
 8006642:	ab98      	add	r3, sp, #608	; 0x260
 8006644:	4413      	add	r3, r2
 8006646:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800664a:	2600      	movs	r6, #0
 800664c:	1bbb      	subs	r3, r7, r6
 800664e:	2b00      	cmp	r3, #0
 8006650:	dc77      	bgt.n	8006742 <__kernel_rem_pio2+0x1fa>
 8006652:	ec49 8b10 	vmov	d0, r8, r9
 8006656:	4650      	mov	r0, sl
 8006658:	f000 fc9a 	bl	8006f90 <scalbn>
 800665c:	ec55 4b10 	vmov	r4, r5, d0
 8006660:	2200      	movs	r2, #0
 8006662:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006666:	ee10 0a10 	vmov	r0, s0
 800666a:	4629      	mov	r1, r5
 800666c:	f7f9 ff64 	bl	8000538 <__aeabi_dmul>
 8006670:	ec41 0b10 	vmov	d0, r0, r1
 8006674:	f000 fb7c 	bl	8006d70 <floor>
 8006678:	2200      	movs	r2, #0
 800667a:	ec51 0b10 	vmov	r0, r1, d0
 800667e:	4b7b      	ldr	r3, [pc, #492]	; (800686c <__kernel_rem_pio2+0x324>)
 8006680:	f7f9 ff5a 	bl	8000538 <__aeabi_dmul>
 8006684:	4602      	mov	r2, r0
 8006686:	460b      	mov	r3, r1
 8006688:	4620      	mov	r0, r4
 800668a:	4629      	mov	r1, r5
 800668c:	f7f9 fda0 	bl	80001d0 <__aeabi_dsub>
 8006690:	460d      	mov	r5, r1
 8006692:	4604      	mov	r4, r0
 8006694:	f7fa f9ea 	bl	8000a6c <__aeabi_d2iz>
 8006698:	9003      	str	r0, [sp, #12]
 800669a:	f7f9 fee7 	bl	800046c <__aeabi_i2d>
 800669e:	4602      	mov	r2, r0
 80066a0:	460b      	mov	r3, r1
 80066a2:	4620      	mov	r0, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	f7f9 fd93 	bl	80001d0 <__aeabi_dsub>
 80066aa:	f1ba 0f00 	cmp.w	sl, #0
 80066ae:	4680      	mov	r8, r0
 80066b0:	4689      	mov	r9, r1
 80066b2:	dd6b      	ble.n	800678c <__kernel_rem_pio2+0x244>
 80066b4:	1e7a      	subs	r2, r7, #1
 80066b6:	ab0c      	add	r3, sp, #48	; 0x30
 80066b8:	f1ca 0118 	rsb	r1, sl, #24
 80066bc:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80066c0:	9c03      	ldr	r4, [sp, #12]
 80066c2:	fa40 f301 	asr.w	r3, r0, r1
 80066c6:	441c      	add	r4, r3
 80066c8:	408b      	lsls	r3, r1
 80066ca:	1ac0      	subs	r0, r0, r3
 80066cc:	ab0c      	add	r3, sp, #48	; 0x30
 80066ce:	9403      	str	r4, [sp, #12]
 80066d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80066d4:	f1ca 0317 	rsb	r3, sl, #23
 80066d8:	fa40 fb03 	asr.w	fp, r0, r3
 80066dc:	f1bb 0f00 	cmp.w	fp, #0
 80066e0:	dd62      	ble.n	80067a8 <__kernel_rem_pio2+0x260>
 80066e2:	9b03      	ldr	r3, [sp, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	3301      	adds	r3, #1
 80066e8:	9303      	str	r3, [sp, #12]
 80066ea:	4614      	mov	r4, r2
 80066ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80066f0:	4297      	cmp	r7, r2
 80066f2:	f300 8089 	bgt.w	8006808 <__kernel_rem_pio2+0x2c0>
 80066f6:	f1ba 0f00 	cmp.w	sl, #0
 80066fa:	dd07      	ble.n	800670c <__kernel_rem_pio2+0x1c4>
 80066fc:	f1ba 0f01 	cmp.w	sl, #1
 8006700:	f000 8096 	beq.w	8006830 <__kernel_rem_pio2+0x2e8>
 8006704:	f1ba 0f02 	cmp.w	sl, #2
 8006708:	f000 809c 	beq.w	8006844 <__kernel_rem_pio2+0x2fc>
 800670c:	f1bb 0f02 	cmp.w	fp, #2
 8006710:	d14a      	bne.n	80067a8 <__kernel_rem_pio2+0x260>
 8006712:	4642      	mov	r2, r8
 8006714:	464b      	mov	r3, r9
 8006716:	2000      	movs	r0, #0
 8006718:	4955      	ldr	r1, [pc, #340]	; (8006870 <__kernel_rem_pio2+0x328>)
 800671a:	f7f9 fd59 	bl	80001d0 <__aeabi_dsub>
 800671e:	4680      	mov	r8, r0
 8006720:	4689      	mov	r9, r1
 8006722:	2c00      	cmp	r4, #0
 8006724:	d040      	beq.n	80067a8 <__kernel_rem_pio2+0x260>
 8006726:	4650      	mov	r0, sl
 8006728:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8006860 <__kernel_rem_pio2+0x318>
 800672c:	f000 fc30 	bl	8006f90 <scalbn>
 8006730:	4640      	mov	r0, r8
 8006732:	4649      	mov	r1, r9
 8006734:	ec53 2b10 	vmov	r2, r3, d0
 8006738:	f7f9 fd4a 	bl	80001d0 <__aeabi_dsub>
 800673c:	4680      	mov	r8, r0
 800673e:	4689      	mov	r9, r1
 8006740:	e032      	b.n	80067a8 <__kernel_rem_pio2+0x260>
 8006742:	2200      	movs	r2, #0
 8006744:	4b4b      	ldr	r3, [pc, #300]	; (8006874 <__kernel_rem_pio2+0x32c>)
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f7f9 fef5 	bl	8000538 <__aeabi_dmul>
 800674e:	f7fa f98d 	bl	8000a6c <__aeabi_d2iz>
 8006752:	f7f9 fe8b 	bl	800046c <__aeabi_i2d>
 8006756:	2200      	movs	r2, #0
 8006758:	4b47      	ldr	r3, [pc, #284]	; (8006878 <__kernel_rem_pio2+0x330>)
 800675a:	4604      	mov	r4, r0
 800675c:	460d      	mov	r5, r1
 800675e:	f7f9 feeb 	bl	8000538 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	4640      	mov	r0, r8
 8006768:	4649      	mov	r1, r9
 800676a:	f7f9 fd31 	bl	80001d0 <__aeabi_dsub>
 800676e:	f7fa f97d 	bl	8000a6c <__aeabi_d2iz>
 8006772:	ab0c      	add	r3, sp, #48	; 0x30
 8006774:	4629      	mov	r1, r5
 8006776:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800677a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800677e:	4620      	mov	r0, r4
 8006780:	f7f9 fd28 	bl	80001d4 <__adddf3>
 8006784:	3601      	adds	r6, #1
 8006786:	4680      	mov	r8, r0
 8006788:	4689      	mov	r9, r1
 800678a:	e75f      	b.n	800664c <__kernel_rem_pio2+0x104>
 800678c:	d106      	bne.n	800679c <__kernel_rem_pio2+0x254>
 800678e:	1e7b      	subs	r3, r7, #1
 8006790:	aa0c      	add	r2, sp, #48	; 0x30
 8006792:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8006796:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800679a:	e79f      	b.n	80066dc <__kernel_rem_pio2+0x194>
 800679c:	2200      	movs	r2, #0
 800679e:	4b37      	ldr	r3, [pc, #220]	; (800687c <__kernel_rem_pio2+0x334>)
 80067a0:	f7fa f950 	bl	8000a44 <__aeabi_dcmpge>
 80067a4:	bb68      	cbnz	r0, 8006802 <__kernel_rem_pio2+0x2ba>
 80067a6:	4683      	mov	fp, r0
 80067a8:	2200      	movs	r2, #0
 80067aa:	2300      	movs	r3, #0
 80067ac:	4640      	mov	r0, r8
 80067ae:	4649      	mov	r1, r9
 80067b0:	f7fa f92a 	bl	8000a08 <__aeabi_dcmpeq>
 80067b4:	2800      	cmp	r0, #0
 80067b6:	f000 80c1 	beq.w	800693c <__kernel_rem_pio2+0x3f4>
 80067ba:	1e7c      	subs	r4, r7, #1
 80067bc:	4623      	mov	r3, r4
 80067be:	2200      	movs	r2, #0
 80067c0:	9900      	ldr	r1, [sp, #0]
 80067c2:	428b      	cmp	r3, r1
 80067c4:	da5c      	bge.n	8006880 <__kernel_rem_pio2+0x338>
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	f040 808b 	bne.w	80068e2 <__kernel_rem_pio2+0x39a>
 80067cc:	2401      	movs	r4, #1
 80067ce:	f06f 0203 	mvn.w	r2, #3
 80067d2:	fb02 f304 	mul.w	r3, r2, r4
 80067d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067d8:	58cb      	ldr	r3, [r1, r3]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d056      	beq.n	800688c <__kernel_rem_pio2+0x344>
 80067de:	9b08      	ldr	r3, [sp, #32]
 80067e0:	aa98      	add	r2, sp, #608	; 0x260
 80067e2:	4413      	add	r3, r2
 80067e4:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 80067e8:	9b06      	ldr	r3, [sp, #24]
 80067ea:	19dd      	adds	r5, r3, r7
 80067ec:	ab20      	add	r3, sp, #128	; 0x80
 80067ee:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80067f2:	19e3      	adds	r3, r4, r7
 80067f4:	1c7e      	adds	r6, r7, #1
 80067f6:	9303      	str	r3, [sp, #12]
 80067f8:	9b03      	ldr	r3, [sp, #12]
 80067fa:	429e      	cmp	r6, r3
 80067fc:	dd48      	ble.n	8006890 <__kernel_rem_pio2+0x348>
 80067fe:	461f      	mov	r7, r3
 8006800:	e712      	b.n	8006628 <__kernel_rem_pio2+0xe0>
 8006802:	f04f 0b02 	mov.w	fp, #2
 8006806:	e76c      	b.n	80066e2 <__kernel_rem_pio2+0x19a>
 8006808:	ab0c      	add	r3, sp, #48	; 0x30
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	b94c      	cbnz	r4, 8006824 <__kernel_rem_pio2+0x2dc>
 8006810:	b12b      	cbz	r3, 800681e <__kernel_rem_pio2+0x2d6>
 8006812:	a80c      	add	r0, sp, #48	; 0x30
 8006814:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006818:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800681c:	2301      	movs	r3, #1
 800681e:	3201      	adds	r2, #1
 8006820:	461c      	mov	r4, r3
 8006822:	e765      	b.n	80066f0 <__kernel_rem_pio2+0x1a8>
 8006824:	a80c      	add	r0, sp, #48	; 0x30
 8006826:	1acb      	subs	r3, r1, r3
 8006828:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800682c:	4623      	mov	r3, r4
 800682e:	e7f6      	b.n	800681e <__kernel_rem_pio2+0x2d6>
 8006830:	1e7a      	subs	r2, r7, #1
 8006832:	ab0c      	add	r3, sp, #48	; 0x30
 8006834:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006838:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800683c:	a90c      	add	r1, sp, #48	; 0x30
 800683e:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006842:	e763      	b.n	800670c <__kernel_rem_pio2+0x1c4>
 8006844:	1e7a      	subs	r2, r7, #1
 8006846:	ab0c      	add	r3, sp, #48	; 0x30
 8006848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800684c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006850:	e7f4      	b.n	800683c <__kernel_rem_pio2+0x2f4>
 8006852:	bf00      	nop
 8006854:	f3af 8000 	nop.w
	...
 8006864:	3ff00000 	.word	0x3ff00000
 8006868:	0801a968 	.word	0x0801a968
 800686c:	40200000 	.word	0x40200000
 8006870:	3ff00000 	.word	0x3ff00000
 8006874:	3e700000 	.word	0x3e700000
 8006878:	41700000 	.word	0x41700000
 800687c:	3fe00000 	.word	0x3fe00000
 8006880:	a90c      	add	r1, sp, #48	; 0x30
 8006882:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006886:	3b01      	subs	r3, #1
 8006888:	430a      	orrs	r2, r1
 800688a:	e799      	b.n	80067c0 <__kernel_rem_pio2+0x278>
 800688c:	3401      	adds	r4, #1
 800688e:	e7a0      	b.n	80067d2 <__kernel_rem_pio2+0x28a>
 8006890:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006892:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006896:	f7f9 fde9 	bl	800046c <__aeabi_i2d>
 800689a:	e8e5 0102 	strd	r0, r1, [r5], #8
 800689e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068a0:	9508      	str	r5, [sp, #32]
 80068a2:	461c      	mov	r4, r3
 80068a4:	2700      	movs	r7, #0
 80068a6:	f04f 0800 	mov.w	r8, #0
 80068aa:	f04f 0900 	mov.w	r9, #0
 80068ae:	9b04      	ldr	r3, [sp, #16]
 80068b0:	429f      	cmp	r7, r3
 80068b2:	dd03      	ble.n	80068bc <__kernel_rem_pio2+0x374>
 80068b4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80068b8:	3601      	adds	r6, #1
 80068ba:	e79d      	b.n	80067f8 <__kernel_rem_pio2+0x2b0>
 80068bc:	9908      	ldr	r1, [sp, #32]
 80068be:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80068c2:	9108      	str	r1, [sp, #32]
 80068c4:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80068c8:	f7f9 fe36 	bl	8000538 <__aeabi_dmul>
 80068cc:	4602      	mov	r2, r0
 80068ce:	460b      	mov	r3, r1
 80068d0:	4640      	mov	r0, r8
 80068d2:	4649      	mov	r1, r9
 80068d4:	f7f9 fc7e 	bl	80001d4 <__adddf3>
 80068d8:	3701      	adds	r7, #1
 80068da:	4680      	mov	r8, r0
 80068dc:	4689      	mov	r9, r1
 80068de:	e7e6      	b.n	80068ae <__kernel_rem_pio2+0x366>
 80068e0:	3c01      	subs	r4, #1
 80068e2:	ab0c      	add	r3, sp, #48	; 0x30
 80068e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80068e8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d0f7      	beq.n	80068e0 <__kernel_rem_pio2+0x398>
 80068f0:	4650      	mov	r0, sl
 80068f2:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8006bc8 <__kernel_rem_pio2+0x680>
 80068f6:	f000 fb4b 	bl	8006f90 <scalbn>
 80068fa:	00e5      	lsls	r5, r4, #3
 80068fc:	ab98      	add	r3, sp, #608	; 0x260
 80068fe:	eb03 0905 	add.w	r9, r3, r5
 8006902:	ec57 6b10 	vmov	r6, r7, d0
 8006906:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 800690a:	46a0      	mov	r8, r4
 800690c:	f1b8 0f00 	cmp.w	r8, #0
 8006910:	da4d      	bge.n	80069ae <__kernel_rem_pio2+0x466>
 8006912:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8006bd0 <__kernel_rem_pio2+0x688>
 8006916:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 800691a:	2300      	movs	r3, #0
 800691c:	9304      	str	r3, [sp, #16]
 800691e:	4657      	mov	r7, sl
 8006920:	9b04      	ldr	r3, [sp, #16]
 8006922:	ebb4 0903 	subs.w	r9, r4, r3
 8006926:	d476      	bmi.n	8006a16 <__kernel_rem_pio2+0x4ce>
 8006928:	4bab      	ldr	r3, [pc, #684]	; (8006bd8 <__kernel_rem_pio2+0x690>)
 800692a:	461e      	mov	r6, r3
 800692c:	ab70      	add	r3, sp, #448	; 0x1c0
 800692e:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006932:	ed8d 8b06 	vstr	d8, [sp, #24]
 8006936:	f04f 0800 	mov.w	r8, #0
 800693a:	e05e      	b.n	80069fa <__kernel_rem_pio2+0x4b2>
 800693c:	f1ca 0000 	rsb	r0, sl, #0
 8006940:	ec49 8b10 	vmov	d0, r8, r9
 8006944:	f000 fb24 	bl	8006f90 <scalbn>
 8006948:	ec55 4b10 	vmov	r4, r5, d0
 800694c:	2200      	movs	r2, #0
 800694e:	4ba3      	ldr	r3, [pc, #652]	; (8006bdc <__kernel_rem_pio2+0x694>)
 8006950:	ee10 0a10 	vmov	r0, s0
 8006954:	4629      	mov	r1, r5
 8006956:	f7fa f875 	bl	8000a44 <__aeabi_dcmpge>
 800695a:	b1f8      	cbz	r0, 800699c <__kernel_rem_pio2+0x454>
 800695c:	2200      	movs	r2, #0
 800695e:	4ba0      	ldr	r3, [pc, #640]	; (8006be0 <__kernel_rem_pio2+0x698>)
 8006960:	4620      	mov	r0, r4
 8006962:	4629      	mov	r1, r5
 8006964:	f7f9 fde8 	bl	8000538 <__aeabi_dmul>
 8006968:	f7fa f880 	bl	8000a6c <__aeabi_d2iz>
 800696c:	4606      	mov	r6, r0
 800696e:	f7f9 fd7d 	bl	800046c <__aeabi_i2d>
 8006972:	2200      	movs	r2, #0
 8006974:	4b99      	ldr	r3, [pc, #612]	; (8006bdc <__kernel_rem_pio2+0x694>)
 8006976:	f7f9 fddf 	bl	8000538 <__aeabi_dmul>
 800697a:	460b      	mov	r3, r1
 800697c:	4602      	mov	r2, r0
 800697e:	4629      	mov	r1, r5
 8006980:	4620      	mov	r0, r4
 8006982:	f7f9 fc25 	bl	80001d0 <__aeabi_dsub>
 8006986:	f7fa f871 	bl	8000a6c <__aeabi_d2iz>
 800698a:	1c7c      	adds	r4, r7, #1
 800698c:	ab0c      	add	r3, sp, #48	; 0x30
 800698e:	f10a 0a18 	add.w	sl, sl, #24
 8006992:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006996:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 800699a:	e7a9      	b.n	80068f0 <__kernel_rem_pio2+0x3a8>
 800699c:	4620      	mov	r0, r4
 800699e:	4629      	mov	r1, r5
 80069a0:	f7fa f864 	bl	8000a6c <__aeabi_d2iz>
 80069a4:	ab0c      	add	r3, sp, #48	; 0x30
 80069a6:	463c      	mov	r4, r7
 80069a8:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 80069ac:	e7a0      	b.n	80068f0 <__kernel_rem_pio2+0x3a8>
 80069ae:	ab0c      	add	r3, sp, #48	; 0x30
 80069b0:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80069b4:	f7f9 fd5a 	bl	800046c <__aeabi_i2d>
 80069b8:	4632      	mov	r2, r6
 80069ba:	463b      	mov	r3, r7
 80069bc:	f7f9 fdbc 	bl	8000538 <__aeabi_dmul>
 80069c0:	2200      	movs	r2, #0
 80069c2:	e969 0102 	strd	r0, r1, [r9, #-8]!
 80069c6:	4b86      	ldr	r3, [pc, #536]	; (8006be0 <__kernel_rem_pio2+0x698>)
 80069c8:	4630      	mov	r0, r6
 80069ca:	4639      	mov	r1, r7
 80069cc:	f7f9 fdb4 	bl	8000538 <__aeabi_dmul>
 80069d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80069d4:	4606      	mov	r6, r0
 80069d6:	460f      	mov	r7, r1
 80069d8:	e798      	b.n	800690c <__kernel_rem_pio2+0x3c4>
 80069da:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80069de:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 80069e2:	f7f9 fda9 	bl	8000538 <__aeabi_dmul>
 80069e6:	4602      	mov	r2, r0
 80069e8:	460b      	mov	r3, r1
 80069ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80069ee:	f7f9 fbf1 	bl	80001d4 <__adddf3>
 80069f2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80069f6:	f108 0801 	add.w	r8, r8, #1
 80069fa:	9b00      	ldr	r3, [sp, #0]
 80069fc:	4598      	cmp	r8, r3
 80069fe:	dc02      	bgt.n	8006a06 <__kernel_rem_pio2+0x4be>
 8006a00:	9b04      	ldr	r3, [sp, #16]
 8006a02:	4598      	cmp	r8, r3
 8006a04:	dde9      	ble.n	80069da <__kernel_rem_pio2+0x492>
 8006a06:	9b04      	ldr	r3, [sp, #16]
 8006a08:	ed9d 7b06 	vldr	d7, [sp, #24]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	ecaa 7b02 	vstmia	sl!, {d7}
 8006a12:	9304      	str	r3, [sp, #16]
 8006a14:	e784      	b.n	8006920 <__kernel_rem_pio2+0x3d8>
 8006a16:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006a18:	2b03      	cmp	r3, #3
 8006a1a:	d85d      	bhi.n	8006ad8 <__kernel_rem_pio2+0x590>
 8006a1c:	e8df f003 	tbb	[pc, r3]
 8006a20:	0226264b 	.word	0x0226264b
 8006a24:	ab98      	add	r3, sp, #608	; 0x260
 8006a26:	441d      	add	r5, r3
 8006a28:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8006a2c:	462e      	mov	r6, r5
 8006a2e:	46a2      	mov	sl, r4
 8006a30:	f1ba 0f00 	cmp.w	sl, #0
 8006a34:	dc6e      	bgt.n	8006b14 <__kernel_rem_pio2+0x5cc>
 8006a36:	462e      	mov	r6, r5
 8006a38:	46a2      	mov	sl, r4
 8006a3a:	f1ba 0f01 	cmp.w	sl, #1
 8006a3e:	f300 808a 	bgt.w	8006b56 <__kernel_rem_pio2+0x60e>
 8006a42:	2000      	movs	r0, #0
 8006a44:	2100      	movs	r1, #0
 8006a46:	2c01      	cmp	r4, #1
 8006a48:	f300 80a6 	bgt.w	8006b98 <__kernel_rem_pio2+0x650>
 8006a4c:	f1bb 0f00 	cmp.w	fp, #0
 8006a50:	f040 80a8 	bne.w	8006ba4 <__kernel_rem_pio2+0x65c>
 8006a54:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8006a58:	9c02      	ldr	r4, [sp, #8]
 8006a5a:	e9c4 2300 	strd	r2, r3, [r4]
 8006a5e:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8006a62:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8006a66:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006a6a:	e035      	b.n	8006ad8 <__kernel_rem_pio2+0x590>
 8006a6c:	3508      	adds	r5, #8
 8006a6e:	ab48      	add	r3, sp, #288	; 0x120
 8006a70:	441d      	add	r5, r3
 8006a72:	4626      	mov	r6, r4
 8006a74:	2000      	movs	r0, #0
 8006a76:	2100      	movs	r1, #0
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	da3c      	bge.n	8006af6 <__kernel_rem_pio2+0x5ae>
 8006a7c:	f1bb 0f00 	cmp.w	fp, #0
 8006a80:	d03f      	beq.n	8006b02 <__kernel_rem_pio2+0x5ba>
 8006a82:	4602      	mov	r2, r0
 8006a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006a88:	9d02      	ldr	r5, [sp, #8]
 8006a8a:	e9c5 2300 	strd	r2, r3, [r5]
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006a96:	f7f9 fb9b 	bl	80001d0 <__aeabi_dsub>
 8006a9a:	ae4a      	add	r6, sp, #296	; 0x128
 8006a9c:	2501      	movs	r5, #1
 8006a9e:	42ac      	cmp	r4, r5
 8006aa0:	da32      	bge.n	8006b08 <__kernel_rem_pio2+0x5c0>
 8006aa2:	f1bb 0f00 	cmp.w	fp, #0
 8006aa6:	d002      	beq.n	8006aae <__kernel_rem_pio2+0x566>
 8006aa8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006aac:	4619      	mov	r1, r3
 8006aae:	9b02      	ldr	r3, [sp, #8]
 8006ab0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006ab4:	e010      	b.n	8006ad8 <__kernel_rem_pio2+0x590>
 8006ab6:	ab98      	add	r3, sp, #608	; 0x260
 8006ab8:	441d      	add	r5, r3
 8006aba:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8006abe:	2000      	movs	r0, #0
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	2c00      	cmp	r4, #0
 8006ac4:	da11      	bge.n	8006aea <__kernel_rem_pio2+0x5a2>
 8006ac6:	f1bb 0f00 	cmp.w	fp, #0
 8006aca:	d002      	beq.n	8006ad2 <__kernel_rem_pio2+0x58a>
 8006acc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	e9c3 0100 	strd	r0, r1, [r3]
 8006ad8:	9b03      	ldr	r3, [sp, #12]
 8006ada:	f003 0007 	and.w	r0, r3, #7
 8006ade:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006ae2:	ecbd 8b02 	vpop	{d8}
 8006ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aea:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006aee:	f7f9 fb71 	bl	80001d4 <__adddf3>
 8006af2:	3c01      	subs	r4, #1
 8006af4:	e7e5      	b.n	8006ac2 <__kernel_rem_pio2+0x57a>
 8006af6:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006afa:	f7f9 fb6b 	bl	80001d4 <__adddf3>
 8006afe:	3e01      	subs	r6, #1
 8006b00:	e7ba      	b.n	8006a78 <__kernel_rem_pio2+0x530>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	e7bf      	b.n	8006a88 <__kernel_rem_pio2+0x540>
 8006b08:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8006b0c:	f7f9 fb62 	bl	80001d4 <__adddf3>
 8006b10:	3501      	adds	r5, #1
 8006b12:	e7c4      	b.n	8006a9e <__kernel_rem_pio2+0x556>
 8006b14:	ed16 7b02 	vldr	d7, [r6, #-8]
 8006b18:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8006b1c:	ec53 2b17 	vmov	r2, r3, d7
 8006b20:	4640      	mov	r0, r8
 8006b22:	4649      	mov	r1, r9
 8006b24:	ed8d 7b00 	vstr	d7, [sp]
 8006b28:	f7f9 fb54 	bl	80001d4 <__adddf3>
 8006b2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b30:	4602      	mov	r2, r0
 8006b32:	460b      	mov	r3, r1
 8006b34:	4640      	mov	r0, r8
 8006b36:	4649      	mov	r1, r9
 8006b38:	f7f9 fb4a 	bl	80001d0 <__aeabi_dsub>
 8006b3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b40:	f7f9 fb48 	bl	80001d4 <__adddf3>
 8006b44:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006b48:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8006b4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b50:	ed06 7b02 	vstr	d7, [r6, #-8]
 8006b54:	e76c      	b.n	8006a30 <__kernel_rem_pio2+0x4e8>
 8006b56:	ed16 7b02 	vldr	d7, [r6, #-8]
 8006b5a:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8006b5e:	ec53 2b17 	vmov	r2, r3, d7
 8006b62:	4640      	mov	r0, r8
 8006b64:	4649      	mov	r1, r9
 8006b66:	ed8d 7b00 	vstr	d7, [sp]
 8006b6a:	f7f9 fb33 	bl	80001d4 <__adddf3>
 8006b6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b72:	4602      	mov	r2, r0
 8006b74:	460b      	mov	r3, r1
 8006b76:	4640      	mov	r0, r8
 8006b78:	4649      	mov	r1, r9
 8006b7a:	f7f9 fb29 	bl	80001d0 <__aeabi_dsub>
 8006b7e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b82:	f7f9 fb27 	bl	80001d4 <__adddf3>
 8006b86:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006b8a:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8006b8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b92:	ed06 7b02 	vstr	d7, [r6, #-8]
 8006b96:	e750      	b.n	8006a3a <__kernel_rem_pio2+0x4f2>
 8006b98:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006b9c:	f7f9 fb1a 	bl	80001d4 <__adddf3>
 8006ba0:	3c01      	subs	r4, #1
 8006ba2:	e750      	b.n	8006a46 <__kernel_rem_pio2+0x4fe>
 8006ba4:	9a02      	ldr	r2, [sp, #8]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	6013      	str	r3, [r2, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6110      	str	r0, [r2, #16]
 8006bae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bb2:	6053      	str	r3, [r2, #4]
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	6093      	str	r3, [r2, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006bbe:	60d3      	str	r3, [r2, #12]
 8006bc0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006bc4:	6153      	str	r3, [r2, #20]
 8006bc6:	e787      	b.n	8006ad8 <__kernel_rem_pio2+0x590>
 8006bc8:	00000000 	.word	0x00000000
 8006bcc:	3ff00000 	.word	0x3ff00000
	...
 8006bd8:	0801a928 	.word	0x0801a928
 8006bdc:	41700000 	.word	0x41700000
 8006be0:	3e700000 	.word	0x3e700000
 8006be4:	00000000 	.word	0x00000000

08006be8 <__kernel_sin>:
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	ec55 4b10 	vmov	r4, r5, d0
 8006bf0:	b085      	sub	sp, #20
 8006bf2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006bf6:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006bfa:	ed8d 1b00 	vstr	d1, [sp]
 8006bfe:	9002      	str	r0, [sp, #8]
 8006c00:	da06      	bge.n	8006c10 <__kernel_sin+0x28>
 8006c02:	ee10 0a10 	vmov	r0, s0
 8006c06:	4629      	mov	r1, r5
 8006c08:	f7f9 ff30 	bl	8000a6c <__aeabi_d2iz>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d051      	beq.n	8006cb4 <__kernel_sin+0xcc>
 8006c10:	4622      	mov	r2, r4
 8006c12:	462b      	mov	r3, r5
 8006c14:	4620      	mov	r0, r4
 8006c16:	4629      	mov	r1, r5
 8006c18:	f7f9 fc8e 	bl	8000538 <__aeabi_dmul>
 8006c1c:	4682      	mov	sl, r0
 8006c1e:	468b      	mov	fp, r1
 8006c20:	4602      	mov	r2, r0
 8006c22:	460b      	mov	r3, r1
 8006c24:	4620      	mov	r0, r4
 8006c26:	4629      	mov	r1, r5
 8006c28:	f7f9 fc86 	bl	8000538 <__aeabi_dmul>
 8006c2c:	a341      	add	r3, pc, #260	; (adr r3, 8006d34 <__kernel_sin+0x14c>)
 8006c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c32:	4680      	mov	r8, r0
 8006c34:	4689      	mov	r9, r1
 8006c36:	4650      	mov	r0, sl
 8006c38:	4659      	mov	r1, fp
 8006c3a:	f7f9 fc7d 	bl	8000538 <__aeabi_dmul>
 8006c3e:	a33f      	add	r3, pc, #252	; (adr r3, 8006d3c <__kernel_sin+0x154>)
 8006c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c44:	f7f9 fac4 	bl	80001d0 <__aeabi_dsub>
 8006c48:	4652      	mov	r2, sl
 8006c4a:	465b      	mov	r3, fp
 8006c4c:	f7f9 fc74 	bl	8000538 <__aeabi_dmul>
 8006c50:	a33c      	add	r3, pc, #240	; (adr r3, 8006d44 <__kernel_sin+0x15c>)
 8006c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c56:	f7f9 fabd 	bl	80001d4 <__adddf3>
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	465b      	mov	r3, fp
 8006c5e:	f7f9 fc6b 	bl	8000538 <__aeabi_dmul>
 8006c62:	a33a      	add	r3, pc, #232	; (adr r3, 8006d4c <__kernel_sin+0x164>)
 8006c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c68:	f7f9 fab2 	bl	80001d0 <__aeabi_dsub>
 8006c6c:	4652      	mov	r2, sl
 8006c6e:	465b      	mov	r3, fp
 8006c70:	f7f9 fc62 	bl	8000538 <__aeabi_dmul>
 8006c74:	a337      	add	r3, pc, #220	; (adr r3, 8006d54 <__kernel_sin+0x16c>)
 8006c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c7a:	f7f9 faab 	bl	80001d4 <__adddf3>
 8006c7e:	9b02      	ldr	r3, [sp, #8]
 8006c80:	4606      	mov	r6, r0
 8006c82:	460f      	mov	r7, r1
 8006c84:	b9db      	cbnz	r3, 8006cbe <__kernel_sin+0xd6>
 8006c86:	4602      	mov	r2, r0
 8006c88:	460b      	mov	r3, r1
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	4659      	mov	r1, fp
 8006c8e:	f7f9 fc53 	bl	8000538 <__aeabi_dmul>
 8006c92:	a325      	add	r3, pc, #148	; (adr r3, 8006d28 <__kernel_sin+0x140>)
 8006c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c98:	f7f9 fa9a 	bl	80001d0 <__aeabi_dsub>
 8006c9c:	4642      	mov	r2, r8
 8006c9e:	464b      	mov	r3, r9
 8006ca0:	f7f9 fc4a 	bl	8000538 <__aeabi_dmul>
 8006ca4:	4602      	mov	r2, r0
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	4620      	mov	r0, r4
 8006caa:	4629      	mov	r1, r5
 8006cac:	f7f9 fa92 	bl	80001d4 <__adddf3>
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	460d      	mov	r5, r1
 8006cb4:	ec45 4b10 	vmov	d0, r4, r5
 8006cb8:	b005      	add	sp, #20
 8006cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	4b1b      	ldr	r3, [pc, #108]	; (8006d30 <__kernel_sin+0x148>)
 8006cc2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cc6:	f7f9 fc37 	bl	8000538 <__aeabi_dmul>
 8006cca:	4632      	mov	r2, r6
 8006ccc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cd0:	463b      	mov	r3, r7
 8006cd2:	4640      	mov	r0, r8
 8006cd4:	4649      	mov	r1, r9
 8006cd6:	f7f9 fc2f 	bl	8000538 <__aeabi_dmul>
 8006cda:	4602      	mov	r2, r0
 8006cdc:	460b      	mov	r3, r1
 8006cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce2:	f7f9 fa75 	bl	80001d0 <__aeabi_dsub>
 8006ce6:	4652      	mov	r2, sl
 8006ce8:	465b      	mov	r3, fp
 8006cea:	f7f9 fc25 	bl	8000538 <__aeabi_dmul>
 8006cee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006cf2:	f7f9 fa6d 	bl	80001d0 <__aeabi_dsub>
 8006cf6:	a30c      	add	r3, pc, #48	; (adr r3, 8006d28 <__kernel_sin+0x140>)
 8006cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cfc:	4606      	mov	r6, r0
 8006cfe:	460f      	mov	r7, r1
 8006d00:	4640      	mov	r0, r8
 8006d02:	4649      	mov	r1, r9
 8006d04:	f7f9 fc18 	bl	8000538 <__aeabi_dmul>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	4639      	mov	r1, r7
 8006d10:	f7f9 fa60 	bl	80001d4 <__adddf3>
 8006d14:	4602      	mov	r2, r0
 8006d16:	460b      	mov	r3, r1
 8006d18:	4620      	mov	r0, r4
 8006d1a:	4629      	mov	r1, r5
 8006d1c:	f7f9 fa58 	bl	80001d0 <__aeabi_dsub>
 8006d20:	e7c6      	b.n	8006cb0 <__kernel_sin+0xc8>
 8006d22:	bf00      	nop
 8006d24:	f3af 8000 	nop.w
 8006d28:	55555549 	.word	0x55555549
 8006d2c:	3fc55555 	.word	0x3fc55555
 8006d30:	3fe00000 	.word	0x3fe00000
 8006d34:	5acfd57c 	.word	0x5acfd57c
 8006d38:	3de5d93a 	.word	0x3de5d93a
 8006d3c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006d40:	3e5ae5e6 	.word	0x3e5ae5e6
 8006d44:	57b1fe7d 	.word	0x57b1fe7d
 8006d48:	3ec71de3 	.word	0x3ec71de3
 8006d4c:	19c161d5 	.word	0x19c161d5
 8006d50:	3f2a01a0 	.word	0x3f2a01a0
 8006d54:	1110f8a6 	.word	0x1110f8a6
 8006d58:	3f811111 	.word	0x3f811111

08006d5c <fabs>:
 8006d5c:	ec53 2b10 	vmov	r2, r3, d0
 8006d60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	ec43 2b10 	vmov	d0, r2, r3
 8006d68:	4770      	bx	lr
 8006d6a:	0000      	movs	r0, r0
 8006d6c:	0000      	movs	r0, r0
	...

08006d70 <floor>:
 8006d70:	ec51 0b10 	vmov	r0, r1, d0
 8006d74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006d7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006d80:	2e13      	cmp	r6, #19
 8006d82:	ee10 8a10 	vmov	r8, s0
 8006d86:	460c      	mov	r4, r1
 8006d88:	ee10 5a10 	vmov	r5, s0
 8006d8c:	dc35      	bgt.n	8006dfa <floor+0x8a>
 8006d8e:	2e00      	cmp	r6, #0
 8006d90:	da17      	bge.n	8006dc2 <floor+0x52>
 8006d92:	a335      	add	r3, pc, #212	; (adr r3, 8006e68 <floor+0xf8>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	f7f9 fa1c 	bl	80001d4 <__adddf3>
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2300      	movs	r3, #0
 8006da0:	f7f9 fe5a 	bl	8000a58 <__aeabi_dcmpgt>
 8006da4:	b150      	cbz	r0, 8006dbc <floor+0x4c>
 8006da6:	2c00      	cmp	r4, #0
 8006da8:	da5a      	bge.n	8006e60 <floor+0xf0>
 8006daa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006dae:	ea53 0308 	orrs.w	r3, r3, r8
 8006db2:	4b2f      	ldr	r3, [pc, #188]	; (8006e70 <floor+0x100>)
 8006db4:	f04f 0500 	mov.w	r5, #0
 8006db8:	bf18      	it	ne
 8006dba:	461c      	movne	r4, r3
 8006dbc:	4621      	mov	r1, r4
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	e025      	b.n	8006e0e <floor+0x9e>
 8006dc2:	4f2c      	ldr	r7, [pc, #176]	; (8006e74 <floor+0x104>)
 8006dc4:	4137      	asrs	r7, r6
 8006dc6:	ea01 0307 	and.w	r3, r1, r7
 8006dca:	4303      	orrs	r3, r0
 8006dcc:	d01f      	beq.n	8006e0e <floor+0x9e>
 8006dce:	a326      	add	r3, pc, #152	; (adr r3, 8006e68 <floor+0xf8>)
 8006dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd4:	f7f9 f9fe 	bl	80001d4 <__adddf3>
 8006dd8:	2200      	movs	r2, #0
 8006dda:	2300      	movs	r3, #0
 8006ddc:	f7f9 fe3c 	bl	8000a58 <__aeabi_dcmpgt>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d0eb      	beq.n	8006dbc <floor+0x4c>
 8006de4:	2c00      	cmp	r4, #0
 8006de6:	bfbe      	ittt	lt
 8006de8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8006dec:	fa43 f606 	asrlt.w	r6, r3, r6
 8006df0:	19a4      	addlt	r4, r4, r6
 8006df2:	ea24 0407 	bic.w	r4, r4, r7
 8006df6:	2500      	movs	r5, #0
 8006df8:	e7e0      	b.n	8006dbc <floor+0x4c>
 8006dfa:	2e33      	cmp	r6, #51	; 0x33
 8006dfc:	dd0b      	ble.n	8006e16 <floor+0xa6>
 8006dfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006e02:	d104      	bne.n	8006e0e <floor+0x9e>
 8006e04:	ee10 2a10 	vmov	r2, s0
 8006e08:	460b      	mov	r3, r1
 8006e0a:	f7f9 f9e3 	bl	80001d4 <__adddf3>
 8006e0e:	ec41 0b10 	vmov	d0, r0, r1
 8006e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e16:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006e1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e1e:	fa23 f707 	lsr.w	r7, r3, r7
 8006e22:	4238      	tst	r0, r7
 8006e24:	d0f3      	beq.n	8006e0e <floor+0x9e>
 8006e26:	a310      	add	r3, pc, #64	; (adr r3, 8006e68 <floor+0xf8>)
 8006e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e2c:	f7f9 f9d2 	bl	80001d4 <__adddf3>
 8006e30:	2200      	movs	r2, #0
 8006e32:	2300      	movs	r3, #0
 8006e34:	f7f9 fe10 	bl	8000a58 <__aeabi_dcmpgt>
 8006e38:	2800      	cmp	r0, #0
 8006e3a:	d0bf      	beq.n	8006dbc <floor+0x4c>
 8006e3c:	2c00      	cmp	r4, #0
 8006e3e:	da02      	bge.n	8006e46 <floor+0xd6>
 8006e40:	2e14      	cmp	r6, #20
 8006e42:	d103      	bne.n	8006e4c <floor+0xdc>
 8006e44:	3401      	adds	r4, #1
 8006e46:	ea25 0507 	bic.w	r5, r5, r7
 8006e4a:	e7b7      	b.n	8006dbc <floor+0x4c>
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006e52:	fa03 f606 	lsl.w	r6, r3, r6
 8006e56:	4435      	add	r5, r6
 8006e58:	45a8      	cmp	r8, r5
 8006e5a:	bf88      	it	hi
 8006e5c:	18e4      	addhi	r4, r4, r3
 8006e5e:	e7f2      	b.n	8006e46 <floor+0xd6>
 8006e60:	2500      	movs	r5, #0
 8006e62:	462c      	mov	r4, r5
 8006e64:	e7aa      	b.n	8006dbc <floor+0x4c>
 8006e66:	bf00      	nop
 8006e68:	8800759c 	.word	0x8800759c
 8006e6c:	7e37e43c 	.word	0x7e37e43c
 8006e70:	bff00000 	.word	0xbff00000
 8006e74:	000fffff 	.word	0x000fffff

08006e78 <matherr>:
 8006e78:	2000      	movs	r0, #0
 8006e7a:	4770      	bx	lr

08006e7c <rint>:
 8006e7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e7e:	ec51 0b10 	vmov	r0, r1, d0
 8006e82:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8006e86:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8006e8a:	2e13      	cmp	r6, #19
 8006e8c:	ee10 7a10 	vmov	r7, s0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4602      	mov	r2, r0
 8006e94:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8006e98:	dc58      	bgt.n	8006f4c <rint+0xd0>
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	da2b      	bge.n	8006ef6 <rint+0x7a>
 8006e9e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006ea2:	4302      	orrs	r2, r0
 8006ea4:	d023      	beq.n	8006eee <rint+0x72>
 8006ea6:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8006eaa:	4302      	orrs	r2, r0
 8006eac:	4251      	negs	r1, r2
 8006eae:	4311      	orrs	r1, r2
 8006eb0:	0b09      	lsrs	r1, r1, #12
 8006eb2:	0c5b      	lsrs	r3, r3, #17
 8006eb4:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8006eb8:	045b      	lsls	r3, r3, #17
 8006eba:	ea41 0703 	orr.w	r7, r1, r3
 8006ebe:	4b31      	ldr	r3, [pc, #196]	; (8006f84 <rint+0x108>)
 8006ec0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006ec4:	4639      	mov	r1, r7
 8006ec6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006eca:	ee10 0a10 	vmov	r0, s0
 8006ece:	4632      	mov	r2, r6
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	f7f9 f97f 	bl	80001d4 <__adddf3>
 8006ed6:	e9cd 0100 	strd	r0, r1, [sp]
 8006eda:	463b      	mov	r3, r7
 8006edc:	4632      	mov	r2, r6
 8006ede:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006ee2:	f7f9 f975 	bl	80001d0 <__aeabi_dsub>
 8006ee6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006eea:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8006eee:	ec41 0b10 	vmov	d0, r0, r1
 8006ef2:	b003      	add	sp, #12
 8006ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ef6:	4c24      	ldr	r4, [pc, #144]	; (8006f88 <rint+0x10c>)
 8006ef8:	4134      	asrs	r4, r6
 8006efa:	ea01 0704 	and.w	r7, r1, r4
 8006efe:	4307      	orrs	r7, r0
 8006f00:	d0f5      	beq.n	8006eee <rint+0x72>
 8006f02:	0861      	lsrs	r1, r4, #1
 8006f04:	ea03 0001 	and.w	r0, r3, r1
 8006f08:	4302      	orrs	r2, r0
 8006f0a:	d00b      	beq.n	8006f24 <rint+0xa8>
 8006f0c:	ea23 0101 	bic.w	r1, r3, r1
 8006f10:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f14:	2e13      	cmp	r6, #19
 8006f16:	fa43 f306 	asr.w	r3, r3, r6
 8006f1a:	bf0c      	ite	eq
 8006f1c:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8006f20:	2200      	movne	r2, #0
 8006f22:	430b      	orrs	r3, r1
 8006f24:	4619      	mov	r1, r3
 8006f26:	4b17      	ldr	r3, [pc, #92]	; (8006f84 <rint+0x108>)
 8006f28:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8006f2c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006f30:	4610      	mov	r0, r2
 8006f32:	462b      	mov	r3, r5
 8006f34:	4622      	mov	r2, r4
 8006f36:	f7f9 f94d 	bl	80001d4 <__adddf3>
 8006f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f46:	f7f9 f943 	bl	80001d0 <__aeabi_dsub>
 8006f4a:	e7d0      	b.n	8006eee <rint+0x72>
 8006f4c:	2e33      	cmp	r6, #51	; 0x33
 8006f4e:	dd08      	ble.n	8006f62 <rint+0xe6>
 8006f50:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006f54:	d1cb      	bne.n	8006eee <rint+0x72>
 8006f56:	ee10 2a10 	vmov	r2, s0
 8006f5a:	460b      	mov	r3, r1
 8006f5c:	f7f9 f93a 	bl	80001d4 <__adddf3>
 8006f60:	e7c5      	b.n	8006eee <rint+0x72>
 8006f62:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8006f66:	f04f 34ff 	mov.w	r4, #4294967295
 8006f6a:	40f4      	lsrs	r4, r6
 8006f6c:	4220      	tst	r0, r4
 8006f6e:	d0be      	beq.n	8006eee <rint+0x72>
 8006f70:	0861      	lsrs	r1, r4, #1
 8006f72:	420f      	tst	r7, r1
 8006f74:	bf1f      	itttt	ne
 8006f76:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8006f7a:	ea27 0101 	bicne.w	r1, r7, r1
 8006f7e:	4132      	asrne	r2, r6
 8006f80:	430a      	orrne	r2, r1
 8006f82:	e7cf      	b.n	8006f24 <rint+0xa8>
 8006f84:	0801a978 	.word	0x0801a978
 8006f88:	000fffff 	.word	0x000fffff
 8006f8c:	00000000 	.word	0x00000000

08006f90 <scalbn>:
 8006f90:	b570      	push	{r4, r5, r6, lr}
 8006f92:	ec55 4b10 	vmov	r4, r5, d0
 8006f96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	462b      	mov	r3, r5
 8006f9e:	b9b2      	cbnz	r2, 8006fce <scalbn+0x3e>
 8006fa0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006fa4:	4323      	orrs	r3, r4
 8006fa6:	d03c      	beq.n	8007022 <scalbn+0x92>
 8006fa8:	2200      	movs	r2, #0
 8006faa:	4b33      	ldr	r3, [pc, #204]	; (8007078 <scalbn+0xe8>)
 8006fac:	4629      	mov	r1, r5
 8006fae:	ee10 0a10 	vmov	r0, s0
 8006fb2:	f7f9 fac1 	bl	8000538 <__aeabi_dmul>
 8006fb6:	4a31      	ldr	r2, [pc, #196]	; (800707c <scalbn+0xec>)
 8006fb8:	4296      	cmp	r6, r2
 8006fba:	4604      	mov	r4, r0
 8006fbc:	460d      	mov	r5, r1
 8006fbe:	460b      	mov	r3, r1
 8006fc0:	da13      	bge.n	8006fea <scalbn+0x5a>
 8006fc2:	a329      	add	r3, pc, #164	; (adr r3, 8007068 <scalbn+0xd8>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 fab6 	bl	8000538 <__aeabi_dmul>
 8006fcc:	e00a      	b.n	8006fe4 <scalbn+0x54>
 8006fce:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8006fd2:	428a      	cmp	r2, r1
 8006fd4:	d10c      	bne.n	8006ff0 <scalbn+0x60>
 8006fd6:	ee10 2a10 	vmov	r2, s0
 8006fda:	462b      	mov	r3, r5
 8006fdc:	4620      	mov	r0, r4
 8006fde:	4629      	mov	r1, r5
 8006fe0:	f7f9 f8f8 	bl	80001d4 <__adddf3>
 8006fe4:	4604      	mov	r4, r0
 8006fe6:	460d      	mov	r5, r1
 8006fe8:	e01b      	b.n	8007022 <scalbn+0x92>
 8006fea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006fee:	3a36      	subs	r2, #54	; 0x36
 8006ff0:	4432      	add	r2, r6
 8006ff2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006ff6:	428a      	cmp	r2, r1
 8006ff8:	dd0b      	ble.n	8007012 <scalbn+0x82>
 8006ffa:	ec45 4b11 	vmov	d1, r4, r5
 8006ffe:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8007070 <scalbn+0xe0>
 8007002:	f000 f8b7 	bl	8007174 <copysign>
 8007006:	a31a      	add	r3, pc, #104	; (adr r3, 8007070 <scalbn+0xe0>)
 8007008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800700c:	ec51 0b10 	vmov	r0, r1, d0
 8007010:	e7da      	b.n	8006fc8 <scalbn+0x38>
 8007012:	2a00      	cmp	r2, #0
 8007014:	dd08      	ble.n	8007028 <scalbn+0x98>
 8007016:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800701a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800701e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007022:	ec45 4b10 	vmov	d0, r4, r5
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800702c:	da0d      	bge.n	800704a <scalbn+0xba>
 800702e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007032:	429e      	cmp	r6, r3
 8007034:	ec45 4b11 	vmov	d1, r4, r5
 8007038:	dce1      	bgt.n	8006ffe <scalbn+0x6e>
 800703a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8007068 <scalbn+0xd8>
 800703e:	f000 f899 	bl	8007174 <copysign>
 8007042:	a309      	add	r3, pc, #36	; (adr r3, 8007068 <scalbn+0xd8>)
 8007044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007048:	e7e0      	b.n	800700c <scalbn+0x7c>
 800704a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800704e:	3236      	adds	r2, #54	; 0x36
 8007050:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007054:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007058:	4620      	mov	r0, r4
 800705a:	4629      	mov	r1, r5
 800705c:	2200      	movs	r2, #0
 800705e:	4b08      	ldr	r3, [pc, #32]	; (8007080 <scalbn+0xf0>)
 8007060:	e7b2      	b.n	8006fc8 <scalbn+0x38>
 8007062:	bf00      	nop
 8007064:	f3af 8000 	nop.w
 8007068:	c2f8f359 	.word	0xc2f8f359
 800706c:	01a56e1f 	.word	0x01a56e1f
 8007070:	8800759c 	.word	0x8800759c
 8007074:	7e37e43c 	.word	0x7e37e43c
 8007078:	43500000 	.word	0x43500000
 800707c:	ffff3cb0 	.word	0xffff3cb0
 8007080:	3c900000 	.word	0x3c900000

08007084 <fabsf>:
 8007084:	ee10 3a10 	vmov	r3, s0
 8007088:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800708c:	ee00 3a10 	vmov	s0, r3
 8007090:	4770      	bx	lr

08007092 <finitef>:
 8007092:	ee10 3a10 	vmov	r3, s0
 8007096:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800709a:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800709e:	bfac      	ite	ge
 80070a0:	2000      	movge	r0, #0
 80070a2:	2001      	movlt	r0, #1
 80070a4:	4770      	bx	lr
	...

080070a8 <nanf>:
 80070a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80070b0 <nanf+0x8>
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop
 80070b0:	7fc00000 	.word	0x7fc00000

080070b4 <scalbnf>:
 80070b4:	b508      	push	{r3, lr}
 80070b6:	ee10 2a10 	vmov	r2, s0
 80070ba:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80070be:	ed2d 8b02 	vpush	{d8}
 80070c2:	eef0 0a40 	vmov.f32	s1, s0
 80070c6:	d004      	beq.n	80070d2 <scalbnf+0x1e>
 80070c8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80070cc:	d306      	bcc.n	80070dc <scalbnf+0x28>
 80070ce:	ee70 0a00 	vadd.f32	s1, s0, s0
 80070d2:	ecbd 8b02 	vpop	{d8}
 80070d6:	eeb0 0a60 	vmov.f32	s0, s1
 80070da:	bd08      	pop	{r3, pc}
 80070dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80070e0:	d21c      	bcs.n	800711c <scalbnf+0x68>
 80070e2:	4b1f      	ldr	r3, [pc, #124]	; (8007160 <scalbnf+0xac>)
 80070e4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007164 <scalbnf+0xb0>
 80070e8:	4298      	cmp	r0, r3
 80070ea:	ee60 0a27 	vmul.f32	s1, s0, s15
 80070ee:	db10      	blt.n	8007112 <scalbnf+0x5e>
 80070f0:	ee10 2a90 	vmov	r2, s1
 80070f4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 80070f8:	3b19      	subs	r3, #25
 80070fa:	4403      	add	r3, r0
 80070fc:	2bfe      	cmp	r3, #254	; 0xfe
 80070fe:	dd0f      	ble.n	8007120 <scalbnf+0x6c>
 8007100:	ed9f 8a19 	vldr	s16, [pc, #100]	; 8007168 <scalbnf+0xb4>
 8007104:	eeb0 0a48 	vmov.f32	s0, s16
 8007108:	f000 f841 	bl	800718e <copysignf>
 800710c:	ee60 0a08 	vmul.f32	s1, s0, s16
 8007110:	e7df      	b.n	80070d2 <scalbnf+0x1e>
 8007112:	eddf 7a16 	vldr	s15, [pc, #88]	; 800716c <scalbnf+0xb8>
 8007116:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800711a:	e7da      	b.n	80070d2 <scalbnf+0x1e>
 800711c:	0ddb      	lsrs	r3, r3, #23
 800711e:	e7ec      	b.n	80070fa <scalbnf+0x46>
 8007120:	2b00      	cmp	r3, #0
 8007122:	dd06      	ble.n	8007132 <scalbnf+0x7e>
 8007124:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 8007128:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800712c:	ee00 3a90 	vmov	s1, r3
 8007130:	e7cf      	b.n	80070d2 <scalbnf+0x1e>
 8007132:	f113 0f16 	cmn.w	r3, #22
 8007136:	da06      	bge.n	8007146 <scalbnf+0x92>
 8007138:	f24c 3350 	movw	r3, #50000	; 0xc350
 800713c:	4298      	cmp	r0, r3
 800713e:	dcdf      	bgt.n	8007100 <scalbnf+0x4c>
 8007140:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800716c <scalbnf+0xb8>
 8007144:	e7de      	b.n	8007104 <scalbnf+0x50>
 8007146:	3319      	adds	r3, #25
 8007148:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800714c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8007150:	eddf 7a07 	vldr	s15, [pc, #28]	; 8007170 <scalbnf+0xbc>
 8007154:	ee07 3a10 	vmov	s14, r3
 8007158:	ee67 0a27 	vmul.f32	s1, s14, s15
 800715c:	e7b9      	b.n	80070d2 <scalbnf+0x1e>
 800715e:	bf00      	nop
 8007160:	ffff3cb0 	.word	0xffff3cb0
 8007164:	4c000000 	.word	0x4c000000
 8007168:	7149f2ca 	.word	0x7149f2ca
 800716c:	0da24260 	.word	0x0da24260
 8007170:	33000000 	.word	0x33000000

08007174 <copysign>:
 8007174:	ec53 2b10 	vmov	r2, r3, d0
 8007178:	ee11 0a90 	vmov	r0, s3
 800717c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007180:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8007184:	ea41 0300 	orr.w	r3, r1, r0
 8007188:	ec43 2b10 	vmov	d0, r2, r3
 800718c:	4770      	bx	lr

0800718e <copysignf>:
 800718e:	ee10 3a10 	vmov	r3, s0
 8007192:	ee10 2a90 	vmov	r2, s1
 8007196:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800719a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800719e:	4313      	orrs	r3, r2
 80071a0:	ee00 3a10 	vmov	s0, r3
 80071a4:	4770      	bx	lr
	...

080071a8 <__errno>:
 80071a8:	4b01      	ldr	r3, [pc, #4]	; (80071b0 <__errno+0x8>)
 80071aa:	6818      	ldr	r0, [r3, #0]
 80071ac:	4770      	bx	lr
 80071ae:	bf00      	nop
 80071b0:	20000428 	.word	0x20000428

080071b4 <_init>:
 80071b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071b6:	bf00      	nop
 80071b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ba:	bc08      	pop	{r3}
 80071bc:	469e      	mov	lr, r3
 80071be:	4770      	bx	lr

080071c0 <_fini>:
 80071c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c2:	bf00      	nop
 80071c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071c6:	bc08      	pop	{r3}
 80071c8:	469e      	mov	lr, r3
 80071ca:	4770      	bx	lr
